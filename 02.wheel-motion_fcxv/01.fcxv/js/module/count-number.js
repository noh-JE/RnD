!(function () {
    var t,
        e = {
            9669: function (t, e, n) {
                t.exports = n(1609);
            },
            5448: function (t, e, n) {
                "use strict";
                var r = n(4867),
                    i = n(6026),
                    o = n(4372),
                    a = n(5327),
                    s = n(4097),
                    l = n(4109),
                    c = n(7985),
                    u = n(5061);
                t.exports = function (t) {
                    return new Promise(function (e, n) {
                        var h = t.data,
                            d = t.headers;
                        r.isFormData(h) && delete d["Content-Type"];
                        var f = new XMLHttpRequest();
                        if (t.auth) {
                            var p = t.auth.username || "",
                                m = t.auth.password ? unescape(encodeURIComponent(t.auth.password)) : "";
                            d.Authorization = "Basic " + btoa(p + ":" + m);
                        }
                        var g = s(t.baseURL, t.url);
                        if (
                            (f.open(t.method.toUpperCase(), a(g, t.params, t.paramsSerializer), !0),
                                (f.timeout = t.timeout),
                                (f.onreadystatechange = function () {
                                    if (f && 4 === f.readyState && (0 !== f.status || (f.responseURL && 0 === f.responseURL.indexOf("file:")))) {
                                        var r = "getAllResponseHeaders" in f ? l(f.getAllResponseHeaders()) : null,
                                            o = { data: t.responseType && "text" !== t.responseType ? f.response : f.responseText, status: f.status, statusText: f.statusText, headers: r, config: t, request: f };
                                        i(e, n, o), (f = null);
                                    }
                                }),
                                (f.onabort = function () {
                                    f && (n(u("Request aborted", t, "ECONNABORTED", f)), (f = null));
                                }),
                                (f.onerror = function () {
                                    n(u("Network Error", t, null, f)), (f = null);
                                }),
                                (f.ontimeout = function () {
                                    var e = "timeout of " + t.timeout + "ms exceeded";
                                    t.timeoutErrorMessage && (e = t.timeoutErrorMessage), n(u(e, t, "ECONNABORTED", f)), (f = null);
                                }),
                                r.isStandardBrowserEnv())
                        ) {
                            var v = (t.withCredentials || c(g)) && t.xsrfCookieName ? o.read(t.xsrfCookieName) : void 0;
                            v && (d[t.xsrfHeaderName] = v);
                        }
                        if (
                            ("setRequestHeader" in f &&
                            r.forEach(d, function (t, e) {
                                void 0 === h && "content-type" === e.toLowerCase() ? delete d[e] : f.setRequestHeader(e, t);
                            }),
                            r.isUndefined(t.withCredentials) || (f.withCredentials = !!t.withCredentials),
                                t.responseType)
                        )
                            try {
                                f.responseType = t.responseType;
                            } catch (e) {
                                if ("json" !== t.responseType) throw e;
                            }
                        "function" == typeof t.onDownloadProgress && f.addEventListener("progress", t.onDownloadProgress),
                        "function" == typeof t.onUploadProgress && f.upload && f.upload.addEventListener("progress", t.onUploadProgress),
                        t.cancelToken &&
                        t.cancelToken.promise.then(function (t) {
                            f && (f.abort(), n(t), (f = null));
                        }),
                        h || (h = null),
                            f.send(h);
                    });
                };
            },
            1609: function (t, e, n) {
                "use strict";
                var r = n(4867),
                    i = n(1849),
                    o = n(321),
                    a = n(7185);
                function s(t) {
                    var e = new o(t),
                        n = i(o.prototype.request, e);
                    return r.extend(n, o.prototype, e), r.extend(n, e), n;
                }
                var l = s(n(5655));
                (l.Axios = o),
                    (l.create = function (t) {
                        return s(a(l.defaults, t));
                    }),
                    (l.Cancel = n(5263)),
                    (l.CancelToken = n(4972)),
                    (l.isCancel = n(6502)),
                    (l.all = function (t) {
                        return Promise.all(t);
                    }),
                    (l.spread = n(8713)),
                    (l.isAxiosError = n(6268)),
                    (t.exports = l),
                    (t.exports.default = l);
            },
            5263: function (t) {
                "use strict";
                function e(t) {
                    this.message = t;
                }
                (e.prototype.toString = function () {
                    return "Cancel" + (this.message ? ": " + this.message : "");
                }),
                    (e.prototype.__CANCEL__ = !0),
                    (t.exports = e);
            },
            4972: function (t, e, n) {
                "use strict";
                var r = n(5263);
                function i(t) {
                    if ("function" != typeof t) throw new TypeError("executor must be a function.");
                    var e;
                    this.promise = new Promise(function (t) {
                        e = t;
                    });
                    var n = this;
                    t(function (t) {
                        n.reason || ((n.reason = new r(t)), e(n.reason));
                    });
                }
                (i.prototype.throwIfRequested = function () {
                    if (this.reason) throw this.reason;
                }),
                    (i.source = function () {
                        var t;
                        return {
                            token: new i(function (e) {
                                t = e;
                            }),
                            cancel: t,
                        };
                    }),
                    (t.exports = i);
            },
            6502: function (t) {
                "use strict";
                t.exports = function (t) {
                    return !(!t || !t.__CANCEL__);
                };
            },
            321: function (t, e, n) {
                "use strict";
                var r = n(4867),
                    i = n(5327),
                    o = n(782),
                    a = n(3572),
                    s = n(7185);
                function l(t) {
                    (this.defaults = t), (this.interceptors = { request: new o(), response: new o() });
                }
                (l.prototype.request = function (t) {
                    "string" == typeof t ? ((t = arguments[1] || {}).url = arguments[0]) : (t = t || {}),
                        (t = s(this.defaults, t)).method ? (t.method = t.method.toLowerCase()) : this.defaults.method ? (t.method = this.defaults.method.toLowerCase()) : (t.method = "get");
                    var e = [a, void 0],
                        n = Promise.resolve(t);
                    for (
                        this.interceptors.request.forEach(function (t) {
                            e.unshift(t.fulfilled, t.rejected);
                        }),
                            this.interceptors.response.forEach(function (t) {
                                e.push(t.fulfilled, t.rejected);
                            });
                        e.length;

                    )
                        n = n.then(e.shift(), e.shift());
                    return n;
                }),
                    (l.prototype.getUri = function (t) {
                        return (t = s(this.defaults, t)), i(t.url, t.params, t.paramsSerializer).replace(/^\?/, "");
                    }),
                    r.forEach(["delete", "get", "head", "options"], function (t) {
                        l.prototype[t] = function (e, n) {
                            return this.request(s(n || {}, { method: t, url: e, data: (n || {}).data }));
                        };
                    }),
                    r.forEach(["post", "put", "patch"], function (t) {
                        l.prototype[t] = function (e, n, r) {
                            return this.request(s(r || {}, { method: t, url: e, data: n }));
                        };
                    }),
                    (t.exports = l);
            },
            782: function (t, e, n) {
                "use strict";
                var r = n(4867);
                function i() {
                    this.handlers = [];
                }
                (i.prototype.use = function (t, e) {
                    return this.handlers.push({ fulfilled: t, rejected: e }), this.handlers.length - 1;
                }),
                    (i.prototype.eject = function (t) {
                        this.handlers[t] && (this.handlers[t] = null);
                    }),
                    (i.prototype.forEach = function (t) {
                        r.forEach(this.handlers, function (e) {
                            null !== e && t(e);
                        });
                    }),
                    (t.exports = i);
            },
            4097: function (t, e, n) {
                "use strict";
                var r = n(1793),
                    i = n(7303);
                t.exports = function (t, e) {
                    return t && !r(e) ? i(t, e) : e;
                };
            },
            5061: function (t, e, n) {
                "use strict";
                var r = n(481);
                t.exports = function (t, e, n, i, o) {
                    var a = new Error(t);
                    return r(a, e, n, i, o);
                };
            },
            3572: function (t, e, n) {
                "use strict";
                var r = n(4867),
                    i = n(8527),
                    o = n(6502),
                    a = n(5655);
                function s(t) {
                    t.cancelToken && t.cancelToken.throwIfRequested();
                }
                t.exports = function (t) {
                    return (
                        s(t),
                            (t.headers = t.headers || {}),
                            (t.data = i(t.data, t.headers, t.transformRequest)),
                            (t.headers = r.merge(t.headers.common || {}, t.headers[t.method] || {}, t.headers)),
                            r.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function (e) {
                                delete t.headers[e];
                            }),
                            (t.adapter || a.adapter)(t).then(
                                function (e) {
                                    return s(t), (e.data = i(e.data, e.headers, t.transformResponse)), e;
                                },
                                function (e) {
                                    return o(e) || (s(t), e && e.response && (e.response.data = i(e.response.data, e.response.headers, t.transformResponse))), Promise.reject(e);
                                }
                            )
                    );
                };
            },
            481: function (t) {
                "use strict";
                t.exports = function (t, e, n, r, i) {
                    return (
                        (t.config = e),
                        n && (t.code = n),
                            (t.request = r),
                            (t.response = i),
                            (t.isAxiosError = !0),
                            (t.toJSON = function () {
                                return {
                                    message: this.message,
                                    name: this.name,
                                    description: this.description,
                                    number: this.number,
                                    fileName: this.fileName,
                                    lineNumber: this.lineNumber,
                                    columnNumber: this.columnNumber,
                                    stack: this.stack,
                                    config: this.config,
                                    code: this.code,
                                };
                            }),
                            t
                    );
                };
            },
            7185: function (t, e, n) {
                "use strict";
                var r = n(4867);
                t.exports = function (t, e) {
                    e = e || {};
                    var n = {},
                        i = ["url", "method", "data"],
                        o = ["headers", "auth", "proxy", "params"],
                        a = [
                            "baseURL",
                            "transformRequest",
                            "transformResponse",
                            "paramsSerializer",
                            "timeout",
                            "timeoutMessage",
                            "withCredentials",
                            "adapter",
                            "responseType",
                            "xsrfCookieName",
                            "xsrfHeaderName",
                            "onUploadProgress",
                            "onDownloadProgress",
                            "decompress",
                            "maxContentLength",
                            "maxBodyLength",
                            "maxRedirects",
                            "transport",
                            "httpAgent",
                            "httpsAgent",
                            "cancelToken",
                            "socketPath",
                            "responseEncoding",
                        ],
                        s = ["validateStatus"];
                    function l(t, e) {
                        return r.isPlainObject(t) && r.isPlainObject(e) ? r.merge(t, e) : r.isPlainObject(e) ? r.merge({}, e) : r.isArray(e) ? e.slice() : e;
                    }
                    function c(i) {
                        r.isUndefined(e[i]) ? r.isUndefined(t[i]) || (n[i] = l(void 0, t[i])) : (n[i] = l(t[i], e[i]));
                    }
                    r.forEach(i, function (t) {
                        r.isUndefined(e[t]) || (n[t] = l(void 0, e[t]));
                    }),
                        r.forEach(o, c),
                        r.forEach(a, function (i) {
                            r.isUndefined(e[i]) ? r.isUndefined(t[i]) || (n[i] = l(void 0, t[i])) : (n[i] = l(void 0, e[i]));
                        }),
                        r.forEach(s, function (r) {
                            r in e ? (n[r] = l(t[r], e[r])) : r in t && (n[r] = l(void 0, t[r]));
                        });
                    var u = i.concat(o).concat(a).concat(s),
                        h = Object.keys(t)
                            .concat(Object.keys(e))
                            .filter(function (t) {
                                return -1 === u.indexOf(t);
                            });
                    return r.forEach(h, c), n;
                };
            },
            6026: function (t, e, n) {
                "use strict";
                var r = n(5061);
                t.exports = function (t, e, n) {
                    var i = n.config.validateStatus;
                    n.status && i && !i(n.status) ? e(r("Request failed with status code " + n.status, n.config, null, n.request, n)) : t(n);
                };
            },
            8527: function (t, e, n) {
                "use strict";
                var r = n(4867);
                t.exports = function (t, e, n) {
                    return (
                        r.forEach(n, function (n) {
                            t = n(t, e);
                        }),
                            t
                    );
                };
            },
            5655: function (t, e, n) {
                "use strict";
                var r = n(4155),
                    i = n(4867),
                    o = n(6016),
                    a = { "Content-Type": "application/x-www-form-urlencoded" };
                function s(t, e) {
                    !i.isUndefined(t) && i.isUndefined(t["Content-Type"]) && (t["Content-Type"] = e);
                }
                var l,
                    c = {
                        adapter: (("undefined" != typeof XMLHttpRequest || (void 0 !== r && "[object process]" === Object.prototype.toString.call(r))) && (l = n(5448)), l),
                        transformRequest: [
                            function (t, e) {
                                return (
                                    o(e, "Accept"),
                                        o(e, "Content-Type"),
                                        i.isFormData(t) || i.isArrayBuffer(t) || i.isBuffer(t) || i.isStream(t) || i.isFile(t) || i.isBlob(t)
                                            ? t
                                            : i.isArrayBufferView(t)
                                                ? t.buffer
                                                : i.isURLSearchParams(t)
                                                    ? (s(e, "application/x-www-form-urlencoded;charset=utf-8"), t.toString())
                                                    : i.isObject(t)
                                                        ? (s(e, "application/json;charset=utf-8"), JSON.stringify(t))
                                                        : t
                                );
                            },
                        ],
                        transformResponse: [
                            function (t) {
                                if ("string" == typeof t)
                                    try {
                                        t = JSON.parse(t);
                                    } catch (t) {}
                                return t;
                            },
                        ],
                        timeout: 0,
                        xsrfCookieName: "XSRF-TOKEN",
                        xsrfHeaderName: "X-XSRF-TOKEN",
                        maxContentLength: -1,
                        maxBodyLength: -1,
                        validateStatus: function (t) {
                            return t >= 200 && t < 300;
                        },
                    };
                (c.headers = { common: { Accept: "application/json, text/plain, */*" } }),
                    i.forEach(["delete", "get", "head"], function (t) {
                        c.headers[t] = {};
                    }),
                    i.forEach(["post", "put", "patch"], function (t) {
                        c.headers[t] = i.merge(a);
                    }),
                    (t.exports = c);
            },
            1849: function (t) {
                "use strict";
                t.exports = function (t, e) {
                    return function () {
                        for (var n = new Array(arguments.length), r = 0; r < n.length; r++) n[r] = arguments[r];
                        return t.apply(e, n);
                    };
                };
            },
            5327: function (t, e, n) {
                "use strict";
                var r = n(4867);
                function i(t) {
                    return encodeURIComponent(t).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
                }
                t.exports = function (t, e, n) {
                    if (!e) return t;
                    var o;
                    if (n) o = n(e);
                    else if (r.isURLSearchParams(e)) o = e.toString();
                    else {
                        var a = [];
                        r.forEach(e, function (t, e) {
                            null != t &&
                            (r.isArray(t) ? (e += "[]") : (t = [t]),
                                r.forEach(t, function (t) {
                                    r.isDate(t) ? (t = t.toISOString()) : r.isObject(t) && (t = JSON.stringify(t)), a.push(i(e) + "=" + i(t));
                                }));
                        }),
                            (o = a.join("&"));
                    }
                    if (o) {
                        var s = t.indexOf("#");
                        -1 !== s && (t = t.slice(0, s)), (t += (-1 === t.indexOf("?") ? "?" : "&") + o);
                    }
                    return t;
                };
            },
            7303: function (t) {
                "use strict";
                t.exports = function (t, e) {
                    return e ? t.replace(/\/+$/, "") + "/" + e.replace(/^\/+/, "") : t;
                };
            },
            4372: function (t, e, n) {
                "use strict";
                var r = n(4867);
                t.exports = r.isStandardBrowserEnv()
                    ? {
                        write: function (t, e, n, i, o, a) {
                            var s = [];
                            s.push(t + "=" + encodeURIComponent(e)),
                            r.isNumber(n) && s.push("expires=" + new Date(n).toGMTString()),
                            r.isString(i) && s.push("path=" + i),
                            r.isString(o) && s.push("domain=" + o),
                            !0 === a && s.push("secure"),
                                (document.cookie = s.join("; "));
                        },
                        read: function (t) {
                            var e = document.cookie.match(new RegExp("(^|;\\s*)(" + t + ")=([^;]*)"));
                            return e ? decodeURIComponent(e[3]) : null;
                        },
                        remove: function (t) {
                            this.write(t, "", Date.now() - 864e5);
                        },
                    }
                    : {
                        write: function () {},
                        read: function () {
                            return null;
                        },
                        remove: function () {},
                    };
            },
            1793: function (t) {
                "use strict";
                t.exports = function (t) {
                    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t);
                };
            },
            6268: function (t) {
                "use strict";
                t.exports = function (t) {
                    return "object" == typeof t && !0 === t.isAxiosError;
                };
            },
            7985: function (t, e, n) {
                "use strict";
                var r = n(4867);
                t.exports = r.isStandardBrowserEnv()
                    ? (function () {
                        var t,
                            e = /(msie|trident)/i.test(navigator.userAgent),
                            n = document.createElement("a");
                        function i(t) {
                            var r = t;
                            return (
                                e && (n.setAttribute("href", r), (r = n.href)),
                                    n.setAttribute("href", r),
                                    {
                                        href: n.href,
                                        protocol: n.protocol ? n.protocol.replace(/:$/, "") : "",
                                        host: n.host,
                                        search: n.search ? n.search.replace(/^\?/, "") : "",
                                        hash: n.hash ? n.hash.replace(/^#/, "") : "",
                                        hostname: n.hostname,
                                        port: n.port,
                                        pathname: "/" === n.pathname.charAt(0) ? n.pathname : "/" + n.pathname,
                                    }
                            );
                        }
                        return (
                            (t = i(window.location.href)),
                                function (e) {
                                    var n = r.isString(e) ? i(e) : e;
                                    return n.protocol === t.protocol && n.host === t.host;
                                }
                        );
                    })()
                    : function () {
                        return !0;
                    };
            },
            6016: function (t, e, n) {
                "use strict";
                var r = n(4867);
                t.exports = function (t, e) {
                    r.forEach(t, function (n, r) {
                        r !== e && r.toUpperCase() === e.toUpperCase() && ((t[e] = n), delete t[r]);
                    });
                };
            },
            4109: function (t, e, n) {
                "use strict";
                var r = n(4867),
                    i = [
                        "age",
                        "authorization",
                        "content-length",
                        "content-type",
                        "etag",
                        "expires",
                        "from",
                        "host",
                        "if-modified-since",
                        "if-unmodified-since",
                        "last-modified",
                        "location",
                        "max-forwards",
                        "proxy-authorization",
                        "referer",
                        "retry-after",
                        "user-agent",
                    ];
                t.exports = function (t) {
                    var e,
                        n,
                        o,
                        a = {};
                    return t
                        ? (r.forEach(t.split("\n"), function (t) {
                            if (((o = t.indexOf(":")), (e = r.trim(t.substr(0, o)).toLowerCase()), (n = r.trim(t.substr(o + 1))), e)) {
                                if (a[e] && i.indexOf(e) >= 0) return;
                                a[e] = "set-cookie" === e ? (a[e] ? a[e] : []).concat([n]) : a[e] ? a[e] + ", " + n : n;
                            }
                        }),
                            a)
                        : a;
                };
            },
            8713: function (t) {
                "use strict";
                t.exports = function (t) {
                    return function (e) {
                        return t.apply(null, e);
                    };
                };
            },
            4867: function (t, e, n) {
                "use strict";
                var r = n(1849),
                    i = Object.prototype.toString;
                function o(t) {
                    return "[object Array]" === i.call(t);
                }
                function a(t) {
                    return void 0 === t;
                }
                function s(t) {
                    return null !== t && "object" == typeof t;
                }
                function l(t) {
                    if ("[object Object]" !== i.call(t)) return !1;
                    var e = Object.getPrototypeOf(t);
                    return null === e || e === Object.prototype;
                }
                function c(t) {
                    return "[object Function]" === i.call(t);
                }
                function u(t, e) {
                    if (null != t)
                        if (("object" != typeof t && (t = [t]), o(t))) for (var n = 0, r = t.length; n < r; n++) e.call(null, t[n], n, t);
                        else for (var i in t) Object.prototype.hasOwnProperty.call(t, i) && e.call(null, t[i], i, t);
                }
                t.exports = {
                    isArray: o,
                    isArrayBuffer: function (t) {
                        return "[object ArrayBuffer]" === i.call(t);
                    },
                    isBuffer: function (t) {
                        return null !== t && !a(t) && null !== t.constructor && !a(t.constructor) && "function" == typeof t.constructor.isBuffer && t.constructor.isBuffer(t);
                    },
                    isFormData: function (t) {
                        return "undefined" != typeof FormData && t instanceof FormData;
                    },
                    isArrayBufferView: function (t) {
                        return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(t) : t && t.buffer && t.buffer instanceof ArrayBuffer;
                    },
                    isString: function (t) {
                        return "string" == typeof t;
                    },
                    isNumber: function (t) {
                        return "number" == typeof t;
                    },
                    isObject: s,
                    isPlainObject: l,
                    isUndefined: a,
                    isDate: function (t) {
                        return "[object Date]" === i.call(t);
                    },
                    isFile: function (t) {
                        return "[object File]" === i.call(t);
                    },
                    isBlob: function (t) {
                        return "[object Blob]" === i.call(t);
                    },
                    isFunction: c,
                    isStream: function (t) {
                        return s(t) && c(t.pipe);
                    },
                    isURLSearchParams: function (t) {
                        return "undefined" != typeof URLSearchParams && t instanceof URLSearchParams;
                    },
                    isStandardBrowserEnv: function () {
                        return (
                            ("undefined" == typeof navigator || ("ReactNative" !== navigator.product && "NativeScript" !== navigator.product && "NS" !== navigator.product)) && "undefined" != typeof window && "undefined" != typeof document
                        );
                    },
                    forEach: u,
                    merge: function t() {
                        var e = {};
                        function n(n, r) {
                            l(e[r]) && l(n) ? (e[r] = t(e[r], n)) : l(n) ? (e[r] = t({}, n)) : o(n) ? (e[r] = n.slice()) : (e[r] = n);
                        }
                        for (var r = 0, i = arguments.length; r < i; r++) u(arguments[r], n);
                        return e;
                    },
                    extend: function (t, e, n) {
                        return (
                            u(e, function (e, i) {
                                t[i] = n && "function" == typeof e ? r(e, n) : e;
                            }),
                                t
                        );
                    },
                    trim: function (t) {
                        return t.replace(/^\s*/, "").replace(/\s*$/, "");
                    },
                    stripBOM: function (t) {
                        return 65279 === t.charCodeAt(0) && (t = t.slice(1)), t;
                    },
                };
            },
            3395: function (t, e, n) {
                "use strict";
                function r() {}
                r.prototype = {
                    on: function (t, e, n) {
                        var r = this.e || (this.e = {});
                        return (r[t] || (r[t] = [])).push({ fn: e, ctx: n }), this;
                    },
                    once: function (t, e, n) {
                        var r = this;
                        function i() {
                            r.off(t, i), e.apply(n, arguments);
                        }
                        return (i._ = e), this.on(t, i, n);
                    },
                    emit: function (t) {
                        for (var e = [].slice.call(arguments, 1), n = ((this.e || (this.e = {}))[t] || []).slice(), r = 0, i = n.length; r < i; r++) n[r].fn.apply(n[r].ctx, e);
                        return this;
                    },
                    off: function (t, e) {
                        var n = this.e || (this.e = {}),
                            r = n[t],
                            i = [];
                        if (r && e) for (var o = 0, a = r.length; o < a; o++) r[o].fn !== e && r[o].fn._ !== e && i.push(r[o]);
                        return i.length ? (n[t] = i) : delete n[t], this;
                    },
                };
                var i = r;
                i.TinyEmitter = r;
                var o = function (t) {
                    (this.wrap = document.querySelector("[data-router-wrapper]")), (this.properties = t), (this.Transition = t.transition ? new t.transition.class(this.wrap, t.transition.name) : null);
                };
                (o.prototype.setup = function () {
                    this.onEnter && this.onEnter(), this.onEnterCompleted && this.onEnterCompleted();
                }),
                    (o.prototype.add = function () {
                        this.wrap.insertAdjacentHTML("beforeend", this.properties.view.outerHTML);
                    }),
                    (o.prototype.update = function () {
                        document.title = this.properties.page.title;
                    }),
                    (o.prototype.show = function (t) {
                        var e = this;
                        return new Promise(function (n) {
                            try {
                                function r(t) {
                                    e.onEnterCompleted && e.onEnterCompleted(), n();
                                }
                                return e.update(), e.onEnter && e.onEnter(), Promise.resolve(e.Transition ? Promise.resolve(e.Transition.show(t)).then(r) : r());
                            } catch (t) {
                                return Promise.reject(t);
                            }
                        });
                    }),
                    (o.prototype.hide = function (t) {
                        var e = this;
                        return new Promise(function (n) {
                            try {
                                function r(t) {
                                    e.onLeaveCompleted && e.onLeaveCompleted(), n();
                                }
                                return e.onLeave && e.onLeave(), Promise.resolve(e.Transition ? Promise.resolve(e.Transition.hide(t)).then(r) : r());
                            } catch (t) {
                                return Promise.reject(t);
                            }
                        });
                    });
                var a = new window.DOMParser(),
                    s = function (t, e) {
                        (this.renderers = t), (this.transitions = e);
                    };
                (s.prototype.getOrigin = function (t) {
                    var e = t.match(/(https?:\/\/[\w\-.]+)/);
                    return e ? e[1].replace(/https?:\/\//, "") : null;
                }),
                    (s.prototype.getPathname = function (t) {
                        var e = t.match(/https?:\/\/.*?(\/[\w_\-./]+)/);
                        return e ? e[1] : "/";
                    }),
                    (s.prototype.getAnchor = function (t) {
                        var e = t.match(/(#.*)$/);
                        return e ? e[1] : null;
                    }),
                    (s.prototype.getParams = function (t) {
                        var e = t.match(/\?([\w_\-.=&]+)/);
                        if (!e) return null;
                        for (var n = e[1].split("&"), r = {}, i = 0; i < n.length; i++) {
                            var o = n[i].split("=");
                            r[o[0]] = o[1];
                        }
                        return r;
                    }),
                    (s.prototype.getDOM = function (t) {
                        return "string" == typeof t ? a.parseFromString(t, "text/html") : t;
                    }),
                    (s.prototype.getView = function (t) {
                        return t.querySelector("[data-router-view]");
                    }),
                    (s.prototype.getSlug = function (t) {
                        return t.getAttribute("data-router-view");
                    }),
                    (s.prototype.getRenderer = function (t) {
                        if (!this.renderers) return Promise.resolve(o);
                        if (t in this.renderers) {
                            var e = this.renderers[t];
                            return "function" != typeof e || o.isPrototypeOf(e)
                                ? "function" == typeof e.then
                                    ? Promise.resolve(e).then(function (t) {
                                        return t.default;
                                    })
                                    : Promise.resolve(e)
                                : Promise.resolve(e()).then(function (t) {
                                    return t.default;
                                });
                        }
                        return Promise.resolve(o);
                    }),
                    (s.prototype.getTransition = function (t) {
                        return this.transitions ? (t in this.transitions ? { class: this.transitions[t], name: t } : "default" in this.transitions ? { class: this.transitions.default, name: "default" } : null) : null;
                    }),
                    (s.prototype.getProperties = function (t) {
                        var e = this.getDOM(t),
                            n = this.getView(e),
                            r = this.getSlug(n);
                        return { page: e, view: n, slug: r, renderer: this.getRenderer(r, this.renderers), transition: this.getTransition(r, this.transitions) };
                    }),
                    (s.prototype.getLocation = function (t) {
                        return { href: t, anchor: this.getAnchor(t), origin: this.getOrigin(t), params: this.getParams(t), pathname: this.getPathname(t) };
                    });
                var l = (function (t) {
                        function e(e) {
                            var n = this;
                            void 0 === e && (e = {});
                            var r = e.renderers,
                                i = e.transitions;
                            t.call(this),
                                (this.Helpers = new s(r, i)),
                                (this.Transitions = i),
                                (this.Contextual = !1),
                                (this.location = this.Helpers.getLocation(window.location.href)),
                                (this.properties = this.Helpers.getProperties(document.cloneNode(!0))),
                                (this.popping = !1),
                                (this.running = !1),
                                (this.trigger = null),
                                (this.cache = new Map()),
                                this.cache.set(this.location.href, this.properties),
                                this.properties.renderer.then(function (t) {
                                    (n.From = new t(n.properties)), n.From.setup();
                                }),
                                (this._navigate = this.navigate.bind(this)),
                                window.addEventListener("popstate", this.popState.bind(this)),
                                (this.links = document.querySelectorAll("a:not([target]):not([data-router-disabled])")),
                                this.attach(this.links);
                        }
                        return (
                            t && (e.__proto__ = t),
                                ((e.prototype = Object.create(t && t.prototype)).constructor = e),
                                (e.prototype.attach = function (t) {
                                    for (var e = 0, n = t; e < n.length; e += 1) n[e].addEventListener("click", this._navigate);
                                }),
                                (e.prototype.detach = function (t) {
                                    for (var e = 0, n = t; e < n.length; e += 1) n[e].removeEventListener("click", this._navigate);
                                }),
                                (e.prototype.navigate = function (t) {
                                    if (!t.metaKey && !t.ctrlKey) {
                                        t.preventDefault();
                                        var e = !!t.currentTarget.hasAttribute("data-transition") && t.currentTarget.dataset.transition;
                                        this.redirect(t.currentTarget.href, e, t.currentTarget);
                                    }
                                }),
                                (e.prototype.redirect = function (t, e, n) {
                                    if ((void 0 === e && (e = !1), void 0 === n && (n = "script"), (this.trigger = n), !this.running && t !== this.location.href)) {
                                        var r = this.Helpers.getLocation(t);
                                        (this.Contextual = !1),
                                        e && ((this.Contextual = this.Transitions.contextual[e].prototype), (this.Contextual.name = e)),
                                            r.origin !== this.location.origin || (r.anchor && r.pathname === this.location.pathname) ? (window.location.href = t) : ((this.location = r), this.beforeFetch());
                                    }
                                }),
                                (e.prototype.popState = function () {
                                    (this.trigger = "popstate"), (this.Contextual = !1);
                                    var t = this.Helpers.getLocation(window.location.href);
                                    this.location.pathname !== t.pathname || (!this.location.anchor && !t.anchor) ? ((this.popping = !0), (this.location = t), this.beforeFetch()) : (this.location = t);
                                }),
                                (e.prototype.pushState = function () {
                                    this.popping || window.history.pushState(this.location, "", this.location.href);
                                }),
                                (e.prototype.fetch = function () {
                                    try {
                                        var t = this;
                                        return Promise.resolve(fetch(t.location.href, { mode: "same-origin", method: "GET", headers: { "X-Requested-With": "Highway" }, credentials: "same-origin" })).then(function (e) {
                                            if (e.status >= 200 && e.status < 300) return e.text();
                                            window.location.href = t.location.href;
                                        });
                                    } catch (t) {
                                        return Promise.reject(t);
                                    }
                                }),
                                (e.prototype.beforeFetch = function () {
                                    try {
                                        var t = this;
                                        function r() {
                                            t.afterFetch();
                                        }
                                        t.pushState(), (t.running = !0), t.emit("NAVIGATE_OUT", { from: { page: t.From.properties.page, view: t.From.properties.view }, trigger: t.trigger, location: t.location });
                                        var e = { trigger: t.trigger, contextual: t.Contextual },
                                            n = t.cache.has(t.location.href)
                                                ? Promise.resolve(t.From.hide(e)).then(function () {
                                                    t.properties = t.cache.get(t.location.href);
                                                })
                                                : Promise.resolve(Promise.all([t.fetch(), t.From.hide(e)])).then(function (e) {
                                                    (t.properties = t.Helpers.getProperties(e[0])), t.cache.set(t.location.href, t.properties);
                                                });
                                        return Promise.resolve(n && n.then ? n.then(r) : r());
                                    } catch (t) {
                                        return Promise.reject(t);
                                    }
                                }),
                                (e.prototype.afterFetch = function () {
                                    try {
                                        var t = this;
                                        return Promise.resolve(t.properties.renderer).then(function (e) {
                                            return (
                                                (t.To = new e(t.properties)),
                                                    t.To.add(),
                                                    t.emit("NAVIGATE_IN", { to: { page: t.To.properties.page, view: t.To.wrap.lastElementChild }, trigger: t.trigger, location: t.location }),
                                                    Promise.resolve(t.To.show({ trigger: t.trigger, contextual: t.Contextual })).then(function () {
                                                        (t.popping = !1),
                                                            (t.running = !1),
                                                            t.detach(t.links),
                                                            (t.links = document.querySelectorAll("a:not([target]):not([data-router-disabled])")),
                                                            t.attach(t.links),
                                                            t.emit("NAVIGATE_END", {
                                                                to: { page: t.To.properties.page, view: t.To.wrap.lastElementChild },
                                                                from: { page: t.From.properties.page, view: t.From.properties.view },
                                                                trigger: t.trigger,
                                                                location: t.location,
                                                            }),
                                                            (t.From = t.To),
                                                            (t.trigger = null);
                                                    })
                                            );
                                        });
                                    } catch (t) {
                                        return Promise.reject(t);
                                    }
                                }),
                                e
                        );
                    })(i),
                    c = function (t, e) {
                        (this.wrap = t), (this.name = e);
                    };
                (c.prototype.show = function (t) {
                    var e = this,
                        n = t.trigger,
                        r = t.contextual,
                        i = this.wrap.lastElementChild,
                        o = this.wrap.firstElementChild;
                    return new Promise(function (t) {
                        r
                            ? (i.setAttribute("data-transition-in", r.name), i.removeAttribute("data-transition-out", r.name), r.in && r.in({ to: i, from: o, trigger: n, done: t }))
                            : (i.setAttribute("data-transition-in", e.name), i.removeAttribute("data-transition-out", e.name), e.in && e.in({ to: i, from: o, trigger: n, done: t }));
                    });
                }),
                    (c.prototype.hide = function (t) {
                        var e = this,
                            n = t.trigger,
                            r = t.contextual,
                            i = this.wrap.firstElementChild;
                        return new Promise(function (t) {
                            r
                                ? (i.setAttribute("data-transition-out", r.name), i.removeAttribute("data-transition-in", r.name), r.out && r.out({ from: i, trigger: n, done: t }))
                                : (i.setAttribute("data-transition-out", e.name), i.removeAttribute("data-transition-in", e.name), e.out && e.out({ from: i, trigger: n, done: t }));
                        });
                    }),
                    console.log("Highway v2.2.0");
                var u = { Core: l, Helpers: s, Renderer: o, Transition: c };
                n(489), n(2419), n(2526), n(1817), n(1539), n(2165), n(6992), n(8783), n(3948);
                function h(t) {
                    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t;
                }
                function d(t, e) {
                    (t.prototype = Object.create(e.prototype)), (t.prototype.constructor = t), (t.__proto__ = e);
                }
                var f,
                    p,
                    m,
                    g,
                    v,
                    y,
                    x,
                    _,
                    b,
                    w = { autoSleep: 120, force3D: "auto", nullTargetWarn: 1, units: { lineHeight: "" } },
                    S = { duration: 0.5, overwrite: !1, delay: 0 },
                    M = 1e8,
                    T = 1e-8,
                    E = 2 * Math.PI,
                    A = E / 4,
                    L = 0,
                    C = Math.sqrt,
                    R = Math.cos,
                    P = Math.sin,
                    I = function (t) {
                        return "string" == typeof t;
                    },
                    O = function (t) {
                        return "function" == typeof t;
                    },
                    D = function (t) {
                        return "number" == typeof t;
                    },
                    k = function (t) {
                        return void 0 === t;
                    },
                    U = function (t) {
                        return "object" == typeof t;
                    },
                    F = function (t) {
                        return !1 !== t;
                    },
                    N = function () {
                        return "undefined" != typeof window;
                    },
                    z = function (t) {
                        return O(t) || I(t);
                    },
                    B = ("function" == typeof ArrayBuffer && ArrayBuffer.isView) || function () {},
                    G = Array.isArray,
                    H = /(?:-?\.?\d|\.)+/gi,
                    V = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
                    W = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
                    j = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
                    q = /[+-]=-?[.\d]+/,
                    X = /[^,'"\[\]\s]+/gi,
                    Y = /[\d.+\-=]+(?:e[-+]\d*)*/i,
                    Z = {},
                    J = {},
                    $ = function (t) {
                        return (J = wt(t, Z)) && un;
                    },
                    Q = function (t, e) {
                        return console.warn("Invalid property", t, "set to", e, "Missing plugin? gsap.registerPlugin()");
                    },
                    K = function (t, e) {
                        return !e && console.warn(t);
                    },
                    tt = function (t, e) {
                        return (t && (Z[t] = e) && J && (J[t] = e)) || Z;
                    },
                    et = function () {
                        return 0;
                    },
                    nt = {},
                    rt = [],
                    it = {},
                    ot = {},
                    at = {},
                    st = 30,
                    lt = [],
                    ct = "",
                    ut = function (t) {
                        var e,
                            n,
                            r = t[0];
                        if ((U(r) || O(r) || (t = [t]), !(e = (r._gsap || {}).harness))) {
                            for (n = lt.length; n-- && !lt[n].targetTest(r); );
                            e = lt[n];
                        }
                        for (n = t.length; n--; ) (t[n] && (t[n]._gsap || (t[n]._gsap = new De(t[n], e)))) || t.splice(n, 1);
                        return t;
                    },
                    ht = function (t) {
                        return t._gsap || ut(Kt(t))[0]._gsap;
                    },
                    dt = function (t, e, n) {
                        return (n = t[e]) && O(n) ? t[e]() : (k(n) && t.getAttribute && t.getAttribute(e)) || n;
                    },
                    ft = function (t, e) {
                        return (t = t.split(",")).forEach(e) || t;
                    },
                    pt = function (t) {
                        return Math.round(1e5 * t) / 1e5 || 0;
                    },
                    mt = function (t, e) {
                        for (var n = e.length, r = 0; t.indexOf(e[r]) < 0 && ++r < n; );
                        return r < n;
                    },
                    gt = function () {
                        var t,
                            e,
                            n = rt.length,
                            r = rt.slice(0);
                        for (it = {}, rt.length = 0, t = 0; t < n; t++) (e = r[t]) && e._lazy && (e.render(e._lazy[0], e._lazy[1], !0)._lazy = 0);
                    },
                    vt = function (t, e, n, r) {
                        rt.length && gt(), t.render(e, n, r), rt.length && gt();
                    },
                    yt = function (t) {
                        var e = parseFloat(t);
                        return (e || 0 === e) && (t + "").match(X).length < 2 ? e : I(t) ? t.trim() : t;
                    },
                    xt = function (t) {
                        return t;
                    },
                    _t = function (t, e) {
                        for (var n in e) n in t || (t[n] = e[n]);
                        return t;
                    },
                    bt = function (t, e) {
                        for (var n in e) n in t || "duration" === n || "ease" === n || (t[n] = e[n]);
                    },
                    wt = function (t, e) {
                        for (var n in e) t[n] = e[n];
                        return t;
                    },
                    St = function t(e, n) {
                        for (var r in n) "__proto__" !== r && "constructor" !== r && "prototype" !== r && (e[r] = U(n[r]) ? t(e[r] || (e[r] = {}), n[r]) : n[r]);
                        return e;
                    },
                    Mt = function (t, e) {
                        var n,
                            r = {};
                        for (n in t) n in e || (r[n] = t[n]);
                        return r;
                    },
                    Tt = function (t) {
                        var e = t.parent || p,
                            n = t.keyframes ? bt : _t;
                        if (F(t.inherit)) for (; e; ) n(t, e.vars.defaults), (e = e.parent || e._dp);
                        return t;
                    },
                    Et = function (t, e, n, r) {
                        void 0 === n && (n = "_first"), void 0 === r && (r = "_last");
                        var i = e._prev,
                            o = e._next;
                        i ? (i._next = o) : t[n] === e && (t[n] = o), o ? (o._prev = i) : t[r] === e && (t[r] = i), (e._next = e._prev = e.parent = null);
                    },
                    At = function (t, e) {
                        t.parent && (!e || t.parent.autoRemoveChildren) && t.parent.remove(t), (t._act = 0);
                    },
                    Lt = function (t, e) {
                        if (t && (!e || e._end > t._dur || e._start < 0)) for (var n = t; n; ) (n._dirty = 1), (n = n.parent);
                        return t;
                    },
                    Ct = function (t) {
                        for (var e = t.parent; e && e.parent; ) (e._dirty = 1), e.totalDuration(), (e = e.parent);
                        return t;
                    },
                    Rt = function t(e) {
                        return !e || (e._ts && t(e.parent));
                    },
                    Pt = function (t) {
                        return t._repeat ? It(t._tTime, (t = t.duration() + t._rDelay)) * t : 0;
                    },
                    It = function (t, e) {
                        var n = Math.floor((t /= e));
                        return t && n === t ? n - 1 : n;
                    },
                    Ot = function (t, e) {
                        return (t - e._start) * e._ts + (e._ts >= 0 ? 0 : e._dirty ? e.totalDuration() : e._tDur);
                    },
                    Dt = function (t) {
                        return (t._end = pt(t._start + (t._tDur / Math.abs(t._ts || t._rts || T) || 0)));
                    },
                    kt = function (t, e) {
                        var n = t._dp;
                        return n && n.smoothChildTiming && t._ts && ((t._start = pt(n._time - (t._ts > 0 ? e / t._ts : ((t._dirty ? t.totalDuration() : t._tDur) - e) / -t._ts))), Dt(t), n._dirty || Lt(n, t)), t;
                    },
                    Ut = function (t, e) {
                        var n;
                        if (((e._time || (e._initted && !e._dur)) && ((n = Ot(t.rawTime(), e)), (!e._dur || Yt(0, e.totalDuration(), n) - e._tTime > T) && e.render(n, !0)), Lt(t, e)._dp && t._initted && t._time >= t._dur && t._ts)) {
                            if (t._dur < t.duration()) for (n = t; n._dp; ) n.rawTime() >= 0 && n.totalTime(n._tTime), (n = n._dp);
                            t._zTime = -1e-8;
                        }
                    },
                    Ft = function (t, e, n, r) {
                        return (
                            e.parent && At(e),
                                (e._start = pt((D(n) ? n : n || t !== p ? jt(t, n, e) : t._time) + e._delay)),
                                (e._end = pt(e._start + (e.totalDuration() / Math.abs(e.timeScale()) || 0))),
                                (function (t, e, n, r, i) {
                                    void 0 === n && (n = "_first"), void 0 === r && (r = "_last");
                                    var o,
                                        a = t[r];
                                    if (i) for (o = e[i]; a && a[i] > o; ) a = a._prev;
                                    a ? ((e._next = a._next), (a._next = e)) : ((e._next = t[n]), (t[n] = e)), e._next ? (e._next._prev = e) : (t[r] = e), (e._prev = a), (e.parent = e._dp = t);
                                })(t, e, "_first", "_last", t._sort ? "_start" : 0),
                            Gt(e) || (t._recent = e),
                            r || Ut(t, e),
                                t
                        );
                    },
                    Nt = function (t, e) {
                        return (Z.ScrollTrigger || Q("scrollTrigger", e)) && Z.ScrollTrigger.create(e, t);
                    },
                    zt = function (t, e, n, r) {
                        return Ge(t, e), t._initted ? (!n && t._pt && ((t._dur && !1 !== t.vars.lazy) || (!t._dur && t.vars.lazy)) && x !== be.frame ? (rt.push(t), (t._lazy = [e, r]), 1) : void 0) : 1;
                    },
                    Bt = function t(e) {
                        var n = e.parent;
                        return n && n._ts && n._initted && !n._lock && (n.rawTime() < 0 || t(n));
                    },
                    Gt = function (t) {
                        var e = t.data;
                        return "isFromStart" === e || "isStart" === e;
                    },
                    Ht = function (t, e, n, r) {
                        var i = t._repeat,
                            o = pt(e) || 0,
                            a = t._tTime / t._tDur;
                        return a && !r && (t._time *= o / t._dur), (t._dur = o), (t._tDur = i ? (i < 0 ? 1e10 : pt(o * (i + 1) + t._rDelay * i)) : o), a && !r ? kt(t, (t._tTime = t._tDur * a)) : t.parent && Dt(t), n || Lt(t.parent, t), t;
                    },
                    Vt = function (t) {
                        return t instanceof Ue ? Lt(t) : Ht(t, t._dur);
                    },
                    Wt = { _start: 0, endTime: et, totalDuration: et },
                    jt = function t(e, n, r) {
                        var i,
                            o,
                            a,
                            s = e.labels,
                            l = e._recent || Wt,
                            c = e.duration() >= M ? l.endTime(!1) : e._dur;
                        return I(n) && (isNaN(n) || n in s)
                            ? ((o = n.charAt(0)),
                                (a = "%" === n.substr(-1)),
                                (i = n.indexOf("=")),
                                "<" === o || ">" === o
                                    ? (i >= 0 && (n = n.replace(/=/, "")), ("<" === o ? l._start : l.endTime(l._repeat >= 0)) + (parseFloat(n.substr(1)) || 0) * (a ? (i < 0 ? l : r).totalDuration() / 100 : 1))
                                    : i < 0
                                        ? (n in s || (s[n] = c), s[n])
                                        : ((o = parseFloat(n.charAt(i - 1) + n.substr(i + 1))), a && r && (o = (o / 100) * (G(r) ? r[0] : r).totalDuration()), i > 1 ? t(e, n.substr(0, i - 1), r) + o : c + o))
                            : null == n
                                ? c
                                : +n;
                    },
                    qt = function (t, e, n) {
                        var r,
                            i,
                            o = D(e[1]),
                            a = (o ? 2 : 1) + (t < 2 ? 0 : 1),
                            s = e[a];
                        if ((o && (s.duration = e[1]), (s.parent = n), t)) {
                            for (r = s, i = n; i && !("immediateRender" in r); ) (r = i.vars.defaults || {}), (i = F(i.vars.inherit) && i.parent);
                            (s.immediateRender = F(r.immediateRender)), t < 2 ? (s.runBackwards = 1) : (s.startAt = e[a - 1]);
                        }
                        return new je(e[0], s, e[a + 1]);
                    },
                    Xt = function (t, e) {
                        return t || 0 === t ? e(t) : e;
                    },
                    Yt = function (t, e, n) {
                        return n < t ? t : n > e ? e : n;
                    },
                    Zt = function (t) {
                        if ("string" != typeof t) return "";
                        var e = Y.exec(t);
                        return e ? t.substr(e.index + e[0].length) : "";
                    },
                    Jt = [].slice,
                    $t = function (t, e) {
                        return t && U(t) && "length" in t && ((!e && !t.length) || (t.length - 1 in t && U(t[0]))) && !t.nodeType && t !== m;
                    },
                    Qt = function (t, e, n) {
                        return (
                            void 0 === n && (n = []),
                            t.forEach(function (t) {
                                var r;
                                return (I(t) && !e) || $t(t, 1) ? (r = n).push.apply(r, Kt(t)) : n.push(t);
                            }) || n
                        );
                    },
                    Kt = function (t, e, n) {
                        return !I(t) || n || (!g && we()) ? (G(t) ? Qt(t, n) : $t(t) ? Jt.call(t, 0) : t ? [t] : []) : Jt.call((e || v).querySelectorAll(t), 0);
                    },
                    te = function (t) {
                        return t.sort(function () {
                            return 0.5 - Math.random();
                        });
                    },
                    ee = function (t) {
                        if (O(t)) return t;
                        var e = U(t) ? t : { each: t },
                            n = Ce(e.ease),
                            r = e.from || 0,
                            i = parseFloat(e.base) || 0,
                            o = {},
                            a = r > 0 && r < 1,
                            s = isNaN(r) || a,
                            l = e.axis,
                            c = r,
                            u = r;
                        return (
                            I(r) ? (c = u = { center: 0.5, edges: 0.5, end: 1 }[r] || 0) : !a && s && ((c = r[0]), (u = r[1])),
                                function (t, a, h) {
                                    var d,
                                        f,
                                        p,
                                        m,
                                        g,
                                        v,
                                        y,
                                        x,
                                        _,
                                        b = (h || e).length,
                                        w = o[b];
                                    if (!w) {
                                        if (!(_ = "auto" === e.grid ? 0 : (e.grid || [1, M])[1])) {
                                            for (y = -M; y < (y = h[_++].getBoundingClientRect().left) && _ < b; );
                                            _--;
                                        }
                                        for (w = o[b] = [], d = s ? Math.min(_, b) * c - 0.5 : r % _, f = s ? (b * u) / _ - 0.5 : (r / _) | 0, y = 0, x = M, v = 0; v < b; v++)
                                            (p = (v % _) - d), (m = f - ((v / _) | 0)), (w[v] = g = l ? Math.abs("y" === l ? m : p) : C(p * p + m * m)), g > y && (y = g), g < x && (x = g);
                                        "random" === r && te(w),
                                            (w.max = y - x),
                                            (w.min = x),
                                            (w.v = b = (parseFloat(e.amount) || parseFloat(e.each) * (_ > b ? b - 1 : l ? ("y" === l ? b / _ : _) : Math.max(_, b / _)) || 0) * ("edges" === r ? -1 : 1)),
                                            (w.b = b < 0 ? i - b : i),
                                            (w.u = Zt(e.amount || e.each) || 0),
                                            (n = n && b < 0 ? Ae(n) : n);
                                    }
                                    return (b = (w[t] - w.min) / w.max || 0), pt(w.b + (n ? n(b) : b) * w.v) + w.u;
                                }
                        );
                    },
                    ne = function (t) {
                        var e = t < 1 ? Math.pow(10, (t + "").length - 2) : 1;
                        return function (n) {
                            var r = Math.round(parseFloat(n) / t) * t * e;
                            return (r - (r % 1)) / e + (D(n) ? 0 : Zt(n));
                        };
                    },
                    re = function (t, e) {
                        var n,
                            r,
                            i = G(t);
                        return (
                            !i && U(t) && ((n = i = t.radius || M), t.values ? ((t = Kt(t.values)), (r = !D(t[0])) && (n *= n)) : (t = ne(t.increment))),
                                Xt(
                                    e,
                                    i
                                        ? O(t)
                                            ? function (e) {
                                                return (r = t(e)), Math.abs(r - e) <= n ? r : e;
                                            }
                                            : function (e) {
                                                for (var i, o, a = parseFloat(r ? e.x : e), s = parseFloat(r ? e.y : 0), l = M, c = 0, u = t.length; u--; )
                                                    (i = r ? (i = t[u].x - a) * i + (o = t[u].y - s) * o : Math.abs(t[u] - a)) < l && ((l = i), (c = u));
                                                return (c = !n || l <= n ? t[c] : e), r || c === e || D(e) ? c : c + Zt(e);
                                            }
                                        : ne(t)
                                )
                        );
                    },
                    ie = function (t, e, n, r) {
                        return Xt(G(t) ? !e : !0 === n ? !!(n = 0) : !r, function () {
                            return G(t) ? t[~~(Math.random() * t.length)] : (n = n || 1e-5) && (r = n < 1 ? Math.pow(10, (n + "").length - 2) : 1) && Math.floor(Math.round((t - n / 2 + Math.random() * (e - t + 0.99 * n)) / n) * n * r) / r;
                        });
                    },
                    oe = function (t, e, n) {
                        return Xt(n, function (n) {
                            return t[~~e(n)];
                        });
                    },
                    ae = function (t) {
                        for (var e, n, r, i, o = 0, a = ""; ~(e = t.indexOf("random(", o)); )
                            (r = t.indexOf(")", e)), (i = "[" === t.charAt(e + 7)), (n = t.substr(e + 7, r - e - 7).match(i ? X : H)), (a += t.substr(o, e - o) + ie(i ? n : +n[0], i ? 0 : +n[1], +n[2] || 1e-5)), (o = r + 1);
                        return a + t.substr(o, t.length - o);
                    },
                    se = function (t, e, n, r, i) {
                        var o = e - t,
                            a = r - n;
                        return Xt(i, function (e) {
                            return n + (((e - t) / o) * a || 0);
                        });
                    },
                    le = function (t, e, n) {
                        var r,
                            i,
                            o,
                            a = t.labels,
                            s = M;
                        for (r in a) (i = a[r] - e) < 0 == !!n && i && s > (i = Math.abs(i)) && ((o = r), (s = i));
                        return o;
                    },
                    ce = function (t, e, n) {
                        var r,
                            i,
                            o = t.vars,
                            a = o[e];
                        if (a) return (r = o[e + "Params"]), (i = o.callbackScope || t), n && rt.length && gt(), r ? a.apply(i, r) : a.call(i);
                    },
                    ue = function (t) {
                        return At(t), t.scrollTrigger && t.scrollTrigger.kill(!1), t.progress() < 1 && ce(t, "onInterrupt"), t;
                    },
                    he = function (t) {
                        var e = (t = (!t.name && t.default) || t).name,
                            n = O(t),
                            r =
                                e && !n && t.init
                                    ? function () {
                                        this._props = [];
                                    }
                                    : t,
                            i = { init: et, render: tn, add: ze, kill: nn, modifier: en, rawVars: 0 },
                            o = { targetTest: 0, get: 0, getSetter: Je, aliases: {}, register: 0 };
                        if ((we(), t !== r)) {
                            if (ot[e]) return;
                            _t(r, _t(Mt(t, i), o)), wt(r.prototype, wt(i, Mt(t, o))), (ot[(r.prop = e)] = r), t.targetTest && (lt.push(r), (nt[e] = 1)), (e = ("css" === e ? "CSS" : e.charAt(0).toUpperCase() + e.substr(1)) + "Plugin");
                        }
                        tt(e, r), t.register && t.register(un, r, an);
                    },
                    de = 255,
                    fe = {
                        aqua: [0, de, de],
                        lime: [0, de, 0],
                        silver: [192, 192, 192],
                        black: [0, 0, 0],
                        maroon: [128, 0, 0],
                        teal: [0, 128, 128],
                        blue: [0, 0, de],
                        navy: [0, 0, 128],
                        white: [de, de, de],
                        olive: [128, 128, 0],
                        yellow: [de, de, 0],
                        orange: [de, 165, 0],
                        gray: [128, 128, 128],
                        purple: [128, 0, 128],
                        green: [0, 128, 0],
                        red: [de, 0, 0],
                        pink: [de, 192, 203],
                        cyan: [0, de, de],
                        transparent: [de, de, de, 0],
                    },
                    pe = function (t, e, n) {
                        return ((6 * (t = t < 0 ? t + 1 : t > 1 ? t - 1 : t) < 1 ? e + (n - e) * t * 6 : t < 0.5 ? n : 3 * t < 2 ? e + (n - e) * (2 / 3 - t) * 6 : e) * de + 0.5) | 0;
                    },
                    me = function (t, e, n) {
                        var r,
                            i,
                            o,
                            a,
                            s,
                            l,
                            c,
                            u,
                            h,
                            d,
                            f = t ? (D(t) ? [t >> 16, (t >> 8) & de, t & de] : 0) : fe.black;
                        if (!f) {
                            if (("," === t.substr(-1) && (t = t.substr(0, t.length - 1)), fe[t])) f = fe[t];
                            else if ("#" === t.charAt(0)) {
                                if ((t.length < 6 && ((r = t.charAt(1)), (i = t.charAt(2)), (o = t.charAt(3)), (t = "#" + r + r + i + i + o + o + (5 === t.length ? t.charAt(4) + t.charAt(4) : ""))), 9 === t.length))
                                    return [(f = parseInt(t.substr(1, 6), 16)) >> 16, (f >> 8) & de, f & de, parseInt(t.substr(7), 16) / 255];
                                f = [(t = parseInt(t.substr(1), 16)) >> 16, (t >> 8) & de, t & de];
                            } else if ("hsl" === t.substr(0, 3))
                                if (((f = d = t.match(H)), e)) {
                                    if (~t.indexOf("=")) return (f = t.match(V)), n && f.length < 4 && (f[3] = 1), f;
                                } else
                                    (a = (+f[0] % 360) / 360),
                                        (s = +f[1] / 100),
                                        (r = 2 * (l = +f[2] / 100) - (i = l <= 0.5 ? l * (s + 1) : l + s - l * s)),
                                    f.length > 3 && (f[3] *= 1),
                                        (f[0] = pe(a + 1 / 3, r, i)),
                                        (f[1] = pe(a, r, i)),
                                        (f[2] = pe(a - 1 / 3, r, i));
                            else f = t.match(H) || fe.transparent;
                            f = f.map(Number);
                        }
                        return (
                            e &&
                            !d &&
                            ((r = f[0] / de),
                                (i = f[1] / de),
                                (o = f[2] / de),
                                (l = ((c = Math.max(r, i, o)) + (u = Math.min(r, i, o))) / 2),
                                c === u ? (a = s = 0) : ((h = c - u), (s = l > 0.5 ? h / (2 - c - u) : h / (c + u)), (a = c === r ? (i - o) / h + (i < o ? 6 : 0) : c === i ? (o - r) / h + 2 : (r - i) / h + 4), (a *= 60)),
                                (f[0] = ~~(a + 0.5)),
                                (f[1] = ~~(100 * s + 0.5)),
                                (f[2] = ~~(100 * l + 0.5))),
                            n && f.length < 4 && (f[3] = 1),
                                f
                        );
                    },
                    ge = function (t) {
                        var e = [],
                            n = [],
                            r = -1;
                        return (
                            t.split(ye).forEach(function (t) {
                                var i = t.match(W) || [];
                                e.push.apply(e, i), n.push((r += i.length + 1));
                            }),
                                (e.c = n),
                                e
                        );
                    },
                    ve = function (t, e, n) {
                        var r,
                            i,
                            o,
                            a,
                            s = "",
                            l = (t + s).match(ye),
                            c = e ? "hsla(" : "rgba(",
                            u = 0;
                        if (!l) return t;
                        if (
                            ((l = l.map(function (t) {
                                return (t = me(t, e, 1)) && c + (e ? t[0] + "," + t[1] + "%," + t[2] + "%," + t[3] : t.join(",")) + ")";
                            })),
                            n && ((o = ge(t)), (r = n.c).join(s) !== o.c.join(s)))
                        )
                            for (a = (i = t.replace(ye, "1").split(W)).length - 1; u < a; u++) s += i[u] + (~r.indexOf(u) ? l.shift() || c + "0,0,0,0)" : (o.length ? o : l.length ? l : n).shift());
                        if (!i) for (a = (i = t.split(ye)).length - 1; u < a; u++) s += i[u] + l[u];
                        return s + i[a];
                    },
                    ye = (function () {
                        var t,
                            e = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";
                        for (t in fe) e += "|" + t + "\\b";
                        return new RegExp(e + ")", "gi");
                    })(),
                    xe = /hsl[a]?\(/,
                    _e = function (t) {
                        var e,
                            n = t.join(" ");
                        if (((ye.lastIndex = 0), ye.test(n))) return (e = xe.test(n)), (t[1] = ve(t[1], e)), (t[0] = ve(t[0], e, ge(t[1]))), !0;
                    },
                    be = (function () {
                        var t,
                            e,
                            n,
                            r,
                            i,
                            o,
                            a = Date.now,
                            s = 500,
                            l = 33,
                            c = a(),
                            u = c,
                            h = 1e3 / 240,
                            d = h,
                            f = [],
                            p = function n(p) {
                                var m,
                                    g,
                                    v,
                                    y,
                                    x = a() - u,
                                    _ = !0 === p;
                                if ((x > s && (c += x - l), ((m = (v = (u += x) - c) - d) > 0 || _) && ((y = ++r.frame), (i = v - 1e3 * r.time), (r.time = v /= 1e3), (d += m + (m >= h ? 4 : h - m)), (g = 1)), _ || (t = e(n)), g))
                                    for (o = 0; o < f.length; o++) f[o](v, i, y, p);
                            };
                        return (r = {
                            time: 0,
                            frame: 0,
                            tick: function () {
                                p(!0);
                            },
                            deltaRatio: function (t) {
                                return i / (1e3 / (t || 60));
                            },
                            wake: function () {
                                y &&
                                (!g &&
                                N() &&
                                ((m = g = window),
                                    (v = m.document || {}),
                                    (Z.gsap = un),
                                    (m.gsapVersions || (m.gsapVersions = [])).push(un.version),
                                    $(J || m.GreenSockGlobals || (!m.gsap && m) || {}),
                                    (n = m.requestAnimationFrame)),
                                t && r.sleep(),
                                    (e =
                                        n ||
                                        function (t) {
                                            return setTimeout(t, (d - 1e3 * r.time + 1) | 0);
                                        }),
                                    (b = 1),
                                    p(2));
                            },
                            sleep: function () {
                                (n ? m.cancelAnimationFrame : clearTimeout)(t), (b = 0), (e = et);
                            },
                            lagSmoothing: function (t, e) {
                                (s = t || 1e8), (l = Math.min(e, s, 0));
                            },
                            fps: function (t) {
                                (h = 1e3 / (t || 240)), (d = 1e3 * r.time + h);
                            },
                            add: function (t) {
                                f.indexOf(t) < 0 && f.push(t), we();
                            },
                            remove: function (t) {
                                var e;
                                ~(e = f.indexOf(t)) && f.splice(e, 1) && o >= e && o--;
                            },
                            _listeners: f,
                        });
                    })(),
                    we = function () {
                        return !b && be.wake();
                    },
                    Se = {},
                    Me = /^[\d.\-M][\d.\-,\s]/,
                    Te = /["']/g,
                    Ee = function (t) {
                        for (var e, n, r, i = {}, o = t.substr(1, t.length - 3).split(":"), a = o[0], s = 1, l = o.length; s < l; s++)
                            (n = o[s]), (e = s !== l - 1 ? n.lastIndexOf(",") : n.length), (r = n.substr(0, e)), (i[a] = isNaN(r) ? r.replace(Te, "").trim() : +r), (a = n.substr(e + 1).trim());
                        return i;
                    },
                    Ae = function (t) {
                        return function (e) {
                            return 1 - t(1 - e);
                        };
                    },
                    Le = function t(e, n) {
                        for (var r, i = e._first; i; )
                            i instanceof Ue ? t(i, n) : !i.vars.yoyoEase || (i._yoyo && i._repeat) || i._yoyo === n || (i.timeline ? t(i.timeline, n) : ((r = i._ease), (i._ease = i._yEase), (i._yEase = r), (i._yoyo = n))), (i = i._next);
                    },
                    Ce = function (t, e) {
                        return (
                            (t &&
                                (O(t)
                                    ? t
                                    : Se[t] ||
                                    (function (t) {
                                        var e,
                                            n,
                                            r,
                                            i,
                                            o = (t + "").split("("),
                                            a = Se[o[0]];
                                        return a && o.length > 1 && a.config
                                            ? a.config.apply(
                                                null,
                                                ~t.indexOf("{")
                                                    ? [Ee(o[1])]
                                                    : ((e = t), (n = e.indexOf("(") + 1), (r = e.indexOf(")")), (i = e.indexOf("(", n)), e.substring(n, ~i && i < r ? e.indexOf(")", r + 1) : r)).split(",").map(yt)
                                            )
                                            : Se._CE && Me.test(t)
                                                ? Se._CE("", t)
                                                : a;
                                    })(t))) ||
                            e
                        );
                    },
                    Re = function (t, e, n, r) {
                        void 0 === n &&
                        (n = function (t) {
                            return 1 - e(1 - t);
                        }),
                        void 0 === r &&
                        (r = function (t) {
                            return t < 0.5 ? e(2 * t) / 2 : 1 - e(2 * (1 - t)) / 2;
                        });
                        var i,
                            o = { easeIn: e, easeOut: n, easeInOut: r };
                        return (
                            ft(t, function (t) {
                                for (var e in ((Se[t] = Z[t] = o), (Se[(i = t.toLowerCase())] = n), o)) Se[i + ("easeIn" === e ? ".in" : "easeOut" === e ? ".out" : ".inOut")] = Se[t + "." + e] = o[e];
                            }),
                                o
                        );
                    },
                    Pe = function (t) {
                        return function (e) {
                            return e < 0.5 ? (1 - t(1 - 2 * e)) / 2 : 0.5 + t(2 * (e - 0.5)) / 2;
                        };
                    },
                    Ie = function t(e, n, r) {
                        var i = n >= 1 ? n : 1,
                            o = (r || (e ? 0.3 : 0.45)) / (n < 1 ? n : 1),
                            a = (o / E) * (Math.asin(1 / i) || 0),
                            s = function (t) {
                                return 1 === t ? 1 : i * Math.pow(2, -10 * t) * P((t - a) * o) + 1;
                            },
                            l =
                                "out" === e
                                    ? s
                                    : "in" === e
                                        ? function (t) {
                                            return 1 - s(1 - t);
                                        }
                                        : Pe(s);
                        return (
                            (o = E / o),
                                (l.config = function (n, r) {
                                    return t(e, n, r);
                                }),
                                l
                        );
                    },
                    Oe = function t(e, n) {
                        void 0 === n && (n = 1.70158);
                        var r = function (t) {
                                return t ? --t * t * ((n + 1) * t + n) + 1 : 0;
                            },
                            i =
                                "out" === e
                                    ? r
                                    : "in" === e
                                        ? function (t) {
                                            return 1 - r(1 - t);
                                        }
                                        : Pe(r);
                        return (
                            (i.config = function (n) {
                                return t(e, n);
                            }),
                                i
                        );
                    };
                ft("Linear,Quad,Cubic,Quart,Quint,Strong", function (t, e) {
                    var n = e < 5 ? e + 1 : e;
                    Re(
                        t + ",Power" + (n - 1),
                        e
                            ? function (t) {
                                return Math.pow(t, n);
                            }
                            : function (t) {
                                return t;
                            },
                        function (t) {
                            return 1 - Math.pow(1 - t, n);
                        },
                        function (t) {
                            return t < 0.5 ? Math.pow(2 * t, n) / 2 : 1 - Math.pow(2 * (1 - t), n) / 2;
                        }
                    );
                }),
                    (Se.Linear.easeNone = Se.none = Se.Linear.easeIn),
                    Re("Elastic", Ie("in"), Ie("out"), Ie()),
                    (function (t, e) {
                        var n = 1 / e,
                            r = function (r) {
                                return r < n ? t * r * r : r < 0.7272727272727273 ? t * Math.pow(r - 1.5 / e, 2) + 0.75 : r < 0.9090909090909092 ? t * (r -= 2.25 / e) * r + 0.9375 : t * Math.pow(r - 2.625 / e, 2) + 0.984375;
                            };
                        Re(
                            "Bounce",
                            function (t) {
                                return 1 - r(1 - t);
                            },
                            r
                        );
                    })(7.5625, 2.75),
                    Re("Expo", function (t) {
                        return t ? Math.pow(2, 10 * (t - 1)) : 0;
                    }),
                    Re("Circ", function (t) {
                        return -(C(1 - t * t) - 1);
                    }),
                    Re("Sine", function (t) {
                        return 1 === t ? 1 : 1 - R(t * A);
                    }),
                    Re("Back", Oe("in"), Oe("out"), Oe()),
                    (Se.SteppedEase = Se.steps = Z.SteppedEase = {
                        config: function (t, e) {
                            void 0 === t && (t = 1);
                            var n = 1 / t,
                                r = t + (e ? 0 : 1),
                                i = e ? 1 : 0;
                            return function (t) {
                                return (((r * Yt(0, 0.99999999, t)) | 0) + i) * n;
                            };
                        },
                    }),
                    (S.ease = Se["quad.out"]),
                    ft("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (t) {
                        return (ct += t + "," + t + "Params,");
                    });
                var De = function (t, e) {
                        (this.id = L++), (t._gsap = this), (this.target = t), (this.harness = e), (this.get = e ? e.get : dt), (this.set = e ? e.getSetter : Je);
                    },
                    ke = (function () {
                        function t(t) {
                            (this.vars = t),
                                (this._delay = +t.delay || 0),
                            (this._repeat = t.repeat === 1 / 0 ? -2 : t.repeat || 0) && ((this._rDelay = t.repeatDelay || 0), (this._yoyo = !!t.yoyo || !!t.yoyoEase)),
                                (this._ts = 1),
                                Ht(this, +t.duration, 1, 1),
                                (this.data = t.data),
                            b || be.wake();
                        }
                        var e = t.prototype;
                        return (
                            (e.delay = function (t) {
                                return t || 0 === t ? (this.parent && this.parent.smoothChildTiming && this.startTime(this._start + t - this._delay), (this._delay = t), this) : this._delay;
                            }),
                                (e.duration = function (t) {
                                    return arguments.length ? this.totalDuration(this._repeat > 0 ? t + (t + this._rDelay) * this._repeat : t) : this.totalDuration() && this._dur;
                                }),
                                (e.totalDuration = function (t) {
                                    return arguments.length ? ((this._dirty = 0), Ht(this, this._repeat < 0 ? t : (t - this._repeat * this._rDelay) / (this._repeat + 1))) : this._tDur;
                                }),
                                (e.totalTime = function (t, e) {
                                    if ((we(), !arguments.length)) return this._tTime;
                                    var n = this._dp;
                                    if (n && n.smoothChildTiming && this._ts) {
                                        for (kt(this, t), !n._dp || n.parent || Ut(n, this); n.parent; )
                                            n.parent._time !== n._start + (n._ts >= 0 ? n._tTime / n._ts : (n.totalDuration() - n._tTime) / -n._ts) && n.totalTime(n._tTime, !0), (n = n.parent);
                                        !this.parent && this._dp.autoRemoveChildren && ((this._ts > 0 && t < this._tDur) || (this._ts < 0 && t > 0) || (!this._tDur && !t)) && Ft(this._dp, this, this._start - this._delay);
                                    }
                                    return (
                                        (this._tTime !== t || (!this._dur && !e) || (this._initted && Math.abs(this._zTime) === T) || (!t && !this._initted && (this.add || this._ptLookup))) && (this._ts || (this._pTime = t), vt(this, t, e)),
                                            this
                                    );
                                }),
                                (e.time = function (t, e) {
                                    return arguments.length ? this.totalTime(Math.min(this.totalDuration(), t + Pt(this)) % (this._dur + this._rDelay) || (t ? this._dur : 0), e) : this._time;
                                }),
                                (e.totalProgress = function (t, e) {
                                    return arguments.length ? this.totalTime(this.totalDuration() * t, e) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
                                }),
                                (e.progress = function (t, e) {
                                    return arguments.length ? this.totalTime(this.duration() * (!this._yoyo || 1 & this.iteration() ? t : 1 - t) + Pt(this), e) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
                                }),
                                (e.iteration = function (t, e) {
                                    var n = this.duration() + this._rDelay;
                                    return arguments.length ? this.totalTime(this._time + (t - 1) * n, e) : this._repeat ? It(this._tTime, n) + 1 : 1;
                                }),
                                (e.timeScale = function (t) {
                                    if (!arguments.length) return -1e-8 === this._rts ? 0 : this._rts;
                                    if (this._rts === t) return this;
                                    var e = this.parent && this._ts ? Ot(this.parent._time, this) : this._tTime;
                                    return (this._rts = +t || 0), (this._ts = this._ps || -1e-8 === t ? 0 : this._rts), Ct(this.totalTime(Yt(-this._delay, this._tDur, e), !0));
                                }),
                                (e.paused = function (t) {
                                    return arguments.length
                                        ? (this._ps !== t &&
                                        ((this._ps = t),
                                            t
                                                ? ((this._pTime = this._tTime || Math.max(-this._delay, this.rawTime())), (this._ts = this._act = 0))
                                                : (we(),
                                                    (this._ts = this._rts),
                                                    this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, 1 === this.progress() && Math.abs(this._zTime) !== T && (this._tTime -= T)))),
                                            this)
                                        : this._ps;
                                }),
                                (e.startTime = function (t) {
                                    if (arguments.length) {
                                        this._start = t;
                                        var e = this.parent || this._dp;
                                        return e && (e._sort || !this.parent) && Ft(e, this, t - this._delay), this;
                                    }
                                    return this._start;
                                }),
                                (e.endTime = function (t) {
                                    return this._start + (F(t) ? this.totalDuration() : this.duration()) / Math.abs(this._ts);
                                }),
                                (e.rawTime = function (t) {
                                    var e = this.parent || this._dp;
                                    return e ? (t && (!this._ts || (this._repeat && this._time && this.totalProgress() < 1)) ? this._tTime % (this._dur + this._rDelay) : this._ts ? Ot(e.rawTime(t), this) : this._tTime) : this._tTime;
                                }),
                                (e.globalTime = function (t) {
                                    for (var e = this, n = arguments.length ? t : e.rawTime(); e; ) (n = e._start + n / (e._ts || 1)), (e = e._dp);
                                    return n;
                                }),
                                (e.repeat = function (t) {
                                    return arguments.length ? ((this._repeat = t === 1 / 0 ? -2 : t), Vt(this)) : -2 === this._repeat ? 1 / 0 : this._repeat;
                                }),
                                (e.repeatDelay = function (t) {
                                    if (arguments.length) {
                                        var e = this._time;
                                        return (this._rDelay = t), Vt(this), e ? this.time(e) : this;
                                    }
                                    return this._rDelay;
                                }),
                                (e.yoyo = function (t) {
                                    return arguments.length ? ((this._yoyo = t), this) : this._yoyo;
                                }),
                                (e.seek = function (t, e) {
                                    return this.totalTime(jt(this, t), F(e));
                                }),
                                (e.restart = function (t, e) {
                                    return this.play().totalTime(t ? -this._delay : 0, F(e));
                                }),
                                (e.play = function (t, e) {
                                    return null != t && this.seek(t, e), this.reversed(!1).paused(!1);
                                }),
                                (e.reverse = function (t, e) {
                                    return null != t && this.seek(t || this.totalDuration(), e), this.reversed(!0).paused(!1);
                                }),
                                (e.pause = function (t, e) {
                                    return null != t && this.seek(t, e), this.paused(!0);
                                }),
                                (e.resume = function () {
                                    return this.paused(!1);
                                }),
                                (e.reversed = function (t) {
                                    return arguments.length ? (!!t !== this.reversed() && this.timeScale(-this._rts || (t ? -1e-8 : 0)), this) : this._rts < 0;
                                }),
                                (e.invalidate = function () {
                                    return (this._initted = this._act = 0), (this._zTime = -1e-8), this;
                                }),
                                (e.isActive = function () {
                                    var t,
                                        e = this.parent || this._dp,
                                        n = this._start;
                                    return !(e && !(this._ts && this._initted && e.isActive() && (t = e.rawTime(!0)) >= n && t < this.endTime(!0) - T));
                                }),
                                (e.eventCallback = function (t, e, n) {
                                    var r = this.vars;
                                    return arguments.length > 1 ? (e ? ((r[t] = e), n && (r[t + "Params"] = n), "onUpdate" === t && (this._onUpdate = e)) : delete r[t], this) : r[t];
                                }),
                                (e.then = function (t) {
                                    var e = this;
                                    return new Promise(function (n) {
                                        var r = O(t) ? t : xt,
                                            i = function () {
                                                var t = e.then;
                                                (e.then = null), O(r) && (r = r(e)) && (r.then || r === e) && (e.then = t), n(r), (e.then = t);
                                            };
                                        (e._initted && 1 === e.totalProgress() && e._ts >= 0) || (!e._tTime && e._ts < 0) ? i() : (e._prom = i);
                                    });
                                }),
                                (e.kill = function () {
                                    ue(this);
                                }),
                                t
                        );
                    })();
                _t(ke.prototype, { _time: 0, _start: 0, _end: 0, _tTime: 0, _tDur: 0, _dirty: 0, _repeat: 0, _yoyo: !1, parent: null, _initted: !1, _rDelay: 0, _ts: 1, _dp: 0, ratio: 0, _zTime: -1e-8, _prom: 0, _ps: !1, _rts: 1 });
                var Ue = (function (t) {
                    function e(e, n) {
                        var r;
                        return (
                            void 0 === e && (e = {}),
                                ((r = t.call(this, e) || this).labels = {}),
                                (r.smoothChildTiming = !!e.smoothChildTiming),
                                (r.autoRemoveChildren = !!e.autoRemoveChildren),
                                (r._sort = F(e.sortChildren)),
                            p && Ft(e.parent || p, h(r), n),
                            e.reversed && r.reverse(),
                            e.paused && r.paused(!0),
                            e.scrollTrigger && Nt(h(r), e.scrollTrigger),
                                r
                        );
                    }
                    d(e, t);
                    var n = e.prototype;
                    return (
                        (n.to = function (t, e, n) {
                            return qt(0, arguments, this), this;
                        }),
                            (n.from = function (t, e, n) {
                                return qt(1, arguments, this), this;
                            }),
                            (n.fromTo = function (t, e, n, r) {
                                return qt(2, arguments, this), this;
                            }),
                            (n.set = function (t, e, n) {
                                return (e.duration = 0), (e.parent = this), Tt(e).repeatDelay || (e.repeat = 0), (e.immediateRender = !!e.immediateRender), new je(t, e, jt(this, n), 1), this;
                            }),
                            (n.call = function (t, e, n) {
                                return Ft(this, je.delayedCall(0, t, e), n);
                            }),
                            (n.staggerTo = function (t, e, n, r, i, o, a) {
                                return (n.duration = e), (n.stagger = n.stagger || r), (n.onComplete = o), (n.onCompleteParams = a), (n.parent = this), new je(t, n, jt(this, i)), this;
                            }),
                            (n.staggerFrom = function (t, e, n, r, i, o, a) {
                                return (n.runBackwards = 1), (Tt(n).immediateRender = F(n.immediateRender)), this.staggerTo(t, e, n, r, i, o, a);
                            }),
                            (n.staggerFromTo = function (t, e, n, r, i, o, a, s) {
                                return (r.startAt = n), (Tt(r).immediateRender = F(r.immediateRender)), this.staggerTo(t, e, r, i, o, a, s);
                            }),
                            (n.render = function (t, e, n) {
                                var r,
                                    i,
                                    o,
                                    a,
                                    s,
                                    l,
                                    c,
                                    u,
                                    h,
                                    d,
                                    f,
                                    m,
                                    g = this._time,
                                    v = this._dirty ? this.totalDuration() : this._tDur,
                                    y = this._dur,
                                    x = this !== p && t > v - T && t >= 0 ? v : t < T ? 0 : t,
                                    _ = this._zTime < 0 != t < 0 && (this._initted || !y);
                                if (x !== this._tTime || n || _) {
                                    if ((g !== this._time && y && ((x += this._time - g), (t += this._time - g)), (r = x), (h = this._start), (l = !(u = this._ts)), _ && (y || (g = this._zTime), (t || !e) && (this._zTime = t)), this._repeat)) {
                                        if (((f = this._yoyo), (s = y + this._rDelay), this._repeat < -1 && t < 0)) return this.totalTime(100 * s + t, e, n);
                                        if (
                                            ((r = pt(x % s)),
                                                x === v ? ((a = this._repeat), (r = y)) : ((a = ~~(x / s)) && a === x / s && ((r = y), a--), r > y && (r = y)),
                                                (d = It(this._tTime, s)),
                                            !g && this._tTime && d !== a && (d = a),
                                            f && 1 & a && ((r = y - r), (m = 1)),
                                            a !== d && !this._lock)
                                        ) {
                                            var b = f && 1 & d,
                                                w = b === (f && 1 & a);
                                            if (
                                                (a < d && (b = !b),
                                                    (g = b ? 0 : y),
                                                    (this._lock = 1),
                                                    (this.render(g || (m ? 0 : pt(a * s)), e, !y)._lock = 0),
                                                    (this._tTime = x),
                                                !e && this.parent && ce(this, "onRepeat"),
                                                this.vars.repeatRefresh && !m && (this.invalidate()._lock = 1),
                                                (g && g !== this._time) || l !== !this._ts || (this.vars.onRepeat && !this.parent && !this._act))
                                            )
                                                return this;
                                            if (((y = this._dur), (v = this._tDur), w && ((this._lock = 2), (g = b ? y : -1e-4), this.render(g, !0), this.vars.repeatRefresh && !m && this.invalidate()), (this._lock = 0), !this._ts && !l))
                                                return this;
                                            Le(this, m);
                                        }
                                    }
                                    if (
                                        (this._hasPause &&
                                        !this._forcing &&
                                        this._lock < 2 &&
                                        (c = (function (t, e, n) {
                                            var r;
                                            if (n > e)
                                                for (r = t._first; r && r._start <= n; ) {
                                                    if (!r._dur && "isPause" === r.data && r._start > e) return r;
                                                    r = r._next;
                                                }
                                            else
                                                for (r = t._last; r && r._start >= n; ) {
                                                    if (!r._dur && "isPause" === r.data && r._start < e) return r;
                                                    r = r._prev;
                                                }
                                        })(this, pt(g), pt(r))) &&
                                        (x -= r - (r = c._start)),
                                            (this._tTime = x),
                                            (this._time = r),
                                            (this._act = !u),
                                        this._initted || ((this._onUpdate = this.vars.onUpdate), (this._initted = 1), (this._zTime = t), (g = 0)),
                                        !g && r && !e && (ce(this, "onStart"), this._tTime !== x))
                                    )
                                        return this;
                                    if (r >= g && t >= 0)
                                        for (i = this._first; i; ) {
                                            if (((o = i._next), (i._act || r >= i._start) && i._ts && c !== i)) {
                                                if (i.parent !== this) return this.render(t, e, n);
                                                if ((i.render(i._ts > 0 ? (r - i._start) * i._ts : (i._dirty ? i.totalDuration() : i._tDur) + (r - i._start) * i._ts, e, n), r !== this._time || (!this._ts && !l))) {
                                                    (c = 0), o && (x += this._zTime = -1e-8);
                                                    break;
                                                }
                                            }
                                            i = o;
                                        }
                                    else {
                                        i = this._last;
                                        for (var S = t < 0 ? t : r; i; ) {
                                            if (((o = i._prev), (i._act || S <= i._end) && i._ts && c !== i)) {
                                                if (i.parent !== this) return this.render(t, e, n);
                                                if ((i.render(i._ts > 0 ? (S - i._start) * i._ts : (i._dirty ? i.totalDuration() : i._tDur) + (S - i._start) * i._ts, e, n), r !== this._time || (!this._ts && !l))) {
                                                    (c = 0), o && (x += this._zTime = S ? -1e-8 : T);
                                                    break;
                                                }
                                            }
                                            i = o;
                                        }
                                    }
                                    if (c && !e && (this.pause(), (c.render(r >= g ? 0 : -1e-8)._zTime = r >= g ? 1 : -1), this._ts)) return (this._start = h), Dt(this), this.render(t, e, n);
                                    this._onUpdate && !e && ce(this, "onUpdate", !0),
                                    ((x === v && v >= this.totalDuration()) || (!x && g)) &&
                                    ((h !== this._start && Math.abs(u) === Math.abs(this._ts)) ||
                                        this._lock ||
                                        ((t || !y) && ((x === v && this._ts > 0) || (!x && this._ts < 0)) && At(this, 1),
                                        e || (t < 0 && !g) || (!x && !g && v) || (ce(this, x === v && t >= 0 ? "onComplete" : "onReverseComplete", !0), this._prom && !(x < v && this.timeScale() > 0) && this._prom())));
                                }
                                return this;
                            }),
                            (n.add = function (t, e) {
                                var n = this;
                                if ((D(e) || (e = jt(this, e, t)), !(t instanceof ke))) {
                                    if (G(t))
                                        return (
                                            t.forEach(function (t) {
                                                return n.add(t, e);
                                            }),
                                                this
                                        );
                                    if (I(t)) return this.addLabel(t, e);
                                    if (!O(t)) return this;
                                    t = je.delayedCall(0, t);
                                }
                                return this !== t ? Ft(this, t, e) : this;
                            }),
                            (n.getChildren = function (t, e, n, r) {
                                void 0 === t && (t = !0), void 0 === e && (e = !0), void 0 === n && (n = !0), void 0 === r && (r = -M);
                                for (var i = [], o = this._first; o; ) o._start >= r && (o instanceof je ? e && i.push(o) : (n && i.push(o), t && i.push.apply(i, o.getChildren(!0, e, n)))), (o = o._next);
                                return i;
                            }),
                            (n.getById = function (t) {
                                for (var e = this.getChildren(1, 1, 1), n = e.length; n--; ) if (e[n].vars.id === t) return e[n];
                            }),
                            (n.remove = function (t) {
                                return I(t) ? this.removeLabel(t) : O(t) ? this.killTweensOf(t) : (Et(this, t), t === this._recent && (this._recent = this._last), Lt(this));
                            }),
                            (n.totalTime = function (e, n) {
                                return arguments.length
                                    ? ((this._forcing = 1),
                                    !this._dp && this._ts && (this._start = pt(be.time - (this._ts > 0 ? e / this._ts : (this.totalDuration() - e) / -this._ts))),
                                        t.prototype.totalTime.call(this, e, n),
                                        (this._forcing = 0),
                                        this)
                                    : this._tTime;
                            }),
                            (n.addLabel = function (t, e) {
                                return (this.labels[t] = jt(this, e)), this;
                            }),
                            (n.removeLabel = function (t) {
                                return delete this.labels[t], this;
                            }),
                            (n.addPause = function (t, e, n) {
                                var r = je.delayedCall(0, e || et, n);
                                return (r.data = "isPause"), (this._hasPause = 1), Ft(this, r, jt(this, t));
                            }),
                            (n.removePause = function (t) {
                                var e = this._first;
                                for (t = jt(this, t); e; ) e._start === t && "isPause" === e.data && At(e), (e = e._next);
                            }),
                            (n.killTweensOf = function (t, e, n) {
                                for (var r = this.getTweensOf(t, n), i = r.length; i--; ) Fe !== r[i] && r[i].kill(t, e);
                                return this;
                            }),
                            (n.getTweensOf = function (t, e) {
                                for (var n, r = [], i = Kt(t), o = this._first, a = D(e); o; )
                                    o instanceof je
                                        ? mt(o._targets, i) && (a ? (!Fe || (o._initted && o._ts)) && o.globalTime(0) <= e && o.globalTime(o.totalDuration()) > e : !e || o.isActive()) && r.push(o)
                                        : (n = o.getTweensOf(i, e)).length && r.push.apply(r, n),
                                        (o = o._next);
                                return r;
                            }),
                            (n.tweenTo = function (t, e) {
                                e = e || {};
                                var n,
                                    r = this,
                                    i = jt(r, t),
                                    o = e,
                                    a = o.startAt,
                                    s = o.onStart,
                                    l = o.onStartParams,
                                    c = o.immediateRender,
                                    u = je.to(
                                        r,
                                        _t(
                                            {
                                                ease: e.ease || "none",
                                                lazy: !1,
                                                immediateRender: !1,
                                                time: i,
                                                overwrite: "auto",
                                                duration: e.duration || Math.abs((i - (a && "time" in a ? a.time : r._time)) / r.timeScale()) || T,
                                                onStart: function () {
                                                    if ((r.pause(), !n)) {
                                                        var t = e.duration || Math.abs((i - (a && "time" in a ? a.time : r._time)) / r.timeScale());
                                                        u._dur !== t && Ht(u, t, 0, 1).render(u._time, !0, !0), (n = 1);
                                                    }
                                                    s && s.apply(u, l || []);
                                                },
                                            },
                                            e
                                        )
                                    );
                                return c ? u.render(0) : u;
                            }),
                            (n.tweenFromTo = function (t, e, n) {
                                return this.tweenTo(e, _t({ startAt: { time: jt(this, t) } }, n));
                            }),
                            (n.recent = function () {
                                return this._recent;
                            }),
                            (n.nextLabel = function (t) {
                                return void 0 === t && (t = this._time), le(this, jt(this, t));
                            }),
                            (n.previousLabel = function (t) {
                                return void 0 === t && (t = this._time), le(this, jt(this, t), 1);
                            }),
                            (n.currentLabel = function (t) {
                                return arguments.length ? this.seek(t, !0) : this.previousLabel(this._time + T);
                            }),
                            (n.shiftChildren = function (t, e, n) {
                                void 0 === n && (n = 0);
                                for (var r, i = this._first, o = this.labels; i; ) i._start >= n && ((i._start += t), (i._end += t)), (i = i._next);
                                if (e) for (r in o) o[r] >= n && (o[r] += t);
                                return Lt(this);
                            }),
                            (n.invalidate = function () {
                                var e = this._first;
                                for (this._lock = 0; e; ) e.invalidate(), (e = e._next);
                                return t.prototype.invalidate.call(this);
                            }),
                            (n.clear = function (t) {
                                void 0 === t && (t = !0);
                                for (var e, n = this._first; n; ) (e = n._next), this.remove(n), (n = e);
                                return this._dp && (this._time = this._tTime = this._pTime = 0), t && (this.labels = {}), Lt(this);
                            }),
                            (n.totalDuration = function (t) {
                                var e,
                                    n,
                                    r,
                                    i = 0,
                                    o = this,
                                    a = o._last,
                                    s = M;
                                if (arguments.length) return o.timeScale((o._repeat < 0 ? o.duration() : o.totalDuration()) / (o.reversed() ? -t : t));
                                if (o._dirty) {
                                    for (r = o.parent; a; )
                                        (e = a._prev),
                                        a._dirty && a.totalDuration(),
                                            (n = a._start) > s && o._sort && a._ts && !o._lock ? ((o._lock = 1), (Ft(o, a, n - a._delay, 1)._lock = 0)) : (s = n),
                                        n < 0 && a._ts && ((i -= n), ((!r && !o._dp) || (r && r.smoothChildTiming)) && ((o._start += n / o._ts), (o._time -= n), (o._tTime -= n)), o.shiftChildren(-n, !1, -Infinity), (s = 0)),
                                        a._end > i && a._ts && (i = a._end),
                                            (a = e);
                                    Ht(o, o === p && o._time > i ? o._time : i, 1, 1), (o._dirty = 0);
                                }
                                return o._tDur;
                            }),
                            (e.updateRoot = function (t) {
                                if ((p._ts && (vt(p, Ot(t, p)), (x = be.frame)), be.frame >= st)) {
                                    st += w.autoSleep || 120;
                                    var e = p._first;
                                    if ((!e || !e._ts) && w.autoSleep && be._listeners.length < 2) {
                                        for (; e && !e._ts; ) e = e._next;
                                        e || be.sleep();
                                    }
                                }
                            }),
                            e
                    );
                })(ke);
                _t(Ue.prototype, { _lock: 0, _hasPause: 0, _forcing: 0 });
                var Fe,
                    Ne = function (t, e, n, r, i, o, a) {
                        var s,
                            l,
                            c,
                            u,
                            h,
                            d,
                            f,
                            p,
                            m = new an(this._pt, t, e, 0, 1, Ke, null, i),
                            g = 0,
                            v = 0;
                        for (m.b = n, m.e = r, n += "", (f = ~(r += "").indexOf("random(")) && (r = ae(r)), o && (o((p = [n, r]), t, e), (n = p[0]), (r = p[1])), l = n.match(j) || []; (s = j.exec(r)); )
                            (u = s[0]),
                                (h = r.substring(g, s.index)),
                                c ? (c = (c + 1) % 5) : "rgba(" === h.substr(-5) && (c = 1),
                            u !== l[v++] &&
                            ((d = parseFloat(l[v - 1]) || 0),
                                (m._pt = { _next: m._pt, p: h || 1 === v ? h : ",", s: d, c: "=" === u.charAt(1) ? parseFloat(u.substr(2)) * ("-" === u.charAt(0) ? -1 : 1) : parseFloat(u) - d, m: c && c < 4 ? Math.round : 0 }),
                                (g = j.lastIndex));
                        return (m.c = g < r.length ? r.substring(g, r.length) : ""), (m.fp = a), (q.test(r) || f) && (m.e = 0), (this._pt = m), m;
                    },
                    ze = function (t, e, n, r, i, o, a, s, l) {
                        O(r) && (r = r(i || 0, t, o));
                        var c,
                            u = t[e],
                            h = "get" !== n ? n : O(u) ? (l ? t[e.indexOf("set") || !O(t["get" + e.substr(3)]) ? e : "get" + e.substr(3)](l) : t[e]()) : u,
                            d = O(u) ? (l ? Ye : Xe) : qe;
                        if ((I(r) && (~r.indexOf("random(") && (r = ae(r)), "=" === r.charAt(1) && ((c = parseFloat(h) + parseFloat(r.substr(2)) * ("-" === r.charAt(0) ? -1 : 1) + (Zt(h) || 0)) || 0 === c) && (r = c)), h !== r))
                            return isNaN(h * r) || "" === r
                                ? (!u && !(e in t) && Q(e, r), Ne.call(this, t, e, h, r, d, s || w.stringFilter, l))
                                : ((c = new an(this._pt, t, e, +h || 0, r - (h || 0), "boolean" == typeof u ? Qe : $e, 0, d)), l && (c.fp = l), a && c.modifier(a, this, t), (this._pt = c));
                    },
                    Be = function (t, e, n, r, i, o) {
                        var a, s, l, c;
                        if (
                            ot[t] &&
                            !1 !==
                            (a = new ot[t]()).init(
                                i,
                                a.rawVars
                                    ? e[t]
                                    : (function (t, e, n, r, i) {
                                        if ((O(t) && (t = He(t, i, e, n, r)), !U(t) || (t.style && t.nodeType) || G(t) || B(t))) return I(t) ? He(t, i, e, n, r) : t;
                                        var o,
                                            a = {};
                                        for (o in t) a[o] = He(t[o], i, e, n, r);
                                        return a;
                                    })(e[t], r, i, o, n),
                                n,
                                r,
                                o
                            ) &&
                            ((n._pt = s = new an(n._pt, i, t, 0, 1, a.render, a, 0, a.priority)), n !== _)
                        )
                            for (l = n._ptLookup[n._targets.indexOf(i)], c = a._props.length; c--; ) l[a._props[c]] = s;
                        return a;
                    },
                    Ge = function t(e, n) {
                        var r,
                            i,
                            o,
                            a,
                            s,
                            l,
                            c,
                            u,
                            h,
                            d,
                            m,
                            g,
                            v,
                            y = e.vars,
                            x = y.ease,
                            _ = y.startAt,
                            b = y.immediateRender,
                            w = y.lazy,
                            M = y.onUpdate,
                            E = y.onUpdateParams,
                            A = y.callbackScope,
                            L = y.runBackwards,
                            C = y.yoyoEase,
                            R = y.keyframes,
                            P = y.autoRevert,
                            I = e._dur,
                            O = e._startAt,
                            D = e._targets,
                            k = e.parent,
                            U = k && "nested" === k.data ? k.parent._targets : D,
                            N = "auto" === e._overwrite && !f,
                            z = e.timeline;
                        if (
                            (z && (!R || !x) && (x = "none"),
                                (e._ease = Ce(x, S.ease)),
                                (e._yEase = C ? Ae(Ce(!0 === C ? x : C, S.ease)) : 0),
                            C && e._yoyo && !e._repeat && ((C = e._yEase), (e._yEase = e._ease), (e._ease = C)),
                                (e._from = !z && !!y.runBackwards),
                                !z)
                        ) {
                            if (((g = (u = D[0] ? ht(D[0]).harness : 0) && y[u.prop]), (r = Mt(y, nt)), O && O.render(-1, !0).kill(), _))
                                if (
                                    (At((e._startAt = je.set(D, _t({ data: "isStart", overwrite: !1, parent: k, immediateRender: !0, lazy: F(w), startAt: null, delay: 0, onUpdate: M, onUpdateParams: E, callbackScope: A, stagger: 0 }, _)))),
                                    n < 0 && !b && !P && e._startAt.render(-1, !0),
                                        b)
                                ) {
                                    if ((n > 0 && !P && (e._startAt = 0), I && n <= 0)) return void (n && (e._zTime = n));
                                } else !1 === P && (e._startAt = 0);
                            else if (L && I)
                                if (O) !P && (e._startAt = 0);
                                else if (
                                    (n && (b = !1),
                                        (o = _t({ overwrite: !1, data: "isFromStart", lazy: b && F(w), immediateRender: b, stagger: 0, parent: k }, r)),
                                    g && (o[u.prop] = g),
                                        At((e._startAt = je.set(D, o))),
                                    n < 0 && e._startAt.render(-1, !0),
                                        b)
                                ) {
                                    if (!n) return;
                                } else t(e._startAt, T);
                            for (e._pt = 0, w = (I && F(w)) || (w && !I), i = 0; i < D.length; i++) {
                                if (
                                    ((c = (s = D[i])._gsap || ut(D)[i]._gsap),
                                        (e._ptLookup[i] = d = {}),
                                    it[c.id] && rt.length && gt(),
                                        (m = U === D ? i : U.indexOf(s)),
                                    u &&
                                    !1 !== (h = new u()).init(s, g || r, e, m, U) &&
                                    ((e._pt = a = new an(e._pt, s, h.name, 0, 1, h.render, h, 0, h.priority)),
                                        h._props.forEach(function (t) {
                                            d[t] = a;
                                        }),
                                    h.priority && (l = 1)),
                                    !u || g)
                                )
                                    for (o in r) ot[o] && (h = Be(o, r, e, m, s, U)) ? h.priority && (l = 1) : (d[o] = a = ze.call(e, s, o, "get", r[o], m, U, 0, y.stringFilter));
                                e._op && e._op[i] && e.kill(s, e._op[i]), N && e._pt && ((Fe = e), p.killTweensOf(s, d, e.globalTime(0)), (v = !e.parent), (Fe = 0)), e._pt && w && (it[c.id] = 1);
                            }
                            l && on(e), e._onInit && e._onInit(e);
                        }
                        (e._onUpdate = M), (e._initted = (!e._op || e._pt) && !v);
                    },
                    He = function (t, e, n, r, i) {
                        return O(t) ? t.call(e, n, r, i) : I(t) && ~t.indexOf("random(") ? ae(t) : t;
                    },
                    Ve = ct + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",
                    We = (Ve + ",id,stagger,delay,duration,paused,scrollTrigger").split(","),
                    je = (function (t) {
                        function e(e, n, r, i) {
                            var o;
                            "number" == typeof n && ((r.duration = n), (n = r), (r = null));
                            var a,
                                s,
                                l,
                                c,
                                u,
                                d,
                                m,
                                g,
                                v = (o = t.call(this, i ? n : Tt(n)) || this).vars,
                                y = v.duration,
                                x = v.delay,
                                _ = v.immediateRender,
                                b = v.stagger,
                                S = v.overwrite,
                                M = v.keyframes,
                                T = v.defaults,
                                E = v.scrollTrigger,
                                A = v.yoyoEase,
                                L = n.parent || p,
                                C = (G(e) || B(e) ? D(e[0]) : "length" in n) ? [e] : Kt(e);
                            if (((o._targets = C.length ? ut(C) : K("GSAP target " + e + " not found. https://greensock.com", !w.nullTargetWarn) || []), (o._ptLookup = []), (o._overwrite = S), M || b || z(y) || z(x))) {
                                if (((n = o.vars), (a = o.timeline = new Ue({ data: "nested", defaults: T || {} })).kill(), (a.parent = a._dp = h(o)), (a._start = 0), M))
                                    _t(a.vars.defaults, { ease: "none" }),
                                        b
                                            ? C.forEach(function (t, e) {
                                                return M.forEach(function (n, r) {
                                                    return a.to(t, n, r ? ">" : e * b);
                                                });
                                            })
                                            : M.forEach(function (t) {
                                                return a.to(C, t, ">");
                                            });
                                else {
                                    if (((c = C.length), (m = b ? ee(b) : et), U(b))) for (u in b) ~Ve.indexOf(u) && (g || (g = {}), (g[u] = b[u]));
                                    for (s = 0; s < c; s++) {
                                        for (u in ((l = {}), n)) We.indexOf(u) < 0 && (l[u] = n[u]);
                                        (l.stagger = 0),
                                        A && (l.yoyoEase = A),
                                        g && wt(l, g),
                                            (d = C[s]),
                                            (l.duration = +He(y, h(o), s, d, C)),
                                            (l.delay = (+He(x, h(o), s, d, C) || 0) - o._delay),
                                        !b && 1 === c && l.delay && ((o._delay = x = l.delay), (o._start += x), (l.delay = 0)),
                                            a.to(d, l, m(s, d, C));
                                    }
                                    a.duration() ? (y = x = 0) : (o.timeline = 0);
                                }
                                y || o.duration((y = a.duration()));
                            } else o.timeline = 0;
                            return (
                                !0 !== S || f || ((Fe = h(o)), p.killTweensOf(C), (Fe = 0)),
                                    Ft(L, h(o), r),
                                n.reversed && o.reverse(),
                                n.paused && o.paused(!0),
                                (_ || (!y && !M && o._start === pt(L._time) && F(_) && Rt(h(o)) && "nested" !== L.data)) && ((o._tTime = -1e-8), o.render(Math.max(0, -x))),
                                E && Nt(h(o), E),
                                    o
                            );
                        }
                        d(e, t);
                        var n = e.prototype;
                        return (
                            (n.render = function (t, e, n) {
                                var r,
                                    i,
                                    o,
                                    a,
                                    s,
                                    l,
                                    c,
                                    u,
                                    h,
                                    d = this._time,
                                    f = this._tDur,
                                    p = this._dur,
                                    m = t > f - T && t >= 0 ? f : t < T ? 0 : t;
                                if (p) {
                                    if (m !== this._tTime || !t || n || (!this._initted && this._tTime) || (this._startAt && this._zTime < 0 != t < 0)) {
                                        if (((r = m), (u = this.timeline), this._repeat)) {
                                            if (((a = p + this._rDelay), this._repeat < -1 && t < 0)) return this.totalTime(100 * a + t, e, n);
                                            if (
                                                ((r = pt(m % a)),
                                                    m === f ? ((o = this._repeat), (r = p)) : ((o = ~~(m / a)) && o === m / a && ((r = p), o--), r > p && (r = p)),
                                                (l = this._yoyo && 1 & o) && ((h = this._yEase), (r = p - r)),
                                                    (s = It(this._tTime, a)),
                                                r === d && !n && this._initted)
                                            )
                                                return this;
                                            o !== s && (u && this._yEase && Le(u, l), !this.vars.repeatRefresh || l || this._lock || ((this._lock = n = 1), (this.render(pt(a * o), !0).invalidate()._lock = 0)));
                                        }
                                        if (!this._initted) {
                                            if (zt(this, t < 0 ? t : r, n, e)) return (this._tTime = 0), this;
                                            if (p !== this._dur) return this.render(t, e, n);
                                        }
                                        if (
                                            ((this._tTime = m),
                                                (this._time = r),
                                            !this._act && this._ts && ((this._act = 1), (this._lazy = 0)),
                                                (this.ratio = c = (h || this._ease)(r / p)),
                                            this._from && (this.ratio = c = 1 - c),
                                            r && !d && !e && (ce(this, "onStart"), this._tTime !== m))
                                        )
                                            return this;
                                        for (i = this._pt; i; ) i.r(c, i.d), (i = i._next);
                                        (u && u.render(t < 0 ? t : !r && l ? -1e-8 : u._dur * c, e, n)) || (this._startAt && (this._zTime = t)),
                                        this._onUpdate && !e && (t < 0 && this._startAt && this._startAt.render(t, !0, n), ce(this, "onUpdate")),
                                        this._repeat && o !== s && this.vars.onRepeat && !e && this.parent && ce(this, "onRepeat"),
                                        (m !== this._tDur && m) ||
                                        this._tTime !== m ||
                                        (t < 0 && this._startAt && !this._onUpdate && this._startAt.render(t, !0, !0),
                                        (t || !p) && ((m === this._tDur && this._ts > 0) || (!m && this._ts < 0)) && At(this, 1),
                                        e || (t < 0 && !d) || (!m && !d) || (ce(this, m === f ? "onComplete" : "onReverseComplete", !0), this._prom && !(m < f && this.timeScale() > 0) && this._prom()));
                                    }
                                } else
                                    !(function (t, e, n, r) {
                                        var i,
                                            o,
                                            a,
                                            s = t.ratio,
                                            l = e < 0 || (!e && ((!t._start && Bt(t) && (t._initted || !Gt(t))) || ((t._ts < 0 || t._dp._ts < 0) && !Gt(t)))) ? 0 : 1,
                                            c = t._rDelay,
                                            u = 0;
                                        if (
                                            (c &&
                                            t._repeat &&
                                            ((u = Yt(0, t._tDur, e)), (o = It(u, c)), (a = It(t._tTime, c)), t._yoyo && 1 & o && (l = 1 - l), o !== a && ((s = 1 - l), t.vars.repeatRefresh && t._initted && t.invalidate())),
                                            l !== s || r || t._zTime === T || (!e && t._zTime))
                                        ) {
                                            if (!t._initted && zt(t, e, r, n)) return;
                                            for (a = t._zTime, t._zTime = e || (n ? T : 0), n || (n = e && !a), t.ratio = l, t._from && (l = 1 - l), t._time = 0, t._tTime = u, i = t._pt; i; ) i.r(l, i.d), (i = i._next);
                                            t._startAt && e < 0 && t._startAt.render(e, !0, !0),
                                            t._onUpdate && !n && ce(t, "onUpdate"),
                                            u && t._repeat && !n && t.parent && ce(t, "onRepeat"),
                                            (e >= t._tDur || e < 0) && t.ratio === l && (l && At(t, 1), n || (ce(t, l ? "onComplete" : "onReverseComplete", !0), t._prom && t._prom()));
                                        } else t._zTime || (t._zTime = e);
                                    })(this, t, e, n);
                                return this;
                            }),
                                (n.targets = function () {
                                    return this._targets;
                                }),
                                (n.invalidate = function () {
                                    return (this._pt = this._op = this._startAt = this._onUpdate = this._lazy = this.ratio = 0), (this._ptLookup = []), this.timeline && this.timeline.invalidate(), t.prototype.invalidate.call(this);
                                }),
                                (n.kill = function (t, e) {
                                    if ((void 0 === e && (e = "all"), !(t || (e && "all" !== e)))) return (this._lazy = this._pt = 0), this.parent ? ue(this) : this;
                                    if (this.timeline) {
                                        var n = this.timeline.totalDuration();
                                        return (
                                            this.timeline.killTweensOf(t, e, Fe && !0 !== Fe.vars.overwrite)._first || ue(this), this.parent && n !== this.timeline.totalDuration() && Ht(this, (this._dur * this.timeline._tDur) / n, 0, 1), this
                                        );
                                    }
                                    var r,
                                        i,
                                        o,
                                        a,
                                        s,
                                        l,
                                        c,
                                        u = this._targets,
                                        h = t ? Kt(t) : u,
                                        d = this._ptLookup,
                                        f = this._pt;
                                    if (
                                        (!e || "all" === e) &&
                                        (function (t, e) {
                                            for (var n = t.length, r = n === e.length; r && n-- && t[n] === e[n]; );
                                            return n < 0;
                                        })(u, h)
                                    )
                                        return "all" === e && (this._pt = 0), ue(this);
                                    for (
                                        r = this._op = this._op || [],
                                        "all" !== e &&
                                        (I(e) &&
                                        ((s = {}),
                                            ft(e, function (t) {
                                                return (s[t] = 1);
                                            }),
                                            (e = s)),
                                            (e = (function (t, e) {
                                                var n,
                                                    r,
                                                    i,
                                                    o,
                                                    a = t[0] ? ht(t[0]).harness : 0,
                                                    s = a && a.aliases;
                                                if (!s) return e;
                                                for (r in ((n = wt({}, e)), s)) if ((r in n)) for (i = (o = s[r].split(",")).length; i--; ) n[o[i]] = n[r];
                                                return n;
                                            })(u, e))),
                                            c = u.length;
                                        c--;

                                    )
                                        if (~h.indexOf(u[c]))
                                            for (s in ((i = d[c]), "all" === e ? ((r[c] = e), (a = i), (o = {})) : ((o = r[c] = r[c] || {}), (a = e)), a))
                                                (l = i && i[s]) && (("kill" in l.d && !0 !== l.d.kill(s)) || Et(this, l, "_pt"), delete i[s]), "all" !== o && (o[s] = 1);
                                    return this._initted && !this._pt && f && ue(this), this;
                                }),
                                (e.to = function (t, n) {
                                    return new e(t, n, arguments[2]);
                                }),
                                (e.from = function (t, e) {
                                    return qt(1, arguments);
                                }),
                                (e.delayedCall = function (t, n, r, i) {
                                    return new e(n, 0, { immediateRender: !1, lazy: !1, overwrite: !1, delay: t, onComplete: n, onReverseComplete: n, onCompleteParams: r, onReverseCompleteParams: r, callbackScope: i });
                                }),
                                (e.fromTo = function (t, e, n) {
                                    return qt(2, arguments);
                                }),
                                (e.set = function (t, n) {
                                    return (n.duration = 0), n.repeatDelay || (n.repeat = 0), new e(t, n);
                                }),
                                (e.killTweensOf = function (t, e, n) {
                                    return p.killTweensOf(t, e, n);
                                }),
                                e
                        );
                    })(ke);
                _t(je.prototype, { _targets: [], _lazy: 0, _startAt: 0, _op: 0, _onInit: 0 }),
                    ft("staggerTo,staggerFrom,staggerFromTo", function (t) {
                        je[t] = function () {
                            var e = new Ue(),
                                n = Jt.call(arguments, 0);
                            return n.splice("staggerFromTo" === t ? 5 : 4, 0, 0), e[t].apply(e, n);
                        };
                    });
                var qe = function (t, e, n) {
                        return (t[e] = n);
                    },
                    Xe = function (t, e, n) {
                        return t[e](n);
                    },
                    Ye = function (t, e, n, r) {
                        return t[e](r.fp, n);
                    },
                    Ze = function (t, e, n) {
                        return t.setAttribute(e, n);
                    },
                    Je = function (t, e) {
                        return O(t[e]) ? Xe : k(t[e]) && t.setAttribute ? Ze : qe;
                    },
                    $e = function (t, e) {
                        return e.set(e.t, e.p, Math.round(1e6 * (e.s + e.c * t)) / 1e6, e);
                    },
                    Qe = function (t, e) {
                        return e.set(e.t, e.p, !!(e.s + e.c * t), e);
                    },
                    Ke = function (t, e) {
                        var n = e._pt,
                            r = "";
                        if (!t && e.b) r = e.b;
                        else if (1 === t && e.e) r = e.e;
                        else {
                            for (; n; ) (r = n.p + (n.m ? n.m(n.s + n.c * t) : Math.round(1e4 * (n.s + n.c * t)) / 1e4) + r), (n = n._next);
                            r += e.c;
                        }
                        e.set(e.t, e.p, r, e);
                    },
                    tn = function (t, e) {
                        for (var n = e._pt; n; ) n.r(t, n.d), (n = n._next);
                    },
                    en = function (t, e, n, r) {
                        for (var i, o = this._pt; o; ) (i = o._next), o.p === r && o.modifier(t, e, n), (o = i);
                    },
                    nn = function (t) {
                        for (var e, n, r = this._pt; r; ) (n = r._next), (r.p === t && !r.op) || r.op === t ? Et(this, r, "_pt") : r.dep || (e = 1), (r = n);
                        return !e;
                    },
                    rn = function (t, e, n, r) {
                        r.mSet(t, e, r.m.call(r.tween, n, r.mt), r);
                    },
                    on = function (t) {
                        for (var e, n, r, i, o = t._pt; o; ) {
                            for (e = o._next, n = r; n && n.pr > o.pr; ) n = n._next;
                            (o._prev = n ? n._prev : i) ? (o._prev._next = o) : (r = o), (o._next = n) ? (n._prev = o) : (i = o), (o = e);
                        }
                        t._pt = r;
                    },
                    an = (function () {
                        function t(t, e, n, r, i, o, a, s, l) {
                            (this.t = e), (this.s = r), (this.c = i), (this.p = n), (this.r = o || $e), (this.d = a || this), (this.set = s || qe), (this.pr = l || 0), (this._next = t), t && (t._prev = this);
                        }
                        return (
                            (t.prototype.modifier = function (t, e, n) {
                                (this.mSet = this.mSet || this.set), (this.set = rn), (this.m = t), (this.mt = n), (this.tween = e);
                            }),
                                t
                        );
                    })();
                ft(
                    ct +
                    "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",
                    function (t) {
                        return (nt[t] = 1);
                    }
                ),
                    (Z.TweenMax = Z.TweenLite = je),
                    (Z.TimelineLite = Z.TimelineMax = Ue),
                    (p = new Ue({ sortChildren: !1, defaults: S, autoRemoveChildren: !0, id: "root", smoothChildTiming: !0 })),
                    (w.stringFilter = _e);
                var sn = {
                    registerPlugin: function () {
                        for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++) e[n] = arguments[n];
                        e.forEach(function (t) {
                            return he(t);
                        });
                    },
                    timeline: function (t) {
                        return new Ue(t);
                    },
                    getTweensOf: function (t, e) {
                        return p.getTweensOf(t, e);
                    },
                    getProperty: function (t, e, n, r) {
                        I(t) && (t = Kt(t)[0]);
                        var i = ht(t || {}).get,
                            o = n ? xt : yt;
                        return (
                            "native" === n && (n = ""),
                                t
                                    ? e
                                        ? o(((ot[e] && ot[e].get) || i)(t, e, n, r))
                                        : function (e, n, r) {
                                            return o(((ot[e] && ot[e].get) || i)(t, e, n, r));
                                        }
                                    : t
                        );
                    },
                    quickSetter: function (t, e, n) {
                        if ((t = Kt(t)).length > 1) {
                            var r = t.map(function (t) {
                                    return un.quickSetter(t, e, n);
                                }),
                                i = r.length;
                            return function (t) {
                                for (var e = i; e--; ) r[e](t);
                            };
                        }
                        t = t[0] || {};
                        var o = ot[e],
                            a = ht(t),
                            s = (a.harness && (a.harness.aliases || {})[e]) || e,
                            l = o
                                ? function (e) {
                                    var r = new o();
                                    (_._pt = 0), r.init(t, n ? e + n : e, _, 0, [t]), r.render(1, r), _._pt && tn(1, _);
                                }
                                : a.set(t, s);
                        return o
                            ? l
                            : function (e) {
                                return l(t, s, n ? e + n : e, a, 1);
                            };
                    },
                    isTweening: function (t) {
                        return p.getTweensOf(t, !0).length > 0;
                    },
                    defaults: function (t) {
                        return t && t.ease && (t.ease = Ce(t.ease, S.ease)), St(S, t || {});
                    },
                    config: function (t) {
                        return St(w, t || {});
                    },
                    registerEffect: function (t) {
                        var e = t.name,
                            n = t.effect,
                            r = t.plugins,
                            i = t.defaults,
                            o = t.extendTimeline;
                        (r || "").split(",").forEach(function (t) {
                            return t && !ot[t] && !Z[t] && K(e + " effect requires " + t + " plugin.");
                        }),
                            (at[e] = function (t, e, r) {
                                return n(Kt(t), _t(e || {}, i), r);
                            }),
                        o &&
                        (Ue.prototype[e] = function (t, n, r) {
                            return this.add(at[e](t, U(n) ? n : (r = n) && {}, this), r);
                        });
                    },
                    registerEase: function (t, e) {
                        Se[t] = Ce(e);
                    },
                    parseEase: function (t, e) {
                        return arguments.length ? Ce(t, e) : Se;
                    },
                    getById: function (t) {
                        return p.getById(t);
                    },
                    exportRoot: function (t, e) {
                        void 0 === t && (t = {});
                        var n,
                            r,
                            i = new Ue(t);
                        for (i.smoothChildTiming = F(t.smoothChildTiming), p.remove(i), i._dp = 0, i._time = i._tTime = p._time, n = p._first; n; )
                            (r = n._next), (!e && !n._dur && n instanceof je && n.vars.onComplete === n._targets[0]) || Ft(i, n, n._start - n._delay), (n = r);
                        return Ft(p, i, 0), i;
                    },
                    utils: {
                        wrap: function t(e, n, r) {
                            var i = n - e;
                            return G(e)
                                ? oe(e, t(0, e.length), n)
                                : Xt(r, function (t) {
                                    return ((i + ((t - e) % i)) % i) + e;
                                });
                        },
                        wrapYoyo: function t(e, n, r) {
                            var i = n - e,
                                o = 2 * i;
                            return G(e)
                                ? oe(e, t(0, e.length - 1), n)
                                : Xt(r, function (t) {
                                    return e + ((t = (o + ((t - e) % o)) % o || 0) > i ? o - t : t);
                                });
                        },
                        distribute: ee,
                        random: ie,
                        snap: re,
                        normalize: function (t, e, n) {
                            return se(t, e, 0, 1, n);
                        },
                        getUnit: Zt,
                        clamp: function (t, e, n) {
                            return Xt(n, function (n) {
                                return Yt(t, e, n);
                            });
                        },
                        splitColor: me,
                        toArray: Kt,
                        selector: function (t) {
                            return (
                                (t = Kt(t)[0] || K("Invalid scope") || {}),
                                    function (e) {
                                        var n = t.current || t.nativeElement || t;
                                        return Kt(e, n.querySelectorAll ? n : n === t ? K("Invalid scope") || v.createElement("div") : t);
                                    }
                            );
                        },
                        mapRange: se,
                        pipe: function () {
                            for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++) e[n] = arguments[n];
                            return function (t) {
                                return e.reduce(function (t, e) {
                                    return e(t);
                                }, t);
                            };
                        },
                        unitize: function (t, e) {
                            return function (n) {
                                return t(parseFloat(n)) + (e || Zt(n));
                            };
                        },
                        interpolate: function t(e, n, r, i) {
                            var o = isNaN(e + n)
                                ? 0
                                : function (t) {
                                    return (1 - t) * e + t * n;
                                };
                            if (!o) {
                                var a,
                                    s,
                                    l,
                                    c,
                                    u,
                                    h = I(e),
                                    d = {};
                                if ((!0 === r && (i = 1) && (r = null), h)) (e = { p: e }), (n = { p: n });
                                else if (G(e) && !G(n)) {
                                    for (l = [], c = e.length, u = c - 2, s = 1; s < c; s++) l.push(t(e[s - 1], e[s]));
                                    c--,
                                        (o = function (t) {
                                            t *= c;
                                            var e = Math.min(u, ~~t);
                                            return l[e](t - e);
                                        }),
                                        (r = n);
                                } else i || (e = wt(G(e) ? [] : {}, e));
                                if (!l) {
                                    for (a in n) ze.call(d, e, a, "get", n[a]);
                                    o = function (t) {
                                        return tn(t, d) || (h ? e.p : e);
                                    };
                                }
                            }
                            return Xt(r, o);
                        },
                        shuffle: te,
                    },
                    install: $,
                    effects: at,
                    ticker: be,
                    updateRoot: Ue.updateRoot,
                    plugins: ot,
                    globalTimeline: p,
                    core: {
                        PropTween: an,
                        globals: tt,
                        Tween: je,
                        Timeline: Ue,
                        Animation: ke,
                        getCache: ht,
                        _removeLinkedListItem: Et,
                        suppressOverwrites: function (t) {
                            return (f = t);
                        },
                    },
                };
                ft("to,from,fromTo,delayedCall,set,killTweensOf", function (t) {
                    return (sn[t] = je[t]);
                }),
                    be.add(Ue.updateRoot),
                    (_ = sn.to({}, { duration: 0 }));
                var ln = function (t, e) {
                        for (var n = t._pt; n && n.p !== e && n.op !== e && n.fp !== e; ) n = n._next;
                        return n;
                    },
                    cn = function (t, e) {
                        return {
                            name: t,
                            rawVars: 1,
                            init: function (t, n, r) {
                                r._onInit = function (t) {
                                    var r, i;
                                    if (
                                        (I(n) &&
                                        ((r = {}),
                                            ft(n, function (t) {
                                                return (r[t] = 1);
                                            }),
                                            (n = r)),
                                            e)
                                    ) {
                                        for (i in ((r = {}), n)) r[i] = e(n[i]);
                                        n = r;
                                    }
                                    !(function (t, e) {
                                        var n,
                                            r,
                                            i,
                                            o = t._targets;
                                        for (n in e) for (r = o.length; r--; ) (i = t._ptLookup[r][n]) && (i = i.d) && (i._pt && (i = ln(i, n)), i && i.modifier && i.modifier(e[n], t, o[r], n));
                                    })(t, n);
                                };
                            },
                        };
                    },
                    un =
                        sn.registerPlugin(
                            {
                                name: "attr",
                                init: function (t, e, n, r, i) {
                                    var o, a;
                                    for (o in e) (a = this.add(t, "setAttribute", (t.getAttribute(o) || 0) + "", e[o], r, i, 0, 0, o)) && (a.op = o), this._props.push(o);
                                },
                            },
                            {
                                name: "endArray",
                                init: function (t, e) {
                                    for (var n = e.length; n--; ) this.add(t, n, t[n] || 0, e[n]);
                                },
                            },
                            cn("roundProps", ne),
                            cn("modifiers"),
                            cn("snap", re)
                        ) || sn;
                (je.version = Ue.version = un.version = "3.7.1"), (y = 1), N() && we();
                Se.Power0, Se.Power1, Se.Power2, Se.Power3, Se.Power4, Se.Linear, Se.Quad, Se.Cubic, Se.Quart, Se.Quint, Se.Strong, Se.Elastic, Se.Back, Se.SteppedEase, Se.Bounce, Se.Sine, Se.Expo, Se.Circ;
                var hn,
                    dn,
                    fn,
                    pn,
                    mn,
                    gn,
                    vn,
                    yn = {},
                    xn = 180 / Math.PI,
                    _n = Math.PI / 180,
                    bn = Math.atan2,
                    wn = /([A-Z])/g,
                    Sn = /(?:left|right|width|margin|padding|x)/i,
                    Mn = /[\s,\(]\S/,
                    Tn = { autoAlpha: "opacity,visibility", scale: "scaleX,scaleY", alpha: "opacity" },
                    En = function (t, e) {
                        return e.set(e.t, e.p, Math.round(1e4 * (e.s + e.c * t)) / 1e4 + e.u, e);
                    },
                    An = function (t, e) {
                        return e.set(e.t, e.p, 1 === t ? e.e : Math.round(1e4 * (e.s + e.c * t)) / 1e4 + e.u, e);
                    },
                    Ln = function (t, e) {
                        return e.set(e.t, e.p, t ? Math.round(1e4 * (e.s + e.c * t)) / 1e4 + e.u : e.b, e);
                    },
                    Cn = function (t, e) {
                        var n = e.s + e.c * t;
                        e.set(e.t, e.p, ~~(n + (n < 0 ? -0.5 : 0.5)) + e.u, e);
                    },
                    Rn = function (t, e) {
                        return e.set(e.t, e.p, t ? e.e : e.b, e);
                    },
                    Pn = function (t, e) {
                        return e.set(e.t, e.p, 1 !== t ? e.b : e.e, e);
                    },
                    In = function (t, e, n) {
                        return (t.style[e] = n);
                    },
                    On = function (t, e, n) {
                        return t.style.setProperty(e, n);
                    },
                    Dn = function (t, e, n) {
                        return (t._gsap[e] = n);
                    },
                    kn = function (t, e, n) {
                        return (t._gsap.scaleX = t._gsap.scaleY = n);
                    },
                    Un = function (t, e, n, r, i) {
                        var o = t._gsap;
                        (o.scaleX = o.scaleY = n), o.renderTransform(i, o);
                    },
                    Fn = function (t, e, n, r, i) {
                        var o = t._gsap;
                        (o[e] = n), o.renderTransform(i, o);
                    },
                    Nn = "transform",
                    zn = Nn + "Origin",
                    Bn = function (t, e) {
                        var n = dn.createElementNS ? dn.createElementNS((e || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), t) : dn.createElement(t);
                        return n.style ? n : dn.createElement(t);
                    },
                    Gn = function t(e, n, r) {
                        var i = getComputedStyle(e);
                        return i[n] || i.getPropertyValue(n.replace(wn, "-$1").toLowerCase()) || i.getPropertyValue(n) || (!r && t(e, Vn(n) || n, 1)) || "";
                    },
                    Hn = "O,Moz,ms,Ms,Webkit".split(","),
                    Vn = function (t, e, n) {
                        var r = (e || mn).style,
                            i = 5;
                        if (t in r && !n) return t;
                        for (t = t.charAt(0).toUpperCase() + t.substr(1); i-- && !(Hn[i] + t in r); );
                        return i < 0 ? null : (3 === i ? "ms" : i >= 0 ? Hn[i] : "") + t;
                    },
                    Wn = function () {
                        "undefined" != typeof window &&
                        window.document &&
                        ((hn = window),
                            (dn = hn.document),
                            (fn = dn.documentElement),
                            (mn = Bn("div") || { style: {} }),
                            Bn("div"),
                            (Nn = Vn(Nn)),
                            (zn = Nn + "Origin"),
                            (mn.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"),
                            (vn = !!Vn("perspective")),
                            (pn = 1));
                    },
                    jn = function t(e) {
                        var n,
                            r = Bn("svg", (this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns")) || "http://www.w3.org/2000/svg"),
                            i = this.parentNode,
                            o = this.nextSibling,
                            a = this.style.cssText;
                        if ((fn.appendChild(r), r.appendChild(this), (this.style.display = "block"), e))
                            try {
                                (n = this.getBBox()), (this._gsapBBox = this.getBBox), (this.getBBox = t);
                            } catch (t) {}
                        else this._gsapBBox && (n = this._gsapBBox());
                        return i && (o ? i.insertBefore(this, o) : i.appendChild(this)), fn.removeChild(r), (this.style.cssText = a), n;
                    },
                    qn = function (t, e) {
                        for (var n = e.length; n--; ) if (t.hasAttribute(e[n])) return t.getAttribute(e[n]);
                    },
                    Xn = function (t) {
                        var e;
                        try {
                            e = t.getBBox();
                        } catch (n) {
                            e = jn.call(t, !0);
                        }
                        return (e && (e.width || e.height)) || t.getBBox === jn || (e = jn.call(t, !0)), !e || e.width || e.x || e.y ? e : { x: +qn(t, ["x", "cx", "x1"]) || 0, y: +qn(t, ["y", "cy", "y1"]) || 0, width: 0, height: 0 };
                    },
                    Yn = function (t) {
                        return !(!t.getCTM || (t.parentNode && !t.ownerSVGElement) || !Xn(t));
                    },
                    Zn = function (t, e) {
                        if (e) {
                            var n = t.style;
                            e in yn && e !== zn && (e = Nn), n.removeProperty ? (("ms" !== e.substr(0, 2) && "webkit" !== e.substr(0, 6)) || (e = "-" + e), n.removeProperty(e.replace(wn, "-$1").toLowerCase())) : n.removeAttribute(e);
                        }
                    },
                    Jn = function (t, e, n, r, i, o) {
                        var a = new an(t._pt, e, n, 0, 1, o ? Pn : Rn);
                        return (t._pt = a), (a.b = r), (a.e = i), t._props.push(n), a;
                    },
                    $n = { deg: 1, rad: 1, turn: 1 },
                    Qn = function t(e, n, r, i) {
                        var o,
                            a,
                            s,
                            l,
                            c = parseFloat(r) || 0,
                            u = (r + "").trim().substr((c + "").length) || "px",
                            h = mn.style,
                            d = Sn.test(n),
                            f = "svg" === e.tagName.toLowerCase(),
                            p = (f ? "client" : "offset") + (d ? "Width" : "Height"),
                            m = 100,
                            g = "px" === i,
                            v = "%" === i;
                        return i === u || !c || $n[i] || $n[u]
                            ? c
                            : ("px" !== u && !g && (c = t(e, n, r, "px")),
                                (l = e.getCTM && Yn(e)),
                                (!v && "%" !== u) || (!yn[n] && !~n.indexOf("adius"))
                                    ? ((h[d ? "width" : "height"] = m + (g ? u : i)),
                                        (a = ~n.indexOf("adius") || ("em" === i && e.appendChild && !f) ? e : e.parentNode),
                                    l && (a = (e.ownerSVGElement || {}).parentNode),
                                    (a && a !== dn && a.appendChild) || (a = dn.body),
                                        (s = a._gsap) && v && s.width && d && s.time === be.time
                                            ? pt((c / s.width) * m)
                                            : ((v || "%" === u) && (h.position = Gn(e, "position")),
                                            a === e && (h.position = "static"),
                                                a.appendChild(mn),
                                                (o = mn[p]),
                                                a.removeChild(mn),
                                                (h.position = "absolute"),
                                            d && v && (((s = ht(a)).time = be.time), (s.width = a[p])),
                                                pt(g ? (o * c) / m : o && c ? (m / o) * c : 0)))
                                    : ((o = l ? e.getBBox()[d ? "width" : "height"] : e[p]), pt(v ? (c / o) * m : (c / 100) * o)));
                    },
                    Kn = function (t, e, n, r) {
                        var i;
                        return (
                            pn || Wn(),
                            e in Tn && "transform" !== e && ~(e = Tn[e]).indexOf(",") && (e = e.split(",")[0]),
                                yn[e] && "transform" !== e
                                    ? ((i = ur(t, r)), (i = "transformOrigin" !== e ? i[e] : i.svg ? i.origin : hr(Gn(t, zn)) + " " + i.zOrigin + "px"))
                                    : (!(i = t.style[e]) || "auto" === i || r || ~(i + "").indexOf("calc(")) && (i = (rr[e] && rr[e](t, e, n)) || Gn(t, e) || dt(t, e) || ("opacity" === e ? 1 : 0)),
                                n && !~(i + "").trim().indexOf(" ") ? Qn(t, e, i, n) + n : i
                        );
                    },
                    tr = function (t, e, n, r) {
                        if (!n || "none" === n) {
                            var i = Vn(e, t, 1),
                                o = i && Gn(t, i, 1);
                            o && o !== n ? ((e = i), (n = o)) : "borderColor" === e && (n = Gn(t, "borderTopColor"));
                        }
                        var a,
                            s,
                            l,
                            c,
                            u,
                            h,
                            d,
                            f,
                            p,
                            m,
                            g,
                            v,
                            y = new an(this._pt, t.style, e, 0, 1, Ke),
                            x = 0,
                            _ = 0;
                        if (((y.b = n), (y.e = r), (n += ""), "auto" === (r += "") && ((t.style[e] = r), (r = Gn(t, e) || r), (t.style[e] = n)), _e((a = [n, r])), (r = a[1]), (l = (n = a[0]).match(W) || []), (r.match(W) || []).length)) {
                            for (; (s = W.exec(r)); )
                                (d = s[0]),
                                    (p = r.substring(x, s.index)),
                                    u ? (u = (u + 1) % 5) : ("rgba(" !== p.substr(-5) && "hsla(" !== p.substr(-5)) || (u = 1),
                                d !== (h = l[_++] || "") &&
                                ((c = parseFloat(h) || 0),
                                    (g = h.substr((c + "").length)),
                                (v = "=" === d.charAt(1) ? +(d.charAt(0) + "1") : 0) && (d = d.substr(2)),
                                    (f = parseFloat(d)),
                                    (m = d.substr((f + "").length)),
                                    (x = W.lastIndex - m.length),
                                m || ((m = m || w.units[e] || g), x === r.length && ((r += m), (y.e += m))),
                                g !== m && (c = Qn(t, e, h, m) || 0),
                                    (y._pt = { _next: y._pt, p: p || 1 === _ ? p : ",", s: c, c: v ? v * f : f - c, m: (u && u < 4) || "zIndex" === e ? Math.round : 0 }));
                            y.c = x < r.length ? r.substring(x, r.length) : "";
                        } else y.r = "display" === e && "none" === r ? Pn : Rn;
                        return q.test(r) && (y.e = 0), (this._pt = y), y;
                    },
                    er = { top: "0%", bottom: "100%", left: "0%", right: "100%", center: "50%" },
                    nr = function (t, e) {
                        if (e.tween && e.tween._time === e.tween._dur) {
                            var n,
                                r,
                                i,
                                o = e.t,
                                a = o.style,
                                s = e.u,
                                l = o._gsap;
                            if ("all" === s || !0 === s) (a.cssText = ""), (r = 1);
                            else for (i = (s = s.split(",")).length; --i > -1; ) (n = s[i]), yn[n] && ((r = 1), (n = "transformOrigin" === n ? zn : Nn)), Zn(o, n);
                            r && (Zn(o, Nn), l && (l.svg && o.removeAttribute("transform"), ur(o, 1), (l.uncache = 1)));
                        }
                    },
                    rr = {
                        clearProps: function (t, e, n, r, i) {
                            if ("isFromStart" !== i.data) {
                                var o = (t._pt = new an(t._pt, e, n, 0, 0, nr));
                                return (o.u = r), (o.pr = -10), (o.tween = i), t._props.push(n), 1;
                            }
                        },
                    },
                    ir = [1, 0, 0, 1, 0, 0],
                    or = {},
                    ar = function (t) {
                        return "matrix(1, 0, 0, 1, 0, 0)" === t || "none" === t || !t;
                    },
                    sr = function (t) {
                        var e = Gn(t, Nn);
                        return ar(e) ? ir : e.substr(7).match(V).map(pt);
                    },
                    lr = function (t, e) {
                        var n,
                            r,
                            i,
                            o,
                            a = t._gsap || ht(t),
                            s = t.style,
                            l = sr(t);
                        return a.svg && t.getAttribute("transform")
                            ? "1,0,0,1,0,0" === (l = [(i = t.transform.baseVal.consolidate().matrix).a, i.b, i.c, i.d, i.e, i.f]).join(",")
                                ? ir
                                : l
                            : (l !== ir ||
                            t.offsetParent ||
                            t === fn ||
                            a.svg ||
                            ((i = s.display),
                                (s.display = "block"),
                            ((n = t.parentNode) && t.offsetParent) || ((o = 1), (r = t.nextSibling), fn.appendChild(t)),
                                (l = sr(t)),
                                i ? (s.display = i) : Zn(t, "display"),
                            o && (r ? n.insertBefore(t, r) : n ? n.appendChild(t) : fn.removeChild(t))),
                                e && l.length > 6 ? [l[0], l[1], l[4], l[5], l[12], l[13]] : l);
                    },
                    cr = function (t, e, n, r, i, o) {
                        var a,
                            s,
                            l,
                            c = t._gsap,
                            u = i || lr(t, !0),
                            h = c.xOrigin || 0,
                            d = c.yOrigin || 0,
                            f = c.xOffset || 0,
                            p = c.yOffset || 0,
                            m = u[0],
                            g = u[1],
                            v = u[2],
                            y = u[3],
                            x = u[4],
                            _ = u[5],
                            b = e.split(" "),
                            w = parseFloat(b[0]) || 0,
                            S = parseFloat(b[1]) || 0;
                        n
                            ? u !== ir && (s = m * y - g * v) && ((l = w * (-g / s) + S * (m / s) - (m * _ - g * x) / s), (w = w * (y / s) + S * (-v / s) + (v * _ - y * x) / s), (S = l))
                            : ((w = (a = Xn(t)).x + (~b[0].indexOf("%") ? (w / 100) * a.width : w)), (S = a.y + (~(b[1] || b[0]).indexOf("%") ? (S / 100) * a.height : S))),
                            r || (!1 !== r && c.smooth) ? ((x = w - h), (_ = S - d), (c.xOffset = f + (x * m + _ * v) - x), (c.yOffset = p + (x * g + _ * y) - _)) : (c.xOffset = c.yOffset = 0),
                            (c.xOrigin = w),
                            (c.yOrigin = S),
                            (c.smooth = !!r),
                            (c.origin = e),
                            (c.originIsAbsolute = !!n),
                            (t.style[zn] = "0px 0px"),
                        o && (Jn(o, c, "xOrigin", h, w), Jn(o, c, "yOrigin", d, S), Jn(o, c, "xOffset", f, c.xOffset), Jn(o, c, "yOffset", p, c.yOffset)),
                            t.setAttribute("data-svg-origin", w + " " + S);
                    },
                    ur = function (t, e) {
                        var n = t._gsap || new De(t);
                        if ("x" in n && !e && !n.uncache) return n;
                        var r,
                            i,
                            o,
                            a,
                            s,
                            l,
                            c,
                            u,
                            h,
                            d,
                            f,
                            p,
                            m,
                            g,
                            v,
                            y,
                            x,
                            _,
                            b,
                            S,
                            M,
                            T,
                            E,
                            A,
                            L,
                            C,
                            R,
                            P,
                            I,
                            O,
                            D,
                            k,
                            U = t.style,
                            F = n.scaleX < 0,
                            N = "px",
                            z = "deg",
                            B = Gn(t, zn) || "0";
                        return (
                            (r = i = o = l = c = u = h = d = f = 0),
                                (a = s = 1),
                                (n.svg = !(!t.getCTM || !Yn(t))),
                                (g = lr(t, n.svg)),
                            n.svg && ((A = (!n.uncache || "0px 0px" === B) && !e && t.getAttribute("data-svg-origin")), cr(t, A || B, !!A || n.originIsAbsolute, !1 !== n.smooth, g)),
                                (p = n.xOrigin || 0),
                                (m = n.yOrigin || 0),
                            g !== ir &&
                            ((_ = g[0]),
                                (b = g[1]),
                                (S = g[2]),
                                (M = g[3]),
                                (r = T = g[4]),
                                (i = E = g[5]),
                                6 === g.length
                                    ? ((a = Math.sqrt(_ * _ + b * b)),
                                        (s = Math.sqrt(M * M + S * S)),
                                        (l = _ || b ? bn(b, _) * xn : 0),
                                    (h = S || M ? bn(S, M) * xn + l : 0) && (s *= Math.abs(Math.cos(h * _n))),
                                    n.svg && ((r -= p - (p * _ + m * S)), (i -= m - (p * b + m * M))))
                                    : ((k = g[6]),
                                        (O = g[7]),
                                        (R = g[8]),
                                        (P = g[9]),
                                        (I = g[10]),
                                        (D = g[11]),
                                        (r = g[12]),
                                        (i = g[13]),
                                        (o = g[14]),
                                        (c = (v = bn(k, I)) * xn),
                                    v &&
                                    ((A = T * (y = Math.cos(-v)) + R * (x = Math.sin(-v))),
                                        (L = E * y + P * x),
                                        (C = k * y + I * x),
                                        (R = T * -x + R * y),
                                        (P = E * -x + P * y),
                                        (I = k * -x + I * y),
                                        (D = O * -x + D * y),
                                        (T = A),
                                        (E = L),
                                        (k = C)),
                                        (u = (v = bn(-S, I)) * xn),
                                    v && ((y = Math.cos(-v)), (D = M * (x = Math.sin(-v)) + D * y), (_ = A = _ * y - R * x), (b = L = b * y - P * x), (S = C = S * y - I * x)),
                                        (l = (v = bn(b, _)) * xn),
                                    v && ((A = _ * (y = Math.cos(v)) + b * (x = Math.sin(v))), (L = T * y + E * x), (b = b * y - _ * x), (E = E * y - T * x), (_ = A), (T = L)),
                                    c && Math.abs(c) + Math.abs(l) > 359.9 && ((c = l = 0), (u = 180 - u)),
                                        (a = pt(Math.sqrt(_ * _ + b * b + S * S))),
                                        (s = pt(Math.sqrt(E * E + k * k))),
                                        (v = bn(T, E)),
                                        (h = Math.abs(v) > 2e-4 ? v * xn : 0),
                                        (f = D ? 1 / (D < 0 ? -D : D) : 0)),
                            n.svg && ((A = t.getAttribute("transform")), (n.forceCSS = t.setAttribute("transform", "") || !ar(Gn(t, Nn))), A && t.setAttribute("transform", A))),
                            Math.abs(h) > 90 && Math.abs(h) < 270 && (F ? ((a *= -1), (h += l <= 0 ? 180 : -180), (l += l <= 0 ? 180 : -180)) : ((s *= -1), (h += h <= 0 ? 180 : -180))),
                                (n.x = r - ((n.xPercent = r && (n.xPercent || (Math.round(t.offsetWidth / 2) === Math.round(-r) ? -50 : 0))) ? (t.offsetWidth * n.xPercent) / 100 : 0) + N),
                                (n.y = i - ((n.yPercent = i && (n.yPercent || (Math.round(t.offsetHeight / 2) === Math.round(-i) ? -50 : 0))) ? (t.offsetHeight * n.yPercent) / 100 : 0) + N),
                                (n.z = o + N),
                                (n.scaleX = pt(a)),
                                (n.scaleY = pt(s)),
                                (n.rotation = pt(l) + z),
                                (n.rotationX = pt(c) + z),
                                (n.rotationY = pt(u) + z),
                                (n.skewX = h + z),
                                (n.skewY = d + z),
                                (n.transformPerspective = f + N),
                            (n.zOrigin = parseFloat(B.split(" ")[2]) || 0) && (U[zn] = hr(B)),
                                (n.xOffset = n.yOffset = 0),
                                (n.force3D = w.force3D),
                                (n.renderTransform = n.svg ? yr : vn ? vr : fr),
                                (n.uncache = 0),
                                n
                        );
                    },
                    hr = function (t) {
                        return (t = t.split(" "))[0] + " " + t[1];
                    },
                    dr = function (t, e, n) {
                        var r = Zt(e);
                        return pt(parseFloat(e) + parseFloat(Qn(t, "x", n + "px", r))) + r;
                    },
                    fr = function (t, e) {
                        (e.z = "0px"), (e.rotationY = e.rotationX = "0deg"), (e.force3D = 0), vr(t, e);
                    },
                    pr = "0deg",
                    mr = "0px",
                    gr = ") ",
                    vr = function (t, e) {
                        var n = e || this,
                            r = n.xPercent,
                            i = n.yPercent,
                            o = n.x,
                            a = n.y,
                            s = n.z,
                            l = n.rotation,
                            c = n.rotationY,
                            u = n.rotationX,
                            h = n.skewX,
                            d = n.skewY,
                            f = n.scaleX,
                            p = n.scaleY,
                            m = n.transformPerspective,
                            g = n.force3D,
                            v = n.target,
                            y = n.zOrigin,
                            x = "",
                            _ = ("auto" === g && t && 1 !== t) || !0 === g;
                        if (y && (u !== pr || c !== pr)) {
                            var b,
                                w = parseFloat(c) * _n,
                                S = Math.sin(w),
                                M = Math.cos(w);
                            (w = parseFloat(u) * _n), (b = Math.cos(w)), (o = dr(v, o, S * b * -y)), (a = dr(v, a, -Math.sin(w) * -y)), (s = dr(v, s, M * b * -y + y));
                        }
                        m !== mr && (x += "perspective(" + m + gr),
                        (r || i) && (x += "translate(" + r + "%, " + i + "%) "),
                        (_ || o !== mr || a !== mr || s !== mr) && (x += s !== mr || _ ? "translate3d(" + o + ", " + a + ", " + s + ") " : "translate(" + o + ", " + a + gr),
                        l !== pr && (x += "rotate(" + l + gr),
                        c !== pr && (x += "rotateY(" + c + gr),
                        u !== pr && (x += "rotateX(" + u + gr),
                        (h === pr && d === pr) || (x += "skew(" + h + ", " + d + gr),
                        (1 === f && 1 === p) || (x += "scale(" + f + ", " + p + gr),
                            (v.style[Nn] = x || "translate(0, 0)");
                    },
                    yr = function (t, e) {
                        var n,
                            r,
                            i,
                            o,
                            a,
                            s = e || this,
                            l = s.xPercent,
                            c = s.yPercent,
                            u = s.x,
                            h = s.y,
                            d = s.rotation,
                            f = s.skewX,
                            p = s.skewY,
                            m = s.scaleX,
                            g = s.scaleY,
                            v = s.target,
                            y = s.xOrigin,
                            x = s.yOrigin,
                            _ = s.xOffset,
                            b = s.yOffset,
                            w = s.forceCSS,
                            S = parseFloat(u),
                            M = parseFloat(h);
                        (d = parseFloat(d)),
                            (f = parseFloat(f)),
                        (p = parseFloat(p)) && ((f += p = parseFloat(p)), (d += p)),
                            d || f
                                ? ((d *= _n),
                                    (f *= _n),
                                    (n = Math.cos(d) * m),
                                    (r = Math.sin(d) * m),
                                    (i = Math.sin(d - f) * -g),
                                    (o = Math.cos(d - f) * g),
                                f && ((p *= _n), (a = Math.tan(f - p)), (i *= a = Math.sqrt(1 + a * a)), (o *= a), p && ((a = Math.tan(p)), (n *= a = Math.sqrt(1 + a * a)), (r *= a))),
                                    (n = pt(n)),
                                    (r = pt(r)),
                                    (i = pt(i)),
                                    (o = pt(o)))
                                : ((n = m), (o = g), (r = i = 0)),
                        ((S && !~(u + "").indexOf("px")) || (M && !~(h + "").indexOf("px"))) && ((S = Qn(v, "x", u, "px")), (M = Qn(v, "y", h, "px"))),
                        (y || x || _ || b) && ((S = pt(S + y - (y * n + x * i) + _)), (M = pt(M + x - (y * r + x * o) + b))),
                        (l || c) && ((a = v.getBBox()), (S = pt(S + (l / 100) * a.width)), (M = pt(M + (c / 100) * a.height))),
                            (a = "matrix(" + n + "," + r + "," + i + "," + o + "," + S + "," + M + ")"),
                            v.setAttribute("transform", a),
                        w && (v.style[Nn] = a);
                    },
                    xr = function (t, e, n, r, i, o) {
                        var a,
                            s,
                            l = 360,
                            c = I(i),
                            u = parseFloat(i) * (c && ~i.indexOf("rad") ? xn : 1),
                            h = o ? u * o : u - r,
                            d = r + h + "deg";
                        return (
                            c &&
                            ("short" === (a = i.split("_")[1]) && (h %= l) !== h % 180 && (h += h < 0 ? l : -360),
                                "cw" === a && h < 0 ? (h = ((h + 36e9) % l) - ~~(h / l) * l) : "ccw" === a && h > 0 && (h = ((h - 36e9) % l) - ~~(h / l) * l)),
                                (t._pt = s = new an(t._pt, e, n, r, h, An)),
                                (s.e = d),
                                (s.u = "deg"),
                                t._props.push(n),
                                s
                        );
                    },
                    _r = function (t, e) {
                        for (var n in e) t[n] = e[n];
                        return t;
                    },
                    br = function (t, e, n) {
                        var r,
                            i,
                            o,
                            a,
                            s,
                            l,
                            c,
                            u = _r({}, n._gsap),
                            h = n.style;
                        for (i in (u.svg
                            ? ((o = n.getAttribute("transform")), n.setAttribute("transform", ""), (h[Nn] = e), (r = ur(n, 1)), Zn(n, Nn), n.setAttribute("transform", o))
                            : ((o = getComputedStyle(n)[Nn]), (h[Nn] = e), (r = ur(n, 1)), (h[Nn] = o)),
                            yn))
                            (o = u[i]) !== (a = r[i]) &&
                            "perspective,force3D,transformOrigin,svgOrigin".indexOf(i) < 0 &&
                            ((s = Zt(o) !== (c = Zt(a)) ? Qn(n, i, o, c) : parseFloat(o)), (l = parseFloat(a)), (t._pt = new an(t._pt, r, i, s, l - s, En)), (t._pt.u = c || 0), t._props.push(i));
                        _r(r, u);
                    };
                ft("padding,margin,Width,Radius", function (t, e) {
                    var n = "Top",
                        r = "Right",
                        i = "Bottom",
                        o = "Left",
                        a = (e < 3 ? [n, r, i, o] : [n + o, n + r, i + r, i + o]).map(function (n) {
                            return e < 2 ? t + n : "border" + n + t;
                        });
                    rr[e > 1 ? "border" + t : t] = function (t, e, n, r, i) {
                        var o, s;
                        if (arguments.length < 4)
                            return (
                                (o = a.map(function (e) {
                                    return Kn(t, e, n);
                                })),
                                    5 === (s = o.join(" ")).split(o[0]).length ? o[0] : s
                            );
                        (o = (r + "").split(" ")),
                            (s = {}),
                            a.forEach(function (t, e) {
                                return (s[t] = o[e] = o[e] || o[((e - 1) / 2) | 0]);
                            }),
                            t.init(e, s, i);
                    };
                });
                var wr,
                    Sr,
                    Mr,
                    Tr = {
                        name: "css",
                        register: Wn,
                        targetTest: function (t) {
                            return t.style && t.nodeType;
                        },
                        init: function (t, e, n, r, i) {
                            var o,
                                a,
                                s,
                                l,
                                c,
                                u,
                                h,
                                d,
                                f,
                                p,
                                m,
                                g,
                                v,
                                y,
                                x,
                                _,
                                b,
                                S,
                                M,
                                T = this._props,
                                E = t.style,
                                A = n.vars.startAt;
                            for (h in (pn || Wn(), e))
                                if ("autoRound" !== h && ((a = e[h]), !ot[h] || !Be(h, e, n, r, t, i)))
                                    if (((c = typeof a), (u = rr[h]), "function" === c && (c = typeof (a = a.call(n, r, t, i))), "string" === c && ~a.indexOf("random(") && (a = ae(a)), u)) u(this, t, h, a, n) && (x = 1);
                                    else if ("--" === h.substr(0, 2))
                                        (o = (getComputedStyle(t).getPropertyValue(h) + "").trim()),
                                            (a += ""),
                                            (ye.lastIndex = 0),
                                        ye.test(o) || ((d = Zt(o)), (f = Zt(a))),
                                            f ? d !== f && (o = Qn(t, h, o, f) + f) : d && (a += d),
                                            this.add(E, "setProperty", o, a, r, i, 0, 0, h),
                                            T.push(h);
                                    else if ("undefined" !== c) {
                                        if (
                                            (A && h in A ? ((o = "function" == typeof A[h] ? A[h].call(n, r, t, i) : A[h]), h in w.units && !Zt(o) && (o += w.units[h]), "=" === (o + "").charAt(1) && (o = Kn(t, h))) : (o = Kn(t, h)),
                                                (l = parseFloat(o)),
                                            (p = "string" === c && "=" === a.charAt(1) ? +(a.charAt(0) + "1") : 0) && (a = a.substr(2)),
                                                (s = parseFloat(a)),
                                            h in Tn &&
                                            ("autoAlpha" === h && (1 === l && "hidden" === Kn(t, "visibility") && s && (l = 0), Jn(this, E, "visibility", l ? "inherit" : "hidden", s ? "inherit" : "hidden", !s)),
                                            "scale" !== h && "transform" !== h && ~(h = Tn[h]).indexOf(",") && (h = h.split(",")[0])),
                                                (m = h in yn))
                                        )
                                            if (
                                                (g ||
                                                (((v = t._gsap).renderTransform && !e.parseTransform) || ur(t, e.parseTransform),
                                                    (y = !1 !== e.smoothOrigin && v.smooth),
                                                    ((g = this._pt = new an(this._pt, E, Nn, 0, 1, v.renderTransform, v, 0, -1)).dep = 1)),
                                                "scale" === h)
                                            )
                                                (this._pt = new an(this._pt, v, "scaleY", v.scaleY, (p ? p * s : s - v.scaleY) || 0)), T.push("scaleY", h), (h += "X");
                                            else {
                                                if ("transformOrigin" === h) {
                                                    (b = void 0),
                                                        (S = void 0),
                                                        (M = void 0),
                                                        (b = (_ = a).split(" ")),
                                                        (S = b[0]),
                                                        (M = b[1] || "50%"),
                                                    ("top" !== S && "bottom" !== S && "left" !== M && "right" !== M) || ((_ = S), (S = M), (M = _)),
                                                        (b[0] = er[S] || S),
                                                        (b[1] = er[M] || M),
                                                        (a = b.join(" ")),
                                                        v.svg ? cr(t, a, 0, y, 0, this) : ((f = parseFloat(a.split(" ")[2]) || 0) !== v.zOrigin && Jn(this, v, "zOrigin", v.zOrigin, f), Jn(this, E, h, hr(o), hr(a)));
                                                    continue;
                                                }
                                                if ("svgOrigin" === h) {
                                                    cr(t, a, 1, y, 0, this);
                                                    continue;
                                                }
                                                if (h in or) {
                                                    xr(this, v, h, l, a, p);
                                                    continue;
                                                }
                                                if ("smoothOrigin" === h) {
                                                    Jn(this, v, "smooth", v.smooth, a);
                                                    continue;
                                                }
                                                if ("force3D" === h) {
                                                    v[h] = a;
                                                    continue;
                                                }
                                                if ("transform" === h) {
                                                    br(this, a, t);
                                                    continue;
                                                }
                                            }
                                        else h in E || (h = Vn(h) || h);
                                        if (m || ((s || 0 === s) && (l || 0 === l) && !Mn.test(a) && h in E))
                                            s || (s = 0),
                                            (d = (o + "").substr((l + "").length)) !== (f = Zt(a) || (h in w.units ? w.units[h] : d)) && (l = Qn(t, h, o, f)),
                                                (this._pt = new an(this._pt, m ? v : E, h, l, p ? p * s : s - l, m || ("px" !== f && "zIndex" !== h) || !1 === e.autoRound ? En : Cn)),
                                                (this._pt.u = f || 0),
                                            d !== f && ((this._pt.b = o), (this._pt.r = Ln));
                                        else if (h in E) tr.call(this, t, h, o, a);
                                        else {
                                            if (!(h in t)) {
                                                Q(h, a);
                                                continue;
                                            }
                                            this.add(t, h, o || t[h], a, r, i);
                                        }
                                        T.push(h);
                                    }
                            x && on(this);
                        },
                        get: Kn,
                        aliases: Tn,
                        getSetter: function (t, e, n) {
                            var r = Tn[e];
                            return (
                                r && r.indexOf(",") < 0 && (e = r),
                                    e in yn && e !== zn && (t._gsap.x || Kn(t, "x")) ? (n && gn === n ? ("scale" === e ? kn : Dn) : (gn = n || {}) && ("scale" === e ? Un : Fn)) : t.style && !k(t.style[e]) ? In : ~e.indexOf("-") ? On : Je(t, e)
                            );
                        },
                        core: { _removeProperty: Zn, _getMatrix: lr },
                    };
                (un.utils.checkPrefix = Vn),
                    (Mr = ft((wr = "x,y,z,scale,scaleX,scaleY,xPercent,yPercent") + "," + (Sr = "rotation,rotationX,rotationY,skewX,skewY") + ",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", function (t) {
                        yn[t] = 1;
                    })),
                    ft(Sr, function (t) {
                        (w.units[t] = "deg"), (or[t] = 1);
                    }),
                    (Tn[Mr[13]] = wr + "," + Sr),
                    ft("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY", function (t) {
                        var e = t.split(":");
                        Tn[e[1]] = Mr[e[0]];
                    }),
                    ft("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (t) {
                        w.units[t] = "px";
                    }),
                    un.registerPlugin(Tr);
                var Er = un.registerPlugin(Tr) || un;
                Er.core.Tween, n(4747), n(6977), n(7941), n(7042), n(8309), n(1038);
                const Ar = 100,
                    Lr = 301,
                    Cr = 302,
                    Rr = 303,
                    Pr = 304,
                    Ir = 306,
                    Or = 307,
                    Dr = 1e3,
                    kr = 1001,
                    Ur = 1002,
                    Fr = 1003,
                    Nr = 1004,
                    zr = 1005,
                    Br = 1006,
                    Gr = 1008,
                    Hr = 1009,
                    Vr = 1012,
                    Wr = 1014,
                    jr = 1015,
                    qr = 1016,
                    Xr = 1020,
                    Yr = 1022,
                    Zr = 1023,
                    Jr = 1026,
                    $r = 1027,
                    Qr = 2300,
                    Kr = 2301,
                    ti = 2302,
                    ei = 2400,
                    ni = 2401,
                    ri = 2402,
                    ii = 2500,
                    oi = 3e3,
                    ai = 3001,
                    si = 3007,
                    li = 3002,
                    ci = 7680,
                    ui = 35044,
                    hi = 35048,
                    di = "300 es";
                class fi {
                    addEventListener(t, e) {
                        void 0 === this._listeners && (this._listeners = {});
                        const n = this._listeners;
                        void 0 === n[t] && (n[t] = []), -1 === n[t].indexOf(e) && n[t].push(e);
                    }
                    hasEventListener(t, e) {
                        if (void 0 === this._listeners) return !1;
                        const n = this._listeners;
                        return void 0 !== n[t] && -1 !== n[t].indexOf(e);
                    }
                    removeEventListener(t, e) {
                        if (void 0 === this._listeners) return;
                        const n = this._listeners[t];
                        if (void 0 !== n) {
                            const t = n.indexOf(e);
                            -1 !== t && n.splice(t, 1);
                        }
                    }
                    dispatchEvent(t) {
                        if (void 0 === this._listeners) return;
                        const e = this._listeners[t.type];
                        if (void 0 !== e) {
                            t.target = this;
                            const n = e.slice(0);
                            for (let e = 0, r = n.length; e < r; e++) n[e].call(this, t);
                            t.target = null;
                        }
                    }
                }
                const pi = [];
                for (let t = 0; t < 256; t++) pi[t] = (t < 16 ? "0" : "") + t.toString(16);
                let mi = 1234567;
                const gi = Math.PI / 180,
                    vi = 180 / Math.PI;
                function yi() {
                    const t = (4294967295 * Math.random()) | 0,
                        e = (4294967295 * Math.random()) | 0,
                        n = (4294967295 * Math.random()) | 0,
                        r = (4294967295 * Math.random()) | 0;
                    return (
                        pi[255 & t] +
                        pi[(t >> 8) & 255] +
                        pi[(t >> 16) & 255] +
                        pi[(t >> 24) & 255] +
                        "-" +
                        pi[255 & e] +
                        pi[(e >> 8) & 255] +
                        "-" +
                        pi[((e >> 16) & 15) | 64] +
                        pi[(e >> 24) & 255] +
                        "-" +
                        pi[(63 & n) | 128] +
                        pi[(n >> 8) & 255] +
                        "-" +
                        pi[(n >> 16) & 255] +
                        pi[(n >> 24) & 255] +
                        pi[255 & r] +
                        pi[(r >> 8) & 255] +
                        pi[(r >> 16) & 255] +
                        pi[(r >> 24) & 255]
                    ).toUpperCase();
                }
                function xi(t, e, n) {
                    return Math.max(e, Math.min(n, t));
                }
                function _i(t, e) {
                    return ((t % e) + e) % e;
                }
                function bi(t, e, n) {
                    return (1 - n) * t + n * e;
                }
                function wi(t) {
                    return 0 == (t & (t - 1)) && 0 !== t;
                }
                function Si(t) {
                    return Math.pow(2, Math.ceil(Math.log(t) / Math.LN2));
                }
                function Mi(t) {
                    return Math.pow(2, Math.floor(Math.log(t) / Math.LN2));
                }
                var Ti = Object.freeze({
                    __proto__: null,
                    DEG2RAD: gi,
                    RAD2DEG: vi,
                    generateUUID: yi,
                    clamp: xi,
                    euclideanModulo: _i,
                    mapLinear: function (t, e, n, r, i) {
                        return r + ((t - e) * (i - r)) / (n - e);
                    },
                    inverseLerp: function (t, e, n) {
                        return t !== e ? (n - t) / (e - t) : 0;
                    },
                    lerp: bi,
                    damp: function (t, e, n, r) {
                        return bi(t, e, 1 - Math.exp(-n * r));
                    },
                    pingpong: function (t, e = 1) {
                        return e - Math.abs(_i(t, 2 * e) - e);
                    },
                    smoothstep: function (t, e, n) {
                        return t <= e ? 0 : t >= n ? 1 : (t = (t - e) / (n - e)) * t * (3 - 2 * t);
                    },
                    smootherstep: function (t, e, n) {
                        return t <= e ? 0 : t >= n ? 1 : (t = (t - e) / (n - e)) * t * t * (t * (6 * t - 15) + 10);
                    },
                    randInt: function (t, e) {
                        return t + Math.floor(Math.random() * (e - t + 1));
                    },
                    randFloat: function (t, e) {
                        return t + Math.random() * (e - t);
                    },
                    randFloatSpread: function (t) {
                        return t * (0.5 - Math.random());
                    },
                    seededRandom: function (t) {
                        return void 0 !== t && (mi = t % 2147483647), (mi = (16807 * mi) % 2147483647), (mi - 1) / 2147483646;
                    },
                    degToRad: function (t) {
                        return t * gi;
                    },
                    radToDeg: function (t) {
                        return t * vi;
                    },
                    isPowerOfTwo: wi,
                    ceilPowerOfTwo: Si,
                    floorPowerOfTwo: Mi,
                    setQuaternionFromProperEuler: function (t, e, n, r, i) {
                        const o = Math.cos,
                            a = Math.sin,
                            s = o(n / 2),
                            l = a(n / 2),
                            c = o((e + r) / 2),
                            u = a((e + r) / 2),
                            h = o((e - r) / 2),
                            d = a((e - r) / 2),
                            f = o((r - e) / 2),
                            p = a((r - e) / 2);
                        switch (i) {
                            case "XYX":
                                t.set(s * u, l * h, l * d, s * c);
                                break;
                            case "YZY":
                                t.set(l * d, s * u, l * h, s * c);
                                break;
                            case "ZXZ":
                                t.set(l * h, l * d, s * u, s * c);
                                break;
                            case "XZX":
                                t.set(s * u, l * p, l * f, s * c);
                                break;
                            case "YXY":
                                t.set(l * f, s * u, l * p, s * c);
                                break;
                            case "ZYZ":
                                t.set(l * p, l * f, s * u, s * c);
                                break;
                            default:
                                console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + i);
                        }
                    },
                });
                class Ei {
                    constructor(t = 0, e = 0) {
                        (this.x = t), (this.y = e);
                    }
                    get width() {
                        return this.x;
                    }
                    set width(t) {
                        this.x = t;
                    }
                    get height() {
                        return this.y;
                    }
                    set height(t) {
                        this.y = t;
                    }
                    set(t, e) {
                        return (this.x = t), (this.y = e), this;
                    }
                    setScalar(t) {
                        return (this.x = t), (this.y = t), this;
                    }
                    setX(t) {
                        return (this.x = t), this;
                    }
                    setY(t) {
                        return (this.y = t), this;
                    }
                    setComponent(t, e) {
                        switch (t) {
                            case 0:
                                this.x = e;
                                break;
                            case 1:
                                this.y = e;
                                break;
                            default:
                                throw new Error("index is out of range: " + t);
                        }
                        return this;
                    }
                    getComponent(t) {
                        switch (t) {
                            case 0:
                                return this.x;
                            case 1:
                                return this.y;
                            default:
                                throw new Error("index is out of range: " + t);
                        }
                    }
                    clone() {
                        return new this.constructor(this.x, this.y);
                    }
                    copy(t) {
                        return (this.x = t.x), (this.y = t.y), this;
                    }
                    add(t, e) {
                        return void 0 !== e ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t, e)) : ((this.x += t.x), (this.y += t.y), this);
                    }
                    addScalar(t) {
                        return (this.x += t), (this.y += t), this;
                    }
                    addVectors(t, e) {
                        return (this.x = t.x + e.x), (this.y = t.y + e.y), this;
                    }
                    addScaledVector(t, e) {
                        return (this.x += t.x * e), (this.y += t.y * e), this;
                    }
                    sub(t, e) {
                        return void 0 !== e ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t, e)) : ((this.x -= t.x), (this.y -= t.y), this);
                    }
                    subScalar(t) {
                        return (this.x -= t), (this.y -= t), this;
                    }
                    subVectors(t, e) {
                        return (this.x = t.x - e.x), (this.y = t.y - e.y), this;
                    }
                    multiply(t) {
                        return (this.x *= t.x), (this.y *= t.y), this;
                    }
                    multiplyScalar(t) {
                        return (this.x *= t), (this.y *= t), this;
                    }
                    divide(t) {
                        return (this.x /= t.x), (this.y /= t.y), this;
                    }
                    divideScalar(t) {
                        return this.multiplyScalar(1 / t);
                    }
                    applyMatrix3(t) {
                        const e = this.x,
                            n = this.y,
                            r = t.elements;
                        return (this.x = r[0] * e + r[3] * n + r[6]), (this.y = r[1] * e + r[4] * n + r[7]), this;
                    }
                    min(t) {
                        return (this.x = Math.min(this.x, t.x)), (this.y = Math.min(this.y, t.y)), this;
                    }
                    max(t) {
                        return (this.x = Math.max(this.x, t.x)), (this.y = Math.max(this.y, t.y)), this;
                    }
                    clamp(t, e) {
                        return (this.x = Math.max(t.x, Math.min(e.x, this.x))), (this.y = Math.max(t.y, Math.min(e.y, this.y))), this;
                    }
                    clampScalar(t, e) {
                        return (this.x = Math.max(t, Math.min(e, this.x))), (this.y = Math.max(t, Math.min(e, this.y))), this;
                    }
                    clampLength(t, e) {
                        const n = this.length();
                        return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
                    }
                    floor() {
                        return (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), this;
                    }
                    ceil() {
                        return (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), this;
                    }
                    round() {
                        return (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), this;
                    }
                    roundToZero() {
                        return (this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x)), (this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y)), this;
                    }
                    negate() {
                        return (this.x = -this.x), (this.y = -this.y), this;
                    }
                    dot(t) {
                        return this.x * t.x + this.y * t.y;
                    }
                    cross(t) {
                        return this.x * t.y - this.y * t.x;
                    }
                    lengthSq() {
                        return this.x * this.x + this.y * this.y;
                    }
                    length() {
                        return Math.sqrt(this.x * this.x + this.y * this.y);
                    }
                    manhattanLength() {
                        return Math.abs(this.x) + Math.abs(this.y);
                    }
                    normalize() {
                        return this.divideScalar(this.length() || 1);
                    }
                    angle() {
                        return Math.atan2(-this.y, -this.x) + Math.PI;
                    }
                    distanceTo(t) {
                        return Math.sqrt(this.distanceToSquared(t));
                    }
                    distanceToSquared(t) {
                        const e = this.x - t.x,
                            n = this.y - t.y;
                        return e * e + n * n;
                    }
                    manhattanDistanceTo(t) {
                        return Math.abs(this.x - t.x) + Math.abs(this.y - t.y);
                    }
                    setLength(t) {
                        return this.normalize().multiplyScalar(t);
                    }
                    lerp(t, e) {
                        return (this.x += (t.x - this.x) * e), (this.y += (t.y - this.y) * e), this;
                    }
                    lerpVectors(t, e, n) {
                        return (this.x = t.x + (e.x - t.x) * n), (this.y = t.y + (e.y - t.y) * n), this;
                    }
                    equals(t) {
                        return t.x === this.x && t.y === this.y;
                    }
                    fromArray(t, e = 0) {
                        return (this.x = t[e]), (this.y = t[e + 1]), this;
                    }
                    toArray(t = [], e = 0) {
                        return (t[e] = this.x), (t[e + 1] = this.y), t;
                    }
                    fromBufferAttribute(t, e, n) {
                        return void 0 !== n && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."), (this.x = t.getX(e)), (this.y = t.getY(e)), this;
                    }
                    rotateAround(t, e) {
                        const n = Math.cos(e),
                            r = Math.sin(e),
                            i = this.x - t.x,
                            o = this.y - t.y;
                        return (this.x = i * n - o * r + t.x), (this.y = i * r + o * n + t.y), this;
                    }
                    random() {
                        return (this.x = Math.random()), (this.y = Math.random()), this;
                    }
                }
                Ei.prototype.isVector2 = !0;
                class Ai {
                    constructor() {
                        (this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1]), arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
                    }
                    set(t, e, n, r, i, o, a, s, l) {
                        const c = this.elements;
                        return (c[0] = t), (c[1] = r), (c[2] = a), (c[3] = e), (c[4] = i), (c[5] = s), (c[6] = n), (c[7] = o), (c[8] = l), this;
                    }
                    identity() {
                        return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
                    }
                    copy(t) {
                        const e = this.elements,
                            n = t.elements;
                        return (e[0] = n[0]), (e[1] = n[1]), (e[2] = n[2]), (e[3] = n[3]), (e[4] = n[4]), (e[5] = n[5]), (e[6] = n[6]), (e[7] = n[7]), (e[8] = n[8]), this;
                    }
                    extractBasis(t, e, n) {
                        return t.setFromMatrix3Column(this, 0), e.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
                    }
                    setFromMatrix4(t) {
                        const e = t.elements;
                        return this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]), this;
                    }
                    multiply(t) {
                        return this.multiplyMatrices(this, t);
                    }
                    premultiply(t) {
                        return this.multiplyMatrices(t, this);
                    }
                    multiplyMatrices(t, e) {
                        const n = t.elements,
                            r = e.elements,
                            i = this.elements,
                            o = n[0],
                            a = n[3],
                            s = n[6],
                            l = n[1],
                            c = n[4],
                            u = n[7],
                            h = n[2],
                            d = n[5],
                            f = n[8],
                            p = r[0],
                            m = r[3],
                            g = r[6],
                            v = r[1],
                            y = r[4],
                            x = r[7],
                            _ = r[2],
                            b = r[5],
                            w = r[8];
                        return (
                            (i[0] = o * p + a * v + s * _),
                                (i[3] = o * m + a * y + s * b),
                                (i[6] = o * g + a * x + s * w),
                                (i[1] = l * p + c * v + u * _),
                                (i[4] = l * m + c * y + u * b),
                                (i[7] = l * g + c * x + u * w),
                                (i[2] = h * p + d * v + f * _),
                                (i[5] = h * m + d * y + f * b),
                                (i[8] = h * g + d * x + f * w),
                                this
                        );
                    }
                    multiplyScalar(t) {
                        const e = this.elements;
                        return (e[0] *= t), (e[3] *= t), (e[6] *= t), (e[1] *= t), (e[4] *= t), (e[7] *= t), (e[2] *= t), (e[5] *= t), (e[8] *= t), this;
                    }
                    determinant() {
                        const t = this.elements,
                            e = t[0],
                            n = t[1],
                            r = t[2],
                            i = t[3],
                            o = t[4],
                            a = t[5],
                            s = t[6],
                            l = t[7],
                            c = t[8];
                        return e * o * c - e * a * l - n * i * c + n * a * s + r * i * l - r * o * s;
                    }
                    invert() {
                        const t = this.elements,
                            e = t[0],
                            n = t[1],
                            r = t[2],
                            i = t[3],
                            o = t[4],
                            a = t[5],
                            s = t[6],
                            l = t[7],
                            c = t[8],
                            u = c * o - a * l,
                            h = a * s - c * i,
                            d = l * i - o * s,
                            f = e * u + n * h + r * d;
                        if (0 === f) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
                        const p = 1 / f;
                        return (
                            (t[0] = u * p),
                                (t[1] = (r * l - c * n) * p),
                                (t[2] = (a * n - r * o) * p),
                                (t[3] = h * p),
                                (t[4] = (c * e - r * s) * p),
                                (t[5] = (r * i - a * e) * p),
                                (t[6] = d * p),
                                (t[7] = (n * s - l * e) * p),
                                (t[8] = (o * e - n * i) * p),
                                this
                        );
                    }
                    transpose() {
                        let t;
                        const e = this.elements;
                        return (t = e[1]), (e[1] = e[3]), (e[3] = t), (t = e[2]), (e[2] = e[6]), (e[6] = t), (t = e[5]), (e[5] = e[7]), (e[7] = t), this;
                    }
                    getNormalMatrix(t) {
                        return this.setFromMatrix4(t).invert().transpose();
                    }
                    transposeIntoArray(t) {
                        const e = this.elements;
                        return (t[0] = e[0]), (t[1] = e[3]), (t[2] = e[6]), (t[3] = e[1]), (t[4] = e[4]), (t[5] = e[7]), (t[6] = e[2]), (t[7] = e[5]), (t[8] = e[8]), this;
                    }
                    setUvTransform(t, e, n, r, i, o, a) {
                        const s = Math.cos(i),
                            l = Math.sin(i);
                        return this.set(n * s, n * l, -n * (s * o + l * a) + o + t, -r * l, r * s, -r * (-l * o + s * a) + a + e, 0, 0, 1), this;
                    }
                    scale(t, e) {
                        const n = this.elements;
                        return (n[0] *= t), (n[3] *= t), (n[6] *= t), (n[1] *= e), (n[4] *= e), (n[7] *= e), this;
                    }
                    rotate(t) {
                        const e = Math.cos(t),
                            n = Math.sin(t),
                            r = this.elements,
                            i = r[0],
                            o = r[3],
                            a = r[6],
                            s = r[1],
                            l = r[4],
                            c = r[7];
                        return (r[0] = e * i + n * s), (r[3] = e * o + n * l), (r[6] = e * a + n * c), (r[1] = -n * i + e * s), (r[4] = -n * o + e * l), (r[7] = -n * a + e * c), this;
                    }
                    translate(t, e) {
                        const n = this.elements;
                        return (n[0] += t * n[2]), (n[3] += t * n[5]), (n[6] += t * n[8]), (n[1] += e * n[2]), (n[4] += e * n[5]), (n[7] += e * n[8]), this;
                    }
                    equals(t) {
                        const e = this.elements,
                            n = t.elements;
                        for (let t = 0; t < 9; t++) if (e[t] !== n[t]) return !1;
                        return !0;
                    }
                    fromArray(t, e = 0) {
                        for (let n = 0; n < 9; n++) this.elements[n] = t[n + e];
                        return this;
                    }
                    toArray(t = [], e = 0) {
                        const n = this.elements;
                        return (t[e] = n[0]), (t[e + 1] = n[1]), (t[e + 2] = n[2]), (t[e + 3] = n[3]), (t[e + 4] = n[4]), (t[e + 5] = n[5]), (t[e + 6] = n[6]), (t[e + 7] = n[7]), (t[e + 8] = n[8]), t;
                    }
                    clone() {
                        return new this.constructor().fromArray(this.elements);
                    }
                }
                let Li;
                Ai.prototype.isMatrix3 = !0;
                class Ci {
                    static getDataURL(t) {
                        if (/^data:/i.test(t.src)) return t.src;
                        if ("undefined" == typeof HTMLCanvasElement) return t.src;
                        let e;
                        if (t instanceof HTMLCanvasElement) e = t;
                        else {
                            void 0 === Li && (Li = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")), (Li.width = t.width), (Li.height = t.height);
                            const n = Li.getContext("2d");
                            t instanceof ImageData ? n.putImageData(t, 0, 0) : n.drawImage(t, 0, 0, t.width, t.height), (e = Li);
                        }
                        return e.width > 2048 || e.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", t), e.toDataURL("image/jpeg", 0.6)) : e.toDataURL("image/png");
                    }
                }
                let Ri = 0;
                class Pi extends fi {
                    constructor(t = Pi.DEFAULT_IMAGE, e = Pi.DEFAULT_MAPPING, n = 1001, r = 1001, i = 1006, o = 1008, a = 1023, s = 1009, l = 1, c = 3e3) {
                        super(),
                            Object.defineProperty(this, "id", { value: Ri++ }),
                            (this.uuid = yi()),
                            (this.name = ""),
                            (this.image = t),
                            (this.mipmaps = []),
                            (this.mapping = e),
                            (this.wrapS = n),
                            (this.wrapT = r),
                            (this.magFilter = i),
                            (this.minFilter = o),
                            (this.anisotropy = l),
                            (this.format = a),
                            (this.internalFormat = null),
                            (this.type = s),
                            (this.offset = new Ei(0, 0)),
                            (this.repeat = new Ei(1, 1)),
                            (this.center = new Ei(0, 0)),
                            (this.rotation = 0),
                            (this.matrixAutoUpdate = !0),
                            (this.matrix = new Ai()),
                            (this.generateMipmaps = !0),
                            (this.premultiplyAlpha = !1),
                            (this.flipY = !0),
                            (this.unpackAlignment = 4),
                            (this.encoding = c),
                            (this.version = 0),
                            (this.onUpdate = null),
                            (this.isRenderTargetTexture = !1);
                    }
                    updateMatrix() {
                        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                    copy(t) {
                        return (
                            (this.name = t.name),
                                (this.image = t.image),
                                (this.mipmaps = t.mipmaps.slice(0)),
                                (this.mapping = t.mapping),
                                (this.wrapS = t.wrapS),
                                (this.wrapT = t.wrapT),
                                (this.magFilter = t.magFilter),
                                (this.minFilter = t.minFilter),
                                (this.anisotropy = t.anisotropy),
                                (this.format = t.format),
                                (this.internalFormat = t.internalFormat),
                                (this.type = t.type),
                                this.offset.copy(t.offset),
                                this.repeat.copy(t.repeat),
                                this.center.copy(t.center),
                                (this.rotation = t.rotation),
                                (this.matrixAutoUpdate = t.matrixAutoUpdate),
                                this.matrix.copy(t.matrix),
                                (this.generateMipmaps = t.generateMipmaps),
                                (this.premultiplyAlpha = t.premultiplyAlpha),
                                (this.flipY = t.flipY),
                                (this.unpackAlignment = t.unpackAlignment),
                                (this.encoding = t.encoding),
                                this
                        );
                    }
                    toJSON(t) {
                        const e = void 0 === t || "string" == typeof t;
                        if (!e && void 0 !== t.textures[this.uuid]) return t.textures[this.uuid];
                        const n = {
                            metadata: { version: 4.5, type: "Texture", generator: "Texture.toJSON" },
                            uuid: this.uuid,
                            name: this.name,
                            mapping: this.mapping,
                            repeat: [this.repeat.x, this.repeat.y],
                            offset: [this.offset.x, this.offset.y],
                            center: [this.center.x, this.center.y],
                            rotation: this.rotation,
                            wrap: [this.wrapS, this.wrapT],
                            format: this.format,
                            type: this.type,
                            encoding: this.encoding,
                            minFilter: this.minFilter,
                            magFilter: this.magFilter,
                            anisotropy: this.anisotropy,
                            flipY: this.flipY,
                            premultiplyAlpha: this.premultiplyAlpha,
                            unpackAlignment: this.unpackAlignment,
                        };
                        if (void 0 !== this.image) {
                            const r = this.image;
                            if ((void 0 === r.uuid && (r.uuid = yi()), !e && void 0 === t.images[r.uuid])) {
                                let e;
                                if (Array.isArray(r)) {
                                    e = [];
                                    for (let t = 0, n = r.length; t < n; t++) r[t].isDataTexture ? e.push(Ii(r[t].image)) : e.push(Ii(r[t]));
                                } else e = Ii(r);
                                t.images[r.uuid] = { uuid: r.uuid, url: e };
                            }
                            n.image = r.uuid;
                        }
                        return e || (t.textures[this.uuid] = n), n;
                    }
                    dispose() {
                        this.dispatchEvent({ type: "dispose" });
                    }
                    transformUv(t) {
                        if (300 !== this.mapping) return t;
                        if ((t.applyMatrix3(this.matrix), t.x < 0 || t.x > 1))
                            switch (this.wrapS) {
                                case Dr:
                                    t.x = t.x - Math.floor(t.x);
                                    break;
                                case kr:
                                    t.x = t.x < 0 ? 0 : 1;
                                    break;
                                case Ur:
                                    1 === Math.abs(Math.floor(t.x) % 2) ? (t.x = Math.ceil(t.x) - t.x) : (t.x = t.x - Math.floor(t.x));
                            }
                        if (t.y < 0 || t.y > 1)
                            switch (this.wrapT) {
                                case Dr:
                                    t.y = t.y - Math.floor(t.y);
                                    break;
                                case kr:
                                    t.y = t.y < 0 ? 0 : 1;
                                    break;
                                case Ur:
                                    1 === Math.abs(Math.floor(t.y) % 2) ? (t.y = Math.ceil(t.y) - t.y) : (t.y = t.y - Math.floor(t.y));
                            }
                        return this.flipY && (t.y = 1 - t.y), t;
                    }
                    set needsUpdate(t) {
                        !0 === t && this.version++;
                    }
                }
                function Ii(t) {
                    return ("undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement) ||
                    ("undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement) ||
                    ("undefined" != typeof ImageBitmap && t instanceof ImageBitmap)
                        ? Ci.getDataURL(t)
                        : t.data
                            ? { data: Array.prototype.slice.call(t.data), width: t.width, height: t.height, type: t.data.constructor.name }
                            : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
                }
                (Pi.DEFAULT_IMAGE = void 0), (Pi.DEFAULT_MAPPING = 300), (Pi.prototype.isTexture = !0);
                class Oi {
                    constructor(t = 0, e = 0, n = 0, r = 1) {
                        (this.x = t), (this.y = e), (this.z = n), (this.w = r);
                    }
                    get width() {
                        return this.z;
                    }
                    set width(t) {
                        this.z = t;
                    }
                    get height() {
                        return this.w;
                    }
                    set height(t) {
                        this.w = t;
                    }
                    set(t, e, n, r) {
                        return (this.x = t), (this.y = e), (this.z = n), (this.w = r), this;
                    }
                    setScalar(t) {
                        return (this.x = t), (this.y = t), (this.z = t), (this.w = t), this;
                    }
                    setX(t) {
                        return (this.x = t), this;
                    }
                    setY(t) {
                        return (this.y = t), this;
                    }
                    setZ(t) {
                        return (this.z = t), this;
                    }
                    setW(t) {
                        return (this.w = t), this;
                    }
                    setComponent(t, e) {
                        switch (t) {
                            case 0:
                                this.x = e;
                                break;
                            case 1:
                                this.y = e;
                                break;
                            case 2:
                                this.z = e;
                                break;
                            case 3:
                                this.w = e;
                                break;
                            default:
                                throw new Error("index is out of range: " + t);
                        }
                        return this;
                    }
                    getComponent(t) {
                        switch (t) {
                            case 0:
                                return this.x;
                            case 1:
                                return this.y;
                            case 2:
                                return this.z;
                            case 3:
                                return this.w;
                            default:
                                throw new Error("index is out of range: " + t);
                        }
                    }
                    clone() {
                        return new this.constructor(this.x, this.y, this.z, this.w);
                    }
                    copy(t) {
                        return (this.x = t.x), (this.y = t.y), (this.z = t.z), (this.w = void 0 !== t.w ? t.w : 1), this;
                    }
                    add(t, e) {
                        return void 0 !== e
                            ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t, e))
                            : ((this.x += t.x), (this.y += t.y), (this.z += t.z), (this.w += t.w), this);
                    }
                    addScalar(t) {
                        return (this.x += t), (this.y += t), (this.z += t), (this.w += t), this;
                    }
                    addVectors(t, e) {
                        return (this.x = t.x + e.x), (this.y = t.y + e.y), (this.z = t.z + e.z), (this.w = t.w + e.w), this;
                    }
                    addScaledVector(t, e) {
                        return (this.x += t.x * e), (this.y += t.y * e), (this.z += t.z * e), (this.w += t.w * e), this;
                    }
                    sub(t, e) {
                        return void 0 !== e
                            ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t, e))
                            : ((this.x -= t.x), (this.y -= t.y), (this.z -= t.z), (this.w -= t.w), this);
                    }
                    subScalar(t) {
                        return (this.x -= t), (this.y -= t), (this.z -= t), (this.w -= t), this;
                    }
                    subVectors(t, e) {
                        return (this.x = t.x - e.x), (this.y = t.y - e.y), (this.z = t.z - e.z), (this.w = t.w - e.w), this;
                    }
                    multiply(t) {
                        return (this.x *= t.x), (this.y *= t.y), (this.z *= t.z), (this.w *= t.w), this;
                    }
                    multiplyScalar(t) {
                        return (this.x *= t), (this.y *= t), (this.z *= t), (this.w *= t), this;
                    }
                    applyMatrix4(t) {
                        const e = this.x,
                            n = this.y,
                            r = this.z,
                            i = this.w,
                            o = t.elements;
                        return (
                            (this.x = o[0] * e + o[4] * n + o[8] * r + o[12] * i),
                                (this.y = o[1] * e + o[5] * n + o[9] * r + o[13] * i),
                                (this.z = o[2] * e + o[6] * n + o[10] * r + o[14] * i),
                                (this.w = o[3] * e + o[7] * n + o[11] * r + o[15] * i),
                                this
                        );
                    }
                    divideScalar(t) {
                        return this.multiplyScalar(1 / t);
                    }
                    setAxisAngleFromQuaternion(t) {
                        this.w = 2 * Math.acos(t.w);
                        const e = Math.sqrt(1 - t.w * t.w);
                        return e < 1e-4 ? ((this.x = 1), (this.y = 0), (this.z = 0)) : ((this.x = t.x / e), (this.y = t.y / e), (this.z = t.z / e)), this;
                    }
                    setAxisAngleFromRotationMatrix(t) {
                        let e, n, r, i;
                        const o = 0.01,
                            a = 0.1,
                            s = t.elements,
                            l = s[0],
                            c = s[4],
                            u = s[8],
                            h = s[1],
                            d = s[5],
                            f = s[9],
                            p = s[2],
                            m = s[6],
                            g = s[10];
                        if (Math.abs(c - h) < o && Math.abs(u - p) < o && Math.abs(f - m) < o) {
                            if (Math.abs(c + h) < a && Math.abs(u + p) < a && Math.abs(f + m) < a && Math.abs(l + d + g - 3) < a) return this.set(1, 0, 0, 0), this;
                            e = Math.PI;
                            const t = (l + 1) / 2,
                                s = (d + 1) / 2,
                                v = (g + 1) / 2,
                                y = (c + h) / 4,
                                x = (u + p) / 4,
                                _ = (f + m) / 4;
                            return (
                                t > s && t > v
                                    ? t < o
                                        ? ((n = 0), (r = 0.707106781), (i = 0.707106781))
                                        : ((n = Math.sqrt(t)), (r = y / n), (i = x / n))
                                    : s > v
                                        ? s < o
                                            ? ((n = 0.707106781), (r = 0), (i = 0.707106781))
                                            : ((r = Math.sqrt(s)), (n = y / r), (i = _ / r))
                                        : v < o
                                            ? ((n = 0.707106781), (r = 0.707106781), (i = 0))
                                            : ((i = Math.sqrt(v)), (n = x / i), (r = _ / i)),
                                    this.set(n, r, i, e),
                                    this
                            );
                        }
                        let v = Math.sqrt((m - f) * (m - f) + (u - p) * (u - p) + (h - c) * (h - c));
                        return Math.abs(v) < 0.001 && (v = 1), (this.x = (m - f) / v), (this.y = (u - p) / v), (this.z = (h - c) / v), (this.w = Math.acos((l + d + g - 1) / 2)), this;
                    }
                    min(t) {
                        return (this.x = Math.min(this.x, t.x)), (this.y = Math.min(this.y, t.y)), (this.z = Math.min(this.z, t.z)), (this.w = Math.min(this.w, t.w)), this;
                    }
                    max(t) {
                        return (this.x = Math.max(this.x, t.x)), (this.y = Math.max(this.y, t.y)), (this.z = Math.max(this.z, t.z)), (this.w = Math.max(this.w, t.w)), this;
                    }
                    clamp(t, e) {
                        return (this.x = Math.max(t.x, Math.min(e.x, this.x))), (this.y = Math.max(t.y, Math.min(e.y, this.y))), (this.z = Math.max(t.z, Math.min(e.z, this.z))), (this.w = Math.max(t.w, Math.min(e.w, this.w))), this;
                    }
                    clampScalar(t, e) {
                        return (this.x = Math.max(t, Math.min(e, this.x))), (this.y = Math.max(t, Math.min(e, this.y))), (this.z = Math.max(t, Math.min(e, this.z))), (this.w = Math.max(t, Math.min(e, this.w))), this;
                    }
                    clampLength(t, e) {
                        const n = this.length();
                        return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
                    }
                    floor() {
                        return (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), (this.z = Math.floor(this.z)), (this.w = Math.floor(this.w)), this;
                    }
                    ceil() {
                        return (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), (this.z = Math.ceil(this.z)), (this.w = Math.ceil(this.w)), this;
                    }
                    round() {
                        return (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), (this.z = Math.round(this.z)), (this.w = Math.round(this.w)), this;
                    }
                    roundToZero() {
                        return (
                            (this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x)),
                                (this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y)),
                                (this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z)),
                                (this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w)),
                                this
                        );
                    }
                    negate() {
                        return (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), (this.w = -this.w), this;
                    }
                    dot(t) {
                        return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w;
                    }
                    lengthSq() {
                        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
                    }
                    length() {
                        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
                    }
                    manhattanLength() {
                        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
                    }
                    normalize() {
                        return this.divideScalar(this.length() || 1);
                    }
                    setLength(t) {
                        return this.normalize().multiplyScalar(t);
                    }
                    lerp(t, e) {
                        return (this.x += (t.x - this.x) * e), (this.y += (t.y - this.y) * e), (this.z += (t.z - this.z) * e), (this.w += (t.w - this.w) * e), this;
                    }
                    lerpVectors(t, e, n) {
                        return (this.x = t.x + (e.x - t.x) * n), (this.y = t.y + (e.y - t.y) * n), (this.z = t.z + (e.z - t.z) * n), (this.w = t.w + (e.w - t.w) * n), this;
                    }
                    equals(t) {
                        return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w;
                    }
                    fromArray(t, e = 0) {
                        return (this.x = t[e]), (this.y = t[e + 1]), (this.z = t[e + 2]), (this.w = t[e + 3]), this;
                    }
                    toArray(t = [], e = 0) {
                        return (t[e] = this.x), (t[e + 1] = this.y), (t[e + 2] = this.z), (t[e + 3] = this.w), t;
                    }
                    fromBufferAttribute(t, e, n) {
                        return void 0 !== n && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."), (this.x = t.getX(e)), (this.y = t.getY(e)), (this.z = t.getZ(e)), (this.w = t.getW(e)), this;
                    }
                    random() {
                        return (this.x = Math.random()), (this.y = Math.random()), (this.z = Math.random()), (this.w = Math.random()), this;
                    }
                }
                Oi.prototype.isVector4 = !0;
                class Di extends fi {
                    constructor(t, e, n = {}) {
                        super(),
                            (this.width = t),
                            (this.height = e),
                            (this.depth = 1),
                            (this.scissor = new Oi(0, 0, t, e)),
                            (this.scissorTest = !1),
                            (this.viewport = new Oi(0, 0, t, e)),
                            (this.texture = new Pi(void 0, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.encoding)),
                            (this.texture.isRenderTargetTexture = !0),
                            (this.texture.image = { width: t, height: e, depth: 1 }),
                            (this.texture.generateMipmaps = void 0 !== n.generateMipmaps && n.generateMipmaps),
                            (this.texture.minFilter = void 0 !== n.minFilter ? n.minFilter : Br),
                            (this.depthBuffer = void 0 === n.depthBuffer || n.depthBuffer),
                            (this.stencilBuffer = void 0 !== n.stencilBuffer && n.stencilBuffer),
                            (this.depthTexture = void 0 !== n.depthTexture ? n.depthTexture : null);
                    }
                    setTexture(t) {
                        (t.image = { width: this.width, height: this.height, depth: this.depth }), (this.texture = t);
                    }
                    setSize(t, e, n = 1) {
                        (this.width === t && this.height === e && this.depth === n) ||
                        ((this.width = t), (this.height = e), (this.depth = n), (this.texture.image.width = t), (this.texture.image.height = e), (this.texture.image.depth = n), this.dispose()),
                            this.viewport.set(0, 0, t, e),
                            this.scissor.set(0, 0, t, e);
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                    copy(t) {
                        return (
                            (this.width = t.width),
                                (this.height = t.height),
                                (this.depth = t.depth),
                                this.viewport.copy(t.viewport),
                                (this.texture = t.texture.clone()),
                                (this.texture.image = { ...this.texture.image }),
                                (this.depthBuffer = t.depthBuffer),
                                (this.stencilBuffer = t.stencilBuffer),
                                (this.depthTexture = t.depthTexture),
                                this
                        );
                    }
                    dispose() {
                        this.dispatchEvent({ type: "dispose" });
                    }
                }
                Di.prototype.isWebGLRenderTarget = !0;
                (class extends Di {
                    constructor(t, e, n) {
                        super(t, e);
                        const r = this.texture;
                        this.texture = [];
                        for (let t = 0; t < n; t++) this.texture[t] = r.clone();
                    }
                    setSize(t, e, n = 1) {
                        if (this.width !== t || this.height !== e || this.depth !== n) {
                            (this.width = t), (this.height = e), (this.depth = n);
                            for (let r = 0, i = this.texture.length; r < i; r++) (this.texture[r].image.width = t), (this.texture[r].image.height = e), (this.texture[r].image.depth = n);
                            this.dispose();
                        }
                        return this.viewport.set(0, 0, t, e), this.scissor.set(0, 0, t, e), this;
                    }
                    copy(t) {
                        this.dispose(),
                            (this.width = t.width),
                            (this.height = t.height),
                            (this.depth = t.depth),
                            this.viewport.set(0, 0, this.width, this.height),
                            this.scissor.set(0, 0, this.width, this.height),
                            (this.depthBuffer = t.depthBuffer),
                            (this.stencilBuffer = t.stencilBuffer),
                            (this.depthTexture = t.depthTexture),
                            (this.texture.length = 0);
                        for (let e = 0, n = t.texture.length; e < n; e++) this.texture[e] = t.texture[e].clone();
                        return this;
                    }
                }.prototype.isWebGLMultipleRenderTargets = !0);
                class ki extends Di {
                    constructor(t, e, n) {
                        super(t, e, n), (this.samples = 4);
                    }
                    copy(t) {
                        return super.copy.call(this, t), (this.samples = t.samples), this;
                    }
                }
                ki.prototype.isWebGLMultisampleRenderTarget = !0;
                class Ui {
                    constructor(t = 0, e = 0, n = 0, r = 1) {
                        (this._x = t), (this._y = e), (this._z = n), (this._w = r);
                    }
                    static slerp(t, e, n, r) {
                        return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."), n.slerpQuaternions(t, e, r);
                    }
                    static slerpFlat(t, e, n, r, i, o, a) {
                        let s = n[r + 0],
                            l = n[r + 1],
                            c = n[r + 2],
                            u = n[r + 3];
                        const h = i[o + 0],
                            d = i[o + 1],
                            f = i[o + 2],
                            p = i[o + 3];
                        if (0 === a) return (t[e + 0] = s), (t[e + 1] = l), (t[e + 2] = c), void (t[e + 3] = u);
                        if (1 === a) return (t[e + 0] = h), (t[e + 1] = d), (t[e + 2] = f), void (t[e + 3] = p);
                        if (u !== p || s !== h || l !== d || c !== f) {
                            let t = 1 - a;
                            const e = s * h + l * d + c * f + u * p,
                                n = e >= 0 ? 1 : -1,
                                r = 1 - e * e;
                            if (r > Number.EPSILON) {
                                const i = Math.sqrt(r),
                                    o = Math.atan2(i, e * n);
                                (t = Math.sin(t * o) / i), (a = Math.sin(a * o) / i);
                            }
                            const i = a * n;
                            if (((s = s * t + h * i), (l = l * t + d * i), (c = c * t + f * i), (u = u * t + p * i), t === 1 - a)) {
                                const t = 1 / Math.sqrt(s * s + l * l + c * c + u * u);
                                (s *= t), (l *= t), (c *= t), (u *= t);
                            }
                        }
                        (t[e] = s), (t[e + 1] = l), (t[e + 2] = c), (t[e + 3] = u);
                    }
                    static multiplyQuaternionsFlat(t, e, n, r, i, o) {
                        const a = n[r],
                            s = n[r + 1],
                            l = n[r + 2],
                            c = n[r + 3],
                            u = i[o],
                            h = i[o + 1],
                            d = i[o + 2],
                            f = i[o + 3];
                        return (t[e] = a * f + c * u + s * d - l * h), (t[e + 1] = s * f + c * h + l * u - a * d), (t[e + 2] = l * f + c * d + a * h - s * u), (t[e + 3] = c * f - a * u - s * h - l * d), t;
                    }
                    get x() {
                        return this._x;
                    }
                    set x(t) {
                        (this._x = t), this._onChangeCallback();
                    }
                    get y() {
                        return this._y;
                    }
                    set y(t) {
                        (this._y = t), this._onChangeCallback();
                    }
                    get z() {
                        return this._z;
                    }
                    set z(t) {
                        (this._z = t), this._onChangeCallback();
                    }
                    get w() {
                        return this._w;
                    }
                    set w(t) {
                        (this._w = t), this._onChangeCallback();
                    }
                    set(t, e, n, r) {
                        return (this._x = t), (this._y = e), (this._z = n), (this._w = r), this._onChangeCallback(), this;
                    }
                    clone() {
                        return new this.constructor(this._x, this._y, this._z, this._w);
                    }
                    copy(t) {
                        return (this._x = t.x), (this._y = t.y), (this._z = t.z), (this._w = t.w), this._onChangeCallback(), this;
                    }
                    setFromEuler(t, e) {
                        if (!t || !t.isEuler) throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
                        const n = t._x,
                            r = t._y,
                            i = t._z,
                            o = t._order,
                            a = Math.cos,
                            s = Math.sin,
                            l = a(n / 2),
                            c = a(r / 2),
                            u = a(i / 2),
                            h = s(n / 2),
                            d = s(r / 2),
                            f = s(i / 2);
                        switch (o) {
                            case "XYZ":
                                (this._x = h * c * u + l * d * f), (this._y = l * d * u - h * c * f), (this._z = l * c * f + h * d * u), (this._w = l * c * u - h * d * f);
                                break;
                            case "YXZ":
                                (this._x = h * c * u + l * d * f), (this._y = l * d * u - h * c * f), (this._z = l * c * f - h * d * u), (this._w = l * c * u + h * d * f);
                                break;
                            case "ZXY":
                                (this._x = h * c * u - l * d * f), (this._y = l * d * u + h * c * f), (this._z = l * c * f + h * d * u), (this._w = l * c * u - h * d * f);
                                break;
                            case "ZYX":
                                (this._x = h * c * u - l * d * f), (this._y = l * d * u + h * c * f), (this._z = l * c * f - h * d * u), (this._w = l * c * u + h * d * f);
                                break;
                            case "YZX":
                                (this._x = h * c * u + l * d * f), (this._y = l * d * u + h * c * f), (this._z = l * c * f - h * d * u), (this._w = l * c * u - h * d * f);
                                break;
                            case "XZY":
                                (this._x = h * c * u - l * d * f), (this._y = l * d * u - h * c * f), (this._z = l * c * f + h * d * u), (this._w = l * c * u + h * d * f);
                                break;
                            default:
                                console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + o);
                        }
                        return !1 !== e && this._onChangeCallback(), this;
                    }
                    setFromAxisAngle(t, e) {
                        const n = e / 2,
                            r = Math.sin(n);
                        return (this._x = t.x * r), (this._y = t.y * r), (this._z = t.z * r), (this._w = Math.cos(n)), this._onChangeCallback(), this;
                    }
                    setFromRotationMatrix(t) {
                        const e = t.elements,
                            n = e[0],
                            r = e[4],
                            i = e[8],
                            o = e[1],
                            a = e[5],
                            s = e[9],
                            l = e[2],
                            c = e[6],
                            u = e[10],
                            h = n + a + u;
                        if (h > 0) {
                            const t = 0.5 / Math.sqrt(h + 1);
                            (this._w = 0.25 / t), (this._x = (c - s) * t), (this._y = (i - l) * t), (this._z = (o - r) * t);
                        } else if (n > a && n > u) {
                            const t = 2 * Math.sqrt(1 + n - a - u);
                            (this._w = (c - s) / t), (this._x = 0.25 * t), (this._y = (r + o) / t), (this._z = (i + l) / t);
                        } else if (a > u) {
                            const t = 2 * Math.sqrt(1 + a - n - u);
                            (this._w = (i - l) / t), (this._x = (r + o) / t), (this._y = 0.25 * t), (this._z = (s + c) / t);
                        } else {
                            const t = 2 * Math.sqrt(1 + u - n - a);
                            (this._w = (o - r) / t), (this._x = (i + l) / t), (this._y = (s + c) / t), (this._z = 0.25 * t);
                        }
                        return this._onChangeCallback(), this;
                    }
                    setFromUnitVectors(t, e) {
                        let n = t.dot(e) + 1;
                        return (
                            n < Number.EPSILON
                                ? ((n = 0), Math.abs(t.x) > Math.abs(t.z) ? ((this._x = -t.y), (this._y = t.x), (this._z = 0), (this._w = n)) : ((this._x = 0), (this._y = -t.z), (this._z = t.y), (this._w = n)))
                                : ((this._x = t.y * e.z - t.z * e.y), (this._y = t.z * e.x - t.x * e.z), (this._z = t.x * e.y - t.y * e.x), (this._w = n)),
                                this.normalize()
                        );
                    }
                    angleTo(t) {
                        return 2 * Math.acos(Math.abs(xi(this.dot(t), -1, 1)));
                    }
                    rotateTowards(t, e) {
                        const n = this.angleTo(t);
                        if (0 === n) return this;
                        const r = Math.min(1, e / n);
                        return this.slerp(t, r), this;
                    }
                    identity() {
                        return this.set(0, 0, 0, 1);
                    }
                    invert() {
                        return this.conjugate();
                    }
                    conjugate() {
                        return (this._x *= -1), (this._y *= -1), (this._z *= -1), this._onChangeCallback(), this;
                    }
                    dot(t) {
                        return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w;
                    }
                    lengthSq() {
                        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
                    }
                    length() {
                        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
                    }
                    normalize() {
                        let t = this.length();
                        return (
                            0 === t ? ((this._x = 0), (this._y = 0), (this._z = 0), (this._w = 1)) : ((t = 1 / t), (this._x = this._x * t), (this._y = this._y * t), (this._z = this._z * t), (this._w = this._w * t)),
                                this._onChangeCallback(),
                                this
                        );
                    }
                    multiply(t, e) {
                        return void 0 !== e ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(t, e)) : this.multiplyQuaternions(this, t);
                    }
                    premultiply(t) {
                        return this.multiplyQuaternions(t, this);
                    }
                    multiplyQuaternions(t, e) {
                        const n = t._x,
                            r = t._y,
                            i = t._z,
                            o = t._w,
                            a = e._x,
                            s = e._y,
                            l = e._z,
                            c = e._w;
                        return (this._x = n * c + o * a + r * l - i * s), (this._y = r * c + o * s + i * a - n * l), (this._z = i * c + o * l + n * s - r * a), (this._w = o * c - n * a - r * s - i * l), this._onChangeCallback(), this;
                    }
                    slerp(t, e) {
                        if (0 === e) return this;
                        if (1 === e) return this.copy(t);
                        const n = this._x,
                            r = this._y,
                            i = this._z,
                            o = this._w;
                        let a = o * t._w + n * t._x + r * t._y + i * t._z;
                        if ((a < 0 ? ((this._w = -t._w), (this._x = -t._x), (this._y = -t._y), (this._z = -t._z), (a = -a)) : this.copy(t), a >= 1)) return (this._w = o), (this._x = n), (this._y = r), (this._z = i), this;
                        const s = 1 - a * a;
                        if (s <= Number.EPSILON) {
                            const t = 1 - e;
                            return (this._w = t * o + e * this._w), (this._x = t * n + e * this._x), (this._y = t * r + e * this._y), (this._z = t * i + e * this._z), this.normalize(), this._onChangeCallback(), this;
                        }
                        const l = Math.sqrt(s),
                            c = Math.atan2(l, a),
                            u = Math.sin((1 - e) * c) / l,
                            h = Math.sin(e * c) / l;
                        return (this._w = o * u + this._w * h), (this._x = n * u + this._x * h), (this._y = r * u + this._y * h), (this._z = i * u + this._z * h), this._onChangeCallback(), this;
                    }
                    slerpQuaternions(t, e, n) {
                        this.copy(t).slerp(e, n);
                    }
                    equals(t) {
                        return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w;
                    }
                    fromArray(t, e = 0) {
                        return (this._x = t[e]), (this._y = t[e + 1]), (this._z = t[e + 2]), (this._w = t[e + 3]), this._onChangeCallback(), this;
                    }
                    toArray(t = [], e = 0) {
                        return (t[e] = this._x), (t[e + 1] = this._y), (t[e + 2] = this._z), (t[e + 3] = this._w), t;
                    }
                    fromBufferAttribute(t, e) {
                        return (this._x = t.getX(e)), (this._y = t.getY(e)), (this._z = t.getZ(e)), (this._w = t.getW(e)), this;
                    }
                    _onChange(t) {
                        return (this._onChangeCallback = t), this;
                    }
                    _onChangeCallback() {}
                }
                Ui.prototype.isQuaternion = !0;
                class Fi {
                    constructor(t = 0, e = 0, n = 0) {
                        (this.x = t), (this.y = e), (this.z = n);
                    }
                    set(t, e, n) {
                        return void 0 === n && (n = this.z), (this.x = t), (this.y = e), (this.z = n), this;
                    }
                    setScalar(t) {
                        return (this.x = t), (this.y = t), (this.z = t), this;
                    }
                    setX(t) {
                        return (this.x = t), this;
                    }
                    setY(t) {
                        return (this.y = t), this;
                    }
                    setZ(t) {
                        return (this.z = t), this;
                    }
                    setComponent(t, e) {
                        switch (t) {
                            case 0:
                                this.x = e;
                                break;
                            case 1:
                                this.y = e;
                                break;
                            case 2:
                                this.z = e;
                                break;
                            default:
                                throw new Error("index is out of range: " + t);
                        }
                        return this;
                    }
                    getComponent(t) {
                        switch (t) {
                            case 0:
                                return this.x;
                            case 1:
                                return this.y;
                            case 2:
                                return this.z;
                            default:
                                throw new Error("index is out of range: " + t);
                        }
                    }
                    clone() {
                        return new this.constructor(this.x, this.y, this.z);
                    }
                    copy(t) {
                        return (this.x = t.x), (this.y = t.y), (this.z = t.z), this;
                    }
                    add(t, e) {
                        return void 0 !== e ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t, e)) : ((this.x += t.x), (this.y += t.y), (this.z += t.z), this);
                    }
                    addScalar(t) {
                        return (this.x += t), (this.y += t), (this.z += t), this;
                    }
                    addVectors(t, e) {
                        return (this.x = t.x + e.x), (this.y = t.y + e.y), (this.z = t.z + e.z), this;
                    }
                    addScaledVector(t, e) {
                        return (this.x += t.x * e), (this.y += t.y * e), (this.z += t.z * e), this;
                    }
                    sub(t, e) {
                        return void 0 !== e ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t, e)) : ((this.x -= t.x), (this.y -= t.y), (this.z -= t.z), this);
                    }
                    subScalar(t) {
                        return (this.x -= t), (this.y -= t), (this.z -= t), this;
                    }
                    subVectors(t, e) {
                        return (this.x = t.x - e.x), (this.y = t.y - e.y), (this.z = t.z - e.z), this;
                    }
                    multiply(t, e) {
                        return void 0 !== e
                            ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(t, e))
                            : ((this.x *= t.x), (this.y *= t.y), (this.z *= t.z), this);
                    }
                    multiplyScalar(t) {
                        return (this.x *= t), (this.y *= t), (this.z *= t), this;
                    }
                    multiplyVectors(t, e) {
                        return (this.x = t.x * e.x), (this.y = t.y * e.y), (this.z = t.z * e.z), this;
                    }
                    applyEuler(t) {
                        return (t && t.isEuler) || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."), this.applyQuaternion(zi.setFromEuler(t));
                    }
                    applyAxisAngle(t, e) {
                        return this.applyQuaternion(zi.setFromAxisAngle(t, e));
                    }
                    applyMatrix3(t) {
                        const e = this.x,
                            n = this.y,
                            r = this.z,
                            i = t.elements;
                        return (this.x = i[0] * e + i[3] * n + i[6] * r), (this.y = i[1] * e + i[4] * n + i[7] * r), (this.z = i[2] * e + i[5] * n + i[8] * r), this;
                    }
                    applyNormalMatrix(t) {
                        return this.applyMatrix3(t).normalize();
                    }
                    applyMatrix4(t) {
                        const e = this.x,
                            n = this.y,
                            r = this.z,
                            i = t.elements,
                            o = 1 / (i[3] * e + i[7] * n + i[11] * r + i[15]);
                        return (this.x = (i[0] * e + i[4] * n + i[8] * r + i[12]) * o), (this.y = (i[1] * e + i[5] * n + i[9] * r + i[13]) * o), (this.z = (i[2] * e + i[6] * n + i[10] * r + i[14]) * o), this;
                    }
                    applyQuaternion(t) {
                        const e = this.x,
                            n = this.y,
                            r = this.z,
                            i = t.x,
                            o = t.y,
                            a = t.z,
                            s = t.w,
                            l = s * e + o * r - a * n,
                            c = s * n + a * e - i * r,
                            u = s * r + i * n - o * e,
                            h = -i * e - o * n - a * r;
                        return (this.x = l * s + h * -i + c * -a - u * -o), (this.y = c * s + h * -o + u * -i - l * -a), (this.z = u * s + h * -a + l * -o - c * -i), this;
                    }
                    project(t) {
                        return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix);
                    }
                    unproject(t) {
                        return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld);
                    }
                    transformDirection(t) {
                        const e = this.x,
                            n = this.y,
                            r = this.z,
                            i = t.elements;
                        return (this.x = i[0] * e + i[4] * n + i[8] * r), (this.y = i[1] * e + i[5] * n + i[9] * r), (this.z = i[2] * e + i[6] * n + i[10] * r), this.normalize();
                    }
                    divide(t) {
                        return (this.x /= t.x), (this.y /= t.y), (this.z /= t.z), this;
                    }
                    divideScalar(t) {
                        return this.multiplyScalar(1 / t);
                    }
                    min(t) {
                        return (this.x = Math.min(this.x, t.x)), (this.y = Math.min(this.y, t.y)), (this.z = Math.min(this.z, t.z)), this;
                    }
                    max(t) {
                        return (this.x = Math.max(this.x, t.x)), (this.y = Math.max(this.y, t.y)), (this.z = Math.max(this.z, t.z)), this;
                    }
                    clamp(t, e) {
                        return (this.x = Math.max(t.x, Math.min(e.x, this.x))), (this.y = Math.max(t.y, Math.min(e.y, this.y))), (this.z = Math.max(t.z, Math.min(e.z, this.z))), this;
                    }
                    clampScalar(t, e) {
                        return (this.x = Math.max(t, Math.min(e, this.x))), (this.y = Math.max(t, Math.min(e, this.y))), (this.z = Math.max(t, Math.min(e, this.z))), this;
                    }
                    clampLength(t, e) {
                        const n = this.length();
                        return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
                    }
                    floor() {
                        return (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), (this.z = Math.floor(this.z)), this;
                    }
                    ceil() {
                        return (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), (this.z = Math.ceil(this.z)), this;
                    }
                    round() {
                        return (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), (this.z = Math.round(this.z)), this;
                    }
                    roundToZero() {
                        return (this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x)), (this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y)), (this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z)), this;
                    }
                    negate() {
                        return (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), this;
                    }
                    dot(t) {
                        return this.x * t.x + this.y * t.y + this.z * t.z;
                    }
                    lengthSq() {
                        return this.x * this.x + this.y * this.y + this.z * this.z;
                    }
                    length() {
                        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
                    }
                    manhattanLength() {
                        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
                    }
                    normalize() {
                        return this.divideScalar(this.length() || 1);
                    }
                    setLength(t) {
                        return this.normalize().multiplyScalar(t);
                    }
                    lerp(t, e) {
                        return (this.x += (t.x - this.x) * e), (this.y += (t.y - this.y) * e), (this.z += (t.z - this.z) * e), this;
                    }
                    lerpVectors(t, e, n) {
                        return (this.x = t.x + (e.x - t.x) * n), (this.y = t.y + (e.y - t.y) * n), (this.z = t.z + (e.z - t.z) * n), this;
                    }
                    cross(t, e) {
                        return void 0 !== e ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(t, e)) : this.crossVectors(this, t);
                    }
                    crossVectors(t, e) {
                        const n = t.x,
                            r = t.y,
                            i = t.z,
                            o = e.x,
                            a = e.y,
                            s = e.z;
                        return (this.x = r * s - i * a), (this.y = i * o - n * s), (this.z = n * a - r * o), this;
                    }
                    projectOnVector(t) {
                        const e = t.lengthSq();
                        if (0 === e) return this.set(0, 0, 0);
                        const n = t.dot(this) / e;
                        return this.copy(t).multiplyScalar(n);
                    }
                    projectOnPlane(t) {
                        return Ni.copy(this).projectOnVector(t), this.sub(Ni);
                    }
                    reflect(t) {
                        return this.sub(Ni.copy(t).multiplyScalar(2 * this.dot(t)));
                    }
                    angleTo(t) {
                        const e = Math.sqrt(this.lengthSq() * t.lengthSq());
                        if (0 === e) return Math.PI / 2;
                        const n = this.dot(t) / e;
                        return Math.acos(xi(n, -1, 1));
                    }
                    distanceTo(t) {
                        return Math.sqrt(this.distanceToSquared(t));
                    }
                    distanceToSquared(t) {
                        const e = this.x - t.x,
                            n = this.y - t.y,
                            r = this.z - t.z;
                        return e * e + n * n + r * r;
                    }
                    manhattanDistanceTo(t) {
                        return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z);
                    }
                    setFromSpherical(t) {
                        return this.setFromSphericalCoords(t.radius, t.phi, t.theta);
                    }
                    setFromSphericalCoords(t, e, n) {
                        const r = Math.sin(e) * t;
                        return (this.x = r * Math.sin(n)), (this.y = Math.cos(e) * t), (this.z = r * Math.cos(n)), this;
                    }
                    setFromCylindrical(t) {
                        return this.setFromCylindricalCoords(t.radius, t.theta, t.y);
                    }
                    setFromCylindricalCoords(t, e, n) {
                        return (this.x = t * Math.sin(e)), (this.y = n), (this.z = t * Math.cos(e)), this;
                    }
                    setFromMatrixPosition(t) {
                        const e = t.elements;
                        return (this.x = e[12]), (this.y = e[13]), (this.z = e[14]), this;
                    }
                    setFromMatrixScale(t) {
                        const e = this.setFromMatrixColumn(t, 0).length(),
                            n = this.setFromMatrixColumn(t, 1).length(),
                            r = this.setFromMatrixColumn(t, 2).length();
                        return (this.x = e), (this.y = n), (this.z = r), this;
                    }
                    setFromMatrixColumn(t, e) {
                        return this.fromArray(t.elements, 4 * e);
                    }
                    setFromMatrix3Column(t, e) {
                        return this.fromArray(t.elements, 3 * e);
                    }
                    equals(t) {
                        return t.x === this.x && t.y === this.y && t.z === this.z;
                    }
                    fromArray(t, e = 0) {
                        return (this.x = t[e]), (this.y = t[e + 1]), (this.z = t[e + 2]), this;
                    }
                    toArray(t = [], e = 0) {
                        return (t[e] = this.x), (t[e + 1] = this.y), (t[e + 2] = this.z), t;
                    }
                    fromBufferAttribute(t, e, n) {
                        return void 0 !== n && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."), (this.x = t.getX(e)), (this.y = t.getY(e)), (this.z = t.getZ(e)), this;
                    }
                    random() {
                        return (this.x = Math.random()), (this.y = Math.random()), (this.z = Math.random()), this;
                    }
                }
                Fi.prototype.isVector3 = !0;
                const Ni = new Fi(),
                    zi = new Ui();
                class Bi {
                    constructor(t = new Fi(1 / 0, 1 / 0, 1 / 0), e = new Fi(-1 / 0, -1 / 0, -1 / 0)) {
                        (this.min = t), (this.max = e);
                    }
                    set(t, e) {
                        return this.min.copy(t), this.max.copy(e), this;
                    }
                    setFromArray(t) {
                        let e = 1 / 0,
                            n = 1 / 0,
                            r = 1 / 0,
                            i = -1 / 0,
                            o = -1 / 0,
                            a = -1 / 0;
                        for (let s = 0, l = t.length; s < l; s += 3) {
                            const l = t[s],
                                c = t[s + 1],
                                u = t[s + 2];
                            l < e && (e = l), c < n && (n = c), u < r && (r = u), l > i && (i = l), c > o && (o = c), u > a && (a = u);
                        }
                        return this.min.set(e, n, r), this.max.set(i, o, a), this;
                    }
                    setFromBufferAttribute(t) {
                        let e = 1 / 0,
                            n = 1 / 0,
                            r = 1 / 0,
                            i = -1 / 0,
                            o = -1 / 0,
                            a = -1 / 0;
                        for (let s = 0, l = t.count; s < l; s++) {
                            const l = t.getX(s),
                                c = t.getY(s),
                                u = t.getZ(s);
                            l < e && (e = l), c < n && (n = c), u < r && (r = u), l > i && (i = l), c > o && (o = c), u > a && (a = u);
                        }
                        return this.min.set(e, n, r), this.max.set(i, o, a), this;
                    }
                    setFromPoints(t) {
                        this.makeEmpty();
                        for (let e = 0, n = t.length; e < n; e++) this.expandByPoint(t[e]);
                        return this;
                    }
                    setFromCenterAndSize(t, e) {
                        const n = Hi.copy(e).multiplyScalar(0.5);
                        return this.min.copy(t).sub(n), this.max.copy(t).add(n), this;
                    }
                    setFromObject(t) {
                        return this.makeEmpty(), this.expandByObject(t);
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                    copy(t) {
                        return this.min.copy(t.min), this.max.copy(t.max), this;
                    }
                    makeEmpty() {
                        return (this.min.x = this.min.y = this.min.z = 1 / 0), (this.max.x = this.max.y = this.max.z = -1 / 0), this;
                    }
                    isEmpty() {
                        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
                    }
                    getCenter(t) {
                        return this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(0.5);
                    }
                    getSize(t) {
                        return this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min);
                    }
                    expandByPoint(t) {
                        return this.min.min(t), this.max.max(t), this;
                    }
                    expandByVector(t) {
                        return this.min.sub(t), this.max.add(t), this;
                    }
                    expandByScalar(t) {
                        return this.min.addScalar(-t), this.max.addScalar(t), this;
                    }
                    expandByObject(t) {
                        t.updateWorldMatrix(!1, !1);
                        const e = t.geometry;
                        void 0 !== e && (null === e.boundingBox && e.computeBoundingBox(), Vi.copy(e.boundingBox), Vi.applyMatrix4(t.matrixWorld), this.union(Vi));
                        const n = t.children;
                        for (let t = 0, e = n.length; t < e; t++) this.expandByObject(n[t]);
                        return this;
                    }
                    containsPoint(t) {
                        return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y || t.z < this.min.z || t.z > this.max.z);
                    }
                    containsBox(t) {
                        return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z;
                    }
                    getParameter(t, e) {
                        return e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y), (t.z - this.min.z) / (this.max.z - this.min.z));
                    }
                    intersectsBox(t) {
                        return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y || t.max.z < this.min.z || t.min.z > this.max.z);
                    }
                    intersectsSphere(t) {
                        return this.clampPoint(t.center, Hi), Hi.distanceToSquared(t.center) <= t.radius * t.radius;
                    }
                    intersectsPlane(t) {
                        let e, n;
                        return (
                            t.normal.x > 0 ? ((e = t.normal.x * this.min.x), (n = t.normal.x * this.max.x)) : ((e = t.normal.x * this.max.x), (n = t.normal.x * this.min.x)),
                                t.normal.y > 0 ? ((e += t.normal.y * this.min.y), (n += t.normal.y * this.max.y)) : ((e += t.normal.y * this.max.y), (n += t.normal.y * this.min.y)),
                                t.normal.z > 0 ? ((e += t.normal.z * this.min.z), (n += t.normal.z * this.max.z)) : ((e += t.normal.z * this.max.z), (n += t.normal.z * this.min.z)),
                            e <= -t.constant && n >= -t.constant
                        );
                    }
                    intersectsTriangle(t) {
                        if (this.isEmpty()) return !1;
                        this.getCenter(Ji), $i.subVectors(this.max, Ji), Wi.subVectors(t.a, Ji), ji.subVectors(t.b, Ji), qi.subVectors(t.c, Ji), Xi.subVectors(ji, Wi), Yi.subVectors(qi, ji), Zi.subVectors(Wi, qi);
                        let e = [0, -Xi.z, Xi.y, 0, -Yi.z, Yi.y, 0, -Zi.z, Zi.y, Xi.z, 0, -Xi.x, Yi.z, 0, -Yi.x, Zi.z, 0, -Zi.x, -Xi.y, Xi.x, 0, -Yi.y, Yi.x, 0, -Zi.y, Zi.x, 0];
                        return !!to(e, Wi, ji, qi, $i) && ((e = [1, 0, 0, 0, 1, 0, 0, 0, 1]), !!to(e, Wi, ji, qi, $i) && (Qi.crossVectors(Xi, Yi), (e = [Qi.x, Qi.y, Qi.z]), to(e, Wi, ji, qi, $i)));
                    }
                    clampPoint(t, e) {
                        return e.copy(t).clamp(this.min, this.max);
                    }
                    distanceToPoint(t) {
                        return Hi.copy(t).clamp(this.min, this.max).sub(t).length();
                    }
                    getBoundingSphere(t) {
                        return this.getCenter(t.center), (t.radius = 0.5 * this.getSize(Hi).length()), t;
                    }
                    intersect(t) {
                        return this.min.max(t.min), this.max.min(t.max), this.isEmpty() && this.makeEmpty(), this;
                    }
                    union(t) {
                        return this.min.min(t.min), this.max.max(t.max), this;
                    }
                    applyMatrix4(t) {
                        return (
                            this.isEmpty() ||
                            (Gi[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t),
                                Gi[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t),
                                Gi[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t),
                                Gi[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t),
                                Gi[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t),
                                Gi[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t),
                                Gi[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t),
                                Gi[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t),
                                this.setFromPoints(Gi)),
                                this
                        );
                    }
                    translate(t) {
                        return this.min.add(t), this.max.add(t), this;
                    }
                    equals(t) {
                        return t.min.equals(this.min) && t.max.equals(this.max);
                    }
                }
                Bi.prototype.isBox3 = !0;
                const Gi = [new Fi(), new Fi(), new Fi(), new Fi(), new Fi(), new Fi(), new Fi(), new Fi()],
                    Hi = new Fi(),
                    Vi = new Bi(),
                    Wi = new Fi(),
                    ji = new Fi(),
                    qi = new Fi(),
                    Xi = new Fi(),
                    Yi = new Fi(),
                    Zi = new Fi(),
                    Ji = new Fi(),
                    $i = new Fi(),
                    Qi = new Fi(),
                    Ki = new Fi();
                function to(t, e, n, r, i) {
                    for (let o = 0, a = t.length - 3; o <= a; o += 3) {
                        Ki.fromArray(t, o);
                        const a = i.x * Math.abs(Ki.x) + i.y * Math.abs(Ki.y) + i.z * Math.abs(Ki.z),
                            s = e.dot(Ki),
                            l = n.dot(Ki),
                            c = r.dot(Ki);
                        if (Math.max(-Math.max(s, l, c), Math.min(s, l, c)) > a) return !1;
                    }
                    return !0;
                }
                const eo = new Bi(),
                    no = new Fi(),
                    ro = new Fi(),
                    io = new Fi();
                class oo {
                    constructor(t = new Fi(), e = -1) {
                        (this.center = t), (this.radius = e);
                    }
                    set(t, e) {
                        return this.center.copy(t), (this.radius = e), this;
                    }
                    setFromPoints(t, e) {
                        const n = this.center;
                        void 0 !== e ? n.copy(e) : eo.setFromPoints(t).getCenter(n);
                        let r = 0;
                        for (let e = 0, i = t.length; e < i; e++) r = Math.max(r, n.distanceToSquared(t[e]));
                        return (this.radius = Math.sqrt(r)), this;
                    }
                    copy(t) {
                        return this.center.copy(t.center), (this.radius = t.radius), this;
                    }
                    isEmpty() {
                        return this.radius < 0;
                    }
                    makeEmpty() {
                        return this.center.set(0, 0, 0), (this.radius = -1), this;
                    }
                    containsPoint(t) {
                        return t.distanceToSquared(this.center) <= this.radius * this.radius;
                    }
                    distanceToPoint(t) {
                        return t.distanceTo(this.center) - this.radius;
                    }
                    intersectsSphere(t) {
                        const e = this.radius + t.radius;
                        return t.center.distanceToSquared(this.center) <= e * e;
                    }
                    intersectsBox(t) {
                        return t.intersectsSphere(this);
                    }
                    intersectsPlane(t) {
                        return Math.abs(t.distanceToPoint(this.center)) <= this.radius;
                    }
                    clampPoint(t, e) {
                        const n = this.center.distanceToSquared(t);
                        return e.copy(t), n > this.radius * this.radius && (e.sub(this.center).normalize(), e.multiplyScalar(this.radius).add(this.center)), e;
                    }
                    getBoundingBox(t) {
                        return this.isEmpty() ? (t.makeEmpty(), t) : (t.set(this.center, this.center), t.expandByScalar(this.radius), t);
                    }
                    applyMatrix4(t) {
                        return this.center.applyMatrix4(t), (this.radius = this.radius * t.getMaxScaleOnAxis()), this;
                    }
                    translate(t) {
                        return this.center.add(t), this;
                    }
                    expandByPoint(t) {
                        io.subVectors(t, this.center);
                        const e = io.lengthSq();
                        if (e > this.radius * this.radius) {
                            const t = Math.sqrt(e),
                                n = 0.5 * (t - this.radius);
                            this.center.add(io.multiplyScalar(n / t)), (this.radius += n);
                        }
                        return this;
                    }
                    union(t) {
                        return ro.subVectors(t.center, this.center).normalize().multiplyScalar(t.radius), this.expandByPoint(no.copy(t.center).add(ro)), this.expandByPoint(no.copy(t.center).sub(ro)), this;
                    }
                    equals(t) {
                        return t.center.equals(this.center) && t.radius === this.radius;
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                }
                const ao = new Fi(),
                    so = new Fi(),
                    lo = new Fi(),
                    co = new Fi(),
                    uo = new Fi(),
                    ho = new Fi(),
                    fo = new Fi();
                class po {
                    constructor(t = new Fi(), e = new Fi(0, 0, -1)) {
                        (this.origin = t), (this.direction = e);
                    }
                    set(t, e) {
                        return this.origin.copy(t), this.direction.copy(e), this;
                    }
                    copy(t) {
                        return this.origin.copy(t.origin), this.direction.copy(t.direction), this;
                    }
                    at(t, e) {
                        return e.copy(this.direction).multiplyScalar(t).add(this.origin);
                    }
                    lookAt(t) {
                        return this.direction.copy(t).sub(this.origin).normalize(), this;
                    }
                    recast(t) {
                        return this.origin.copy(this.at(t, ao)), this;
                    }
                    closestPointToPoint(t, e) {
                        e.subVectors(t, this.origin);
                        const n = e.dot(this.direction);
                        return n < 0 ? e.copy(this.origin) : e.copy(this.direction).multiplyScalar(n).add(this.origin);
                    }
                    distanceToPoint(t) {
                        return Math.sqrt(this.distanceSqToPoint(t));
                    }
                    distanceSqToPoint(t) {
                        const e = ao.subVectors(t, this.origin).dot(this.direction);
                        return e < 0 ? this.origin.distanceToSquared(t) : (ao.copy(this.direction).multiplyScalar(e).add(this.origin), ao.distanceToSquared(t));
                    }
                    distanceSqToSegment(t, e, n, r) {
                        so.copy(t).add(e).multiplyScalar(0.5), lo.copy(e).sub(t).normalize(), co.copy(this.origin).sub(so);
                        const i = 0.5 * t.distanceTo(e),
                            o = -this.direction.dot(lo),
                            a = co.dot(this.direction),
                            s = -co.dot(lo),
                            l = co.lengthSq(),
                            c = Math.abs(1 - o * o);
                        let u, h, d, f;
                        if (c > 0)
                            if (((u = o * s - a), (h = o * a - s), (f = i * c), u >= 0))
                                if (h >= -f)
                                    if (h <= f) {
                                        const t = 1 / c;
                                        (u *= t), (h *= t), (d = u * (u + o * h + 2 * a) + h * (o * u + h + 2 * s) + l);
                                    } else (h = i), (u = Math.max(0, -(o * h + a))), (d = -u * u + h * (h + 2 * s) + l);
                                else (h = -i), (u = Math.max(0, -(o * h + a))), (d = -u * u + h * (h + 2 * s) + l);
                            else
                                h <= -f
                                    ? ((u = Math.max(0, -(-o * i + a))), (h = u > 0 ? -i : Math.min(Math.max(-i, -s), i)), (d = -u * u + h * (h + 2 * s) + l))
                                    : h <= f
                                        ? ((u = 0), (h = Math.min(Math.max(-i, -s), i)), (d = h * (h + 2 * s) + l))
                                        : ((u = Math.max(0, -(o * i + a))), (h = u > 0 ? i : Math.min(Math.max(-i, -s), i)), (d = -u * u + h * (h + 2 * s) + l));
                        else (h = o > 0 ? -i : i), (u = Math.max(0, -(o * h + a))), (d = -u * u + h * (h + 2 * s) + l);
                        return n && n.copy(this.direction).multiplyScalar(u).add(this.origin), r && r.copy(lo).multiplyScalar(h).add(so), d;
                    }
                    intersectSphere(t, e) {
                        ao.subVectors(t.center, this.origin);
                        const n = ao.dot(this.direction),
                            r = ao.dot(ao) - n * n,
                            i = t.radius * t.radius;
                        if (r > i) return null;
                        const o = Math.sqrt(i - r),
                            a = n - o,
                            s = n + o;
                        return a < 0 && s < 0 ? null : a < 0 ? this.at(s, e) : this.at(a, e);
                    }
                    intersectsSphere(t) {
                        return this.distanceSqToPoint(t.center) <= t.radius * t.radius;
                    }
                    distanceToPlane(t) {
                        const e = t.normal.dot(this.direction);
                        if (0 === e) return 0 === t.distanceToPoint(this.origin) ? 0 : null;
                        const n = -(this.origin.dot(t.normal) + t.constant) / e;
                        return n >= 0 ? n : null;
                    }
                    intersectPlane(t, e) {
                        const n = this.distanceToPlane(t);
                        return null === n ? null : this.at(n, e);
                    }
                    intersectsPlane(t) {
                        const e = t.distanceToPoint(this.origin);
                        if (0 === e) return !0;
                        return t.normal.dot(this.direction) * e < 0;
                    }
                    intersectBox(t, e) {
                        let n, r, i, o, a, s;
                        const l = 1 / this.direction.x,
                            c = 1 / this.direction.y,
                            u = 1 / this.direction.z,
                            h = this.origin;
                        return (
                            l >= 0 ? ((n = (t.min.x - h.x) * l), (r = (t.max.x - h.x) * l)) : ((n = (t.max.x - h.x) * l), (r = (t.min.x - h.x) * l)),
                                c >= 0 ? ((i = (t.min.y - h.y) * c), (o = (t.max.y - h.y) * c)) : ((i = (t.max.y - h.y) * c), (o = (t.min.y - h.y) * c)),
                                n > o || i > r
                                    ? null
                                    : ((i > n || n != n) && (n = i),
                                    (o < r || r != r) && (r = o),
                                        u >= 0 ? ((a = (t.min.z - h.z) * u), (s = (t.max.z - h.z) * u)) : ((a = (t.max.z - h.z) * u), (s = (t.min.z - h.z) * u)),
                                        n > s || a > r ? null : ((a > n || n != n) && (n = a), (s < r || r != r) && (r = s), r < 0 ? null : this.at(n >= 0 ? n : r, e)))
                        );
                    }
                    intersectsBox(t) {
                        return null !== this.intersectBox(t, ao);
                    }
                    intersectTriangle(t, e, n, r, i) {
                        uo.subVectors(e, t), ho.subVectors(n, t), fo.crossVectors(uo, ho);
                        let o,
                            a = this.direction.dot(fo);
                        if (a > 0) {
                            if (r) return null;
                            o = 1;
                        } else {
                            if (!(a < 0)) return null;
                            (o = -1), (a = -a);
                        }
                        co.subVectors(this.origin, t);
                        const s = o * this.direction.dot(ho.crossVectors(co, ho));
                        if (s < 0) return null;
                        const l = o * this.direction.dot(uo.cross(co));
                        if (l < 0) return null;
                        if (s + l > a) return null;
                        const c = -o * co.dot(fo);
                        return c < 0 ? null : this.at(c / a, i);
                    }
                    applyMatrix4(t) {
                        return this.origin.applyMatrix4(t), this.direction.transformDirection(t), this;
                    }
                    equals(t) {
                        return t.origin.equals(this.origin) && t.direction.equals(this.direction);
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                }
                class mo {
                    constructor() {
                        (this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]), arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
                    }
                    set(t, e, n, r, i, o, a, s, l, c, u, h, d, f, p, m) {
                        const g = this.elements;
                        return (g[0] = t), (g[4] = e), (g[8] = n), (g[12] = r), (g[1] = i), (g[5] = o), (g[9] = a), (g[13] = s), (g[2] = l), (g[6] = c), (g[10] = u), (g[14] = h), (g[3] = d), (g[7] = f), (g[11] = p), (g[15] = m), this;
                    }
                    identity() {
                        return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
                    }
                    clone() {
                        return new mo().fromArray(this.elements);
                    }
                    copy(t) {
                        const e = this.elements,
                            n = t.elements;
                        return (
                            (e[0] = n[0]),
                                (e[1] = n[1]),
                                (e[2] = n[2]),
                                (e[3] = n[3]),
                                (e[4] = n[4]),
                                (e[5] = n[5]),
                                (e[6] = n[6]),
                                (e[7] = n[7]),
                                (e[8] = n[8]),
                                (e[9] = n[9]),
                                (e[10] = n[10]),
                                (e[11] = n[11]),
                                (e[12] = n[12]),
                                (e[13] = n[13]),
                                (e[14] = n[14]),
                                (e[15] = n[15]),
                                this
                        );
                    }
                    copyPosition(t) {
                        const e = this.elements,
                            n = t.elements;
                        return (e[12] = n[12]), (e[13] = n[13]), (e[14] = n[14]), this;
                    }
                    setFromMatrix3(t) {
                        const e = t.elements;
                        return this.set(e[0], e[3], e[6], 0, e[1], e[4], e[7], 0, e[2], e[5], e[8], 0, 0, 0, 0, 1), this;
                    }
                    extractBasis(t, e, n) {
                        return t.setFromMatrixColumn(this, 0), e.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
                    }
                    makeBasis(t, e, n) {
                        return this.set(t.x, e.x, n.x, 0, t.y, e.y, n.y, 0, t.z, e.z, n.z, 0, 0, 0, 0, 1), this;
                    }
                    extractRotation(t) {
                        const e = this.elements,
                            n = t.elements,
                            r = 1 / go.setFromMatrixColumn(t, 0).length(),
                            i = 1 / go.setFromMatrixColumn(t, 1).length(),
                            o = 1 / go.setFromMatrixColumn(t, 2).length();
                        return (
                            (e[0] = n[0] * r),
                                (e[1] = n[1] * r),
                                (e[2] = n[2] * r),
                                (e[3] = 0),
                                (e[4] = n[4] * i),
                                (e[5] = n[5] * i),
                                (e[6] = n[6] * i),
                                (e[7] = 0),
                                (e[8] = n[8] * o),
                                (e[9] = n[9] * o),
                                (e[10] = n[10] * o),
                                (e[11] = 0),
                                (e[12] = 0),
                                (e[13] = 0),
                                (e[14] = 0),
                                (e[15] = 1),
                                this
                        );
                    }
                    makeRotationFromEuler(t) {
                        (t && t.isEuler) || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
                        const e = this.elements,
                            n = t.x,
                            r = t.y,
                            i = t.z,
                            o = Math.cos(n),
                            a = Math.sin(n),
                            s = Math.cos(r),
                            l = Math.sin(r),
                            c = Math.cos(i),
                            u = Math.sin(i);
                        if ("XYZ" === t.order) {
                            const t = o * c,
                                n = o * u,
                                r = a * c,
                                i = a * u;
                            (e[0] = s * c), (e[4] = -s * u), (e[8] = l), (e[1] = n + r * l), (e[5] = t - i * l), (e[9] = -a * s), (e[2] = i - t * l), (e[6] = r + n * l), (e[10] = o * s);
                        } else if ("YXZ" === t.order) {
                            const t = s * c,
                                n = s * u,
                                r = l * c,
                                i = l * u;
                            (e[0] = t + i * a), (e[4] = r * a - n), (e[8] = o * l), (e[1] = o * u), (e[5] = o * c), (e[9] = -a), (e[2] = n * a - r), (e[6] = i + t * a), (e[10] = o * s);
                        } else if ("ZXY" === t.order) {
                            const t = s * c,
                                n = s * u,
                                r = l * c,
                                i = l * u;
                            (e[0] = t - i * a), (e[4] = -o * u), (e[8] = r + n * a), (e[1] = n + r * a), (e[5] = o * c), (e[9] = i - t * a), (e[2] = -o * l), (e[6] = a), (e[10] = o * s);
                        } else if ("ZYX" === t.order) {
                            const t = o * c,
                                n = o * u,
                                r = a * c,
                                i = a * u;
                            (e[0] = s * c), (e[4] = r * l - n), (e[8] = t * l + i), (e[1] = s * u), (e[5] = i * l + t), (e[9] = n * l - r), (e[2] = -l), (e[6] = a * s), (e[10] = o * s);
                        } else if ("YZX" === t.order) {
                            const t = o * s,
                                n = o * l,
                                r = a * s,
                                i = a * l;
                            (e[0] = s * c), (e[4] = i - t * u), (e[8] = r * u + n), (e[1] = u), (e[5] = o * c), (e[9] = -a * c), (e[2] = -l * c), (e[6] = n * u + r), (e[10] = t - i * u);
                        } else if ("XZY" === t.order) {
                            const t = o * s,
                                n = o * l,
                                r = a * s,
                                i = a * l;
                            (e[0] = s * c), (e[4] = -u), (e[8] = l * c), (e[1] = t * u + i), (e[5] = o * c), (e[9] = n * u - r), (e[2] = r * u - n), (e[6] = a * c), (e[10] = i * u + t);
                        }
                        return (e[3] = 0), (e[7] = 0), (e[11] = 0), (e[12] = 0), (e[13] = 0), (e[14] = 0), (e[15] = 1), this;
                    }
                    makeRotationFromQuaternion(t) {
                        return this.compose(yo, t, xo);
                    }
                    lookAt(t, e, n) {
                        const r = this.elements;
                        return (
                            wo.subVectors(t, e),
                            0 === wo.lengthSq() && (wo.z = 1),
                                wo.normalize(),
                                _o.crossVectors(n, wo),
                            0 === _o.lengthSq() && (1 === Math.abs(n.z) ? (wo.x += 1e-4) : (wo.z += 1e-4), wo.normalize(), _o.crossVectors(n, wo)),
                                _o.normalize(),
                                bo.crossVectors(wo, _o),
                                (r[0] = _o.x),
                                (r[4] = bo.x),
                                (r[8] = wo.x),
                                (r[1] = _o.y),
                                (r[5] = bo.y),
                                (r[9] = wo.y),
                                (r[2] = _o.z),
                                (r[6] = bo.z),
                                (r[10] = wo.z),
                                this
                        );
                    }
                    multiply(t, e) {
                        return void 0 !== e ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(t, e)) : this.multiplyMatrices(this, t);
                    }
                    premultiply(t) {
                        return this.multiplyMatrices(t, this);
                    }
                    multiplyMatrices(t, e) {
                        const n = t.elements,
                            r = e.elements,
                            i = this.elements,
                            o = n[0],
                            a = n[4],
                            s = n[8],
                            l = n[12],
                            c = n[1],
                            u = n[5],
                            h = n[9],
                            d = n[13],
                            f = n[2],
                            p = n[6],
                            m = n[10],
                            g = n[14],
                            v = n[3],
                            y = n[7],
                            x = n[11],
                            _ = n[15],
                            b = r[0],
                            w = r[4],
                            S = r[8],
                            M = r[12],
                            T = r[1],
                            E = r[5],
                            A = r[9],
                            L = r[13],
                            C = r[2],
                            R = r[6],
                            P = r[10],
                            I = r[14],
                            O = r[3],
                            D = r[7],
                            k = r[11],
                            U = r[15];
                        return (
                            (i[0] = o * b + a * T + s * C + l * O),
                                (i[4] = o * w + a * E + s * R + l * D),
                                (i[8] = o * S + a * A + s * P + l * k),
                                (i[12] = o * M + a * L + s * I + l * U),
                                (i[1] = c * b + u * T + h * C + d * O),
                                (i[5] = c * w + u * E + h * R + d * D),
                                (i[9] = c * S + u * A + h * P + d * k),
                                (i[13] = c * M + u * L + h * I + d * U),
                                (i[2] = f * b + p * T + m * C + g * O),
                                (i[6] = f * w + p * E + m * R + g * D),
                                (i[10] = f * S + p * A + m * P + g * k),
                                (i[14] = f * M + p * L + m * I + g * U),
                                (i[3] = v * b + y * T + x * C + _ * O),
                                (i[7] = v * w + y * E + x * R + _ * D),
                                (i[11] = v * S + y * A + x * P + _ * k),
                                (i[15] = v * M + y * L + x * I + _ * U),
                                this
                        );
                    }
                    multiplyScalar(t) {
                        const e = this.elements;
                        return (
                            (e[0] *= t),
                                (e[4] *= t),
                                (e[8] *= t),
                                (e[12] *= t),
                                (e[1] *= t),
                                (e[5] *= t),
                                (e[9] *= t),
                                (e[13] *= t),
                                (e[2] *= t),
                                (e[6] *= t),
                                (e[10] *= t),
                                (e[14] *= t),
                                (e[3] *= t),
                                (e[7] *= t),
                                (e[11] *= t),
                                (e[15] *= t),
                                this
                        );
                    }
                    determinant() {
                        const t = this.elements,
                            e = t[0],
                            n = t[4],
                            r = t[8],
                            i = t[12],
                            o = t[1],
                            a = t[5],
                            s = t[9],
                            l = t[13],
                            c = t[2],
                            u = t[6],
                            h = t[10],
                            d = t[14];
                        return (
                            t[3] * (+i * s * u - r * l * u - i * a * h + n * l * h + r * a * d - n * s * d) +
                            t[7] * (+e * s * d - e * l * h + i * o * h - r * o * d + r * l * c - i * s * c) +
                            t[11] * (+e * l * u - e * a * d - i * o * u + n * o * d + i * a * c - n * l * c) +
                            t[15] * (-r * a * c - e * s * u + e * a * h + r * o * u - n * o * h + n * s * c)
                        );
                    }
                    transpose() {
                        const t = this.elements;
                        let e;
                        return (
                            (e = t[1]),
                                (t[1] = t[4]),
                                (t[4] = e),
                                (e = t[2]),
                                (t[2] = t[8]),
                                (t[8] = e),
                                (e = t[6]),
                                (t[6] = t[9]),
                                (t[9] = e),
                                (e = t[3]),
                                (t[3] = t[12]),
                                (t[12] = e),
                                (e = t[7]),
                                (t[7] = t[13]),
                                (t[13] = e),
                                (e = t[11]),
                                (t[11] = t[14]),
                                (t[14] = e),
                                this
                        );
                    }
                    setPosition(t, e, n) {
                        const r = this.elements;
                        return t.isVector3 ? ((r[12] = t.x), (r[13] = t.y), (r[14] = t.z)) : ((r[12] = t), (r[13] = e), (r[14] = n)), this;
                    }
                    invert() {
                        const t = this.elements,
                            e = t[0],
                            n = t[1],
                            r = t[2],
                            i = t[3],
                            o = t[4],
                            a = t[5],
                            s = t[6],
                            l = t[7],
                            c = t[8],
                            u = t[9],
                            h = t[10],
                            d = t[11],
                            f = t[12],
                            p = t[13],
                            m = t[14],
                            g = t[15],
                            v = u * m * l - p * h * l + p * s * d - a * m * d - u * s * g + a * h * g,
                            y = f * h * l - c * m * l - f * s * d + o * m * d + c * s * g - o * h * g,
                            x = c * p * l - f * u * l + f * a * d - o * p * d - c * a * g + o * u * g,
                            _ = f * u * s - c * p * s - f * a * h + o * p * h + c * a * m - o * u * m,
                            b = e * v + n * y + r * x + i * _;
                        if (0 === b) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                        const w = 1 / b;
                        return (
                            (t[0] = v * w),
                                (t[1] = (p * h * i - u * m * i - p * r * d + n * m * d + u * r * g - n * h * g) * w),
                                (t[2] = (a * m * i - p * s * i + p * r * l - n * m * l - a * r * g + n * s * g) * w),
                                (t[3] = (u * s * i - a * h * i - u * r * l + n * h * l + a * r * d - n * s * d) * w),
                                (t[4] = y * w),
                                (t[5] = (c * m * i - f * h * i + f * r * d - e * m * d - c * r * g + e * h * g) * w),
                                (t[6] = (f * s * i - o * m * i - f * r * l + e * m * l + o * r * g - e * s * g) * w),
                                (t[7] = (o * h * i - c * s * i + c * r * l - e * h * l - o * r * d + e * s * d) * w),
                                (t[8] = x * w),
                                (t[9] = (f * u * i - c * p * i - f * n * d + e * p * d + c * n * g - e * u * g) * w),
                                (t[10] = (o * p * i - f * a * i + f * n * l - e * p * l - o * n * g + e * a * g) * w),
                                (t[11] = (c * a * i - o * u * i - c * n * l + e * u * l + o * n * d - e * a * d) * w),
                                (t[12] = _ * w),
                                (t[13] = (c * p * r - f * u * r + f * n * h - e * p * h - c * n * m + e * u * m) * w),
                                (t[14] = (f * a * r - o * p * r - f * n * s + e * p * s + o * n * m - e * a * m) * w),
                                (t[15] = (o * u * r - c * a * r + c * n * s - e * u * s - o * n * h + e * a * h) * w),
                                this
                        );
                    }
                    scale(t) {
                        const e = this.elements,
                            n = t.x,
                            r = t.y,
                            i = t.z;
                        return (e[0] *= n), (e[4] *= r), (e[8] *= i), (e[1] *= n), (e[5] *= r), (e[9] *= i), (e[2] *= n), (e[6] *= r), (e[10] *= i), (e[3] *= n), (e[7] *= r), (e[11] *= i), this;
                    }
                    getMaxScaleOnAxis() {
                        const t = this.elements,
                            e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2],
                            n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6],
                            r = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
                        return Math.sqrt(Math.max(e, n, r));
                    }
                    makeTranslation(t, e, n) {
                        return this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, n, 0, 0, 0, 1), this;
                    }
                    makeRotationX(t) {
                        const e = Math.cos(t),
                            n = Math.sin(t);
                        return this.set(1, 0, 0, 0, 0, e, -n, 0, 0, n, e, 0, 0, 0, 0, 1), this;
                    }
                    makeRotationY(t) {
                        const e = Math.cos(t),
                            n = Math.sin(t);
                        return this.set(e, 0, n, 0, 0, 1, 0, 0, -n, 0, e, 0, 0, 0, 0, 1), this;
                    }
                    makeRotationZ(t) {
                        const e = Math.cos(t),
                            n = Math.sin(t);
                        return this.set(e, -n, 0, 0, n, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
                    }
                    makeRotationAxis(t, e) {
                        const n = Math.cos(e),
                            r = Math.sin(e),
                            i = 1 - n,
                            o = t.x,
                            a = t.y,
                            s = t.z,
                            l = i * o,
                            c = i * a;
                        return this.set(l * o + n, l * a - r * s, l * s + r * a, 0, l * a + r * s, c * a + n, c * s - r * o, 0, l * s - r * a, c * s + r * o, i * s * s + n, 0, 0, 0, 0, 1), this;
                    }
                    makeScale(t, e, n) {
                        return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this;
                    }
                    makeShear(t, e, n, r, i, o) {
                        return this.set(1, n, i, 0, t, 1, o, 0, e, r, 1, 0, 0, 0, 0, 1), this;
                    }
                    compose(t, e, n) {
                        const r = this.elements,
                            i = e._x,
                            o = e._y,
                            a = e._z,
                            s = e._w,
                            l = i + i,
                            c = o + o,
                            u = a + a,
                            h = i * l,
                            d = i * c,
                            f = i * u,
                            p = o * c,
                            m = o * u,
                            g = a * u,
                            v = s * l,
                            y = s * c,
                            x = s * u,
                            _ = n.x,
                            b = n.y,
                            w = n.z;
                        return (
                            (r[0] = (1 - (p + g)) * _),
                                (r[1] = (d + x) * _),
                                (r[2] = (f - y) * _),
                                (r[3] = 0),
                                (r[4] = (d - x) * b),
                                (r[5] = (1 - (h + g)) * b),
                                (r[6] = (m + v) * b),
                                (r[7] = 0),
                                (r[8] = (f + y) * w),
                                (r[9] = (m - v) * w),
                                (r[10] = (1 - (h + p)) * w),
                                (r[11] = 0),
                                (r[12] = t.x),
                                (r[13] = t.y),
                                (r[14] = t.z),
                                (r[15] = 1),
                                this
                        );
                    }
                    decompose(t, e, n) {
                        const r = this.elements;
                        let i = go.set(r[0], r[1], r[2]).length();
                        const o = go.set(r[4], r[5], r[6]).length(),
                            a = go.set(r[8], r[9], r[10]).length();
                        this.determinant() < 0 && (i = -i), (t.x = r[12]), (t.y = r[13]), (t.z = r[14]), vo.copy(this);
                        const s = 1 / i,
                            l = 1 / o,
                            c = 1 / a;
                        return (
                            (vo.elements[0] *= s),
                                (vo.elements[1] *= s),
                                (vo.elements[2] *= s),
                                (vo.elements[4] *= l),
                                (vo.elements[5] *= l),
                                (vo.elements[6] *= l),
                                (vo.elements[8] *= c),
                                (vo.elements[9] *= c),
                                (vo.elements[10] *= c),
                                e.setFromRotationMatrix(vo),
                                (n.x = i),
                                (n.y = o),
                                (n.z = a),
                                this
                        );
                    }
                    makePerspective(t, e, n, r, i, o) {
                        void 0 === o && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
                        const a = this.elements,
                            s = (2 * i) / (e - t),
                            l = (2 * i) / (n - r),
                            c = (e + t) / (e - t),
                            u = (n + r) / (n - r),
                            h = -(o + i) / (o - i),
                            d = (-2 * o * i) / (o - i);
                        return (a[0] = s), (a[4] = 0), (a[8] = c), (a[12] = 0), (a[1] = 0), (a[5] = l), (a[9] = u), (a[13] = 0), (a[2] = 0), (a[6] = 0), (a[10] = h), (a[14] = d), (a[3] = 0), (a[7] = 0), (a[11] = -1), (a[15] = 0), this;
                    }
                    makeOrthographic(t, e, n, r, i, o) {
                        const a = this.elements,
                            s = 1 / (e - t),
                            l = 1 / (n - r),
                            c = 1 / (o - i),
                            u = (e + t) * s,
                            h = (n + r) * l,
                            d = (o + i) * c;
                        return (
                            (a[0] = 2 * s),
                                (a[4] = 0),
                                (a[8] = 0),
                                (a[12] = -u),
                                (a[1] = 0),
                                (a[5] = 2 * l),
                                (a[9] = 0),
                                (a[13] = -h),
                                (a[2] = 0),
                                (a[6] = 0),
                                (a[10] = -2 * c),
                                (a[14] = -d),
                                (a[3] = 0),
                                (a[7] = 0),
                                (a[11] = 0),
                                (a[15] = 1),
                                this
                        );
                    }
                    equals(t) {
                        const e = this.elements,
                            n = t.elements;
                        for (let t = 0; t < 16; t++) if (e[t] !== n[t]) return !1;
                        return !0;
                    }
                    fromArray(t, e = 0) {
                        for (let n = 0; n < 16; n++) this.elements[n] = t[n + e];
                        return this;
                    }
                    toArray(t = [], e = 0) {
                        const n = this.elements;
                        return (
                            (t[e] = n[0]),
                                (t[e + 1] = n[1]),
                                (t[e + 2] = n[2]),
                                (t[e + 3] = n[3]),
                                (t[e + 4] = n[4]),
                                (t[e + 5] = n[5]),
                                (t[e + 6] = n[6]),
                                (t[e + 7] = n[7]),
                                (t[e + 8] = n[8]),
                                (t[e + 9] = n[9]),
                                (t[e + 10] = n[10]),
                                (t[e + 11] = n[11]),
                                (t[e + 12] = n[12]),
                                (t[e + 13] = n[13]),
                                (t[e + 14] = n[14]),
                                (t[e + 15] = n[15]),
                                t
                        );
                    }
                }
                mo.prototype.isMatrix4 = !0;
                const go = new Fi(),
                    vo = new mo(),
                    yo = new Fi(0, 0, 0),
                    xo = new Fi(1, 1, 1),
                    _o = new Fi(),
                    bo = new Fi(),
                    wo = new Fi(),
                    So = new mo(),
                    Mo = new Ui();
                class To {
                    constructor(t = 0, e = 0, n = 0, r = To.DefaultOrder) {
                        (this._x = t), (this._y = e), (this._z = n), (this._order = r);
                    }
                    get x() {
                        return this._x;
                    }
                    set x(t) {
                        (this._x = t), this._onChangeCallback();
                    }
                    get y() {
                        return this._y;
                    }
                    set y(t) {
                        (this._y = t), this._onChangeCallback();
                    }
                    get z() {
                        return this._z;
                    }
                    set z(t) {
                        (this._z = t), this._onChangeCallback();
                    }
                    get order() {
                        return this._order;
                    }
                    set order(t) {
                        (this._order = t), this._onChangeCallback();
                    }
                    set(t, e, n, r = this._order) {
                        return (this._x = t), (this._y = e), (this._z = n), (this._order = r), this._onChangeCallback(), this;
                    }
                    clone() {
                        return new this.constructor(this._x, this._y, this._z, this._order);
                    }
                    copy(t) {
                        return (this._x = t._x), (this._y = t._y), (this._z = t._z), (this._order = t._order), this._onChangeCallback(), this;
                    }
                    setFromRotationMatrix(t, e = this._order, n = !0) {
                        const r = t.elements,
                            i = r[0],
                            o = r[4],
                            a = r[8],
                            s = r[1],
                            l = r[5],
                            c = r[9],
                            u = r[2],
                            h = r[6],
                            d = r[10];
                        switch (e) {
                            case "XYZ":
                                (this._y = Math.asin(xi(a, -1, 1))), Math.abs(a) < 0.9999999 ? ((this._x = Math.atan2(-c, d)), (this._z = Math.atan2(-o, i))) : ((this._x = Math.atan2(h, l)), (this._z = 0));
                                break;
                            case "YXZ":
                                (this._x = Math.asin(-xi(c, -1, 1))), Math.abs(c) < 0.9999999 ? ((this._y = Math.atan2(a, d)), (this._z = Math.atan2(s, l))) : ((this._y = Math.atan2(-u, i)), (this._z = 0));
                                break;
                            case "ZXY":
                                (this._x = Math.asin(xi(h, -1, 1))), Math.abs(h) < 0.9999999 ? ((this._y = Math.atan2(-u, d)), (this._z = Math.atan2(-o, l))) : ((this._y = 0), (this._z = Math.atan2(s, i)));
                                break;
                            case "ZYX":
                                (this._y = Math.asin(-xi(u, -1, 1))), Math.abs(u) < 0.9999999 ? ((this._x = Math.atan2(h, d)), (this._z = Math.atan2(s, i))) : ((this._x = 0), (this._z = Math.atan2(-o, l)));
                                break;
                            case "YZX":
                                (this._z = Math.asin(xi(s, -1, 1))), Math.abs(s) < 0.9999999 ? ((this._x = Math.atan2(-c, l)), (this._y = Math.atan2(-u, i))) : ((this._x = 0), (this._y = Math.atan2(a, d)));
                                break;
                            case "XZY":
                                (this._z = Math.asin(-xi(o, -1, 1))), Math.abs(o) < 0.9999999 ? ((this._x = Math.atan2(h, l)), (this._y = Math.atan2(a, i))) : ((this._x = Math.atan2(-c, d)), (this._y = 0));
                                break;
                            default:
                                console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + e);
                        }
                        return (this._order = e), !0 === n && this._onChangeCallback(), this;
                    }
                    setFromQuaternion(t, e, n) {
                        return So.makeRotationFromQuaternion(t), this.setFromRotationMatrix(So, e, n);
                    }
                    setFromVector3(t, e = this._order) {
                        return this.set(t.x, t.y, t.z, e);
                    }
                    reorder(t) {
                        return Mo.setFromEuler(this), this.setFromQuaternion(Mo, t);
                    }
                    equals(t) {
                        return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order;
                    }
                    fromArray(t) {
                        return (this._x = t[0]), (this._y = t[1]), (this._z = t[2]), void 0 !== t[3] && (this._order = t[3]), this._onChangeCallback(), this;
                    }
                    toArray(t = [], e = 0) {
                        return (t[e] = this._x), (t[e + 1] = this._y), (t[e + 2] = this._z), (t[e + 3] = this._order), t;
                    }
                    toVector3(t) {
                        return t ? t.set(this._x, this._y, this._z) : new Fi(this._x, this._y, this._z);
                    }
                    _onChange(t) {
                        return (this._onChangeCallback = t), this;
                    }
                    _onChangeCallback() {}
                }
                (To.prototype.isEuler = !0), (To.DefaultOrder = "XYZ"), (To.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"]);
                class Eo {
                    constructor() {
                        this.mask = 1;
                    }
                    set(t) {
                        this.mask = (1 << t) | 0;
                    }
                    enable(t) {
                        this.mask |= (1 << t) | 0;
                    }
                    enableAll() {
                        this.mask = -1;
                    }
                    toggle(t) {
                        this.mask ^= (1 << t) | 0;
                    }
                    disable(t) {
                        this.mask &= ~((1 << t) | 0);
                    }
                    disableAll() {
                        this.mask = 0;
                    }
                    test(t) {
                        return 0 != (this.mask & t.mask);
                    }
                }
                let Ao = 0;
                const Lo = new Fi(),
                    Co = new Ui(),
                    Ro = new mo(),
                    Po = new Fi(),
                    Io = new Fi(),
                    Oo = new Fi(),
                    Do = new Ui(),
                    ko = new Fi(1, 0, 0),
                    Uo = new Fi(0, 1, 0),
                    Fo = new Fi(0, 0, 1),
                    No = { type: "added" },
                    zo = { type: "removed" };
                class Bo extends fi {
                    constructor() {
                        super(), Object.defineProperty(this, "id", { value: Ao++ }), (this.uuid = yi()), (this.name = ""), (this.type = "Object3D"), (this.parent = null), (this.children = []), (this.up = Bo.DefaultUp.clone());
                        const t = new Fi(),
                            e = new To(),
                            n = new Ui(),
                            r = new Fi(1, 1, 1);
                        e._onChange(function () {
                            n.setFromEuler(e, !1);
                        }),
                            n._onChange(function () {
                                e.setFromQuaternion(n, void 0, !1);
                            }),
                            Object.defineProperties(this, {
                                position: { configurable: !0, enumerable: !0, value: t },
                                rotation: { configurable: !0, enumerable: !0, value: e },
                                quaternion: { configurable: !0, enumerable: !0, value: n },
                                scale: { configurable: !0, enumerable: !0, value: r },
                                modelViewMatrix: { value: new mo() },
                                normalMatrix: { value: new Ai() },
                            }),
                            (this.matrix = new mo()),
                            (this.matrixWorld = new mo()),
                            (this.matrixAutoUpdate = Bo.DefaultMatrixAutoUpdate),
                            (this.matrixWorldNeedsUpdate = !1),
                            (this.layers = new Eo()),
                            (this.visible = !0),
                            (this.castShadow = !1),
                            (this.receiveShadow = !1),
                            (this.frustumCulled = !0),
                            (this.renderOrder = 0),
                            (this.animations = []),
                            (this.userData = {});
                    }
                    onBeforeRender() {}
                    onAfterRender() {}
                    applyMatrix4(t) {
                        this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(t), this.matrix.decompose(this.position, this.quaternion, this.scale);
                    }
                    applyQuaternion(t) {
                        return this.quaternion.premultiply(t), this;
                    }
                    setRotationFromAxisAngle(t, e) {
                        this.quaternion.setFromAxisAngle(t, e);
                    }
                    setRotationFromEuler(t) {
                        this.quaternion.setFromEuler(t, !0);
                    }
                    setRotationFromMatrix(t) {
                        this.quaternion.setFromRotationMatrix(t);
                    }
                    setRotationFromQuaternion(t) {
                        this.quaternion.copy(t);
                    }
                    rotateOnAxis(t, e) {
                        return Co.setFromAxisAngle(t, e), this.quaternion.multiply(Co), this;
                    }
                    rotateOnWorldAxis(t, e) {
                        return Co.setFromAxisAngle(t, e), this.quaternion.premultiply(Co), this;
                    }
                    rotateX(t) {
                        return this.rotateOnAxis(ko, t);
                    }
                    rotateY(t) {
                        return this.rotateOnAxis(Uo, t);
                    }
                    rotateZ(t) {
                        return this.rotateOnAxis(Fo, t);
                    }
                    translateOnAxis(t, e) {
                        return Lo.copy(t).applyQuaternion(this.quaternion), this.position.add(Lo.multiplyScalar(e)), this;
                    }
                    translateX(t) {
                        return this.translateOnAxis(ko, t);
                    }
                    translateY(t) {
                        return this.translateOnAxis(Uo, t);
                    }
                    translateZ(t) {
                        return this.translateOnAxis(Fo, t);
                    }
                    localToWorld(t) {
                        return t.applyMatrix4(this.matrixWorld);
                    }
                    worldToLocal(t) {
                        return t.applyMatrix4(Ro.copy(this.matrixWorld).invert());
                    }
                    lookAt(t, e, n) {
                        t.isVector3 ? Po.copy(t) : Po.set(t, e, n);
                        const r = this.parent;
                        this.updateWorldMatrix(!0, !1),
                            Io.setFromMatrixPosition(this.matrixWorld),
                            this.isCamera || this.isLight ? Ro.lookAt(Io, Po, this.up) : Ro.lookAt(Po, Io, this.up),
                            this.quaternion.setFromRotationMatrix(Ro),
                        r && (Ro.extractRotation(r.matrixWorld), Co.setFromRotationMatrix(Ro), this.quaternion.premultiply(Co.invert()));
                    }
                    add(t) {
                        if (arguments.length > 1) {
                            for (let t = 0; t < arguments.length; t++) this.add(arguments[t]);
                            return this;
                        }
                        return t === this
                            ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", t), this)
                            : (t && t.isObject3D ? (null !== t.parent && t.parent.remove(t), (t.parent = this), this.children.push(t), t.dispatchEvent(No)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", t),
                                this);
                    }
                    remove(t) {
                        if (arguments.length > 1) {
                            for (let t = 0; t < arguments.length; t++) this.remove(arguments[t]);
                            return this;
                        }
                        const e = this.children.indexOf(t);
                        return -1 !== e && ((t.parent = null), this.children.splice(e, 1), t.dispatchEvent(zo)), this;
                    }
                    removeFromParent() {
                        const t = this.parent;
                        return null !== t && t.remove(this), this;
                    }
                    clear() {
                        for (let t = 0; t < this.children.length; t++) {
                            const e = this.children[t];
                            (e.parent = null), e.dispatchEvent(zo);
                        }
                        return (this.children.length = 0), this;
                    }
                    attach(t) {
                        return (
                            this.updateWorldMatrix(!0, !1),
                                Ro.copy(this.matrixWorld).invert(),
                            null !== t.parent && (t.parent.updateWorldMatrix(!0, !1), Ro.multiply(t.parent.matrixWorld)),
                                t.applyMatrix4(Ro),
                                this.add(t),
                                t.updateWorldMatrix(!1, !0),
                                this
                        );
                    }
                    getObjectById(t) {
                        return this.getObjectByProperty("id", t);
                    }
                    getObjectByName(t) {
                        return this.getObjectByProperty("name", t);
                    }
                    getObjectByProperty(t, e) {
                        if (this[t] === e) return this;
                        for (let n = 0, r = this.children.length; n < r; n++) {
                            const r = this.children[n].getObjectByProperty(t, e);
                            if (void 0 !== r) return r;
                        }
                    }
                    getWorldPosition(t) {
                        return this.updateWorldMatrix(!0, !1), t.setFromMatrixPosition(this.matrixWorld);
                    }
                    getWorldQuaternion(t) {
                        return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Io, t, Oo), t;
                    }
                    getWorldScale(t) {
                        return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Io, Do, t), t;
                    }
                    getWorldDirection(t) {
                        this.updateWorldMatrix(!0, !1);
                        const e = this.matrixWorld.elements;
                        return t.set(e[8], e[9], e[10]).normalize();
                    }
                    raycast() {}
                    traverse(t) {
                        t(this);
                        const e = this.children;
                        for (let n = 0, r = e.length; n < r; n++) e[n].traverse(t);
                    }
                    traverseVisible(t) {
                        if (!1 === this.visible) return;
                        t(this);
                        const e = this.children;
                        for (let n = 0, r = e.length; n < r; n++) e[n].traverseVisible(t);
                    }
                    traverseAncestors(t) {
                        const e = this.parent;
                        null !== e && (t(e), e.traverseAncestors(t));
                    }
                    updateMatrix() {
                        this.matrix.compose(this.position, this.quaternion, this.scale), (this.matrixWorldNeedsUpdate = !0);
                    }
                    updateMatrixWorld(t) {
                        this.matrixAutoUpdate && this.updateMatrix(),
                        (this.matrixWorldNeedsUpdate || t) &&
                        (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), (this.matrixWorldNeedsUpdate = !1), (t = !0));
                        const e = this.children;
                        for (let n = 0, r = e.length; n < r; n++) e[n].updateMatrixWorld(t);
                    }
                    updateWorldMatrix(t, e) {
                        const n = this.parent;
                        if (
                            (!0 === t && null !== n && n.updateWorldMatrix(!0, !1),
                            this.matrixAutoUpdate && this.updateMatrix(),
                                null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
                            !0 === e)
                        ) {
                            const t = this.children;
                            for (let e = 0, n = t.length; e < n; e++) t[e].updateWorldMatrix(!1, !0);
                        }
                    }
                    toJSON(t) {
                        const e = void 0 === t || "string" == typeof t,
                            n = {};
                        e && ((t = { geometries: {}, materials: {}, textures: {}, images: {}, shapes: {}, skeletons: {}, animations: {} }), (n.metadata = { version: 4.5, type: "Object", generator: "Object3D.toJSON" }));
                        const r = {};
                        function i(e, n) {
                            return void 0 === e[n.uuid] && (e[n.uuid] = n.toJSON(t)), n.uuid;
                        }
                        if (
                            ((r.uuid = this.uuid),
                                (r.type = this.type),
                            "" !== this.name && (r.name = this.name),
                            !0 === this.castShadow && (r.castShadow = !0),
                            !0 === this.receiveShadow && (r.receiveShadow = !0),
                            !1 === this.visible && (r.visible = !1),
                            !1 === this.frustumCulled && (r.frustumCulled = !1),
                            0 !== this.renderOrder && (r.renderOrder = this.renderOrder),
                            "{}" !== JSON.stringify(this.userData) && (r.userData = this.userData),
                                (r.layers = this.layers.mask),
                                (r.matrix = this.matrix.toArray()),
                            !1 === this.matrixAutoUpdate && (r.matrixAutoUpdate = !1),
                            this.isInstancedMesh && ((r.type = "InstancedMesh"), (r.count = this.count), (r.instanceMatrix = this.instanceMatrix.toJSON()), null !== this.instanceColor && (r.instanceColor = this.instanceColor.toJSON())),
                                this.isScene)
                        )
                            this.background && (this.background.isColor ? (r.background = this.background.toJSON()) : this.background.isTexture && (r.background = this.background.toJSON(t).uuid)),
                            this.environment && this.environment.isTexture && (r.environment = this.environment.toJSON(t).uuid);
                        else if (this.isMesh || this.isLine || this.isPoints) {
                            r.geometry = i(t.geometries, this.geometry);
                            const e = this.geometry.parameters;
                            if (void 0 !== e && void 0 !== e.shapes) {
                                const n = e.shapes;
                                if (Array.isArray(n))
                                    for (let e = 0, r = n.length; e < r; e++) {
                                        const r = n[e];
                                        i(t.shapes, r);
                                    }
                                else i(t.shapes, n);
                            }
                        }
                        if (
                            (this.isSkinnedMesh && ((r.bindMode = this.bindMode), (r.bindMatrix = this.bindMatrix.toArray()), void 0 !== this.skeleton && (i(t.skeletons, this.skeleton), (r.skeleton = this.skeleton.uuid))),
                            void 0 !== this.material)
                        )
                            if (Array.isArray(this.material)) {
                                const e = [];
                                for (let n = 0, r = this.material.length; n < r; n++) e.push(i(t.materials, this.material[n]));
                                r.material = e;
                            } else r.material = i(t.materials, this.material);
                        if (this.children.length > 0) {
                            r.children = [];
                            for (let e = 0; e < this.children.length; e++) r.children.push(this.children[e].toJSON(t).object);
                        }
                        if (this.animations.length > 0) {
                            r.animations = [];
                            for (let e = 0; e < this.animations.length; e++) {
                                const n = this.animations[e];
                                r.animations.push(i(t.animations, n));
                            }
                        }
                        if (e) {
                            const e = o(t.geometries),
                                r = o(t.materials),
                                i = o(t.textures),
                                a = o(t.images),
                                s = o(t.shapes),
                                l = o(t.skeletons),
                                c = o(t.animations);
                            e.length > 0 && (n.geometries = e),
                            r.length > 0 && (n.materials = r),
                            i.length > 0 && (n.textures = i),
                            a.length > 0 && (n.images = a),
                            s.length > 0 && (n.shapes = s),
                            l.length > 0 && (n.skeletons = l),
                            c.length > 0 && (n.animations = c);
                        }
                        return (n.object = r), n;
                        function o(t) {
                            const e = [];
                            for (const n in t) {
                                const r = t[n];
                                delete r.metadata, e.push(r);
                            }
                            return e;
                        }
                    }
                    clone(t) {
                        return new this.constructor().copy(this, t);
                    }
                    copy(t, e = !0) {
                        if (
                            ((this.name = t.name),
                                this.up.copy(t.up),
                                this.position.copy(t.position),
                                (this.rotation.order = t.rotation.order),
                                this.quaternion.copy(t.quaternion),
                                this.scale.copy(t.scale),
                                this.matrix.copy(t.matrix),
                                this.matrixWorld.copy(t.matrixWorld),
                                (this.matrixAutoUpdate = t.matrixAutoUpdate),
                                (this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate),
                                (this.layers.mask = t.layers.mask),
                                (this.visible = t.visible),
                                (this.castShadow = t.castShadow),
                                (this.receiveShadow = t.receiveShadow),
                                (this.frustumCulled = t.frustumCulled),
                                (this.renderOrder = t.renderOrder),
                                (this.userData = JSON.parse(JSON.stringify(t.userData))),
                            !0 === e)
                        )
                            for (let e = 0; e < t.children.length; e++) {
                                const n = t.children[e];
                                this.add(n.clone());
                            }
                        return this;
                    }
                }
                (Bo.DefaultUp = new Fi(0, 1, 0)), (Bo.DefaultMatrixAutoUpdate = !0), (Bo.prototype.isObject3D = !0);
                const Go = new Fi(),
                    Ho = new Fi(),
                    Vo = new Fi(),
                    Wo = new Fi(),
                    jo = new Fi(),
                    qo = new Fi(),
                    Xo = new Fi(),
                    Yo = new Fi(),
                    Zo = new Fi(),
                    Jo = new Fi();
                class $o {
                    constructor(t = new Fi(), e = new Fi(), n = new Fi()) {
                        (this.a = t), (this.b = e), (this.c = n);
                    }
                    static getNormal(t, e, n, r) {
                        r.subVectors(n, e), Go.subVectors(t, e), r.cross(Go);
                        const i = r.lengthSq();
                        return i > 0 ? r.multiplyScalar(1 / Math.sqrt(i)) : r.set(0, 0, 0);
                    }
                    static getBarycoord(t, e, n, r, i) {
                        Go.subVectors(r, e), Ho.subVectors(n, e), Vo.subVectors(t, e);
                        const o = Go.dot(Go),
                            a = Go.dot(Ho),
                            s = Go.dot(Vo),
                            l = Ho.dot(Ho),
                            c = Ho.dot(Vo),
                            u = o * l - a * a;
                        if (0 === u) return i.set(-2, -1, -1);
                        const h = 1 / u,
                            d = (l * s - a * c) * h,
                            f = (o * c - a * s) * h;
                        return i.set(1 - d - f, f, d);
                    }
                    static containsPoint(t, e, n, r) {
                        return this.getBarycoord(t, e, n, r, Wo), Wo.x >= 0 && Wo.y >= 0 && Wo.x + Wo.y <= 1;
                    }
                    static getUV(t, e, n, r, i, o, a, s) {
                        return this.getBarycoord(t, e, n, r, Wo), s.set(0, 0), s.addScaledVector(i, Wo.x), s.addScaledVector(o, Wo.y), s.addScaledVector(a, Wo.z), s;
                    }
                    static isFrontFacing(t, e, n, r) {
                        return Go.subVectors(n, e), Ho.subVectors(t, e), Go.cross(Ho).dot(r) < 0;
                    }
                    set(t, e, n) {
                        return this.a.copy(t), this.b.copy(e), this.c.copy(n), this;
                    }
                    setFromPointsAndIndices(t, e, n, r) {
                        return this.a.copy(t[e]), this.b.copy(t[n]), this.c.copy(t[r]), this;
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                    copy(t) {
                        return this.a.copy(t.a), this.b.copy(t.b), this.c.copy(t.c), this;
                    }
                    getArea() {
                        return Go.subVectors(this.c, this.b), Ho.subVectors(this.a, this.b), 0.5 * Go.cross(Ho).length();
                    }
                    getMidpoint(t) {
                        return t
                            .addVectors(this.a, this.b)
                            .add(this.c)
                            .multiplyScalar(1 / 3);
                    }
                    getNormal(t) {
                        return $o.getNormal(this.a, this.b, this.c, t);
                    }
                    getPlane(t) {
                        return t.setFromCoplanarPoints(this.a, this.b, this.c);
                    }
                    getBarycoord(t, e) {
                        return $o.getBarycoord(t, this.a, this.b, this.c, e);
                    }
                    getUV(t, e, n, r, i) {
                        return $o.getUV(t, this.a, this.b, this.c, e, n, r, i);
                    }
                    containsPoint(t) {
                        return $o.containsPoint(t, this.a, this.b, this.c);
                    }
                    isFrontFacing(t) {
                        return $o.isFrontFacing(this.a, this.b, this.c, t);
                    }
                    intersectsBox(t) {
                        return t.intersectsTriangle(this);
                    }
                    closestPointToPoint(t, e) {
                        const n = this.a,
                            r = this.b,
                            i = this.c;
                        let o, a;
                        jo.subVectors(r, n), qo.subVectors(i, n), Yo.subVectors(t, n);
                        const s = jo.dot(Yo),
                            l = qo.dot(Yo);
                        if (s <= 0 && l <= 0) return e.copy(n);
                        Zo.subVectors(t, r);
                        const c = jo.dot(Zo),
                            u = qo.dot(Zo);
                        if (c >= 0 && u <= c) return e.copy(r);
                        const h = s * u - c * l;
                        if (h <= 0 && s >= 0 && c <= 0) return (o = s / (s - c)), e.copy(n).addScaledVector(jo, o);
                        Jo.subVectors(t, i);
                        const d = jo.dot(Jo),
                            f = qo.dot(Jo);
                        if (f >= 0 && d <= f) return e.copy(i);
                        const p = d * l - s * f;
                        if (p <= 0 && l >= 0 && f <= 0) return (a = l / (l - f)), e.copy(n).addScaledVector(qo, a);
                        const m = c * f - d * u;
                        if (m <= 0 && u - c >= 0 && d - f >= 0) return Xo.subVectors(i, r), (a = (u - c) / (u - c + (d - f))), e.copy(r).addScaledVector(Xo, a);
                        const g = 1 / (m + p + h);
                        return (o = p * g), (a = h * g), e.copy(n).addScaledVector(jo, o).addScaledVector(qo, a);
                    }
                    equals(t) {
                        return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c);
                    }
                }
                let Qo = 0;
                class Ko extends fi {
                    constructor() {
                        super(),
                            Object.defineProperty(this, "id", { value: Qo++ }),
                            (this.uuid = yi()),
                            (this.name = ""),
                            (this.type = "Material"),
                            (this.fog = !0),
                            (this.blending = 1),
                            (this.side = 0),
                            (this.vertexColors = !1),
                            (this.opacity = 1),
                            (this.transparent = !1),
                            (this.blendSrc = 204),
                            (this.blendDst = 205),
                            (this.blendEquation = Ar),
                            (this.blendSrcAlpha = null),
                            (this.blendDstAlpha = null),
                            (this.blendEquationAlpha = null),
                            (this.depthFunc = 3),
                            (this.depthTest = !0),
                            (this.depthWrite = !0),
                            (this.stencilWriteMask = 255),
                            (this.stencilFunc = 519),
                            (this.stencilRef = 0),
                            (this.stencilFuncMask = 255),
                            (this.stencilFail = ci),
                            (this.stencilZFail = ci),
                            (this.stencilZPass = ci),
                            (this.stencilWrite = !1),
                            (this.clippingPlanes = null),
                            (this.clipIntersection = !1),
                            (this.clipShadows = !1),
                            (this.shadowSide = null),
                            (this.colorWrite = !0),
                            (this.precision = null),
                            (this.polygonOffset = !1),
                            (this.polygonOffsetFactor = 0),
                            (this.polygonOffsetUnits = 0),
                            (this.dithering = !1),
                            (this.alphaTest = 0),
                            (this.alphaToCoverage = !1),
                            (this.premultipliedAlpha = !1),
                            (this.visible = !0),
                            (this.toneMapped = !0),
                            (this.userData = {}),
                            (this.version = 0);
                    }
                    onBuild() {}
                    onBeforeCompile() {}
                    customProgramCacheKey() {
                        return this.onBeforeCompile.toString();
                    }
                    setValues(t) {
                        if (void 0 !== t)
                            for (const e in t) {
                                const n = t[e];
                                if (void 0 === n) {
                                    console.warn("THREE.Material: '" + e + "' parameter is undefined.");
                                    continue;
                                }
                                if ("shading" === e) {
                                    console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), (this.flatShading = 1 === n);
                                    continue;
                                }
                                const r = this[e];
                                void 0 !== r ? (r && r.isColor ? r.set(n) : r && r.isVector3 && n && n.isVector3 ? r.copy(n) : (this[e] = n)) : console.warn("THREE." + this.type + ": '" + e + "' is not a property of this material.");
                            }
                    }
                    toJSON(t) {
                        const e = void 0 === t || "string" == typeof t;
                        e && (t = { textures: {}, images: {} });
                        const n = { metadata: { version: 4.5, type: "Material", generator: "Material.toJSON" } };
                        function r(t) {
                            const e = [];
                            for (const n in t) {
                                const r = t[n];
                                delete r.metadata, e.push(r);
                            }
                            return e;
                        }
                        if (
                            ((n.uuid = this.uuid),
                                (n.type = this.type),
                            "" !== this.name && (n.name = this.name),
                            this.color && this.color.isColor && (n.color = this.color.getHex()),
                            void 0 !== this.roughness && (n.roughness = this.roughness),
                            void 0 !== this.metalness && (n.metalness = this.metalness),
                            this.sheen && this.sheen.isColor && (n.sheen = this.sheen.getHex()),
                            this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()),
                            this.emissiveIntensity && 1 !== this.emissiveIntensity && (n.emissiveIntensity = this.emissiveIntensity),
                            this.specular && this.specular.isColor && (n.specular = this.specular.getHex()),
                            void 0 !== this.specularIntensity && (n.specularIntensity = this.specularIntensity),
                            this.specularTint && this.specularTint.isColor && (n.specularTint = this.specularTint.getHex()),
                            void 0 !== this.shininess && (n.shininess = this.shininess),
                            void 0 !== this.clearcoat && (n.clearcoat = this.clearcoat),
                            void 0 !== this.clearcoatRoughness && (n.clearcoatRoughness = this.clearcoatRoughness),
                            this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(t).uuid),
                            this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(t).uuid),
                            this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && ((n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(t).uuid), (n.clearcoatNormalScale = this.clearcoatNormalScale.toArray())),
                            this.map && this.map.isTexture && (n.map = this.map.toJSON(t).uuid),
                            this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(t).uuid),
                            this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(t).uuid),
                            this.lightMap && this.lightMap.isTexture && ((n.lightMap = this.lightMap.toJSON(t).uuid), (n.lightMapIntensity = this.lightMapIntensity)),
                            this.aoMap && this.aoMap.isTexture && ((n.aoMap = this.aoMap.toJSON(t).uuid), (n.aoMapIntensity = this.aoMapIntensity)),
                            this.bumpMap && this.bumpMap.isTexture && ((n.bumpMap = this.bumpMap.toJSON(t).uuid), (n.bumpScale = this.bumpScale)),
                            this.normalMap && this.normalMap.isTexture && ((n.normalMap = this.normalMap.toJSON(t).uuid), (n.normalMapType = this.normalMapType), (n.normalScale = this.normalScale.toArray())),
                            this.displacementMap && this.displacementMap.isTexture && ((n.displacementMap = this.displacementMap.toJSON(t).uuid), (n.displacementScale = this.displacementScale), (n.displacementBias = this.displacementBias)),
                            this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(t).uuid),
                            this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(t).uuid),
                            this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(t).uuid),
                            this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(t).uuid),
                            this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(t).uuid),
                            this.specularTintMap && this.specularTintMap.isTexture && (n.specularTintMap = this.specularTintMap.toJSON(t).uuid),
                            this.envMap && this.envMap.isTexture && ((n.envMap = this.envMap.toJSON(t).uuid), void 0 !== this.combine && (n.combine = this.combine)),
                            void 0 !== this.envMapIntensity && (n.envMapIntensity = this.envMapIntensity),
                            void 0 !== this.reflectivity && (n.reflectivity = this.reflectivity),
                            void 0 !== this.refractionRatio && (n.refractionRatio = this.refractionRatio),
                            this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(t).uuid),
                            void 0 !== this.transmission && (n.transmission = this.transmission),
                            this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(t).uuid),
                            void 0 !== this.thickness && (n.thickness = this.thickness),
                            this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(t).uuid),
                            void 0 !== this.attenuationDistance && (n.attenuationDistance = this.attenuationDistance),
                            void 0 !== this.attenuationTint && (n.attenuationTint = this.attenuationTint.getHex()),
                            void 0 !== this.size && (n.size = this.size),
                            null !== this.shadowSide && (n.shadowSide = this.shadowSide),
                            void 0 !== this.sizeAttenuation && (n.sizeAttenuation = this.sizeAttenuation),
                            1 !== this.blending && (n.blending = this.blending),
                            0 !== this.side && (n.side = this.side),
                            this.vertexColors && (n.vertexColors = !0),
                            this.opacity < 1 && (n.opacity = this.opacity),
                            !0 === this.transparent && (n.transparent = this.transparent),
                                (n.depthFunc = this.depthFunc),
                                (n.depthTest = this.depthTest),
                                (n.depthWrite = this.depthWrite),
                                (n.colorWrite = this.colorWrite),
                                (n.stencilWrite = this.stencilWrite),
                                (n.stencilWriteMask = this.stencilWriteMask),
                                (n.stencilFunc = this.stencilFunc),
                                (n.stencilRef = this.stencilRef),
                                (n.stencilFuncMask = this.stencilFuncMask),
                                (n.stencilFail = this.stencilFail),
                                (n.stencilZFail = this.stencilZFail),
                                (n.stencilZPass = this.stencilZPass),
                            this.rotation && 0 !== this.rotation && (n.rotation = this.rotation),
                            !0 === this.polygonOffset && (n.polygonOffset = !0),
                            0 !== this.polygonOffsetFactor && (n.polygonOffsetFactor = this.polygonOffsetFactor),
                            0 !== this.polygonOffsetUnits && (n.polygonOffsetUnits = this.polygonOffsetUnits),
                            this.linewidth && 1 !== this.linewidth && (n.linewidth = this.linewidth),
                            void 0 !== this.dashSize && (n.dashSize = this.dashSize),
                            void 0 !== this.gapSize && (n.gapSize = this.gapSize),
                            void 0 !== this.scale && (n.scale = this.scale),
                            !0 === this.dithering && (n.dithering = !0),
                            this.alphaTest > 0 && (n.alphaTest = this.alphaTest),
                            !0 === this.alphaToCoverage && (n.alphaToCoverage = this.alphaToCoverage),
                            !0 === this.premultipliedAlpha && (n.premultipliedAlpha = this.premultipliedAlpha),
                            !0 === this.wireframe && (n.wireframe = this.wireframe),
                            this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth),
                            "round" !== this.wireframeLinecap && (n.wireframeLinecap = this.wireframeLinecap),
                            "round" !== this.wireframeLinejoin && (n.wireframeLinejoin = this.wireframeLinejoin),
                            !0 === this.flatShading && (n.flatShading = this.flatShading),
                            !1 === this.visible && (n.visible = !1),
                            !1 === this.toneMapped && (n.toneMapped = !1),
                            "{}" !== JSON.stringify(this.userData) && (n.userData = this.userData),
                                e)
                        ) {
                            const e = r(t.textures),
                                i = r(t.images);
                            e.length > 0 && (n.textures = e), i.length > 0 && (n.images = i);
                        }
                        return n;
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                    copy(t) {
                        (this.name = t.name),
                            (this.fog = t.fog),
                            (this.blending = t.blending),
                            (this.side = t.side),
                            (this.vertexColors = t.vertexColors),
                            (this.opacity = t.opacity),
                            (this.transparent = t.transparent),
                            (this.blendSrc = t.blendSrc),
                            (this.blendDst = t.blendDst),
                            (this.blendEquation = t.blendEquation),
                            (this.blendSrcAlpha = t.blendSrcAlpha),
                            (this.blendDstAlpha = t.blendDstAlpha),
                            (this.blendEquationAlpha = t.blendEquationAlpha),
                            (this.depthFunc = t.depthFunc),
                            (this.depthTest = t.depthTest),
                            (this.depthWrite = t.depthWrite),
                            (this.stencilWriteMask = t.stencilWriteMask),
                            (this.stencilFunc = t.stencilFunc),
                            (this.stencilRef = t.stencilRef),
                            (this.stencilFuncMask = t.stencilFuncMask),
                            (this.stencilFail = t.stencilFail),
                            (this.stencilZFail = t.stencilZFail),
                            (this.stencilZPass = t.stencilZPass),
                            (this.stencilWrite = t.stencilWrite);
                        const e = t.clippingPlanes;
                        let n = null;
                        if (null !== e) {
                            const t = e.length;
                            n = new Array(t);
                            for (let r = 0; r !== t; ++r) n[r] = e[r].clone();
                        }
                        return (
                            (this.clippingPlanes = n),
                                (this.clipIntersection = t.clipIntersection),
                                (this.clipShadows = t.clipShadows),
                                (this.shadowSide = t.shadowSide),
                                (this.colorWrite = t.colorWrite),
                                (this.precision = t.precision),
                                (this.polygonOffset = t.polygonOffset),
                                (this.polygonOffsetFactor = t.polygonOffsetFactor),
                                (this.polygonOffsetUnits = t.polygonOffsetUnits),
                                (this.dithering = t.dithering),
                                (this.alphaTest = t.alphaTest),
                                (this.alphaToCoverage = t.alphaToCoverage),
                                (this.premultipliedAlpha = t.premultipliedAlpha),
                                (this.visible = t.visible),
                                (this.toneMapped = t.toneMapped),
                                (this.userData = JSON.parse(JSON.stringify(t.userData))),
                                this
                        );
                    }
                    dispose() {
                        this.dispatchEvent({ type: "dispose" });
                    }
                    set needsUpdate(t) {
                        !0 === t && this.version++;
                    }
                }
                Ko.prototype.isMaterial = !0;
                const ta = {
                        aliceblue: 15792383,
                        antiquewhite: 16444375,
                        aqua: 65535,
                        aquamarine: 8388564,
                        azure: 15794175,
                        beige: 16119260,
                        bisque: 16770244,
                        black: 0,
                        blanchedalmond: 16772045,
                        blue: 255,
                        blueviolet: 9055202,
                        brown: 10824234,
                        burlywood: 14596231,
                        cadetblue: 6266528,
                        chartreuse: 8388352,
                        chocolate: 13789470,
                        coral: 16744272,
                        cornflowerblue: 6591981,
                        cornsilk: 16775388,
                        crimson: 14423100,
                        cyan: 65535,
                        darkblue: 139,
                        darkcyan: 35723,
                        darkgoldenrod: 12092939,
                        darkgray: 11119017,
                        darkgreen: 25600,
                        darkgrey: 11119017,
                        darkkhaki: 12433259,
                        darkmagenta: 9109643,
                        darkolivegreen: 5597999,
                        darkorange: 16747520,
                        darkorchid: 10040012,
                        darkred: 9109504,
                        darksalmon: 15308410,
                        darkseagreen: 9419919,
                        darkslateblue: 4734347,
                        darkslategray: 3100495,
                        darkslategrey: 3100495,
                        darkturquoise: 52945,
                        darkviolet: 9699539,
                        deeppink: 16716947,
                        deepskyblue: 49151,
                        dimgray: 6908265,
                        dimgrey: 6908265,
                        dodgerblue: 2003199,
                        firebrick: 11674146,
                        floralwhite: 16775920,
                        forestgreen: 2263842,
                        fuchsia: 16711935,
                        gainsboro: 14474460,
                        ghostwhite: 16316671,
                        gold: 16766720,
                        goldenrod: 14329120,
                        gray: 8421504,
                        green: 32768,
                        greenyellow: 11403055,
                        grey: 8421504,
                        honeydew: 15794160,
                        hotpink: 16738740,
                        indianred: 13458524,
                        indigo: 4915330,
                        ivory: 16777200,
                        khaki: 15787660,
                        lavender: 15132410,
                        lavenderblush: 16773365,
                        lawngreen: 8190976,
                        lemonchiffon: 16775885,
                        lightblue: 11393254,
                        lightcoral: 15761536,
                        lightcyan: 14745599,
                        lightgoldenrodyellow: 16448210,
                        lightgray: 13882323,
                        lightgreen: 9498256,
                        lightgrey: 13882323,
                        lightpink: 16758465,
                        lightsalmon: 16752762,
                        lightseagreen: 2142890,
                        lightskyblue: 8900346,
                        lightslategray: 7833753,
                        lightslategrey: 7833753,
                        lightsteelblue: 11584734,
                        lightyellow: 16777184,
                        lime: 65280,
                        limegreen: 3329330,
                        linen: 16445670,
                        magenta: 16711935,
                        maroon: 8388608,
                        mediumaquamarine: 6737322,
                        mediumblue: 205,
                        mediumorchid: 12211667,
                        mediumpurple: 9662683,
                        mediumseagreen: 3978097,
                        mediumslateblue: 8087790,
                        mediumspringgreen: 64154,
                        mediumturquoise: 4772300,
                        mediumvioletred: 13047173,
                        midnightblue: 1644912,
                        mintcream: 16121850,
                        mistyrose: 16770273,
                        moccasin: 16770229,
                        navajowhite: 16768685,
                        navy: 128,
                        oldlace: 16643558,
                        olive: 8421376,
                        olivedrab: 7048739,
                        orange: 16753920,
                        orangered: 16729344,
                        orchid: 14315734,
                        palegoldenrod: 15657130,
                        palegreen: 10025880,
                        paleturquoise: 11529966,
                        palevioletred: 14381203,
                        papayawhip: 16773077,
                        peachpuff: 16767673,
                        peru: 13468991,
                        pink: 16761035,
                        plum: 14524637,
                        powderblue: 11591910,
                        purple: 8388736,
                        rebeccapurple: 6697881,
                        red: 16711680,
                        rosybrown: 12357519,
                        royalblue: 4286945,
                        saddlebrown: 9127187,
                        salmon: 16416882,
                        sandybrown: 16032864,
                        seagreen: 3050327,
                        seashell: 16774638,
                        sienna: 10506797,
                        silver: 12632256,
                        skyblue: 8900331,
                        slateblue: 6970061,
                        slategray: 7372944,
                        slategrey: 7372944,
                        snow: 16775930,
                        springgreen: 65407,
                        steelblue: 4620980,
                        tan: 13808780,
                        teal: 32896,
                        thistle: 14204888,
                        tomato: 16737095,
                        turquoise: 4251856,
                        violet: 15631086,
                        wheat: 16113331,
                        white: 16777215,
                        whitesmoke: 16119285,
                        yellow: 16776960,
                        yellowgreen: 10145074,
                    },
                    ea = { h: 0, s: 0, l: 0 },
                    na = { h: 0, s: 0, l: 0 };
                function ra(t, e, n) {
                    return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? t + 6 * (e - t) * n : n < 0.5 ? e : n < 2 / 3 ? t + 6 * (e - t) * (2 / 3 - n) : t;
                }
                function ia(t) {
                    return t < 0.04045 ? 0.0773993808 * t : Math.pow(0.9478672986 * t + 0.0521327014, 2.4);
                }
                function oa(t) {
                    return t < 0.0031308 ? 12.92 * t : 1.055 * Math.pow(t, 0.41666) - 0.055;
                }
                class aa {
                    constructor(t, e, n) {
                        return void 0 === e && void 0 === n ? this.set(t) : this.setRGB(t, e, n);
                    }
                    set(t) {
                        return t && t.isColor ? this.copy(t) : "number" == typeof t ? this.setHex(t) : "string" == typeof t && this.setStyle(t), this;
                    }
                    setScalar(t) {
                        return (this.r = t), (this.g = t), (this.b = t), this;
                    }
                    setHex(t) {
                        return (t = Math.floor(t)), (this.r = ((t >> 16) & 255) / 255), (this.g = ((t >> 8) & 255) / 255), (this.b = (255 & t) / 255), this;
                    }
                    setRGB(t, e, n) {
                        return (this.r = t), (this.g = e), (this.b = n), this;
                    }
                    setHSL(t, e, n) {
                        if (((t = _i(t, 1)), (e = xi(e, 0, 1)), (n = xi(n, 0, 1)), 0 === e)) this.r = this.g = this.b = n;
                        else {
                            const r = n <= 0.5 ? n * (1 + e) : n + e - n * e,
                                i = 2 * n - r;
                            (this.r = ra(i, r, t + 1 / 3)), (this.g = ra(i, r, t)), (this.b = ra(i, r, t - 1 / 3));
                        }
                        return this;
                    }
                    setStyle(t) {
                        function e(e) {
                            void 0 !== e && parseFloat(e) < 1 && console.warn("THREE.Color: Alpha component of " + t + " will be ignored.");
                        }
                        let n;
                        if ((n = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t))) {
                            let t;
                            const r = n[1],
                                i = n[2];
                            switch (r) {
                                case "rgb":
                                case "rgba":
                                    if ((t = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i)))
                                        return (this.r = Math.min(255, parseInt(t[1], 10)) / 255), (this.g = Math.min(255, parseInt(t[2], 10)) / 255), (this.b = Math.min(255, parseInt(t[3], 10)) / 255), e(t[4]), this;
                                    if ((t = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i)))
                                        return (this.r = Math.min(100, parseInt(t[1], 10)) / 100), (this.g = Math.min(100, parseInt(t[2], 10)) / 100), (this.b = Math.min(100, parseInt(t[3], 10)) / 100), e(t[4]), this;
                                    break;
                                case "hsl":
                                case "hsla":
                                    if ((t = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i))) {
                                        const n = parseFloat(t[1]) / 360,
                                            r = parseInt(t[2], 10) / 100,
                                            i = parseInt(t[3], 10) / 100;
                                        return e(t[4]), this.setHSL(n, r, i);
                                    }
                            }
                        } else if ((n = /^\#([A-Fa-f\d]+)$/.exec(t))) {
                            const t = n[1],
                                e = t.length;
                            if (3 === e) return (this.r = parseInt(t.charAt(0) + t.charAt(0), 16) / 255), (this.g = parseInt(t.charAt(1) + t.charAt(1), 16) / 255), (this.b = parseInt(t.charAt(2) + t.charAt(2), 16) / 255), this;
                            if (6 === e) return (this.r = parseInt(t.charAt(0) + t.charAt(1), 16) / 255), (this.g = parseInt(t.charAt(2) + t.charAt(3), 16) / 255), (this.b = parseInt(t.charAt(4) + t.charAt(5), 16) / 255), this;
                        }
                        return t && t.length > 0 ? this.setColorName(t) : this;
                    }
                    setColorName(t) {
                        const e = ta[t.toLowerCase()];
                        return void 0 !== e ? this.setHex(e) : console.warn("THREE.Color: Unknown color " + t), this;
                    }
                    clone() {
                        return new this.constructor(this.r, this.g, this.b);
                    }
                    copy(t) {
                        return (this.r = t.r), (this.g = t.g), (this.b = t.b), this;
                    }
                    copyGammaToLinear(t, e = 2) {
                        return (this.r = Math.pow(t.r, e)), (this.g = Math.pow(t.g, e)), (this.b = Math.pow(t.b, e)), this;
                    }
                    copyLinearToGamma(t, e = 2) {
                        const n = e > 0 ? 1 / e : 1;
                        return (this.r = Math.pow(t.r, n)), (this.g = Math.pow(t.g, n)), (this.b = Math.pow(t.b, n)), this;
                    }
                    convertGammaToLinear(t) {
                        return this.copyGammaToLinear(this, t), this;
                    }
                    convertLinearToGamma(t) {
                        return this.copyLinearToGamma(this, t), this;
                    }
                    copySRGBToLinear(t) {
                        return (this.r = ia(t.r)), (this.g = ia(t.g)), (this.b = ia(t.b)), this;
                    }
                    copyLinearToSRGB(t) {
                        return (this.r = oa(t.r)), (this.g = oa(t.g)), (this.b = oa(t.b)), this;
                    }
                    convertSRGBToLinear() {
                        return this.copySRGBToLinear(this), this;
                    }
                    convertLinearToSRGB() {
                        return this.copyLinearToSRGB(this), this;
                    }
                    getHex() {
                        return ((255 * this.r) << 16) ^ ((255 * this.g) << 8) ^ ((255 * this.b) << 0);
                    }
                    getHexString() {
                        return ("000000" + this.getHex().toString(16)).slice(-6);
                    }
                    getHSL(t) {
                        const e = this.r,
                            n = this.g,
                            r = this.b,
                            i = Math.max(e, n, r),
                            o = Math.min(e, n, r);
                        let a, s;
                        const l = (o + i) / 2;
                        if (o === i) (a = 0), (s = 0);
                        else {
                            const t = i - o;
                            switch (((s = l <= 0.5 ? t / (i + o) : t / (2 - i - o)), i)) {
                                case e:
                                    a = (n - r) / t + (n < r ? 6 : 0);
                                    break;
                                case n:
                                    a = (r - e) / t + 2;
                                    break;
                                case r:
                                    a = (e - n) / t + 4;
                            }
                            a /= 6;
                        }
                        return (t.h = a), (t.s = s), (t.l = l), t;
                    }
                    getStyle() {
                        return "rgb(" + ((255 * this.r) | 0) + "," + ((255 * this.g) | 0) + "," + ((255 * this.b) | 0) + ")";
                    }
                    offsetHSL(t, e, n) {
                        return this.getHSL(ea), (ea.h += t), (ea.s += e), (ea.l += n), this.setHSL(ea.h, ea.s, ea.l), this;
                    }
                    add(t) {
                        return (this.r += t.r), (this.g += t.g), (this.b += t.b), this;
                    }
                    addColors(t, e) {
                        return (this.r = t.r + e.r), (this.g = t.g + e.g), (this.b = t.b + e.b), this;
                    }
                    addScalar(t) {
                        return (this.r += t), (this.g += t), (this.b += t), this;
                    }
                    sub(t) {
                        return (this.r = Math.max(0, this.r - t.r)), (this.g = Math.max(0, this.g - t.g)), (this.b = Math.max(0, this.b - t.b)), this;
                    }
                    multiply(t) {
                        return (this.r *= t.r), (this.g *= t.g), (this.b *= t.b), this;
                    }
                    multiplyScalar(t) {
                        return (this.r *= t), (this.g *= t), (this.b *= t), this;
                    }
                    lerp(t, e) {
                        return (this.r += (t.r - this.r) * e), (this.g += (t.g - this.g) * e), (this.b += (t.b - this.b) * e), this;
                    }
                    lerpColors(t, e, n) {
                        return (this.r = t.r + (e.r - t.r) * n), (this.g = t.g + (e.g - t.g) * n), (this.b = t.b + (e.b - t.b) * n), this;
                    }
                    lerpHSL(t, e) {
                        this.getHSL(ea), t.getHSL(na);
                        const n = bi(ea.h, na.h, e),
                            r = bi(ea.s, na.s, e),
                            i = bi(ea.l, na.l, e);
                        return this.setHSL(n, r, i), this;
                    }
                    equals(t) {
                        return t.r === this.r && t.g === this.g && t.b === this.b;
                    }
                    fromArray(t, e = 0) {
                        return (this.r = t[e]), (this.g = t[e + 1]), (this.b = t[e + 2]), this;
                    }
                    toArray(t = [], e = 0) {
                        return (t[e] = this.r), (t[e + 1] = this.g), (t[e + 2] = this.b), t;
                    }
                    fromBufferAttribute(t, e) {
                        return (this.r = t.getX(e)), (this.g = t.getY(e)), (this.b = t.getZ(e)), !0 === t.normalized && ((this.r /= 255), (this.g /= 255), (this.b /= 255)), this;
                    }
                    toJSON() {
                        return this.getHex();
                    }
                }
                (aa.NAMES = ta), (aa.prototype.isColor = !0), (aa.prototype.r = 1), (aa.prototype.g = 1), (aa.prototype.b = 1);
                class sa extends Ko {
                    constructor(t) {
                        super(),
                            (this.type = "MeshBasicMaterial"),
                            (this.color = new aa(16777215)),
                            (this.map = null),
                            (this.lightMap = null),
                            (this.lightMapIntensity = 1),
                            (this.aoMap = null),
                            (this.aoMapIntensity = 1),
                            (this.specularMap = null),
                            (this.alphaMap = null),
                            (this.envMap = null),
                            (this.combine = 0),
                            (this.reflectivity = 1),
                            (this.refractionRatio = 0.98),
                            (this.wireframe = !1),
                            (this.wireframeLinewidth = 1),
                            (this.wireframeLinecap = "round"),
                            (this.wireframeLinejoin = "round"),
                            this.setValues(t);
                    }
                    copy(t) {
                        return (
                            super.copy(t),
                                this.color.copy(t.color),
                                (this.map = t.map),
                                (this.lightMap = t.lightMap),
                                (this.lightMapIntensity = t.lightMapIntensity),
                                (this.aoMap = t.aoMap),
                                (this.aoMapIntensity = t.aoMapIntensity),
                                (this.specularMap = t.specularMap),
                                (this.alphaMap = t.alphaMap),
                                (this.envMap = t.envMap),
                                (this.combine = t.combine),
                                (this.reflectivity = t.reflectivity),
                                (this.refractionRatio = t.refractionRatio),
                                (this.wireframe = t.wireframe),
                                (this.wireframeLinewidth = t.wireframeLinewidth),
                                (this.wireframeLinecap = t.wireframeLinecap),
                                (this.wireframeLinejoin = t.wireframeLinejoin),
                                this
                        );
                    }
                }
                sa.prototype.isMeshBasicMaterial = !0;
                const la = new Fi(),
                    ca = new Ei();
                class ua {
                    constructor(t, e, n) {
                        if (Array.isArray(t)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
                        (this.name = ""),
                            (this.array = t),
                            (this.itemSize = e),
                            (this.count = void 0 !== t ? t.length / e : 0),
                            (this.normalized = !0 === n),
                            (this.usage = ui),
                            (this.updateRange = { offset: 0, count: -1 }),
                            (this.version = 0);
                    }
                    onUploadCallback() {}
                    set needsUpdate(t) {
                        !0 === t && this.version++;
                    }
                    setUsage(t) {
                        return (this.usage = t), this;
                    }
                    copy(t) {
                        return (this.name = t.name), (this.array = new t.array.constructor(t.array)), (this.itemSize = t.itemSize), (this.count = t.count), (this.normalized = t.normalized), (this.usage = t.usage), this;
                    }
                    copyAt(t, e, n) {
                        (t *= this.itemSize), (n *= e.itemSize);
                        for (let r = 0, i = this.itemSize; r < i; r++) this.array[t + r] = e.array[n + r];
                        return this;
                    }
                    copyArray(t) {
                        return this.array.set(t), this;
                    }
                    copyColorsArray(t) {
                        const e = this.array;
                        let n = 0;
                        for (let r = 0, i = t.length; r < i; r++) {
                            let i = t[r];
                            void 0 === i && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", r), (i = new aa())), (e[n++] = i.r), (e[n++] = i.g), (e[n++] = i.b);
                        }
                        return this;
                    }
                    copyVector2sArray(t) {
                        const e = this.array;
                        let n = 0;
                        for (let r = 0, i = t.length; r < i; r++) {
                            let i = t[r];
                            void 0 === i && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", r), (i = new Ei())), (e[n++] = i.x), (e[n++] = i.y);
                        }
                        return this;
                    }
                    copyVector3sArray(t) {
                        const e = this.array;
                        let n = 0;
                        for (let r = 0, i = t.length; r < i; r++) {
                            let i = t[r];
                            void 0 === i && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", r), (i = new Fi())), (e[n++] = i.x), (e[n++] = i.y), (e[n++] = i.z);
                        }
                        return this;
                    }
                    copyVector4sArray(t) {
                        const e = this.array;
                        let n = 0;
                        for (let r = 0, i = t.length; r < i; r++) {
                            let i = t[r];
                            void 0 === i && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", r), (i = new Oi())), (e[n++] = i.x), (e[n++] = i.y), (e[n++] = i.z), (e[n++] = i.w);
                        }
                        return this;
                    }
                    applyMatrix3(t) {
                        if (2 === this.itemSize) for (let e = 0, n = this.count; e < n; e++) ca.fromBufferAttribute(this, e), ca.applyMatrix3(t), this.setXY(e, ca.x, ca.y);
                        else if (3 === this.itemSize) for (let e = 0, n = this.count; e < n; e++) la.fromBufferAttribute(this, e), la.applyMatrix3(t), this.setXYZ(e, la.x, la.y, la.z);
                        return this;
                    }
                    applyMatrix4(t) {
                        for (let e = 0, n = this.count; e < n; e++) (la.x = this.getX(e)), (la.y = this.getY(e)), (la.z = this.getZ(e)), la.applyMatrix4(t), this.setXYZ(e, la.x, la.y, la.z);
                        return this;
                    }
                    applyNormalMatrix(t) {
                        for (let e = 0, n = this.count; e < n; e++) (la.x = this.getX(e)), (la.y = this.getY(e)), (la.z = this.getZ(e)), la.applyNormalMatrix(t), this.setXYZ(e, la.x, la.y, la.z);
                        return this;
                    }
                    transformDirection(t) {
                        for (let e = 0, n = this.count; e < n; e++) (la.x = this.getX(e)), (la.y = this.getY(e)), (la.z = this.getZ(e)), la.transformDirection(t), this.setXYZ(e, la.x, la.y, la.z);
                        return this;
                    }
                    set(t, e = 0) {
                        return this.array.set(t, e), this;
                    }
                    getX(t) {
                        return this.array[t * this.itemSize];
                    }
                    setX(t, e) {
                        return (this.array[t * this.itemSize] = e), this;
                    }
                    getY(t) {
                        return this.array[t * this.itemSize + 1];
                    }
                    setY(t, e) {
                        return (this.array[t * this.itemSize + 1] = e), this;
                    }
                    getZ(t) {
                        return this.array[t * this.itemSize + 2];
                    }
                    setZ(t, e) {
                        return (this.array[t * this.itemSize + 2] = e), this;
                    }
                    getW(t) {
                        return this.array[t * this.itemSize + 3];
                    }
                    setW(t, e) {
                        return (this.array[t * this.itemSize + 3] = e), this;
                    }
                    setXY(t, e, n) {
                        return (t *= this.itemSize), (this.array[t + 0] = e), (this.array[t + 1] = n), this;
                    }
                    setXYZ(t, e, n, r) {
                        return (t *= this.itemSize), (this.array[t + 0] = e), (this.array[t + 1] = n), (this.array[t + 2] = r), this;
                    }
                    setXYZW(t, e, n, r, i) {
                        return (t *= this.itemSize), (this.array[t + 0] = e), (this.array[t + 1] = n), (this.array[t + 2] = r), (this.array[t + 3] = i), this;
                    }
                    onUpload(t) {
                        return (this.onUploadCallback = t), this;
                    }
                    clone() {
                        return new this.constructor(this.array, this.itemSize).copy(this);
                    }
                    toJSON() {
                        const t = { itemSize: this.itemSize, type: this.array.constructor.name, array: Array.prototype.slice.call(this.array), normalized: this.normalized };
                        return "" !== this.name && (t.name = this.name), this.usage !== ui && (t.usage = this.usage), (0 === this.updateRange.offset && -1 === this.updateRange.count) || (t.updateRange = this.updateRange), t;
                    }
                }
                ua.prototype.isBufferAttribute = !0;
                class ha extends ua {
                    constructor(t, e, n) {
                        super(new Uint16Array(t), e, n);
                    }
                }
                class da extends ua {
                    constructor(t, e, n) {
                        super(new Uint32Array(t), e, n);
                    }
                }
                (class extends ua {
                    constructor(t, e, n) {
                        super(new Uint16Array(t), e, n);
                    }
                }.prototype.isFloat16BufferAttribute = !0);
                class fa extends ua {
                    constructor(t, e, n) {
                        super(new Float32Array(t), e, n);
                    }
                }
                function pa(t) {
                    if (0 === t.length) return -1 / 0;
                    let e = t[0];
                    for (let n = 1, r = t.length; n < r; ++n) t[n] > e && (e = t[n]);
                    return e;
                }
                Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array;
                let ma = 0;
                const ga = new mo(),
                    va = new Bo(),
                    ya = new Fi(),
                    xa = new Bi(),
                    _a = new Bi(),
                    ba = new Fi();
                class wa extends fi {
                    constructor() {
                        super(),
                            Object.defineProperty(this, "id", { value: ma++ }),
                            (this.uuid = yi()),
                            (this.name = ""),
                            (this.type = "BufferGeometry"),
                            (this.index = null),
                            (this.attributes = {}),
                            (this.morphAttributes = {}),
                            (this.morphTargetsRelative = !1),
                            (this.groups = []),
                            (this.boundingBox = null),
                            (this.boundingSphere = null),
                            (this.drawRange = { start: 0, count: 1 / 0 }),
                            (this.userData = {});
                    }
                    getIndex() {
                        return this.index;
                    }
                    setIndex(t) {
                        return Array.isArray(t) ? (this.index = new (pa(t) > 65535 ? da : ha)(t, 1)) : (this.index = t), this;
                    }
                    getAttribute(t) {
                        return this.attributes[t];
                    }
                    setAttribute(t, e) {
                        return (this.attributes[t] = e), this;
                    }
                    deleteAttribute(t) {
                        return delete this.attributes[t], this;
                    }
                    hasAttribute(t) {
                        return void 0 !== this.attributes[t];
                    }
                    addGroup(t, e, n = 0) {
                        this.groups.push({ start: t, count: e, materialIndex: n });
                    }
                    clearGroups() {
                        this.groups = [];
                    }
                    setDrawRange(t, e) {
                        (this.drawRange.start = t), (this.drawRange.count = e);
                    }
                    applyMatrix4(t) {
                        const e = this.attributes.position;
                        void 0 !== e && (e.applyMatrix4(t), (e.needsUpdate = !0));
                        const n = this.attributes.normal;
                        if (void 0 !== n) {
                            const e = new Ai().getNormalMatrix(t);
                            n.applyNormalMatrix(e), (n.needsUpdate = !0);
                        }
                        const r = this.attributes.tangent;
                        return void 0 !== r && (r.transformDirection(t), (r.needsUpdate = !0)), null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this;
                    }
                    applyQuaternion(t) {
                        return ga.makeRotationFromQuaternion(t), this.applyMatrix4(ga), this;
                    }
                    rotateX(t) {
                        return ga.makeRotationX(t), this.applyMatrix4(ga), this;
                    }
                    rotateY(t) {
                        return ga.makeRotationY(t), this.applyMatrix4(ga), this;
                    }
                    rotateZ(t) {
                        return ga.makeRotationZ(t), this.applyMatrix4(ga), this;
                    }
                    translate(t, e, n) {
                        return ga.makeTranslation(t, e, n), this.applyMatrix4(ga), this;
                    }
                    scale(t, e, n) {
                        return ga.makeScale(t, e, n), this.applyMatrix4(ga), this;
                    }
                    lookAt(t) {
                        return va.lookAt(t), va.updateMatrix(), this.applyMatrix4(va.matrix), this;
                    }
                    center() {
                        return this.computeBoundingBox(), this.boundingBox.getCenter(ya).negate(), this.translate(ya.x, ya.y, ya.z), this;
                    }
                    setFromPoints(t) {
                        const e = [];
                        for (let n = 0, r = t.length; n < r; n++) {
                            const r = t[n];
                            e.push(r.x, r.y, r.z || 0);
                        }
                        return this.setAttribute("position", new fa(e, 3)), this;
                    }
                    computeBoundingBox() {
                        null === this.boundingBox && (this.boundingBox = new Bi());
                        const t = this.attributes.position,
                            e = this.morphAttributes.position;
                        if (t && t.isGLBufferAttribute)
                            return (
                                console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this),
                                    void this.boundingBox.set(new Fi(-1 / 0, -1 / 0, -1 / 0), new Fi(1 / 0, 1 / 0, 1 / 0))
                            );
                        if (void 0 !== t) {
                            if ((this.boundingBox.setFromBufferAttribute(t), e))
                                for (let t = 0, n = e.length; t < n; t++) {
                                    const n = e[t];
                                    xa.setFromBufferAttribute(n),
                                        this.morphTargetsRelative
                                            ? (ba.addVectors(this.boundingBox.min, xa.min), this.boundingBox.expandByPoint(ba), ba.addVectors(this.boundingBox.max, xa.max), this.boundingBox.expandByPoint(ba))
                                            : (this.boundingBox.expandByPoint(xa.min), this.boundingBox.expandByPoint(xa.max));
                                }
                        } else this.boundingBox.makeEmpty();
                        (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) &&
                        console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
                    }
                    computeBoundingSphere() {
                        null === this.boundingSphere && (this.boundingSphere = new oo());
                        const t = this.attributes.position,
                            e = this.morphAttributes.position;
                        if (t && t.isGLBufferAttribute)
                            return (
                                console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this),
                                    void this.boundingSphere.set(new Fi(), 1 / 0)
                            );
                        if (t) {
                            const n = this.boundingSphere.center;
                            if ((xa.setFromBufferAttribute(t), e))
                                for (let t = 0, n = e.length; t < n; t++) {
                                    const n = e[t];
                                    _a.setFromBufferAttribute(n),
                                        this.morphTargetsRelative ? (ba.addVectors(xa.min, _a.min), xa.expandByPoint(ba), ba.addVectors(xa.max, _a.max), xa.expandByPoint(ba)) : (xa.expandByPoint(_a.min), xa.expandByPoint(_a.max));
                                }
                            xa.getCenter(n);
                            let r = 0;
                            for (let e = 0, i = t.count; e < i; e++) ba.fromBufferAttribute(t, e), (r = Math.max(r, n.distanceToSquared(ba)));
                            if (e)
                                for (let i = 0, o = e.length; i < o; i++) {
                                    const o = e[i],
                                        a = this.morphTargetsRelative;
                                    for (let e = 0, i = o.count; e < i; e++) ba.fromBufferAttribute(o, e), a && (ya.fromBufferAttribute(t, e), ba.add(ya)), (r = Math.max(r, n.distanceToSquared(ba)));
                                }
                            (this.boundingSphere.radius = Math.sqrt(r)),
                            isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
                        }
                    }
                    computeFaceNormals() {}
                    computeTangents() {
                        const t = this.index,
                            e = this.attributes;
                        if (null === t || void 0 === e.position || void 0 === e.normal || void 0 === e.uv)
                            return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
                        const n = t.array,
                            r = e.position.array,
                            i = e.normal.array,
                            o = e.uv.array,
                            a = r.length / 3;
                        void 0 === e.tangent && this.setAttribute("tangent", new ua(new Float32Array(4 * a), 4));
                        const s = e.tangent.array,
                            l = [],
                            c = [];
                        for (let t = 0; t < a; t++) (l[t] = new Fi()), (c[t] = new Fi());
                        const u = new Fi(),
                            h = new Fi(),
                            d = new Fi(),
                            f = new Ei(),
                            p = new Ei(),
                            m = new Ei(),
                            g = new Fi(),
                            v = new Fi();
                        function y(t, e, n) {
                            u.fromArray(r, 3 * t), h.fromArray(r, 3 * e), d.fromArray(r, 3 * n), f.fromArray(o, 2 * t), p.fromArray(o, 2 * e), m.fromArray(o, 2 * n), h.sub(u), d.sub(u), p.sub(f), m.sub(f);
                            const i = 1 / (p.x * m.y - m.x * p.y);
                            isFinite(i) &&
                            (g.copy(h).multiplyScalar(m.y).addScaledVector(d, -p.y).multiplyScalar(i),
                                v.copy(d).multiplyScalar(p.x).addScaledVector(h, -m.x).multiplyScalar(i),
                                l[t].add(g),
                                l[e].add(g),
                                l[n].add(g),
                                c[t].add(v),
                                c[e].add(v),
                                c[n].add(v));
                        }
                        let x = this.groups;
                        0 === x.length && (x = [{ start: 0, count: n.length }]);
                        for (let t = 0, e = x.length; t < e; ++t) {
                            const e = x[t],
                                r = e.start;
                            for (let t = r, i = r + e.count; t < i; t += 3) y(n[t + 0], n[t + 1], n[t + 2]);
                        }
                        const _ = new Fi(),
                            b = new Fi(),
                            w = new Fi(),
                            S = new Fi();
                        function M(t) {
                            w.fromArray(i, 3 * t), S.copy(w);
                            const e = l[t];
                            _.copy(e), _.sub(w.multiplyScalar(w.dot(e))).normalize(), b.crossVectors(S, e);
                            const n = b.dot(c[t]) < 0 ? -1 : 1;
                            (s[4 * t] = _.x), (s[4 * t + 1] = _.y), (s[4 * t + 2] = _.z), (s[4 * t + 3] = n);
                        }
                        for (let t = 0, e = x.length; t < e; ++t) {
                            const e = x[t],
                                r = e.start;
                            for (let t = r, i = r + e.count; t < i; t += 3) M(n[t + 0]), M(n[t + 1]), M(n[t + 2]);
                        }
                    }
                    computeVertexNormals() {
                        const t = this.index,
                            e = this.getAttribute("position");
                        if (void 0 !== e) {
                            let n = this.getAttribute("normal");
                            if (void 0 === n) (n = new ua(new Float32Array(3 * e.count), 3)), this.setAttribute("normal", n);
                            else for (let t = 0, e = n.count; t < e; t++) n.setXYZ(t, 0, 0, 0);
                            const r = new Fi(),
                                i = new Fi(),
                                o = new Fi(),
                                a = new Fi(),
                                s = new Fi(),
                                l = new Fi(),
                                c = new Fi(),
                                u = new Fi();
                            if (t)
                                for (let h = 0, d = t.count; h < d; h += 3) {
                                    const d = t.getX(h + 0),
                                        f = t.getX(h + 1),
                                        p = t.getX(h + 2);
                                    r.fromBufferAttribute(e, d),
                                        i.fromBufferAttribute(e, f),
                                        o.fromBufferAttribute(e, p),
                                        c.subVectors(o, i),
                                        u.subVectors(r, i),
                                        c.cross(u),
                                        a.fromBufferAttribute(n, d),
                                        s.fromBufferAttribute(n, f),
                                        l.fromBufferAttribute(n, p),
                                        a.add(c),
                                        s.add(c),
                                        l.add(c),
                                        n.setXYZ(d, a.x, a.y, a.z),
                                        n.setXYZ(f, s.x, s.y, s.z),
                                        n.setXYZ(p, l.x, l.y, l.z);
                                }
                            else
                                for (let t = 0, a = e.count; t < a; t += 3)
                                    r.fromBufferAttribute(e, t + 0),
                                        i.fromBufferAttribute(e, t + 1),
                                        o.fromBufferAttribute(e, t + 2),
                                        c.subVectors(o, i),
                                        u.subVectors(r, i),
                                        c.cross(u),
                                        n.setXYZ(t + 0, c.x, c.y, c.z),
                                        n.setXYZ(t + 1, c.x, c.y, c.z),
                                        n.setXYZ(t + 2, c.x, c.y, c.z);
                            this.normalizeNormals(), (n.needsUpdate = !0);
                        }
                    }
                    merge(t, e) {
                        if (!t || !t.isBufferGeometry) return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", t);
                        void 0 === e && ((e = 0), console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
                        const n = this.attributes;
                        for (const r in n) {
                            if (void 0 === t.attributes[r]) continue;
                            const i = n[r].array,
                                o = t.attributes[r],
                                a = o.array,
                                s = o.itemSize * e,
                                l = Math.min(a.length, i.length - s);
                            for (let t = 0, e = s; t < l; t++, e++) i[e] = a[t];
                        }
                        return this;
                    }
                    normalizeNormals() {
                        const t = this.attributes.normal;
                        for (let e = 0, n = t.count; e < n; e++) ba.fromBufferAttribute(t, e), ba.normalize(), t.setXYZ(e, ba.x, ba.y, ba.z);
                    }
                    toNonIndexed() {
                        function t(t, e) {
                            const n = t.array,
                                r = t.itemSize,
                                i = t.normalized,
                                o = new n.constructor(e.length * r);
                            let a = 0,
                                s = 0;
                            for (let i = 0, l = e.length; i < l; i++) {
                                a = t.isInterleavedBufferAttribute ? e[i] * t.data.stride + t.offset : e[i] * r;
                                for (let t = 0; t < r; t++) o[s++] = n[a++];
                            }
                            return new ua(o, r, i);
                        }
                        if (null === this.index) return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
                        const e = new wa(),
                            n = this.index.array,
                            r = this.attributes;
                        for (const i in r) {
                            const o = t(r[i], n);
                            e.setAttribute(i, o);
                        }
                        const i = this.morphAttributes;
                        for (const r in i) {
                            const o = [],
                                a = i[r];
                            for (let e = 0, r = a.length; e < r; e++) {
                                const r = t(a[e], n);
                                o.push(r);
                            }
                            e.morphAttributes[r] = o;
                        }
                        e.morphTargetsRelative = this.morphTargetsRelative;
                        const o = this.groups;
                        for (let t = 0, n = o.length; t < n; t++) {
                            const n = o[t];
                            e.addGroup(n.start, n.count, n.materialIndex);
                        }
                        return e;
                    }
                    toJSON() {
                        const t = { metadata: { version: 4.5, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } };
                        if (((t.uuid = this.uuid), (t.type = this.type), "" !== this.name && (t.name = this.name), Object.keys(this.userData).length > 0 && (t.userData = this.userData), void 0 !== this.parameters)) {
                            const e = this.parameters;
                            for (const n in e) void 0 !== e[n] && (t[n] = e[n]);
                            return t;
                        }
                        t.data = { attributes: {} };
                        const e = this.index;
                        null !== e && (t.data.index = { type: e.array.constructor.name, array: Array.prototype.slice.call(e.array) });
                        const n = this.attributes;
                        for (const e in n) {
                            const r = n[e];
                            t.data.attributes[e] = r.toJSON(t.data);
                        }
                        const r = {};
                        let i = !1;
                        for (const e in this.morphAttributes) {
                            const n = this.morphAttributes[e],
                                o = [];
                            for (let e = 0, r = n.length; e < r; e++) {
                                const r = n[e];
                                o.push(r.toJSON(t.data));
                            }
                            o.length > 0 && ((r[e] = o), (i = !0));
                        }
                        i && ((t.data.morphAttributes = r), (t.data.morphTargetsRelative = this.morphTargetsRelative));
                        const o = this.groups;
                        o.length > 0 && (t.data.groups = JSON.parse(JSON.stringify(o)));
                        const a = this.boundingSphere;
                        return null !== a && (t.data.boundingSphere = { center: a.center.toArray(), radius: a.radius }), t;
                    }
                    clone() {
                        return new wa().copy(this);
                    }
                    copy(t) {
                        (this.index = null), (this.attributes = {}), (this.morphAttributes = {}), (this.groups = []), (this.boundingBox = null), (this.boundingSphere = null);
                        const e = {};
                        this.name = t.name;
                        const n = t.index;
                        null !== n && this.setIndex(n.clone(e));
                        const r = t.attributes;
                        for (const t in r) {
                            const n = r[t];
                            this.setAttribute(t, n.clone(e));
                        }
                        const i = t.morphAttributes;
                        for (const t in i) {
                            const n = [],
                                r = i[t];
                            for (let t = 0, i = r.length; t < i; t++) n.push(r[t].clone(e));
                            this.morphAttributes[t] = n;
                        }
                        this.morphTargetsRelative = t.morphTargetsRelative;
                        const o = t.groups;
                        for (let t = 0, e = o.length; t < e; t++) {
                            const e = o[t];
                            this.addGroup(e.start, e.count, e.materialIndex);
                        }
                        const a = t.boundingBox;
                        null !== a && (this.boundingBox = a.clone());
                        const s = t.boundingSphere;
                        return null !== s && (this.boundingSphere = s.clone()), (this.drawRange.start = t.drawRange.start), (this.drawRange.count = t.drawRange.count), (this.userData = t.userData), this;
                    }
                    dispose() {
                        this.dispatchEvent({ type: "dispose" });
                    }
                }
                wa.prototype.isBufferGeometry = !0;
                const Sa = new mo(),
                    Ma = new po(),
                    Ta = new oo(),
                    Ea = new Fi(),
                    Aa = new Fi(),
                    La = new Fi(),
                    Ca = new Fi(),
                    Ra = new Fi(),
                    Pa = new Fi(),
                    Ia = new Fi(),
                    Oa = new Fi(),
                    Da = new Fi(),
                    ka = new Ei(),
                    Ua = new Ei(),
                    Fa = new Ei(),
                    Na = new Fi(),
                    za = new Fi();
                class Ba extends Bo {
                    constructor(t = new wa(), e = new sa()) {
                        super(), (this.type = "Mesh"), (this.geometry = t), (this.material = e), this.updateMorphTargets();
                    }
                    copy(t) {
                        return (
                            super.copy(t),
                            void 0 !== t.morphTargetInfluences && (this.morphTargetInfluences = t.morphTargetInfluences.slice()),
                            void 0 !== t.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, t.morphTargetDictionary)),
                                (this.material = t.material),
                                (this.geometry = t.geometry),
                                this
                        );
                    }
                    updateMorphTargets() {
                        const t = this.geometry;
                        if (t.isBufferGeometry) {
                            const e = t.morphAttributes,
                                n = Object.keys(e);
                            if (n.length > 0) {
                                const t = e[n[0]];
                                if (void 0 !== t) {
                                    (this.morphTargetInfluences = []), (this.morphTargetDictionary = {});
                                    for (let e = 0, n = t.length; e < n; e++) {
                                        const n = t[e].name || String(e);
                                        this.morphTargetInfluences.push(0), (this.morphTargetDictionary[n] = e);
                                    }
                                }
                            }
                        } else {
                            const e = t.morphTargets;
                            void 0 !== e && e.length > 0 && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
                        }
                    }
                    raycast(t, e) {
                        const n = this.geometry,
                            r = this.material,
                            i = this.matrixWorld;
                        if (void 0 === r) return;
                        if ((null === n.boundingSphere && n.computeBoundingSphere(), Ta.copy(n.boundingSphere), Ta.applyMatrix4(i), !1 === t.ray.intersectsSphere(Ta))) return;
                        if ((Sa.copy(i).invert(), Ma.copy(t.ray).applyMatrix4(Sa), null !== n.boundingBox && !1 === Ma.intersectsBox(n.boundingBox))) return;
                        let o;
                        if (n.isBufferGeometry) {
                            const i = n.index,
                                a = n.attributes.position,
                                s = n.morphAttributes.position,
                                l = n.morphTargetsRelative,
                                c = n.attributes.uv,
                                u = n.attributes.uv2,
                                h = n.groups,
                                d = n.drawRange;
                            if (null !== i)
                                if (Array.isArray(r))
                                    for (let n = 0, f = h.length; n < f; n++) {
                                        const f = h[n],
                                            p = r[f.materialIndex];
                                        for (let n = Math.max(f.start, d.start), r = Math.min(f.start + f.count, d.start + d.count); n < r; n += 3) {
                                            const r = i.getX(n),
                                                h = i.getX(n + 1),
                                                d = i.getX(n + 2);
                                            (o = Ga(this, p, t, Ma, a, s, l, c, u, r, h, d)), o && ((o.faceIndex = Math.floor(n / 3)), (o.face.materialIndex = f.materialIndex), e.push(o));
                                        }
                                    }
                                else {
                                    for (let n = Math.max(0, d.start), h = Math.min(i.count, d.start + d.count); n < h; n += 3) {
                                        const h = i.getX(n),
                                            d = i.getX(n + 1),
                                            f = i.getX(n + 2);
                                        (o = Ga(this, r, t, Ma, a, s, l, c, u, h, d, f)), o && ((o.faceIndex = Math.floor(n / 3)), e.push(o));
                                    }
                                }
                            else if (void 0 !== a)
                                if (Array.isArray(r))
                                    for (let n = 0, i = h.length; n < i; n++) {
                                        const i = h[n],
                                            f = r[i.materialIndex];
                                        for (let n = Math.max(i.start, d.start), r = Math.min(i.start + i.count, d.start + d.count); n < r; n += 3) {
                                            (o = Ga(this, f, t, Ma, a, s, l, c, u, n, n + 1, n + 2)), o && ((o.faceIndex = Math.floor(n / 3)), (o.face.materialIndex = i.materialIndex), e.push(o));
                                        }
                                    }
                                else {
                                    for (let n = Math.max(0, d.start), i = Math.min(a.count, d.start + d.count); n < i; n += 3) {
                                        (o = Ga(this, r, t, Ma, a, s, l, c, u, n, n + 1, n + 2)), o && ((o.faceIndex = Math.floor(n / 3)), e.push(o));
                                    }
                                }
                        } else n.isGeometry && console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
                    }
                }
                function Ga(t, e, n, r, i, o, a, s, l, c, u, h) {
                    Ea.fromBufferAttribute(i, c), Aa.fromBufferAttribute(i, u), La.fromBufferAttribute(i, h);
                    const d = t.morphTargetInfluences;
                    if (o && d) {
                        Ia.set(0, 0, 0), Oa.set(0, 0, 0), Da.set(0, 0, 0);
                        for (let t = 0, e = o.length; t < e; t++) {
                            const e = d[t],
                                n = o[t];
                            0 !== e &&
                            (Ca.fromBufferAttribute(n, c),
                                Ra.fromBufferAttribute(n, u),
                                Pa.fromBufferAttribute(n, h),
                                a ? (Ia.addScaledVector(Ca, e), Oa.addScaledVector(Ra, e), Da.addScaledVector(Pa, e)) : (Ia.addScaledVector(Ca.sub(Ea), e), Oa.addScaledVector(Ra.sub(Aa), e), Da.addScaledVector(Pa.sub(La), e)));
                        }
                        Ea.add(Ia), Aa.add(Oa), La.add(Da);
                    }
                    t.isSkinnedMesh && (t.boneTransform(c, Ea), t.boneTransform(u, Aa), t.boneTransform(h, La));
                    const f = (function (t, e, n, r, i, o, a, s) {
                        let l;
                        if (((l = 1 === e.side ? r.intersectTriangle(a, o, i, !0, s) : r.intersectTriangle(i, o, a, 2 !== e.side, s)), null === l)) return null;
                        za.copy(s), za.applyMatrix4(t.matrixWorld);
                        const c = n.ray.origin.distanceTo(za);
                        return c < n.near || c > n.far ? null : { distance: c, point: za.clone(), object: t };
                    })(t, e, n, r, Ea, Aa, La, Na);
                    if (f) {
                        s && (ka.fromBufferAttribute(s, c), Ua.fromBufferAttribute(s, u), Fa.fromBufferAttribute(s, h), (f.uv = $o.getUV(Na, Ea, Aa, La, ka, Ua, Fa, new Ei()))),
                        l && (ka.fromBufferAttribute(l, c), Ua.fromBufferAttribute(l, u), Fa.fromBufferAttribute(l, h), (f.uv2 = $o.getUV(Na, Ea, Aa, La, ka, Ua, Fa, new Ei())));
                        const t = { a: c, b: u, c: h, normal: new Fi(), materialIndex: 0 };
                        $o.getNormal(Ea, Aa, La, t.normal), (f.face = t);
                    }
                    return f;
                }
                Ba.prototype.isMesh = !0;
                class Ha extends wa {
                    constructor(t = 1, e = 1, n = 1, r = 1, i = 1, o = 1) {
                        super(), (this.type = "BoxGeometry"), (this.parameters = { width: t, height: e, depth: n, widthSegments: r, heightSegments: i, depthSegments: o });
                        const a = this;
                        (r = Math.floor(r)), (i = Math.floor(i)), (o = Math.floor(o));
                        const s = [],
                            l = [],
                            c = [],
                            u = [];
                        let h = 0,
                            d = 0;
                        function f(t, e, n, r, i, o, f, p, m, g, v) {
                            const y = o / m,
                                x = f / g,
                                _ = o / 2,
                                b = f / 2,
                                w = p / 2,
                                S = m + 1,
                                M = g + 1;
                            let T = 0,
                                E = 0;
                            const A = new Fi();
                            for (let o = 0; o < M; o++) {
                                const a = o * x - b;
                                for (let s = 0; s < S; s++) {
                                    const h = s * y - _;
                                    (A[t] = h * r), (A[e] = a * i), (A[n] = w), l.push(A.x, A.y, A.z), (A[t] = 0), (A[e] = 0), (A[n] = p > 0 ? 1 : -1), c.push(A.x, A.y, A.z), u.push(s / m), u.push(1 - o / g), (T += 1);
                                }
                            }
                            for (let t = 0; t < g; t++)
                                for (let e = 0; e < m; e++) {
                                    const n = h + e + S * t,
                                        r = h + e + S * (t + 1),
                                        i = h + (e + 1) + S * (t + 1),
                                        o = h + (e + 1) + S * t;
                                    s.push(n, r, o), s.push(r, i, o), (E += 6);
                                }
                            a.addGroup(d, E, v), (d += E), (h += T);
                        }
                        f("z", "y", "x", -1, -1, n, e, t, o, i, 0),
                            f("z", "y", "x", 1, -1, n, e, -t, o, i, 1),
                            f("x", "z", "y", 1, 1, t, n, e, r, o, 2),
                            f("x", "z", "y", 1, -1, t, n, -e, r, o, 3),
                            f("x", "y", "z", 1, -1, t, e, n, r, i, 4),
                            f("x", "y", "z", -1, -1, t, e, -n, r, i, 5),
                            this.setIndex(s),
                            this.setAttribute("position", new fa(l, 3)),
                            this.setAttribute("normal", new fa(c, 3)),
                            this.setAttribute("uv", new fa(u, 2));
                    }
                    static fromJSON(t) {
                        return new Ha(t.width, t.height, t.depth, t.widthSegments, t.heightSegments, t.depthSegments);
                    }
                }
                function Va(t) {
                    const e = {};
                    for (const n in t) {
                        e[n] = {};
                        for (const r in t[n]) {
                            const i = t[n][r];
                            i && (i.isColor || i.isMatrix3 || i.isMatrix4 || i.isVector2 || i.isVector3 || i.isVector4 || i.isTexture || i.isQuaternion) ? (e[n][r] = i.clone()) : Array.isArray(i) ? (e[n][r] = i.slice()) : (e[n][r] = i);
                        }
                    }
                    return e;
                }
                function Wa(t) {
                    const e = {};
                    for (let n = 0; n < t.length; n++) {
                        const r = Va(t[n]);
                        for (const t in r) e[t] = r[t];
                    }
                    return e;
                }
                const ja = { clone: Va, merge: Wa };
                class qa extends Ko {
                    constructor(t) {
                        super(),
                            (this.type = "ShaderMaterial"),
                            (this.defines = {}),
                            (this.uniforms = {}),
                            (this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}"),
                            (this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}"),
                            (this.linewidth = 1),
                            (this.wireframe = !1),
                            (this.wireframeLinewidth = 1),
                            (this.fog = !1),
                            (this.lights = !1),
                            (this.clipping = !1),
                            (this.extensions = { derivatives: !1, fragDepth: !1, drawBuffers: !1, shaderTextureLOD: !1 }),
                            (this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] }),
                            (this.index0AttributeName = void 0),
                            (this.uniformsNeedUpdate = !1),
                            (this.glslVersion = null),
                        void 0 !== t && (void 0 !== t.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(t));
                    }
                    copy(t) {
                        return (
                            super.copy(t),
                                (this.fragmentShader = t.fragmentShader),
                                (this.vertexShader = t.vertexShader),
                                (this.uniforms = Va(t.uniforms)),
                                (this.defines = Object.assign({}, t.defines)),
                                (this.wireframe = t.wireframe),
                                (this.wireframeLinewidth = t.wireframeLinewidth),
                                (this.lights = t.lights),
                                (this.clipping = t.clipping),
                                (this.extensions = Object.assign({}, t.extensions)),
                                (this.glslVersion = t.glslVersion),
                                this
                        );
                    }
                    toJSON(t) {
                        const e = super.toJSON(t);
                        (e.glslVersion = this.glslVersion), (e.uniforms = {});
                        for (const n in this.uniforms) {
                            const r = this.uniforms[n].value;
                            r && r.isTexture
                                ? (e.uniforms[n] = { type: "t", value: r.toJSON(t).uuid })
                                : r && r.isColor
                                    ? (e.uniforms[n] = { type: "c", value: r.getHex() })
                                    : r && r.isVector2
                                        ? (e.uniforms[n] = { type: "v2", value: r.toArray() })
                                        : r && r.isVector3
                                            ? (e.uniforms[n] = { type: "v3", value: r.toArray() })
                                            : r && r.isVector4
                                                ? (e.uniforms[n] = { type: "v4", value: r.toArray() })
                                                : r && r.isMatrix3
                                                    ? (e.uniforms[n] = { type: "m3", value: r.toArray() })
                                                    : r && r.isMatrix4
                                                        ? (e.uniforms[n] = { type: "m4", value: r.toArray() })
                                                        : (e.uniforms[n] = { value: r });
                        }
                        Object.keys(this.defines).length > 0 && (e.defines = this.defines), (e.vertexShader = this.vertexShader), (e.fragmentShader = this.fragmentShader);
                        const n = {};
                        for (const t in this.extensions) !0 === this.extensions[t] && (n[t] = !0);
                        return Object.keys(n).length > 0 && (e.extensions = n), e;
                    }
                }
                qa.prototype.isShaderMaterial = !0;
                class Xa extends Bo {
                    constructor() {
                        super(), (this.type = "Camera"), (this.matrixWorldInverse = new mo()), (this.projectionMatrix = new mo()), (this.projectionMatrixInverse = new mo());
                    }
                    copy(t, e) {
                        return super.copy(t, e), this.matrixWorldInverse.copy(t.matrixWorldInverse), this.projectionMatrix.copy(t.projectionMatrix), this.projectionMatrixInverse.copy(t.projectionMatrixInverse), this;
                    }
                    getWorldDirection(t) {
                        this.updateWorldMatrix(!0, !1);
                        const e = this.matrixWorld.elements;
                        return t.set(-e[8], -e[9], -e[10]).normalize();
                    }
                    updateMatrixWorld(t) {
                        super.updateMatrixWorld(t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
                    }
                    updateWorldMatrix(t, e) {
                        super.updateWorldMatrix(t, e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                }
                Xa.prototype.isCamera = !0;
                class Ya extends Xa {
                    constructor(t = 50, e = 1, n = 0.1, r = 2e3) {
                        super(),
                            (this.type = "PerspectiveCamera"),
                            (this.fov = t),
                            (this.zoom = 1),
                            (this.near = n),
                            (this.far = r),
                            (this.focus = 10),
                            (this.aspect = e),
                            (this.view = null),
                            (this.filmGauge = 35),
                            (this.filmOffset = 0),
                            this.updateProjectionMatrix();
                    }
                    copy(t, e) {
                        return (
                            super.copy(t, e),
                                (this.fov = t.fov),
                                (this.zoom = t.zoom),
                                (this.near = t.near),
                                (this.far = t.far),
                                (this.focus = t.focus),
                                (this.aspect = t.aspect),
                                (this.view = null === t.view ? null : Object.assign({}, t.view)),
                                (this.filmGauge = t.filmGauge),
                                (this.filmOffset = t.filmOffset),
                                this
                        );
                    }
                    setFocalLength(t) {
                        const e = (0.5 * this.getFilmHeight()) / t;
                        (this.fov = 2 * vi * Math.atan(e)), this.updateProjectionMatrix();
                    }
                    getFocalLength() {
                        const t = Math.tan(0.5 * gi * this.fov);
                        return (0.5 * this.getFilmHeight()) / t;
                    }
                    getEffectiveFOV() {
                        return 2 * vi * Math.atan(Math.tan(0.5 * gi * this.fov) / this.zoom);
                    }
                    getFilmWidth() {
                        return this.filmGauge * Math.min(this.aspect, 1);
                    }
                    getFilmHeight() {
                        return this.filmGauge / Math.max(this.aspect, 1);
                    }
                    setViewOffset(t, e, n, r, i, o) {
                        (this.aspect = t / e),
                        null === this.view && (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }),
                            (this.view.enabled = !0),
                            (this.view.fullWidth = t),
                            (this.view.fullHeight = e),
                            (this.view.offsetX = n),
                            (this.view.offsetY = r),
                            (this.view.width = i),
                            (this.view.height = o),
                            this.updateProjectionMatrix();
                    }
                    clearViewOffset() {
                        null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix();
                    }
                    updateProjectionMatrix() {
                        const t = this.near;
                        let e = (t * Math.tan(0.5 * gi * this.fov)) / this.zoom,
                            n = 2 * e,
                            r = this.aspect * n,
                            i = -0.5 * r;
                        const o = this.view;
                        if (null !== this.view && this.view.enabled) {
                            const t = o.fullWidth,
                                a = o.fullHeight;
                            (i += (o.offsetX * r) / t), (e -= (o.offsetY * n) / a), (r *= o.width / t), (n *= o.height / a);
                        }
                        const a = this.filmOffset;
                        0 !== a && (i += (t * a) / this.getFilmWidth()), this.projectionMatrix.makePerspective(i, i + r, e, e - n, t, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
                    }
                    toJSON(t) {
                        const e = super.toJSON(t);
                        return (
                            (e.object.fov = this.fov),
                                (e.object.zoom = this.zoom),
                                (e.object.near = this.near),
                                (e.object.far = this.far),
                                (e.object.focus = this.focus),
                                (e.object.aspect = this.aspect),
                            null !== this.view && (e.object.view = Object.assign({}, this.view)),
                                (e.object.filmGauge = this.filmGauge),
                                (e.object.filmOffset = this.filmOffset),
                                e
                        );
                    }
                }
                Ya.prototype.isPerspectiveCamera = !0;
                const Za = 90;
                class Ja extends Bo {
                    constructor(t, e, n) {
                        if ((super(), (this.type = "CubeCamera"), !0 !== n.isWebGLCubeRenderTarget)) return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");
                        this.renderTarget = n;
                        const r = new Ya(Za, 1, t, e);
                        (r.layers = this.layers), r.up.set(0, -1, 0), r.lookAt(new Fi(1, 0, 0)), this.add(r);
                        const i = new Ya(Za, 1, t, e);
                        (i.layers = this.layers), i.up.set(0, -1, 0), i.lookAt(new Fi(-1, 0, 0)), this.add(i);
                        const o = new Ya(Za, 1, t, e);
                        (o.layers = this.layers), o.up.set(0, 0, 1), o.lookAt(new Fi(0, 1, 0)), this.add(o);
                        const a = new Ya(Za, 1, t, e);
                        (a.layers = this.layers), a.up.set(0, 0, -1), a.lookAt(new Fi(0, -1, 0)), this.add(a);
                        const s = new Ya(Za, 1, t, e);
                        (s.layers = this.layers), s.up.set(0, -1, 0), s.lookAt(new Fi(0, 0, 1)), this.add(s);
                        const l = new Ya(Za, 1, t, e);
                        (l.layers = this.layers), l.up.set(0, -1, 0), l.lookAt(new Fi(0, 0, -1)), this.add(l);
                    }
                    update(t, e) {
                        null === this.parent && this.updateMatrixWorld();
                        const n = this.renderTarget,
                            [r, i, o, a, s, l] = this.children,
                            c = t.xr.enabled,
                            u = t.getRenderTarget();
                        t.xr.enabled = !1;
                        const h = n.texture.generateMipmaps;
                        (n.texture.generateMipmaps = !1),
                            t.setRenderTarget(n, 0),
                            t.render(e, r),
                            t.setRenderTarget(n, 1),
                            t.render(e, i),
                            t.setRenderTarget(n, 2),
                            t.render(e, o),
                            t.setRenderTarget(n, 3),
                            t.render(e, a),
                            t.setRenderTarget(n, 4),
                            t.render(e, s),
                            (n.texture.generateMipmaps = h),
                            t.setRenderTarget(n, 5),
                            t.render(e, l),
                            t.setRenderTarget(u),
                            (t.xr.enabled = c);
                    }
                }
                class $a extends Pi {
                    constructor(t, e, n, r, i, o, a, s, l, c) {
                        super((t = void 0 !== t ? t : []), (e = void 0 !== e ? e : Lr), n, r, i, o, (a = void 0 !== a ? a : Yr), s, l, c), (this.flipY = !1);
                    }
                    get images() {
                        return this.image;
                    }
                    set images(t) {
                        this.image = t;
                    }
                }
                $a.prototype.isCubeTexture = !0;
                class Qa extends Di {
                    constructor(t, e, n) {
                        Number.isInteger(e) && (console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"), (e = n)),
                            super(t, t, e),
                            (e = e || {}),
                            (this.texture = new $a(void 0, e.mapping, e.wrapS, e.wrapT, e.magFilter, e.minFilter, e.format, e.type, e.anisotropy, e.encoding)),
                            (this.texture.isRenderTargetTexture = !0),
                            (this.texture.generateMipmaps = void 0 !== e.generateMipmaps && e.generateMipmaps),
                            (this.texture.minFilter = void 0 !== e.minFilter ? e.minFilter : Br),
                            (this.texture._needsFlipEnvMap = !1);
                    }
                    fromEquirectangularTexture(t, e) {
                        (this.texture.type = e.type),
                            (this.texture.format = Zr),
                            (this.texture.encoding = e.encoding),
                            (this.texture.generateMipmaps = e.generateMipmaps),
                            (this.texture.minFilter = e.minFilter),
                            (this.texture.magFilter = e.magFilter);
                        const n = {
                                uniforms: { tEquirect: { value: null } },
                                vertexShader:
                                    "\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",
                                fragmentShader:
                                    "\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",
                            },
                            r = new Ha(5, 5, 5),
                            i = new qa({ name: "CubemapFromEquirect", uniforms: Va(n.uniforms), vertexShader: n.vertexShader, fragmentShader: n.fragmentShader, side: 1, blending: 0 });
                        i.uniforms.tEquirect.value = e;
                        const o = new Ba(r, i),
                            a = e.minFilter;
                        e.minFilter === Gr && (e.minFilter = Br);
                        return new Ja(1, 10, this).update(t, o), (e.minFilter = a), o.geometry.dispose(), o.material.dispose(), this;
                    }
                    clear(t, e, n, r) {
                        const i = t.getRenderTarget();
                        for (let i = 0; i < 6; i++) t.setRenderTarget(this, i), t.clear(e, n, r);
                        t.setRenderTarget(i);
                    }
                }
                Qa.prototype.isWebGLCubeRenderTarget = !0;
                const Ka = new Fi(),
                    ts = new Fi(),
                    es = new Ai();
                class ns {
                    constructor(t = new Fi(1, 0, 0), e = 0) {
                        (this.normal = t), (this.constant = e);
                    }
                    set(t, e) {
                        return this.normal.copy(t), (this.constant = e), this;
                    }
                    setComponents(t, e, n, r) {
                        return this.normal.set(t, e, n), (this.constant = r), this;
                    }
                    setFromNormalAndCoplanarPoint(t, e) {
                        return this.normal.copy(t), (this.constant = -e.dot(this.normal)), this;
                    }
                    setFromCoplanarPoints(t, e, n) {
                        const r = Ka.subVectors(n, e).cross(ts.subVectors(t, e)).normalize();
                        return this.setFromNormalAndCoplanarPoint(r, t), this;
                    }
                    copy(t) {
                        return this.normal.copy(t.normal), (this.constant = t.constant), this;
                    }
                    normalize() {
                        const t = 1 / this.normal.length();
                        return this.normal.multiplyScalar(t), (this.constant *= t), this;
                    }
                    negate() {
                        return (this.constant *= -1), this.normal.negate(), this;
                    }
                    distanceToPoint(t) {
                        return this.normal.dot(t) + this.constant;
                    }
                    distanceToSphere(t) {
                        return this.distanceToPoint(t.center) - t.radius;
                    }
                    projectPoint(t, e) {
                        return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t);
                    }
                    intersectLine(t, e) {
                        const n = t.delta(Ka),
                            r = this.normal.dot(n);
                        if (0 === r) return 0 === this.distanceToPoint(t.start) ? e.copy(t.start) : null;
                        const i = -(t.start.dot(this.normal) + this.constant) / r;
                        return i < 0 || i > 1 ? null : e.copy(n).multiplyScalar(i).add(t.start);
                    }
                    intersectsLine(t) {
                        const e = this.distanceToPoint(t.start),
                            n = this.distanceToPoint(t.end);
                        return (e < 0 && n > 0) || (n < 0 && e > 0);
                    }
                    intersectsBox(t) {
                        return t.intersectsPlane(this);
                    }
                    intersectsSphere(t) {
                        return t.intersectsPlane(this);
                    }
                    coplanarPoint(t) {
                        return t.copy(this.normal).multiplyScalar(-this.constant);
                    }
                    applyMatrix4(t, e) {
                        const n = e || es.getNormalMatrix(t),
                            r = this.coplanarPoint(Ka).applyMatrix4(t),
                            i = this.normal.applyMatrix3(n).normalize();
                        return (this.constant = -r.dot(i)), this;
                    }
                    translate(t) {
                        return (this.constant -= t.dot(this.normal)), this;
                    }
                    equals(t) {
                        return t.normal.equals(this.normal) && t.constant === this.constant;
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                }
                ns.prototype.isPlane = !0;
                const rs = new oo(),
                    is = new Fi();
                class os {
                    constructor(t = new ns(), e = new ns(), n = new ns(), r = new ns(), i = new ns(), o = new ns()) {
                        this.planes = [t, e, n, r, i, o];
                    }
                    set(t, e, n, r, i, o) {
                        const a = this.planes;
                        return a[0].copy(t), a[1].copy(e), a[2].copy(n), a[3].copy(r), a[4].copy(i), a[5].copy(o), this;
                    }
                    copy(t) {
                        const e = this.planes;
                        for (let n = 0; n < 6; n++) e[n].copy(t.planes[n]);
                        return this;
                    }
                    setFromProjectionMatrix(t) {
                        const e = this.planes,
                            n = t.elements,
                            r = n[0],
                            i = n[1],
                            o = n[2],
                            a = n[3],
                            s = n[4],
                            l = n[5],
                            c = n[6],
                            u = n[7],
                            h = n[8],
                            d = n[9],
                            f = n[10],
                            p = n[11],
                            m = n[12],
                            g = n[13],
                            v = n[14],
                            y = n[15];
                        return (
                            e[0].setComponents(a - r, u - s, p - h, y - m).normalize(),
                                e[1].setComponents(a + r, u + s, p + h, y + m).normalize(),
                                e[2].setComponents(a + i, u + l, p + d, y + g).normalize(),
                                e[3].setComponents(a - i, u - l, p - d, y - g).normalize(),
                                e[4].setComponents(a - o, u - c, p - f, y - v).normalize(),
                                e[5].setComponents(a + o, u + c, p + f, y + v).normalize(),
                                this
                        );
                    }
                    intersectsObject(t) {
                        const e = t.geometry;
                        return null === e.boundingSphere && e.computeBoundingSphere(), rs.copy(e.boundingSphere).applyMatrix4(t.matrixWorld), this.intersectsSphere(rs);
                    }
                    intersectsSprite(t) {
                        return rs.center.set(0, 0, 0), (rs.radius = 0.7071067811865476), rs.applyMatrix4(t.matrixWorld), this.intersectsSphere(rs);
                    }
                    intersectsSphere(t) {
                        const e = this.planes,
                            n = t.center,
                            r = -t.radius;
                        for (let t = 0; t < 6; t++) {
                            if (e[t].distanceToPoint(n) < r) return !1;
                        }
                        return !0;
                    }
                    intersectsBox(t) {
                        const e = this.planes;
                        for (let n = 0; n < 6; n++) {
                            const r = e[n];
                            if (((is.x = r.normal.x > 0 ? t.max.x : t.min.x), (is.y = r.normal.y > 0 ? t.max.y : t.min.y), (is.z = r.normal.z > 0 ? t.max.z : t.min.z), r.distanceToPoint(is) < 0)) return !1;
                        }
                        return !0;
                    }
                    containsPoint(t) {
                        const e = this.planes;
                        for (let n = 0; n < 6; n++) if (e[n].distanceToPoint(t) < 0) return !1;
                        return !0;
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                }
                function as() {
                    let t = null,
                        e = !1,
                        n = null,
                        r = null;
                    function i(e, o) {
                        n(e, o), (r = t.requestAnimationFrame(i));
                    }
                    return {
                        start: function () {
                            !0 !== e && null !== n && ((r = t.requestAnimationFrame(i)), (e = !0));
                        },
                        stop: function () {
                            t.cancelAnimationFrame(r), (e = !1);
                        },
                        setAnimationLoop: function (t) {
                            n = t;
                        },
                        setContext: function (e) {
                            t = e;
                        },
                    };
                }
                function ss(t, e) {
                    const n = e.isWebGL2,
                        r = new WeakMap();
                    return {
                        get: function (t) {
                            return t.isInterleavedBufferAttribute && (t = t.data), r.get(t);
                        },
                        remove: function (e) {
                            e.isInterleavedBufferAttribute && (e = e.data);
                            const n = r.get(e);
                            n && (t.deleteBuffer(n.buffer), r.delete(e));
                        },
                        update: function (e, i) {
                            if (e.isGLBufferAttribute) {
                                const t = r.get(e);
                                return void ((!t || t.version < e.version) && r.set(e, { buffer: e.buffer, type: e.type, bytesPerElement: e.elementSize, version: e.version }));
                            }
                            e.isInterleavedBufferAttribute && (e = e.data);
                            const o = r.get(e);
                            void 0 === o
                                ? r.set(
                                    e,
                                    (function (e, r) {
                                        const i = e.array,
                                            o = e.usage,
                                            a = t.createBuffer();
                                        t.bindBuffer(r, a), t.bufferData(r, i, o), e.onUploadCallback();
                                        let s = 5126;
                                        return (
                                            i instanceof Float32Array
                                                ? (s = 5126)
                                                : i instanceof Float64Array
                                                    ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.")
                                                    : i instanceof Uint16Array
                                                        ? e.isFloat16BufferAttribute
                                                            ? n
                                                                ? (s = 5131)
                                                                : console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.")
                                                            : (s = 5123)
                                                        : i instanceof Int16Array
                                                            ? (s = 5122)
                                                            : i instanceof Uint32Array
                                                                ? (s = 5125)
                                                                : i instanceof Int32Array
                                                                    ? (s = 5124)
                                                                    : i instanceof Int8Array
                                                                        ? (s = 5120)
                                                                        : (i instanceof Uint8Array || i instanceof Uint8ClampedArray) && (s = 5121),
                                                { buffer: a, type: s, bytesPerElement: i.BYTES_PER_ELEMENT, version: e.version }
                                        );
                                    })(e, i)
                                )
                                : o.version < e.version &&
                                (!(function (e, r, i) {
                                    const o = r.array,
                                        a = r.updateRange;
                                    t.bindBuffer(i, e),
                                        -1 === a.count
                                            ? t.bufferSubData(i, 0, o)
                                            : (n ? t.bufferSubData(i, a.offset * o.BYTES_PER_ELEMENT, o, a.offset, a.count) : t.bufferSubData(i, a.offset * o.BYTES_PER_ELEMENT, o.subarray(a.offset, a.offset + a.count)), (a.count = -1));
                                })(o.buffer, e, i),
                                    (o.version = e.version));
                        },
                    };
                }
                class ls extends wa {
                    constructor(t = 1, e = 1, n = 1, r = 1) {
                        super(), (this.type = "PlaneGeometry"), (this.parameters = { width: t, height: e, widthSegments: n, heightSegments: r });
                        const i = t / 2,
                            o = e / 2,
                            a = Math.floor(n),
                            s = Math.floor(r),
                            l = a + 1,
                            c = s + 1,
                            u = t / a,
                            h = e / s,
                            d = [],
                            f = [],
                            p = [],
                            m = [];
                        for (let t = 0; t < c; t++) {
                            const e = t * h - o;
                            for (let n = 0; n < l; n++) {
                                const r = n * u - i;
                                f.push(r, -e, 0), p.push(0, 0, 1), m.push(n / a), m.push(1 - t / s);
                            }
                        }
                        for (let t = 0; t < s; t++)
                            for (let e = 0; e < a; e++) {
                                const n = e + l * t,
                                    r = e + l * (t + 1),
                                    i = e + 1 + l * (t + 1),
                                    o = e + 1 + l * t;
                                d.push(n, r, o), d.push(r, i, o);
                            }
                        this.setIndex(d), this.setAttribute("position", new fa(f, 3)), this.setAttribute("normal", new fa(p, 3)), this.setAttribute("uv", new fa(m, 2));
                    }
                    static fromJSON(t) {
                        return new ls(t.width, t.height, t.widthSegments, t.heightSegments);
                    }
                }
                const cs = {
                        alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",
                        alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
                        alphatest_fragment: "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",
                        aomap_fragment:
                            "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",
                        aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
                        begin_vertex: "vec3 transformed = vec3( position );",
                        beginnormal_vertex: "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",
                        bsdfs:
                            "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in vec3 f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn ( f90 - f0 ) * fresnel + f0;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in vec3 f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, vec3( 1.0 ), dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",
                        bumpmap_pars_fragment:
                            "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",
                        clipping_planes_fragment:
                            "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",
                        clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",
                        clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",
                        clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",
                        color_fragment: "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",
                        color_pars_fragment: "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",
                        color_pars_vertex: "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",
                        color_vertex:
                            "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",
                        common:
                            "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",
                        cube_uv_reflection_fragment:
                            "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",
                        defaultnormal_vertex:
                            "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",
                        displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",
                        displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",
                        emissivemap_fragment:
                            "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",
                        emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",
                        encodings_fragment: "gl_FragColor = linearToOutputTexel( gl_FragColor );",
                        encodings_pars_fragment:
                            "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",
                        envmap_fragment:
                            "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",
                        envmap_common_pars_fragment:
                            "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",
                        envmap_pars_fragment:
                            "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",
                        envmap_pars_vertex:
                            "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",
                        envmap_physical_pars_fragment:
                            "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",
                        envmap_vertex:
                            "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",
                        fog_vertex: "#ifdef USE_FOG\n\tfogDepth = - mvPosition.z;\n#endif",
                        fog_pars_vertex: "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",
                        fog_fragment:
                            "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",
                        fog_pars_fragment:
                            "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
                        gradientmap_pars_fragment:
                            "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",
                        lightmap_fragment: "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif",
                        lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
                        lights_lambert_vertex:
                            "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",
                        lights_pars_begin:
                            "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",
                        lights_toon_fragment: "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",
                        lights_toon_pars_fragment:
                            "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",
                        lights_phong_fragment:
                            "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",
                        lights_phong_pars_fragment:
                            "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",
                        lights_physical_fragment:
                            "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\t#ifdef SPECULAR\n\t\tvec3 specularIntensityFactor = vec3( specularIntensity );\n\t\tvec3 specularTintFactor = specularTint;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARTINTMAP\n\t\t\tspecularTintFactor *= specularTintMapTexelToLinear( texture2D( specularTintMap, vUv ) ).rgb;\n\t\t#endif\n\t\tmaterial.specularColorF90 = mix( specularIntensityFactor, vec3( 1.0 ), metalnessFactor );\n\t#else\n\t\tvec3 specularIntensityFactor = vec3( 1.0 );\n\t\tvec3 specularTintFactor = vec3( 1.0 );\n\t\tmaterial.specularColorF90 = vec3( 1.0 );\n\t#endif\n\tmaterial.specularColor = mix( min( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ) * specularTintFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularColorF90 = vec3( 1.0 );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",
                        lights_physical_pars_fragment:
                            "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n\tvec3 specularColorF90;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), vec3( 1.0 ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularColorF90, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",
                        lights_fragment_begin:
                            "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",
                        lights_fragment_maps:
                            "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",
                        lights_fragment_end:
                            "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",
                        logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
                        logdepthbuf_pars_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",
                        logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",
                        logdepthbuf_vertex:
                            "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",
                        map_fragment: "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",
                        map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",
                        map_particle_fragment:
                            "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",
                        map_particle_pars_fragment:
                            "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
                        metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",
                        metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
                        morphnormal_vertex:
                            "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif",
                        morphtarget_pars_vertex:
                            "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\t\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\t\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",
                        morphtarget_vertex:
                            "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",
                        normal_fragment_begin:
                            "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",
                        normal_fragment_maps:
                            "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",
                        normalmap_pars_fragment:
                            "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",
                        clearcoat_normal_fragment_begin: "#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",
                        clearcoat_normal_fragment_maps:
                            "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",
                        clearcoat_pars_fragment:
                            "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",
                        packing:
                            "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",
                        premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",
                        project_vertex:
                            "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",
                        dithering_fragment: "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",
                        dithering_pars_fragment:
                            "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",
                        roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",
                        roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
                        shadowmap_pars_fragment:
                            "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",
                        shadowmap_pars_vertex:
                            "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",
                        shadowmap_vertex:
                            "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",
                        shadowmask_pars_fragment:
                            "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",
                        skinbase_vertex:
                            "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
                        skinning_pars_vertex:
                            "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",
                        skinning_vertex:
                            "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",
                        skinnormal_vertex:
                            "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",
                        specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
                        specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
                        tonemapping_fragment: "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",
                        tonemapping_pars_fragment:
                            "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",
                        transmission_fragment:
                            "#ifdef USE_TRANSMISSION\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition.xyz / vWorldPosition.w;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tfloat ior = ( 1.0 + 0.4 * reflectivity ) / ( 1.0 - 0.4 * reflectivity );\n\tvec3 transmission = transmissionFactor * getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationTint, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission, transmissionFactor );\n#endif",
                        transmission_pars_fragment:
                            "#ifdef USE_TRANSMISSION\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec4 vWorldPosition;\n\tvec3 getVolumeTransmissionRay(vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix) {\n\t\tvec3 refractionVector = refract(-v, normalize(n), 1.0 / ior);\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length(vec3(modelMatrix[0].xyz));\n\t\tmodelScale.y = length(vec3(modelMatrix[1].xyz));\n\t\tmodelScale.z = length(vec3(modelMatrix[2].xyz));\n\t\treturn normalize(refractionVector) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness(float roughness, float ior) {\n\t\treturn roughness * clamp(ior * 2.0 - 2.0, 0.0, 1.0);\n\t}\n\tvec3 getTransmissionSample(vec2 fragCoord, float roughness, float ior) {\n\t\tfloat framebufferLod = log2(transmissionSamplerSize.x) * applyIorToRoughness(roughness, ior);\n\t\treturn texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod).rgb;\n\t}\n\tvec3 applyVolumeAttenuation(vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance) {\n\t\tif (attenuationDistance == 0.0) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log(attenuationColor) / attenuationDistance;\n\t\t\tvec3 transmittance = exp(-attenuationCoefficient * transmissionDistance);\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec3 getIBLVolumeRefraction(vec3 n, vec3 v, float perceptualRoughness, vec3 baseColor, vec3 specularColor,\n\t\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\n\t\tvec3 attenuationColor, float attenuationDistance) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4(refractedRayExit, 1.0);\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec3 transmittedLight = getTransmissionSample(refractionCoords, perceptualRoughness, ior);\n\t\tvec3 attenuatedColor = applyVolumeAttenuation(transmittedLight, length(transmissionRay), attenuationColor, attenuationDistance);\n\t\treturn (1.0 - specularColor) * attenuatedColor * baseColor;\n\t}\n#endif",
                        uv_pars_fragment: "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",
                        uv_pars_vertex: "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",
                        uv_vertex: "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",
                        uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",
                        uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",
                        uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",
                        worldpos_vertex:
                            "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",
                        background_frag:
                            "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
                        background_vert: "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",
                        cube_frag:
                            "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
                        cube_vert:
                            "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
                        depth_frag:
                            "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",
                        depth_vert:
                            "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",
                        distanceRGBA_frag:
                            "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",
                        distanceRGBA_vert:
                            "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",
                        equirect_frag:
                            "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
                        equirect_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",
                        linedashed_frag:
                            "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
                        linedashed_vert:
                            "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
                        meshbasic_frag:
                            "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                        meshbasic_vert:
                            "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",
                        meshlambert_frag:
                            "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                        meshlambert_vert:
                            "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
                        meshmatcap_frag:
                            "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                        meshmatcap_vert:
                            "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t\t#ifdef USE_TANGENT\n\t\t\tvTangent = normalize( transformedTangent );\n\t\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t\t#endif\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",
                        meshtoon_frag:
                            "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                        meshtoon_vert:
                            "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
                        meshphong_frag:
                            "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                        meshphong_vert:
                            "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
                        meshphysical_frag:
                            "#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationTint;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularTint;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARTINTMAP\n\t\tuniform sampler2D specularTintMap;\n\t#endif\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <transmission_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
                        meshphysical_vert:
                            "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#ifdef USE_TRANSMISSION\n\tvarying vec4 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition;\n#endif\n}",
                        normal_frag:
                            "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",
                        normal_vert:
                            "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",
                        points_frag:
                            "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
                        points_vert:
                            "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
                        shadow_frag:
                            "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
                        shadow_vert:
                            "#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
                        sprite_frag:
                            "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
                        sprite_vert:
                            "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
                    },
                    us = {
                        common: { diffuse: { value: new aa(16777215) }, opacity: { value: 1 }, map: { value: null }, uvTransform: { value: new Ai() }, uv2Transform: { value: new Ai() }, alphaMap: { value: null } },
                        specularmap: { specularMap: { value: null } },
                        envmap: { envMap: { value: null }, flipEnvMap: { value: -1 }, reflectivity: { value: 1 }, refractionRatio: { value: 0.98 }, maxMipLevel: { value: 0 } },
                        aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 } },
                        lightmap: { lightMap: { value: null }, lightMapIntensity: { value: 1 } },
                        emissivemap: { emissiveMap: { value: null } },
                        bumpmap: { bumpMap: { value: null }, bumpScale: { value: 1 } },
                        normalmap: { normalMap: { value: null }, normalScale: { value: new Ei(1, 1) } },
                        displacementmap: { displacementMap: { value: null }, displacementScale: { value: 1 }, displacementBias: { value: 0 } },
                        roughnessmap: { roughnessMap: { value: null } },
                        metalnessmap: { metalnessMap: { value: null } },
                        gradientmap: { gradientMap: { value: null } },
                        fog: { fogDensity: { value: 25e-5 }, fogNear: { value: 1 }, fogFar: { value: 2e3 }, fogColor: { value: new aa(16777215) } },
                        lights: {
                            ambientLightColor: { value: [] },
                            lightProbe: { value: [] },
                            directionalLights: { value: [], properties: { direction: {}, color: {} } },
                            directionalLightShadows: { value: [], properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} } },
                            directionalShadowMap: { value: [] },
                            directionalShadowMatrix: { value: [] },
                            spotLights: { value: [], properties: { color: {}, position: {}, direction: {}, distance: {}, coneCos: {}, penumbraCos: {}, decay: {} } },
                            spotLightShadows: { value: [], properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} } },
                            spotShadowMap: { value: [] },
                            spotShadowMatrix: { value: [] },
                            pointLights: { value: [], properties: { color: {}, position: {}, decay: {}, distance: {} } },
                            pointLightShadows: { value: [], properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {}, shadowCameraNear: {}, shadowCameraFar: {} } },
                            pointShadowMap: { value: [] },
                            pointShadowMatrix: { value: [] },
                            hemisphereLights: { value: [], properties: { direction: {}, skyColor: {}, groundColor: {} } },
                            rectAreaLights: { value: [], properties: { color: {}, position: {}, width: {}, height: {} } },
                            ltc_1: { value: null },
                            ltc_2: { value: null },
                        },
                        points: { diffuse: { value: new aa(16777215) }, opacity: { value: 1 }, size: { value: 1 }, scale: { value: 1 }, map: { value: null }, alphaMap: { value: null }, uvTransform: { value: new Ai() } },
                        sprite: { diffuse: { value: new aa(16777215) }, opacity: { value: 1 }, center: { value: new Ei(0.5, 0.5) }, rotation: { value: 0 }, map: { value: null }, alphaMap: { value: null }, uvTransform: { value: new Ai() } },
                    },
                    hs = {
                        basic: { uniforms: Wa([us.common, us.specularmap, us.envmap, us.aomap, us.lightmap, us.fog]), vertexShader: cs.meshbasic_vert, fragmentShader: cs.meshbasic_frag },
                        lambert: {
                            uniforms: Wa([us.common, us.specularmap, us.envmap, us.aomap, us.lightmap, us.emissivemap, us.fog, us.lights, { emissive: { value: new aa(0) } }]),
                            vertexShader: cs.meshlambert_vert,
                            fragmentShader: cs.meshlambert_frag,
                        },
                        phong: {
                            uniforms: Wa([
                                us.common,
                                us.specularmap,
                                us.envmap,
                                us.aomap,
                                us.lightmap,
                                us.emissivemap,
                                us.bumpmap,
                                us.normalmap,
                                us.displacementmap,
                                us.fog,
                                us.lights,
                                { emissive: { value: new aa(0) }, specular: { value: new aa(1118481) }, shininess: { value: 30 } },
                            ]),
                            vertexShader: cs.meshphong_vert,
                            fragmentShader: cs.meshphong_frag,
                        },
                        standard: {
                            uniforms: Wa([
                                us.common,
                                us.envmap,
                                us.aomap,
                                us.lightmap,
                                us.emissivemap,
                                us.bumpmap,
                                us.normalmap,
                                us.displacementmap,
                                us.roughnessmap,
                                us.metalnessmap,
                                us.fog,
                                us.lights,
                                { emissive: { value: new aa(0) }, roughness: { value: 1 }, metalness: { value: 0 }, envMapIntensity: { value: 1 } },
                            ]),
                            vertexShader: cs.meshphysical_vert,
                            fragmentShader: cs.meshphysical_frag,
                        },
                        toon: {
                            uniforms: Wa([us.common, us.aomap, us.lightmap, us.emissivemap, us.bumpmap, us.normalmap, us.displacementmap, us.gradientmap, us.fog, us.lights, { emissive: { value: new aa(0) } }]),
                            vertexShader: cs.meshtoon_vert,
                            fragmentShader: cs.meshtoon_frag,
                        },
                        matcap: { uniforms: Wa([us.common, us.bumpmap, us.normalmap, us.displacementmap, us.fog, { matcap: { value: null } }]), vertexShader: cs.meshmatcap_vert, fragmentShader: cs.meshmatcap_frag },
                        points: { uniforms: Wa([us.points, us.fog]), vertexShader: cs.points_vert, fragmentShader: cs.points_frag },
                        dashed: { uniforms: Wa([us.common, us.fog, { scale: { value: 1 }, dashSize: { value: 1 }, totalSize: { value: 2 } }]), vertexShader: cs.linedashed_vert, fragmentShader: cs.linedashed_frag },
                        depth: { uniforms: Wa([us.common, us.displacementmap]), vertexShader: cs.depth_vert, fragmentShader: cs.depth_frag },
                        normal: { uniforms: Wa([us.common, us.bumpmap, us.normalmap, us.displacementmap, { opacity: { value: 1 } }]), vertexShader: cs.normal_vert, fragmentShader: cs.normal_frag },
                        sprite: { uniforms: Wa([us.sprite, us.fog]), vertexShader: cs.sprite_vert, fragmentShader: cs.sprite_frag },
                        background: { uniforms: { uvTransform: { value: new Ai() }, t2D: { value: null } }, vertexShader: cs.background_vert, fragmentShader: cs.background_frag },
                        cube: { uniforms: Wa([us.envmap, { opacity: { value: 1 } }]), vertexShader: cs.cube_vert, fragmentShader: cs.cube_frag },
                        equirect: { uniforms: { tEquirect: { value: null } }, vertexShader: cs.equirect_vert, fragmentShader: cs.equirect_frag },
                        distanceRGBA: {
                            uniforms: Wa([us.common, us.displacementmap, { referencePosition: { value: new Fi() }, nearDistance: { value: 1 }, farDistance: { value: 1e3 } }]),
                            vertexShader: cs.distanceRGBA_vert,
                            fragmentShader: cs.distanceRGBA_frag,
                        },
                        shadow: { uniforms: Wa([us.lights, us.fog, { color: { value: new aa(0) }, opacity: { value: 1 } }]), vertexShader: cs.shadow_vert, fragmentShader: cs.shadow_frag },
                    };
                function ds(t, e, n, r, i) {
                    const o = new aa(0);
                    let a,
                        s,
                        l = 0,
                        c = null,
                        u = 0,
                        h = null;
                    function d(t, e) {
                        n.buffers.color.setClear(t.r, t.g, t.b, e, i);
                    }
                    return {
                        getClearColor: function () {
                            return o;
                        },
                        setClearColor: function (t, e = 1) {
                            o.set(t), (l = e), d(o, l);
                        },
                        getClearAlpha: function () {
                            return l;
                        },
                        setClearAlpha: function (t) {
                            (l = t), d(o, l);
                        },
                        render: function (n, i) {
                            let f = !1,
                                p = !0 === i.isScene ? i.background : null;
                            p && p.isTexture && (p = e.get(p));
                            const m = t.xr,
                                g = m.getSession && m.getSession();
                            g && "additive" === g.environmentBlendMode && (p = null),
                                null === p ? d(o, l) : p && p.isColor && (d(p, 1), (f = !0)),
                            (t.autoClear || f) && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil),
                                p && (p.isCubeTexture || p.mapping === Ir)
                                    ? (void 0 === s &&
                                    ((s = new Ba(
                                        new Ha(1, 1, 1),
                                        new qa({
                                            name: "BackgroundCubeMaterial",
                                            uniforms: Va(hs.cube.uniforms),
                                            vertexShader: hs.cube.vertexShader,
                                            fragmentShader: hs.cube.fragmentShader,
                                            side: 1,
                                            depthTest: !1,
                                            depthWrite: !1,
                                            fog: !1,
                                        })
                                    )),
                                        s.geometry.deleteAttribute("normal"),
                                        s.geometry.deleteAttribute("uv"),
                                        (s.onBeforeRender = function (t, e, n) {
                                            this.matrixWorld.copyPosition(n.matrixWorld);
                                        }),
                                        Object.defineProperty(s.material, "envMap", {
                                            get: function () {
                                                return this.uniforms.envMap.value;
                                            },
                                        }),
                                        r.update(s)),
                                        (s.material.uniforms.envMap.value = p),
                                        (s.material.uniforms.flipEnvMap.value = p.isCubeTexture && !1 === p.isRenderTargetTexture ? -1 : 1),
                                    (c === p && u === p.version && h === t.toneMapping) || ((s.material.needsUpdate = !0), (c = p), (u = p.version), (h = t.toneMapping)),
                                        n.unshift(s, s.geometry, s.material, 0, 0, null))
                                    : p &&
                                    p.isTexture &&
                                    (void 0 === a &&
                                    ((a = new Ba(
                                        new ls(2, 2),
                                        new qa({
                                            name: "BackgroundMaterial",
                                            uniforms: Va(hs.background.uniforms),
                                            vertexShader: hs.background.vertexShader,
                                            fragmentShader: hs.background.fragmentShader,
                                            side: 0,
                                            depthTest: !1,
                                            depthWrite: !1,
                                            fog: !1,
                                        })
                                    )),
                                        a.geometry.deleteAttribute("normal"),
                                        Object.defineProperty(a.material, "map", {
                                            get: function () {
                                                return this.uniforms.t2D.value;
                                            },
                                        }),
                                        r.update(a)),
                                        (a.material.uniforms.t2D.value = p),
                                    !0 === p.matrixAutoUpdate && p.updateMatrix(),
                                        a.material.uniforms.uvTransform.value.copy(p.matrix),
                                    (c === p && u === p.version && h === t.toneMapping) || ((a.material.needsUpdate = !0), (c = p), (u = p.version), (h = t.toneMapping)),
                                        n.unshift(a, a.geometry, a.material, 0, 0, null));
                        },
                    };
                }
                function fs(t, e, n, r) {
                    const i = t.getParameter(34921),
                        o = r.isWebGL2 ? null : e.get("OES_vertex_array_object"),
                        a = r.isWebGL2 || null !== o,
                        s = {},
                        l = d(null);
                    let c = l;
                    function u(e) {
                        return r.isWebGL2 ? t.bindVertexArray(e) : o.bindVertexArrayOES(e);
                    }
                    function h(e) {
                        return r.isWebGL2 ? t.deleteVertexArray(e) : o.deleteVertexArrayOES(e);
                    }
                    function d(t) {
                        const e = [],
                            n = [],
                            r = [];
                        for (let t = 0; t < i; t++) (e[t] = 0), (n[t] = 0), (r[t] = 0);
                        return { geometry: null, program: null, wireframe: !1, newAttributes: e, enabledAttributes: n, attributeDivisors: r, object: t, attributes: {}, index: null };
                    }
                    function f() {
                        const t = c.newAttributes;
                        for (let e = 0, n = t.length; e < n; e++) t[e] = 0;
                    }
                    function p(t) {
                        m(t, 0);
                    }
                    function m(n, i) {
                        const o = c.newAttributes,
                            a = c.enabledAttributes,
                            s = c.attributeDivisors;
                        if (((o[n] = 1), 0 === a[n] && (t.enableVertexAttribArray(n), (a[n] = 1)), s[n] !== i)) {
                            (r.isWebGL2 ? t : e.get("ANGLE_instanced_arrays"))[r.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](n, i), (s[n] = i);
                        }
                    }
                    function g() {
                        const e = c.newAttributes,
                            n = c.enabledAttributes;
                        for (let r = 0, i = n.length; r < i; r++) n[r] !== e[r] && (t.disableVertexAttribArray(r), (n[r] = 0));
                    }
                    function v(e, n, i, o, a, s) {
                        !0 !== r.isWebGL2 || (5124 !== i && 5125 !== i) ? t.vertexAttribPointer(e, n, i, o, a, s) : t.vertexAttribIPointer(e, n, i, a, s);
                    }
                    function y() {
                        x(), c !== l && ((c = l), u(c.object));
                    }
                    function x() {
                        (l.geometry = null), (l.program = null), (l.wireframe = !1);
                    }
                    return {
                        setup: function (i, l, h, y, x) {
                            let _ = !1;
                            if (a) {
                                const e = (function (e, n, i) {
                                    const a = !0 === i.wireframe;
                                    let l = s[e.id];
                                    void 0 === l && ((l = {}), (s[e.id] = l));
                                    let c = l[n.id];
                                    void 0 === c && ((c = {}), (l[n.id] = c));
                                    let u = c[a];
                                    void 0 === u && ((u = d(r.isWebGL2 ? t.createVertexArray() : o.createVertexArrayOES())), (c[a] = u));
                                    return u;
                                })(y, h, l);
                                c !== e && ((c = e), u(c.object)),
                                    (_ = (function (t, e) {
                                        const n = c.attributes,
                                            r = t.attributes;
                                        let i = 0;
                                        for (const t in r) {
                                            const e = n[t],
                                                o = r[t];
                                            if (void 0 === e) return !0;
                                            if (e.attribute !== o) return !0;
                                            if (e.data !== o.data) return !0;
                                            i++;
                                        }
                                        return c.attributesNum !== i || c.index !== e;
                                    })(y, x)),
                                _ &&
                                (function (t, e) {
                                    const n = {},
                                        r = t.attributes;
                                    let i = 0;
                                    for (const t in r) {
                                        const e = r[t],
                                            o = {};
                                        (o.attribute = e), e.data && (o.data = e.data), (n[t] = o), i++;
                                    }
                                    (c.attributes = n), (c.attributesNum = i), (c.index = e);
                                })(y, x);
                            } else {
                                const t = !0 === l.wireframe;
                                (c.geometry === y.id && c.program === h.id && c.wireframe === t) || ((c.geometry = y.id), (c.program = h.id), (c.wireframe = t), (_ = !0));
                            }
                            !0 === i.isInstancedMesh && (_ = !0),
                            null !== x && n.update(x, 34963),
                            _ &&
                            (!(function (i, o, a, s) {
                                if (!1 === r.isWebGL2 && (i.isInstancedMesh || s.isInstancedBufferGeometry) && null === e.get("ANGLE_instanced_arrays")) return;
                                f();
                                const l = s.attributes,
                                    c = a.getAttributes(),
                                    u = o.defaultAttributeValues;
                                for (const e in c) {
                                    const r = c[e];
                                    if (r >= 0) {
                                        const o = l[e];
                                        if (void 0 !== o) {
                                            const e = o.normalized,
                                                i = o.itemSize,
                                                a = n.get(o);
                                            if (void 0 === a) continue;
                                            const l = a.buffer,
                                                c = a.type,
                                                u = a.bytesPerElement;
                                            if (o.isInterleavedBufferAttribute) {
                                                const n = o.data,
                                                    a = n.stride,
                                                    h = o.offset;
                                                n && n.isInstancedInterleavedBuffer ? (m(r, n.meshPerAttribute), void 0 === s._maxInstanceCount && (s._maxInstanceCount = n.meshPerAttribute * n.count)) : p(r),
                                                    t.bindBuffer(34962, l),
                                                    v(r, i, c, e, a * u, h * u);
                                            } else
                                                o.isInstancedBufferAttribute ? (m(r, o.meshPerAttribute), void 0 === s._maxInstanceCount && (s._maxInstanceCount = o.meshPerAttribute * o.count)) : p(r),
                                                    t.bindBuffer(34962, l),
                                                    v(r, i, c, e, 0, 0);
                                        } else if ("instanceMatrix" === e) {
                                            const e = n.get(i.instanceMatrix);
                                            if (void 0 === e) continue;
                                            const o = e.buffer,
                                                a = e.type;
                                            m(r + 0, 1),
                                                m(r + 1, 1),
                                                m(r + 2, 1),
                                                m(r + 3, 1),
                                                t.bindBuffer(34962, o),
                                                t.vertexAttribPointer(r + 0, 4, a, !1, 64, 0),
                                                t.vertexAttribPointer(r + 1, 4, a, !1, 64, 16),
                                                t.vertexAttribPointer(r + 2, 4, a, !1, 64, 32),
                                                t.vertexAttribPointer(r + 3, 4, a, !1, 64, 48);
                                        } else if ("instanceColor" === e) {
                                            const e = n.get(i.instanceColor);
                                            if (void 0 === e) continue;
                                            const o = e.buffer,
                                                a = e.type;
                                            m(r, 1), t.bindBuffer(34962, o), t.vertexAttribPointer(r, 3, a, !1, 12, 0);
                                        } else if (void 0 !== u) {
                                            const n = u[e];
                                            if (void 0 !== n)
                                                switch (n.length) {
                                                    case 2:
                                                        t.vertexAttrib2fv(r, n);
                                                        break;
                                                    case 3:
                                                        t.vertexAttrib3fv(r, n);
                                                        break;
                                                    case 4:
                                                        t.vertexAttrib4fv(r, n);
                                                        break;
                                                    default:
                                                        t.vertexAttrib1fv(r, n);
                                                }
                                        }
                                    }
                                }
                                g();
                            })(i, l, h, y),
                            null !== x && t.bindBuffer(34963, n.get(x).buffer));
                        },
                        reset: y,
                        resetDefaultState: x,
                        dispose: function () {
                            y();
                            for (const t in s) {
                                const e = s[t];
                                for (const t in e) {
                                    const n = e[t];
                                    for (const t in n) h(n[t].object), delete n[t];
                                    delete e[t];
                                }
                                delete s[t];
                            }
                        },
                        releaseStatesOfGeometry: function (t) {
                            if (void 0 === s[t.id]) return;
                            const e = s[t.id];
                            for (const t in e) {
                                const n = e[t];
                                for (const t in n) h(n[t].object), delete n[t];
                                delete e[t];
                            }
                            delete s[t.id];
                        },
                        releaseStatesOfProgram: function (t) {
                            for (const e in s) {
                                const n = s[e];
                                if (void 0 === n[t.id]) continue;
                                const r = n[t.id];
                                for (const t in r) h(r[t].object), delete r[t];
                                delete n[t.id];
                            }
                        },
                        initAttributes: f,
                        enableAttribute: p,
                        disableUnusedAttributes: g,
                    };
                }
                function ps(t, e, n, r) {
                    const i = r.isWebGL2;
                    let o;
                    (this.setMode = function (t) {
                        o = t;
                    }),
                        (this.render = function (e, r) {
                            t.drawArrays(o, e, r), n.update(r, o, 1);
                        }),
                        (this.renderInstances = function (r, a, s) {
                            if (0 === s) return;
                            let l, c;
                            if (i) (l = t), (c = "drawArraysInstanced");
                            else if (((l = e.get("ANGLE_instanced_arrays")), (c = "drawArraysInstancedANGLE"), null === l))
                                return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                            l[c](o, r, a, s), n.update(a, o, s);
                        });
                }
                function ms(t, e, n) {
                    let r;
                    function i(e) {
                        if ("highp" === e) {
                            if (t.getShaderPrecisionFormat(35633, 36338).precision > 0 && t.getShaderPrecisionFormat(35632, 36338).precision > 0) return "highp";
                            e = "mediump";
                        }
                        return "mediump" === e && t.getShaderPrecisionFormat(35633, 36337).precision > 0 && t.getShaderPrecisionFormat(35632, 36337).precision > 0 ? "mediump" : "lowp";
                    }
                    const o = ("undefined" != typeof WebGL2RenderingContext && t instanceof WebGL2RenderingContext) || ("undefined" != typeof WebGL2ComputeRenderingContext && t instanceof WebGL2ComputeRenderingContext);
                    let a = void 0 !== n.precision ? n.precision : "highp";
                    const s = i(a);
                    s !== a && (console.warn("THREE.WebGLRenderer:", a, "not supported, using", s, "instead."), (a = s));
                    const l = o || e.has("WEBGL_draw_buffers"),
                        c = !0 === n.logarithmicDepthBuffer,
                        u = t.getParameter(34930),
                        h = t.getParameter(35660),
                        d = t.getParameter(3379),
                        f = t.getParameter(34076),
                        p = t.getParameter(34921),
                        m = t.getParameter(36347),
                        g = t.getParameter(36348),
                        v = t.getParameter(36349),
                        y = h > 0,
                        x = o || e.has("OES_texture_float");
                    return {
                        isWebGL2: o,
                        drawBuffers: l,
                        getMaxAnisotropy: function () {
                            if (void 0 !== r) return r;
                            if (!0 === e.has("EXT_texture_filter_anisotropic")) {
                                const n = e.get("EXT_texture_filter_anisotropic");
                                r = t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
                            } else r = 0;
                            return r;
                        },
                        getMaxPrecision: i,
                        precision: a,
                        logarithmicDepthBuffer: c,
                        maxTextures: u,
                        maxVertexTextures: h,
                        maxTextureSize: d,
                        maxCubemapSize: f,
                        maxAttributes: p,
                        maxVertexUniforms: m,
                        maxVaryings: g,
                        maxFragmentUniforms: v,
                        vertexTextures: y,
                        floatFragmentTextures: x,
                        floatVertexTextures: y && x,
                        maxSamples: o ? t.getParameter(36183) : 0,
                    };
                }
                function gs(t) {
                    const e = this;
                    let n = null,
                        r = 0,
                        i = !1,
                        o = !1;
                    const a = new ns(),
                        s = new Ai(),
                        l = { value: null, needsUpdate: !1 };
                    function c() {
                        l.value !== n && ((l.value = n), (l.needsUpdate = r > 0)), (e.numPlanes = r), (e.numIntersection = 0);
                    }
                    function u(t, n, r, i) {
                        const o = null !== t ? t.length : 0;
                        let c = null;
                        if (0 !== o) {
                            if (((c = l.value), !0 !== i || null === c)) {
                                const e = r + 4 * o,
                                    i = n.matrixWorldInverse;
                                s.getNormalMatrix(i), (null === c || c.length < e) && (c = new Float32Array(e));
                                for (let e = 0, n = r; e !== o; ++e, n += 4) a.copy(t[e]).applyMatrix4(i, s), a.normal.toArray(c, n), (c[n + 3] = a.constant);
                            }
                            (l.value = c), (l.needsUpdate = !0);
                        }
                        return (e.numPlanes = o), (e.numIntersection = 0), c;
                    }
                    (this.uniform = l),
                        (this.numPlanes = 0),
                        (this.numIntersection = 0),
                        (this.init = function (t, e, o) {
                            const a = 0 !== t.length || e || 0 !== r || i;
                            return (i = e), (n = u(t, o, 0)), (r = t.length), a;
                        }),
                        (this.beginShadows = function () {
                            (o = !0), u(null);
                        }),
                        (this.endShadows = function () {
                            (o = !1), c();
                        }),
                        (this.setState = function (e, a, s) {
                            const h = e.clippingPlanes,
                                d = e.clipIntersection,
                                f = e.clipShadows,
                                p = t.get(e);
                            if (!i || null === h || 0 === h.length || (o && !f)) o ? u(null) : c();
                            else {
                                const t = o ? 0 : r,
                                    e = 4 * t;
                                let i = p.clippingState || null;
                                (l.value = i), (i = u(h, a, e, s));
                                for (let t = 0; t !== e; ++t) i[t] = n[t];
                                (p.clippingState = i), (this.numIntersection = d ? this.numPlanes : 0), (this.numPlanes += t);
                            }
                        });
                }
                function vs(t) {
                    let e = new WeakMap();
                    function n(t, e) {
                        return e === Rr ? (t.mapping = Lr) : e === Pr && (t.mapping = Cr), t;
                    }
                    function r(t) {
                        const n = t.target;
                        n.removeEventListener("dispose", r);
                        const i = e.get(n);
                        void 0 !== i && (e.delete(n), i.dispose());
                    }
                    return {
                        get: function (i) {
                            if (i && i.isTexture && !1 === i.isRenderTargetTexture) {
                                const o = i.mapping;
                                if (o === Rr || o === Pr) {
                                    if (e.has(i)) {
                                        return n(e.get(i).texture, i.mapping);
                                    }
                                    {
                                        const o = i.image;
                                        if (o && o.height > 0) {
                                            const a = t.getRenderTarget(),
                                                s = new Qa(o.height / 2);
                                            return s.fromEquirectangularTexture(t, i), e.set(i, s), t.setRenderTarget(a), i.addEventListener("dispose", r), n(s.texture, i.mapping);
                                        }
                                        return null;
                                    }
                                }
                            }
                            return i;
                        },
                        dispose: function () {
                            e = new WeakMap();
                        },
                    };
                }
                hs.physical = {
                    uniforms: Wa([
                        hs.standard.uniforms,
                        {
                            clearcoat: { value: 0 },
                            clearcoatMap: { value: null },
                            clearcoatRoughness: { value: 0 },
                            clearcoatRoughnessMap: { value: null },
                            clearcoatNormalScale: { value: new Ei(1, 1) },
                            clearcoatNormalMap: { value: null },
                            sheen: { value: new aa(0) },
                            transmission: { value: 0 },
                            transmissionMap: { value: null },
                            transmissionSamplerSize: { value: new Ei() },
                            transmissionSamplerMap: { value: null },
                            thickness: { value: 0 },
                            thicknessMap: { value: null },
                            attenuationDistance: { value: 0 },
                            attenuationTint: { value: new aa(0) },
                            specularIntensity: { value: 0 },
                            specularIntensityMap: { value: null },
                            specularTint: { value: new aa(1, 1, 1) },
                            specularTintMap: { value: null },
                        },
                    ]),
                    vertexShader: cs.meshphysical_vert,
                    fragmentShader: cs.meshphysical_frag,
                };
                class ys extends Xa {
                    constructor(t = -1, e = 1, n = 1, r = -1, i = 0.1, o = 2e3) {
                        super(), (this.type = "OrthographicCamera"), (this.zoom = 1), (this.view = null), (this.left = t), (this.right = e), (this.top = n), (this.bottom = r), (this.near = i), (this.far = o), this.updateProjectionMatrix();
                    }
                    copy(t, e) {
                        return (
                            super.copy(t, e),
                                (this.left = t.left),
                                (this.right = t.right),
                                (this.top = t.top),
                                (this.bottom = t.bottom),
                                (this.near = t.near),
                                (this.far = t.far),
                                (this.zoom = t.zoom),
                                (this.view = null === t.view ? null : Object.assign({}, t.view)),
                                this
                        );
                    }
                    setViewOffset(t, e, n, r, i, o) {
                        null === this.view && (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }),
                            (this.view.enabled = !0),
                            (this.view.fullWidth = t),
                            (this.view.fullHeight = e),
                            (this.view.offsetX = n),
                            (this.view.offsetY = r),
                            (this.view.width = i),
                            (this.view.height = o),
                            this.updateProjectionMatrix();
                    }
                    clearViewOffset() {
                        null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix();
                    }
                    updateProjectionMatrix() {
                        const t = (this.right - this.left) / (2 * this.zoom),
                            e = (this.top - this.bottom) / (2 * this.zoom),
                            n = (this.right + this.left) / 2,
                            r = (this.top + this.bottom) / 2;
                        let i = n - t,
                            o = n + t,
                            a = r + e,
                            s = r - e;
                        if (null !== this.view && this.view.enabled) {
                            const t = (this.right - this.left) / this.view.fullWidth / this.zoom,
                                e = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
                            (i += t * this.view.offsetX), (o = i + t * this.view.width), (a -= e * this.view.offsetY), (s = a - e * this.view.height);
                        }
                        this.projectionMatrix.makeOrthographic(i, o, a, s, this.near, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
                    }
                    toJSON(t) {
                        const e = super.toJSON(t);
                        return (
                            (e.object.zoom = this.zoom),
                                (e.object.left = this.left),
                                (e.object.right = this.right),
                                (e.object.top = this.top),
                                (e.object.bottom = this.bottom),
                                (e.object.near = this.near),
                                (e.object.far = this.far),
                            null !== this.view && (e.object.view = Object.assign({}, this.view)),
                                e
                        );
                    }
                }
                ys.prototype.isOrthographicCamera = !0;
                class xs extends qa {
                    constructor(t) {
                        super(t), (this.type = "RawShaderMaterial");
                    }
                }
                xs.prototype.isRawShaderMaterial = !0;
                const _s = Math.pow(2, 8),
                    bs = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582],
                    ws = 5 + bs.length,
                    Ss = 20,
                    Ms = { [oi]: 0, [ai]: 1, [li]: 2, 3004: 3, 3005: 4, 3006: 5, [si]: 6 },
                    Ts = new sa({ side: 1, depthWrite: !1, depthTest: !1 }),
                    Es = new Ba(new Ha(), Ts),
                    As = new ys(),
                    { _lodPlanes: Ls, _sizeLods: Cs, _sigmas: Rs } = zs(),
                    Ps = new aa();
                let Is = null;
                const Os = (1 + Math.sqrt(5)) / 2,
                    Ds = 1 / Os,
                    ks = [new Fi(1, 1, 1), new Fi(-1, 1, 1), new Fi(1, 1, -1), new Fi(-1, 1, -1), new Fi(0, Os, Ds), new Fi(0, Os, -Ds), new Fi(Ds, 0, Os), new Fi(-Ds, 0, Os), new Fi(Os, Ds, 0), new Fi(-Os, Ds, 0)];
                function Us(t) {
                    const e = Math.max(t.r, t.g, t.b),
                        n = Math.min(Math.max(Math.ceil(Math.log2(e)), -128), 127);
                    t.multiplyScalar(Math.pow(2, -n));
                    return (n + 128) / 255;
                }
                class Fs {
                    constructor(t) {
                        (this._renderer = t),
                            (this._pingPongRenderTarget = null),
                            (this._blurMaterial = (function (t) {
                                const e = new Float32Array(t),
                                    n = new Fi(0, 1, 0);
                                return new xs({
                                    name: "SphericalGaussianBlur",
                                    defines: { n: t },
                                    uniforms: {
                                        envMap: { value: null },
                                        samples: { value: 1 },
                                        weights: { value: e },
                                        latitudinal: { value: !1 },
                                        dTheta: { value: 0 },
                                        mipInt: { value: 0 },
                                        poleAxis: { value: n },
                                        inputEncoding: { value: Ms[3e3] },
                                        outputEncoding: { value: Ms[3e3] },
                                    },
                                    vertexShader: Ws(),
                                    fragmentShader: `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${js()}\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,
                                    blending: 0,
                                    depthTest: !1,
                                    depthWrite: !1,
                                });
                            })(Ss)),
                            (this._equirectShader = null),
                            (this._cubemapShader = null),
                            this._compileMaterial(this._blurMaterial);
                    }
                    fromScene(t, e = 0, n = 0.1, r = 100) {
                        Is = this._renderer.getRenderTarget();
                        const i = this._allocateTargets();
                        return this._sceneToCubeUV(t, n, r, i), e > 0 && this._blur(i, 0, 0, e), this._applyPMREM(i), this._cleanup(i), i;
                    }
                    fromEquirectangular(t) {
                        return this._fromTexture(t);
                    }
                    fromCubemap(t) {
                        return this._fromTexture(t);
                    }
                    compileCubemapShader() {
                        null === this._cubemapShader && ((this._cubemapShader = Vs()), this._compileMaterial(this._cubemapShader));
                    }
                    compileEquirectangularShader() {
                        null === this._equirectShader && ((this._equirectShader = Hs()), this._compileMaterial(this._equirectShader));
                    }
                    dispose() {
                        this._blurMaterial.dispose(), null !== this._cubemapShader && this._cubemapShader.dispose(), null !== this._equirectShader && this._equirectShader.dispose();
                        for (let t = 0; t < Ls.length; t++) Ls[t].dispose();
                    }
                    _cleanup(t) {
                        this._pingPongRenderTarget.dispose(), this._renderer.setRenderTarget(Is), (t.scissorTest = !1), Gs(t, 0, 0, t.width, t.height);
                    }
                    _fromTexture(t) {
                        Is = this._renderer.getRenderTarget();
                        const e = this._allocateTargets(t);
                        return this._textureToCubeUV(t, e), this._applyPMREM(e), this._cleanup(e), e;
                    }
                    _allocateTargets(t) {
                        const e = { magFilter: Fr, minFilter: Fr, generateMipmaps: !1, type: Hr, format: 1023, encoding: Ns(t) ? t.encoding : li, depthBuffer: !1 },
                            n = Bs(e);
                        return (n.depthBuffer = !t), (this._pingPongRenderTarget = Bs(e)), n;
                    }
                    _compileMaterial(t) {
                        const e = new Ba(Ls[0], t);
                        this._renderer.compile(e, As);
                    }
                    _sceneToCubeUV(t, e, n, r) {
                        const i = new Ya(90, 1, e, n),
                            o = [1, -1, 1, 1, 1, 1],
                            a = [1, 1, 1, -1, -1, -1],
                            s = this._renderer,
                            l = s.autoClear,
                            c = s.outputEncoding,
                            u = s.toneMapping;
                        s.getClearColor(Ps), (s.toneMapping = 0), (s.outputEncoding = oi), (s.autoClear = !1);
                        let h = !1;
                        const d = t.background;
                        if (d) {
                            if (d.isColor) {
                                Ts.color.copy(d).convertSRGBToLinear(), (t.background = null);
                                const e = Us(Ts.color);
                                (Ts.opacity = e), (h = !0);
                            }
                        } else {
                            Ts.color.copy(Ps).convertSRGBToLinear();
                            const t = Us(Ts.color);
                            (Ts.opacity = t), (h = !0);
                        }
                        for (let e = 0; e < 6; e++) {
                            const n = e % 3;
                            0 == n ? (i.up.set(0, o[e], 0), i.lookAt(a[e], 0, 0)) : 1 == n ? (i.up.set(0, 0, o[e]), i.lookAt(0, a[e], 0)) : (i.up.set(0, o[e], 0), i.lookAt(0, 0, a[e])),
                                Gs(r, n * _s, e > 2 ? _s : 0, _s, _s),
                                s.setRenderTarget(r),
                            h && s.render(Es, i),
                                s.render(t, i);
                        }
                        (s.toneMapping = u), (s.outputEncoding = c), (s.autoClear = l);
                    }
                    _textureToCubeUV(t, e) {
                        const n = this._renderer;
                        t.isCubeTexture ? null == this._cubemapShader && (this._cubemapShader = Vs()) : null == this._equirectShader && (this._equirectShader = Hs());
                        const r = t.isCubeTexture ? this._cubemapShader : this._equirectShader,
                            i = new Ba(Ls[0], r),
                            o = r.uniforms;
                        (o.envMap.value = t),
                        t.isCubeTexture || o.texelSize.value.set(1 / t.image.width, 1 / t.image.height),
                            (o.inputEncoding.value = Ms[t.encoding]),
                            (o.outputEncoding.value = Ms[e.texture.encoding]),
                            Gs(e, 0, 0, 3 * _s, 2 * _s),
                            n.setRenderTarget(e),
                            n.render(i, As);
                    }
                    _applyPMREM(t) {
                        const e = this._renderer,
                            n = e.autoClear;
                        e.autoClear = !1;
                        for (let e = 1; e < ws; e++) {
                            const n = Math.sqrt(Rs[e] * Rs[e] - Rs[e - 1] * Rs[e - 1]),
                                r = ks[(e - 1) % ks.length];
                            this._blur(t, e - 1, e, n, r);
                        }
                        e.autoClear = n;
                    }
                    _blur(t, e, n, r, i) {
                        const o = this._pingPongRenderTarget;
                        this._halfBlur(t, o, e, n, r, "latitudinal", i), this._halfBlur(o, t, n, n, r, "longitudinal", i);
                    }
                    _halfBlur(t, e, n, r, i, o, a) {
                        const s = this._renderer,
                            l = this._blurMaterial;
                        "latitudinal" !== o && "longitudinal" !== o && console.error("blur direction must be either latitudinal or longitudinal!");
                        const c = new Ba(Ls[r], l),
                            u = l.uniforms,
                            h = Cs[n] - 1,
                            d = isFinite(i) ? Math.PI / (2 * h) : (2 * Math.PI) / 39,
                            f = i / d,
                            p = isFinite(i) ? 1 + Math.floor(3 * f) : Ss;
                        p > Ss && console.warn(`sigmaRadians, ${i}, is too large and will clip, as it requested ${p} samples when the maximum is set to 20`);
                        const m = [];
                        let g = 0;
                        for (let t = 0; t < Ss; ++t) {
                            const e = t / f,
                                n = Math.exp((-e * e) / 2);
                            m.push(n), 0 == t ? (g += n) : t < p && (g += 2 * n);
                        }
                        for (let t = 0; t < m.length; t++) m[t] = m[t] / g;
                        (u.envMap.value = t.texture),
                            (u.samples.value = p),
                            (u.weights.value = m),
                            (u.latitudinal.value = "latitudinal" === o),
                        a && (u.poleAxis.value = a),
                            (u.dTheta.value = d),
                            (u.mipInt.value = 8 - n),
                            (u.inputEncoding.value = Ms[t.texture.encoding]),
                            (u.outputEncoding.value = Ms[t.texture.encoding]);
                        const v = Cs[r];
                        Gs(e, 3 * Math.max(0, _s - 2 * v), (0 === r ? 0 : 2 * _s) + 2 * v * (r > 4 ? r - 8 + 4 : 0), 3 * v, 2 * v), s.setRenderTarget(e), s.render(c, As);
                    }
                }
                function Ns(t) {
                    return void 0 !== t && t.type === Hr && (t.encoding === oi || t.encoding === ai || t.encoding === si);
                }
                function zs() {
                    const t = [],
                        e = [],
                        n = [];
                    let r = 8;
                    for (let i = 0; i < ws; i++) {
                        const o = Math.pow(2, r);
                        e.push(o);
                        let a = 1 / o;
                        i > 4 ? (a = bs[i - 8 + 4 - 1]) : 0 == i && (a = 0), n.push(a);
                        const s = 1 / (o - 1),
                            l = -s / 2,
                            c = 1 + s / 2,
                            u = [l, l, c, l, c, c, l, l, c, c, l, c],
                            h = 6,
                            d = 6,
                            f = 3,
                            p = 2,
                            m = 1,
                            g = new Float32Array(f * d * h),
                            v = new Float32Array(p * d * h),
                            y = new Float32Array(m * d * h);
                        for (let t = 0; t < h; t++) {
                            const e = ((t % 3) * 2) / 3 - 1,
                                n = t > 2 ? 0 : -1,
                                r = [e, n, 0, e + 2 / 3, n, 0, e + 2 / 3, n + 1, 0, e, n, 0, e + 2 / 3, n + 1, 0, e, n + 1, 0];
                            g.set(r, f * d * t), v.set(u, p * d * t);
                            const i = [t, t, t, t, t, t];
                            y.set(i, m * d * t);
                        }
                        const x = new wa();
                        x.setAttribute("position", new ua(g, f)), x.setAttribute("uv", new ua(v, p)), x.setAttribute("faceIndex", new ua(y, m)), t.push(x), r > 4 && r--;
                    }
                    return { _lodPlanes: t, _sizeLods: e, _sigmas: n };
                }
                function Bs(t) {
                    const e = new Di(3 * _s, 3 * _s, t);
                    return (e.texture.mapping = Ir), (e.texture.name = "PMREM.cubeUv"), (e.scissorTest = !0), e;
                }
                function Gs(t, e, n, r, i) {
                    t.viewport.set(e, n, r, i), t.scissor.set(e, n, r, i);
                }
                function Hs() {
                    const t = new Ei(1, 1);
                    return new xs({
                        name: "EquirectangularToCubeUV",
                        uniforms: { envMap: { value: null }, texelSize: { value: t }, inputEncoding: { value: Ms[3e3] }, outputEncoding: { value: Ms[3e3] } },
                        vertexShader: Ws(),
                        fragmentShader: `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${js()}\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,
                        blending: 0,
                        depthTest: !1,
                        depthWrite: !1,
                    });
                }
                function Vs() {
                    return new xs({
                        name: "CubemapToCubeUV",
                        uniforms: { envMap: { value: null }, inputEncoding: { value: Ms[3e3] }, outputEncoding: { value: Ms[3e3] } },
                        vertexShader: Ws(),
                        fragmentShader: `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${js()}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,
                        blending: 0,
                        depthTest: !1,
                        depthWrite: !1,
                    });
                }
                function Ws() {
                    return "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t";
                }
                function js() {
                    return "\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t";
                }
                function qs(t) {
                    let e = new WeakMap(),
                        n = null;
                    function r(t) {
                        const n = t.target;
                        n.removeEventListener("dispose", r);
                        const i = e.get(n);
                        void 0 !== i && (i.delete(n), i.dispose());
                    }
                    return {
                        get: function (i) {
                            if (i && i.isTexture && !1 === i.isRenderTargetTexture) {
                                const o = i.mapping,
                                    a = o === Rr || o === Pr,
                                    s = o === Lr || o === Cr;
                                if (a || s) {
                                    if (e.has(i)) return e.get(i).texture;
                                    {
                                        const o = i.image;
                                        if (
                                            (a && o && o.height > 0) ||
                                            (s &&
                                                o &&
                                                (function (t) {
                                                    let e = 0;
                                                    const n = 6;
                                                    for (let r = 0; r < n; r++) void 0 !== t[r] && e++;
                                                    return e === n;
                                                })(o))
                                        ) {
                                            const o = t.getRenderTarget();
                                            null === n && (n = new Fs(t));
                                            const s = a ? n.fromEquirectangular(i) : n.fromCubemap(i);
                                            return e.set(i, s), t.setRenderTarget(o), i.addEventListener("dispose", r), s.texture;
                                        }
                                        return null;
                                    }
                                }
                            }
                            return i;
                        },
                        dispose: function () {
                            (e = new WeakMap()), null !== n && (n.dispose(), (n = null));
                        },
                    };
                }
                function Xs(t) {
                    const e = {};
                    function n(n) {
                        if (void 0 !== e[n]) return e[n];
                        let r;
                        switch (n) {
                            case "WEBGL_depth_texture":
                                r = t.getExtension("WEBGL_depth_texture") || t.getExtension("MOZ_WEBGL_depth_texture") || t.getExtension("WEBKIT_WEBGL_depth_texture");
                                break;
                            case "EXT_texture_filter_anisotropic":
                                r = t.getExtension("EXT_texture_filter_anisotropic") || t.getExtension("MOZ_EXT_texture_filter_anisotropic") || t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                                break;
                            case "WEBGL_compressed_texture_s3tc":
                                r = t.getExtension("WEBGL_compressed_texture_s3tc") || t.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                                break;
                            case "WEBGL_compressed_texture_pvrtc":
                                r = t.getExtension("WEBGL_compressed_texture_pvrtc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                                break;
                            default:
                                r = t.getExtension(n);
                        }
                        return (e[n] = r), r;
                    }
                    return {
                        has: function (t) {
                            return null !== n(t);
                        },
                        init: function (t) {
                            t.isWebGL2
                                ? n("EXT_color_buffer_float")
                                : (n("WEBGL_depth_texture"),
                                    n("OES_texture_float"),
                                    n("OES_texture_half_float"),
                                    n("OES_texture_half_float_linear"),
                                    n("OES_standard_derivatives"),
                                    n("OES_element_index_uint"),
                                    n("OES_vertex_array_object"),
                                    n("ANGLE_instanced_arrays")),
                                n("OES_texture_float_linear"),
                                n("EXT_color_buffer_half_float");
                        },
                        get: function (t) {
                            const e = n(t);
                            return null === e && console.warn("THREE.WebGLRenderer: " + t + " extension not supported."), e;
                        },
                    };
                }
                function Ys(t, e, n, r) {
                    const i = {},
                        o = new WeakMap();
                    function a(t) {
                        const s = t.target;
                        null !== s.index && e.remove(s.index);
                        for (const t in s.attributes) e.remove(s.attributes[t]);
                        s.removeEventListener("dispose", a), delete i[s.id];
                        const l = o.get(s);
                        l && (e.remove(l), o.delete(s)), r.releaseStatesOfGeometry(s), !0 === s.isInstancedBufferGeometry && delete s._maxInstanceCount, n.memory.geometries--;
                    }
                    function s(t) {
                        const n = [],
                            r = t.index,
                            i = t.attributes.position;
                        let a = 0;
                        if (null !== r) {
                            const t = r.array;
                            a = r.version;
                            for (let e = 0, r = t.length; e < r; e += 3) {
                                const r = t[e + 0],
                                    i = t[e + 1],
                                    o = t[e + 2];
                                n.push(r, i, i, o, o, r);
                            }
                        } else {
                            const t = i.array;
                            a = i.version;
                            for (let e = 0, r = t.length / 3 - 1; e < r; e += 3) {
                                const t = e + 0,
                                    r = e + 1,
                                    i = e + 2;
                                n.push(t, r, r, i, i, t);
                            }
                        }
                        const s = new (pa(n) > 65535 ? da : ha)(n, 1);
                        s.version = a;
                        const l = o.get(t);
                        l && e.remove(l), o.set(t, s);
                    }
                    return {
                        get: function (t, e) {
                            return !0 === i[e.id] || (e.addEventListener("dispose", a), (i[e.id] = !0), n.memory.geometries++), e;
                        },
                        update: function (t) {
                            const n = t.attributes;
                            for (const t in n) e.update(n[t], 34962);
                            const r = t.morphAttributes;
                            for (const t in r) {
                                const n = r[t];
                                for (let t = 0, r = n.length; t < r; t++) e.update(n[t], 34962);
                            }
                        },
                        getWireframeAttribute: function (t) {
                            const e = o.get(t);
                            if (e) {
                                const n = t.index;
                                null !== n && e.version < n.version && s(t);
                            } else s(t);
                            return o.get(t);
                        },
                    };
                }
                function Zs(t, e, n, r) {
                    const i = r.isWebGL2;
                    let o, a, s;
                    (this.setMode = function (t) {
                        o = t;
                    }),
                        (this.setIndex = function (t) {
                            (a = t.type), (s = t.bytesPerElement);
                        }),
                        (this.render = function (e, r) {
                            t.drawElements(o, r, a, e * s), n.update(r, o, 1);
                        }),
                        (this.renderInstances = function (r, l, c) {
                            if (0 === c) return;
                            let u, h;
                            if (i) (u = t), (h = "drawElementsInstanced");
                            else if (((u = e.get("ANGLE_instanced_arrays")), (h = "drawElementsInstancedANGLE"), null === u))
                                return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                            u[h](o, l, a, r * s, c), n.update(l, o, c);
                        });
                }
                function Js(t) {
                    const e = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 };
                    return {
                        memory: { geometries: 0, textures: 0 },
                        render: e,
                        programs: null,
                        autoReset: !0,
                        reset: function () {
                            e.frame++, (e.calls = 0), (e.triangles = 0), (e.points = 0), (e.lines = 0);
                        },
                        update: function (t, n, r) {
                            switch ((e.calls++, n)) {
                                case 4:
                                    e.triangles += r * (t / 3);
                                    break;
                                case 1:
                                    e.lines += r * (t / 2);
                                    break;
                                case 3:
                                    e.lines += r * (t - 1);
                                    break;
                                case 2:
                                    e.lines += r * t;
                                    break;
                                case 0:
                                    e.points += r * t;
                                    break;
                                default:
                                    console.error("THREE.WebGLInfo: Unknown draw mode:", n);
                            }
                        },
                    };
                }
                function $s(t, e) {
                    return t[0] - e[0];
                }
                function Qs(t, e) {
                    return Math.abs(e[1]) - Math.abs(t[1]);
                }
                function Ks(t) {
                    const e = {},
                        n = new Float32Array(8),
                        r = [];
                    for (let t = 0; t < 8; t++) r[t] = [t, 0];
                    return {
                        update: function (i, o, a, s) {
                            const l = i.morphTargetInfluences,
                                c = void 0 === l ? 0 : l.length;
                            let u = e[o.id];
                            if (void 0 === u || u.length !== c) {
                                u = [];
                                for (let t = 0; t < c; t++) u[t] = [t, 0];
                                e[o.id] = u;
                            }
                            for (let t = 0; t < c; t++) {
                                const e = u[t];
                                (e[0] = t), (e[1] = l[t]);
                            }
                            u.sort(Qs);
                            for (let t = 0; t < 8; t++) t < c && u[t][1] ? ((r[t][0] = u[t][0]), (r[t][1] = u[t][1])) : ((r[t][0] = Number.MAX_SAFE_INTEGER), (r[t][1] = 0));
                            r.sort($s);
                            const h = o.morphAttributes.position,
                                d = o.morphAttributes.normal;
                            let f = 0;
                            for (let t = 0; t < 8; t++) {
                                const e = r[t],
                                    i = e[0],
                                    a = e[1];
                                i !== Number.MAX_SAFE_INTEGER && a
                                    ? (h && o.getAttribute("morphTarget" + t) !== h[i] && o.setAttribute("morphTarget" + t, h[i]),
                                    d && o.getAttribute("morphNormal" + t) !== d[i] && o.setAttribute("morphNormal" + t, d[i]),
                                        (n[t] = a),
                                        (f += a))
                                    : (h && !0 === o.hasAttribute("morphTarget" + t) && o.deleteAttribute("morphTarget" + t), d && !0 === o.hasAttribute("morphNormal" + t) && o.deleteAttribute("morphNormal" + t), (n[t] = 0));
                            }
                            const p = o.morphTargetsRelative ? 1 : 1 - f;
                            s.getUniforms().setValue(t, "morphTargetBaseInfluence", p), s.getUniforms().setValue(t, "morphTargetInfluences", n);
                        },
                    };
                }
                function tl(t, e, n, r) {
                    let i = new WeakMap();
                    function o(t) {
                        const e = t.target;
                        e.removeEventListener("dispose", o), n.remove(e.instanceMatrix), null !== e.instanceColor && n.remove(e.instanceColor);
                    }
                    return {
                        update: function (t) {
                            const a = r.render.frame,
                                s = t.geometry,
                                l = e.get(t, s);
                            return (
                                i.get(l) !== a && (e.update(l), i.set(l, a)),
                                t.isInstancedMesh && (!1 === t.hasEventListener("dispose", o) && t.addEventListener("dispose", o), n.update(t.instanceMatrix, 34962), null !== t.instanceColor && n.update(t.instanceColor, 34962)),
                                    l
                            );
                        },
                        dispose: function () {
                            i = new WeakMap();
                        },
                    };
                }
                class el extends Pi {
                    constructor(t = null, e = 1, n = 1, r = 1) {
                        super(null),
                            (this.image = { data: t, width: e, height: n, depth: r }),
                            (this.magFilter = Fr),
                            (this.minFilter = Fr),
                            (this.wrapR = kr),
                            (this.generateMipmaps = !1),
                            (this.flipY = !1),
                            (this.unpackAlignment = 1),
                            (this.needsUpdate = !0);
                    }
                }
                el.prototype.isDataTexture2DArray = !0;
                class nl extends Pi {
                    constructor(t = null, e = 1, n = 1, r = 1) {
                        super(null),
                            (this.image = { data: t, width: e, height: n, depth: r }),
                            (this.magFilter = Fr),
                            (this.minFilter = Fr),
                            (this.wrapR = kr),
                            (this.generateMipmaps = !1),
                            (this.flipY = !1),
                            (this.unpackAlignment = 1),
                            (this.needsUpdate = !0);
                    }
                }
                nl.prototype.isDataTexture3D = !0;
                const rl = new Pi(),
                    il = new el(),
                    ol = new nl(),
                    al = new $a(),
                    sl = [],
                    ll = [],
                    cl = new Float32Array(16),
                    ul = new Float32Array(9),
                    hl = new Float32Array(4);
                function dl(t, e, n) {
                    const r = t[0];
                    if (r <= 0 || r > 0) return t;
                    const i = e * n;
                    let o = sl[i];
                    if ((void 0 === o && ((o = new Float32Array(i)), (sl[i] = o)), 0 !== e)) {
                        r.toArray(o, 0);
                        for (let r = 1, i = 0; r !== e; ++r) (i += n), t[r].toArray(o, i);
                    }
                    return o;
                }
                function fl(t, e) {
                    if (t.length !== e.length) return !1;
                    for (let n = 0, r = t.length; n < r; n++) if (t[n] !== e[n]) return !1;
                    return !0;
                }
                function pl(t, e) {
                    for (let n = 0, r = e.length; n < r; n++) t[n] = e[n];
                }
                function ml(t, e) {
                    let n = ll[e];
                    void 0 === n && ((n = new Int32Array(e)), (ll[e] = n));
                    for (let r = 0; r !== e; ++r) n[r] = t.allocateTextureUnit();
                    return n;
                }
                function gl(t, e) {
                    const n = this.cache;
                    n[0] !== e && (t.uniform1f(this.addr, e), (n[0] = e));
                }
                function vl(t, e) {
                    const n = this.cache;
                    if (void 0 !== e.x) (n[0] === e.x && n[1] === e.y) || (t.uniform2f(this.addr, e.x, e.y), (n[0] = e.x), (n[1] = e.y));
                    else {
                        if (fl(n, e)) return;
                        t.uniform2fv(this.addr, e), pl(n, e);
                    }
                }
                function yl(t, e) {
                    const n = this.cache;
                    if (void 0 !== e.x) (n[0] === e.x && n[1] === e.y && n[2] === e.z) || (t.uniform3f(this.addr, e.x, e.y, e.z), (n[0] = e.x), (n[1] = e.y), (n[2] = e.z));
                    else if (void 0 !== e.r) (n[0] === e.r && n[1] === e.g && n[2] === e.b) || (t.uniform3f(this.addr, e.r, e.g, e.b), (n[0] = e.r), (n[1] = e.g), (n[2] = e.b));
                    else {
                        if (fl(n, e)) return;
                        t.uniform3fv(this.addr, e), pl(n, e);
                    }
                }
                function xl(t, e) {
                    const n = this.cache;
                    if (void 0 !== e.x) (n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w) || (t.uniform4f(this.addr, e.x, e.y, e.z, e.w), (n[0] = e.x), (n[1] = e.y), (n[2] = e.z), (n[3] = e.w));
                    else {
                        if (fl(n, e)) return;
                        t.uniform4fv(this.addr, e), pl(n, e);
                    }
                }
                function _l(t, e) {
                    const n = this.cache,
                        r = e.elements;
                    if (void 0 === r) {
                        if (fl(n, e)) return;
                        t.uniformMatrix2fv(this.addr, !1, e), pl(n, e);
                    } else {
                        if (fl(n, r)) return;
                        hl.set(r), t.uniformMatrix2fv(this.addr, !1, hl), pl(n, r);
                    }
                }
                function bl(t, e) {
                    const n = this.cache,
                        r = e.elements;
                    if (void 0 === r) {
                        if (fl(n, e)) return;
                        t.uniformMatrix3fv(this.addr, !1, e), pl(n, e);
                    } else {
                        if (fl(n, r)) return;
                        ul.set(r), t.uniformMatrix3fv(this.addr, !1, ul), pl(n, r);
                    }
                }
                function wl(t, e) {
                    const n = this.cache,
                        r = e.elements;
                    if (void 0 === r) {
                        if (fl(n, e)) return;
                        t.uniformMatrix4fv(this.addr, !1, e), pl(n, e);
                    } else {
                        if (fl(n, r)) return;
                        cl.set(r), t.uniformMatrix4fv(this.addr, !1, cl), pl(n, r);
                    }
                }
                function Sl(t, e) {
                    const n = this.cache;
                    n[0] !== e && (t.uniform1i(this.addr, e), (n[0] = e));
                }
                function Ml(t, e) {
                    const n = this.cache;
                    fl(n, e) || (t.uniform2iv(this.addr, e), pl(n, e));
                }
                function Tl(t, e) {
                    const n = this.cache;
                    fl(n, e) || (t.uniform3iv(this.addr, e), pl(n, e));
                }
                function El(t, e) {
                    const n = this.cache;
                    fl(n, e) || (t.uniform4iv(this.addr, e), pl(n, e));
                }
                function Al(t, e) {
                    const n = this.cache;
                    n[0] !== e && (t.uniform1ui(this.addr, e), (n[0] = e));
                }
                function Ll(t, e) {
                    const n = this.cache;
                    fl(n, e) || (t.uniform2uiv(this.addr, e), pl(n, e));
                }
                function Cl(t, e) {
                    const n = this.cache;
                    fl(n, e) || (t.uniform3uiv(this.addr, e), pl(n, e));
                }
                function Rl(t, e) {
                    const n = this.cache;
                    fl(n, e) || (t.uniform4uiv(this.addr, e), pl(n, e));
                }
                function Pl(t, e, n) {
                    const r = this.cache,
                        i = n.allocateTextureUnit();
                    r[0] !== i && (t.uniform1i(this.addr, i), (r[0] = i)), n.safeSetTexture2D(e || rl, i);
                }
                function Il(t, e, n) {
                    const r = this.cache,
                        i = n.allocateTextureUnit();
                    r[0] !== i && (t.uniform1i(this.addr, i), (r[0] = i)), n.setTexture3D(e || ol, i);
                }
                function Ol(t, e, n) {
                    const r = this.cache,
                        i = n.allocateTextureUnit();
                    r[0] !== i && (t.uniform1i(this.addr, i), (r[0] = i)), n.safeSetTextureCube(e || al, i);
                }
                function Dl(t, e, n) {
                    const r = this.cache,
                        i = n.allocateTextureUnit();
                    r[0] !== i && (t.uniform1i(this.addr, i), (r[0] = i)), n.setTexture2DArray(e || il, i);
                }
                function kl(t, e) {
                    t.uniform1fv(this.addr, e);
                }
                function Ul(t, e) {
                    const n = dl(e, this.size, 2);
                    t.uniform2fv(this.addr, n);
                }
                function Fl(t, e) {
                    const n = dl(e, this.size, 3);
                    t.uniform3fv(this.addr, n);
                }
                function Nl(t, e) {
                    const n = dl(e, this.size, 4);
                    t.uniform4fv(this.addr, n);
                }
                function zl(t, e) {
                    const n = dl(e, this.size, 4);
                    t.uniformMatrix2fv(this.addr, !1, n);
                }
                function Bl(t, e) {
                    const n = dl(e, this.size, 9);
                    t.uniformMatrix3fv(this.addr, !1, n);
                }
                function Gl(t, e) {
                    const n = dl(e, this.size, 16);
                    t.uniformMatrix4fv(this.addr, !1, n);
                }
                function Hl(t, e) {
                    t.uniform1iv(this.addr, e);
                }
                function Vl(t, e) {
                    t.uniform2iv(this.addr, e);
                }
                function Wl(t, e) {
                    t.uniform3iv(this.addr, e);
                }
                function jl(t, e) {
                    t.uniform4iv(this.addr, e);
                }
                function ql(t, e) {
                    t.uniform1uiv(this.addr, e);
                }
                function Xl(t, e) {
                    t.uniform2uiv(this.addr, e);
                }
                function Yl(t, e) {
                    t.uniform3uiv(this.addr, e);
                }
                function Zl(t, e) {
                    t.uniform4uiv(this.addr, e);
                }
                function Jl(t, e, n) {
                    const r = e.length,
                        i = ml(n, r);
                    t.uniform1iv(this.addr, i);
                    for (let t = 0; t !== r; ++t) n.safeSetTexture2D(e[t] || rl, i[t]);
                }
                function $l(t, e, n) {
                    const r = e.length,
                        i = ml(n, r);
                    t.uniform1iv(this.addr, i);
                    for (let t = 0; t !== r; ++t) n.safeSetTextureCube(e[t] || al, i[t]);
                }
                function Ql(t, e, n) {
                    (this.id = t),
                        (this.addr = n),
                        (this.cache = []),
                        (this.setValue = (function (t) {
                            switch (t) {
                                case 5126:
                                    return gl;
                                case 35664:
                                    return vl;
                                case 35665:
                                    return yl;
                                case 35666:
                                    return xl;
                                case 35674:
                                    return _l;
                                case 35675:
                                    return bl;
                                case 35676:
                                    return wl;
                                case 5124:
                                case 35670:
                                    return Sl;
                                case 35667:
                                case 35671:
                                    return Ml;
                                case 35668:
                                case 35672:
                                    return Tl;
                                case 35669:
                                case 35673:
                                    return El;
                                case 5125:
                                    return Al;
                                case 36294:
                                    return Ll;
                                case 36295:
                                    return Cl;
                                case 36296:
                                    return Rl;
                                case 35678:
                                case 36198:
                                case 36298:
                                case 36306:
                                case 35682:
                                    return Pl;
                                case 35679:
                                case 36299:
                                case 36307:
                                    return Il;
                                case 35680:
                                case 36300:
                                case 36308:
                                case 36293:
                                    return Ol;
                                case 36289:
                                case 36303:
                                case 36311:
                                case 36292:
                                    return Dl;
                            }
                        })(e.type));
                }
                function Kl(t, e, n) {
                    (this.id = t),
                        (this.addr = n),
                        (this.cache = []),
                        (this.size = e.size),
                        (this.setValue = (function (t) {
                            switch (t) {
                                case 5126:
                                    return kl;
                                case 35664:
                                    return Ul;
                                case 35665:
                                    return Fl;
                                case 35666:
                                    return Nl;
                                case 35674:
                                    return zl;
                                case 35675:
                                    return Bl;
                                case 35676:
                                    return Gl;
                                case 5124:
                                case 35670:
                                    return Hl;
                                case 35667:
                                case 35671:
                                    return Vl;
                                case 35668:
                                case 35672:
                                    return Wl;
                                case 35669:
                                case 35673:
                                    return jl;
                                case 5125:
                                    return ql;
                                case 36294:
                                    return Xl;
                                case 36295:
                                    return Yl;
                                case 36296:
                                    return Zl;
                                case 35678:
                                case 36198:
                                case 36298:
                                case 36306:
                                case 35682:
                                    return Jl;
                                case 35680:
                                case 36300:
                                case 36308:
                                case 36293:
                                    return $l;
                            }
                        })(e.type));
                }
                function tc(t) {
                    (this.id = t), (this.seq = []), (this.map = {});
                }
                (Kl.prototype.updateCache = function (t) {
                    const e = this.cache;
                    t instanceof Float32Array && e.length !== t.length && (this.cache = new Float32Array(t.length)), pl(e, t);
                }),
                    (tc.prototype.setValue = function (t, e, n) {
                        const r = this.seq;
                        for (let i = 0, o = r.length; i !== o; ++i) {
                            const o = r[i];
                            o.setValue(t, e[o.id], n);
                        }
                    });
                const ec = /(\w+)(\])?(\[|\.)?/g;
                function nc(t, e) {
                    t.seq.push(e), (t.map[e.id] = e);
                }
                function rc(t, e, n) {
                    const r = t.name,
                        i = r.length;
                    for (ec.lastIndex = 0; ; ) {
                        const o = ec.exec(r),
                            a = ec.lastIndex;
                        let s = o[1];
                        const l = "]" === o[2],
                            c = o[3];
                        if ((l && (s |= 0), void 0 === c || ("[" === c && a + 2 === i))) {
                            nc(n, void 0 === c ? new Ql(s, t, e) : new Kl(s, t, e));
                            break;
                        }
                        {
                            let t = n.map[s];
                            void 0 === t && ((t = new tc(s)), nc(n, t)), (n = t);
                        }
                    }
                }
                function ic(t, e) {
                    (this.seq = []), (this.map = {});
                    const n = t.getProgramParameter(e, 35718);
                    for (let r = 0; r < n; ++r) {
                        const n = t.getActiveUniform(e, r);
                        rc(n, t.getUniformLocation(e, n.name), this);
                    }
                }
                function oc(t, e, n) {
                    const r = t.createShader(e);
                    return t.shaderSource(r, n), t.compileShader(r), r;
                }
                (ic.prototype.setValue = function (t, e, n, r) {
                    const i = this.map[e];
                    void 0 !== i && i.setValue(t, n, r);
                }),
                    (ic.prototype.setOptional = function (t, e, n) {
                        const r = e[n];
                        void 0 !== r && this.setValue(t, n, r);
                    }),
                    (ic.upload = function (t, e, n, r) {
                        for (let i = 0, o = e.length; i !== o; ++i) {
                            const o = e[i],
                                a = n[o.id];
                            !1 !== a.needsUpdate && o.setValue(t, a.value, r);
                        }
                    }),
                    (ic.seqWithValue = function (t, e) {
                        const n = [];
                        for (let r = 0, i = t.length; r !== i; ++r) {
                            const i = t[r];
                            i.id in e && n.push(i);
                        }
                        return n;
                    });
                let ac = 0;
                function sc(t) {
                    switch (t) {
                        case oi:
                            return ["Linear", "( value )"];
                        case ai:
                            return ["sRGB", "( value )"];
                        case li:
                            return ["RGBE", "( value )"];
                        case 3004:
                            return ["RGBM", "( value, 7.0 )"];
                        case 3005:
                            return ["RGBM", "( value, 16.0 )"];
                        case 3006:
                            return ["RGBD", "( value, 256.0 )"];
                        case si:
                            return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
                        case 3003:
                            return ["LogLuv", "( value )"];
                        default:
                            return console.warn("THREE.WebGLProgram: Unsupported encoding:", t), ["Linear", "( value )"];
                    }
                }
                function lc(t, e, n) {
                    const r = t.getShaderParameter(e, 35713),
                        i = t.getShaderInfoLog(e).trim();
                    if (r && "" === i) return "";
                    return (
                        "THREE.WebGLShader: gl.getShaderInfoLog() " +
                        n +
                        "\n" +
                        i +
                        (function (t) {
                            const e = t.split("\n");
                            for (let t = 0; t < e.length; t++) e[t] = t + 1 + ": " + e[t];
                            return e.join("\n");
                        })(t.getShaderSource(e))
                    );
                }
                function cc(t, e) {
                    const n = sc(e);
                    return "vec4 " + t + "( vec4 value ) { return " + n[0] + "ToLinear" + n[1] + "; }";
                }
                function uc(t, e) {
                    const n = sc(e);
                    return "vec4 " + t + "( vec4 value ) { return LinearTo" + n[0] + n[1] + "; }";
                }
                function hc(t, e) {
                    let n;
                    switch (e) {
                        case 1:
                            n = "Linear";
                            break;
                        case 2:
                            n = "Reinhard";
                            break;
                        case 3:
                            n = "OptimizedCineon";
                            break;
                        case 4:
                            n = "ACESFilmic";
                            break;
                        case 5:
                            n = "Custom";
                            break;
                        default:
                            console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), (n = "Linear");
                    }
                    return "vec3 " + t + "( vec3 color ) { return " + n + "ToneMapping( color ); }";
                }
                function dc(t) {
                    return "" !== t;
                }
                function fc(t, e) {
                    return t
                        .replace(/NUM_DIR_LIGHTS/g, e.numDirLights)
                        .replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights)
                        .replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights)
                        .replace(/NUM_POINT_LIGHTS/g, e.numPointLights)
                        .replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights)
                        .replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows)
                        .replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows)
                        .replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
                }
                function pc(t, e) {
                    return t.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
                }
                const mc = /^[ \t]*#include +<([\w\d./]+)>/gm;
                function gc(t) {
                    return t.replace(mc, vc);
                }
                function vc(t, e) {
                    const n = cs[e];
                    if (void 0 === n) throw new Error("Can not resolve #include <" + e + ">");
                    return gc(n);
                }
                const yc = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,
                    xc = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
                function _c(t) {
                    return t.replace(xc, wc).replace(yc, bc);
                }
                function bc(t, e, n, r) {
                    return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."), wc(t, e, n, r);
                }
                function wc(t, e, n, r) {
                    let i = "";
                    for (let t = parseInt(e); t < parseInt(n); t++) i += r.replace(/\[\s*i\s*\]/g, "[ " + t + " ]").replace(/UNROLLED_LOOP_INDEX/g, t);
                    return i;
                }
                function Sc(t) {
                    let e = "precision " + t.precision + " float;\nprecision " + t.precision + " int;";
                    return "highp" === t.precision ? (e += "\n#define HIGH_PRECISION") : "mediump" === t.precision ? (e += "\n#define MEDIUM_PRECISION") : "lowp" === t.precision && (e += "\n#define LOW_PRECISION"), e;
                }
                function Mc(t, e, n, r) {
                    const i = t.getContext(),
                        o = n.defines;
                    let a = n.vertexShader,
                        s = n.fragmentShader;
                    const l = (function (t) {
                            let e = "SHADOWMAP_TYPE_BASIC";
                            return 1 === t.shadowMapType ? (e = "SHADOWMAP_TYPE_PCF") : 2 === t.shadowMapType ? (e = "SHADOWMAP_TYPE_PCF_SOFT") : 3 === t.shadowMapType && (e = "SHADOWMAP_TYPE_VSM"), e;
                        })(n),
                        c = (function (t) {
                            let e = "ENVMAP_TYPE_CUBE";
                            if (t.envMap)
                                switch (t.envMapMode) {
                                    case Lr:
                                    case Cr:
                                        e = "ENVMAP_TYPE_CUBE";
                                        break;
                                    case Ir:
                                    case Or:
                                        e = "ENVMAP_TYPE_CUBE_UV";
                                }
                            return e;
                        })(n),
                        u = (function (t) {
                            let e = "ENVMAP_MODE_REFLECTION";
                            if (t.envMap)
                                switch (t.envMapMode) {
                                    case Cr:
                                    case Or:
                                        e = "ENVMAP_MODE_REFRACTION";
                                }
                            return e;
                        })(n),
                        h = (function (t) {
                            let e = "ENVMAP_BLENDING_NONE";
                            if (t.envMap)
                                switch (t.combine) {
                                    case 0:
                                        e = "ENVMAP_BLENDING_MULTIPLY";
                                        break;
                                    case 1:
                                        e = "ENVMAP_BLENDING_MIX";
                                        break;
                                    case 2:
                                        e = "ENVMAP_BLENDING_ADD";
                                }
                            return e;
                        })(n),
                        d = t.gammaFactor > 0 ? t.gammaFactor : 1,
                        f = n.isWebGL2
                            ? ""
                            : (function (t) {
                                return [
                                    t.extensionDerivatives || t.envMapCubeUV || t.bumpMap || t.tangentSpaceNormalMap || t.clearcoatNormalMap || t.flatShading || "physical" === t.shaderID
                                        ? "#extension GL_OES_standard_derivatives : enable"
                                        : "",
                                    (t.extensionFragDepth || t.logarithmicDepthBuffer) && t.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
                                    t.extensionDrawBuffers && t.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
                                    (t.extensionShaderTextureLOD || t.envMap || t.transmission > 0) && t.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : "",
                                ]
                                    .filter(dc)
                                    .join("\n");
                            })(n),
                        p = (function (t) {
                            const e = [];
                            for (const n in t) {
                                const r = t[n];
                                !1 !== r && e.push("#define " + n + " " + r);
                            }
                            return e.join("\n");
                        })(o),
                        m = i.createProgram();
                    let g,
                        v,
                        y = n.glslVersion ? "#version " + n.glslVersion + "\n" : "";
                    n.isRawShaderMaterial
                        ? ((g = [p].filter(dc).join("\n")), g.length > 0 && (g += "\n"), (v = [f, p].filter(dc).join("\n")), v.length > 0 && (v += "\n"))
                        : ((g = [
                            Sc(n),
                            "#define SHADER_NAME " + n.shaderName,
                            p,
                            n.instancing ? "#define USE_INSTANCING" : "",
                            n.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
                            n.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
                            "#define GAMMA_FACTOR " + d,
                            "#define MAX_BONES " + n.maxBones,
                            n.useFog && n.fog ? "#define USE_FOG" : "",
                            n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "",
                            n.map ? "#define USE_MAP" : "",
                            n.envMap ? "#define USE_ENVMAP" : "",
                            n.envMap ? "#define " + u : "",
                            n.lightMap ? "#define USE_LIGHTMAP" : "",
                            n.aoMap ? "#define USE_AOMAP" : "",
                            n.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
                            n.bumpMap ? "#define USE_BUMPMAP" : "",
                            n.normalMap ? "#define USE_NORMALMAP" : "",
                            n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
                            n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
                            n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
                            n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
                            n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
                            n.displacementMap && n.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "",
                            n.specularMap ? "#define USE_SPECULARMAP" : "",
                            n.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "",
                            n.specularTintMap ? "#define USE_SPECULARTINTMAP" : "",
                            n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
                            n.metalnessMap ? "#define USE_METALNESSMAP" : "",
                            n.alphaMap ? "#define USE_ALPHAMAP" : "",
                            n.transmission ? "#define USE_TRANSMISSION" : "",
                            n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
                            n.thicknessMap ? "#define USE_THICKNESSMAP" : "",
                            n.vertexTangents ? "#define USE_TANGENT" : "",
                            n.vertexColors ? "#define USE_COLOR" : "",
                            n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
                            n.vertexUvs ? "#define USE_UV" : "",
                            n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
                            n.flatShading ? "#define FLAT_SHADED" : "",
                            n.skinning ? "#define USE_SKINNING" : "",
                            n.useVertexTexture ? "#define BONE_TEXTURE" : "",
                            n.morphTargets ? "#define USE_MORPHTARGETS" : "",
                            n.morphNormals && !1 === n.flatShading ? "#define USE_MORPHNORMALS" : "",
                            n.doubleSided ? "#define DOUBLE_SIDED" : "",
                            n.flipSided ? "#define FLIP_SIDED" : "",
                            n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
                            n.shadowMapEnabled ? "#define " + l : "",
                            n.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
                            n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
                            n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
                            "uniform mat4 modelMatrix;",
                            "uniform mat4 modelViewMatrix;",
                            "uniform mat4 projectionMatrix;",
                            "uniform mat4 viewMatrix;",
                            "uniform mat3 normalMatrix;",
                            "uniform vec3 cameraPosition;",
                            "uniform bool isOrthographic;",
                            "#ifdef USE_INSTANCING",
                            "\tattribute mat4 instanceMatrix;",
                            "#endif",
                            "#ifdef USE_INSTANCING_COLOR",
                            "\tattribute vec3 instanceColor;",
                            "#endif",
                            "attribute vec3 position;",
                            "attribute vec3 normal;",
                            "attribute vec2 uv;",
                            "#ifdef USE_TANGENT",
                            "\tattribute vec4 tangent;",
                            "#endif",
                            "#if defined( USE_COLOR_ALPHA )",
                            "\tattribute vec4 color;",
                            "#elif defined( USE_COLOR )",
                            "\tattribute vec3 color;",
                            "#endif",
                            "#ifdef USE_MORPHTARGETS",
                            "\tattribute vec3 morphTarget0;",
                            "\tattribute vec3 morphTarget1;",
                            "\tattribute vec3 morphTarget2;",
                            "\tattribute vec3 morphTarget3;",
                            "\t#ifdef USE_MORPHNORMALS",
                            "\t\tattribute vec3 morphNormal0;",
                            "\t\tattribute vec3 morphNormal1;",
                            "\t\tattribute vec3 morphNormal2;",
                            "\t\tattribute vec3 morphNormal3;",
                            "\t#else",
                            "\t\tattribute vec3 morphTarget4;",
                            "\t\tattribute vec3 morphTarget5;",
                            "\t\tattribute vec3 morphTarget6;",
                            "\t\tattribute vec3 morphTarget7;",
                            "\t#endif",
                            "#endif",
                            "#ifdef USE_SKINNING",
                            "\tattribute vec4 skinIndex;",
                            "\tattribute vec4 skinWeight;",
                            "#endif",
                            "\n",
                        ]
                            .filter(dc)
                            .join("\n")),
                            (v = [
                                f,
                                Sc(n),
                                "#define SHADER_NAME " + n.shaderName,
                                p,
                                n.alphaTest ? "#define ALPHATEST " + n.alphaTest + (n.alphaTest % 1 ? "" : ".0") : "",
                                "#define GAMMA_FACTOR " + d,
                                n.useFog && n.fog ? "#define USE_FOG" : "",
                                n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "",
                                n.map ? "#define USE_MAP" : "",
                                n.matcap ? "#define USE_MATCAP" : "",
                                n.envMap ? "#define USE_ENVMAP" : "",
                                n.envMap ? "#define " + c : "",
                                n.envMap ? "#define " + u : "",
                                n.envMap ? "#define " + h : "",
                                n.lightMap ? "#define USE_LIGHTMAP" : "",
                                n.aoMap ? "#define USE_AOMAP" : "",
                                n.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
                                n.bumpMap ? "#define USE_BUMPMAP" : "",
                                n.normalMap ? "#define USE_NORMALMAP" : "",
                                n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
                                n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
                                n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
                                n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
                                n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
                                n.specularMap ? "#define USE_SPECULARMAP" : "",
                                n.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "",
                                n.specularTintMap ? "#define USE_SPECULARTINTMAP" : "",
                                n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
                                n.metalnessMap ? "#define USE_METALNESSMAP" : "",
                                n.alphaMap ? "#define USE_ALPHAMAP" : "",
                                n.sheen ? "#define USE_SHEEN" : "",
                                n.transmission ? "#define USE_TRANSMISSION" : "",
                                n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
                                n.thicknessMap ? "#define USE_THICKNESSMAP" : "",
                                n.vertexTangents ? "#define USE_TANGENT" : "",
                                n.vertexColors || n.instancingColor ? "#define USE_COLOR" : "",
                                n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
                                n.vertexUvs ? "#define USE_UV" : "",
                                n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
                                n.gradientMap ? "#define USE_GRADIENTMAP" : "",
                                n.flatShading ? "#define FLAT_SHADED" : "",
                                n.doubleSided ? "#define DOUBLE_SIDED" : "",
                                n.flipSided ? "#define FLIP_SIDED" : "",
                                n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
                                n.shadowMapEnabled ? "#define " + l : "",
                                n.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
                                n.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "",
                                n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
                                n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
                                (n.extensionShaderTextureLOD || n.envMap) && n.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "",
                                "uniform mat4 viewMatrix;",
                                "uniform vec3 cameraPosition;",
                                "uniform bool isOrthographic;",
                                0 !== n.toneMapping ? "#define TONE_MAPPING" : "",
                                0 !== n.toneMapping ? cs.tonemapping_pars_fragment : "",
                                0 !== n.toneMapping ? hc("toneMapping", n.toneMapping) : "",
                                n.dithering ? "#define DITHERING" : "",
                                cs.encodings_pars_fragment,
                                n.map ? cc("mapTexelToLinear", n.mapEncoding) : "",
                                n.matcap ? cc("matcapTexelToLinear", n.matcapEncoding) : "",
                                n.envMap ? cc("envMapTexelToLinear", n.envMapEncoding) : "",
                                n.emissiveMap ? cc("emissiveMapTexelToLinear", n.emissiveMapEncoding) : "",
                                n.specularTintMap ? cc("specularTintMapTexelToLinear", n.specularTintMapEncoding) : "",
                                n.lightMap ? cc("lightMapTexelToLinear", n.lightMapEncoding) : "",
                                uc("linearToOutputTexel", n.outputEncoding),
                                n.depthPacking ? "#define DEPTH_PACKING " + n.depthPacking : "",
                                "\n",
                            ]
                                .filter(dc)
                                .join("\n"))),
                        (a = gc(a)),
                        (a = fc(a, n)),
                        (a = pc(a, n)),
                        (s = gc(s)),
                        (s = fc(s, n)),
                        (s = pc(s, n)),
                        (a = _c(a)),
                        (s = _c(s)),
                    n.isWebGL2 &&
                    !0 !== n.isRawShaderMaterial &&
                    ((y = "#version 300 es\n"),
                        (g = ["#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + g),
                        (v =
                            [
                                "#define varying in",
                                n.glslVersion === di ? "" : "out highp vec4 pc_fragColor;",
                                n.glslVersion === di ? "" : "#define gl_FragColor pc_fragColor",
                                "#define gl_FragDepthEXT gl_FragDepth",
                                "#define texture2D texture",
                                "#define textureCube texture",
                                "#define texture2DProj textureProj",
                                "#define texture2DLodEXT textureLod",
                                "#define texture2DProjLodEXT textureProjLod",
                                "#define textureCubeLodEXT textureLod",
                                "#define texture2DGradEXT textureGrad",
                                "#define texture2DProjGradEXT textureProjGrad",
                                "#define textureCubeGradEXT textureGrad",
                            ].join("\n") +
                            "\n" +
                            v));
                    const x = y + v + s,
                        _ = oc(i, 35633, y + g + a),
                        b = oc(i, 35632, x);
                    if (
                        (i.attachShader(m, _),
                            i.attachShader(m, b),
                            void 0 !== n.index0AttributeName ? i.bindAttribLocation(m, 0, n.index0AttributeName) : !0 === n.morphTargets && i.bindAttribLocation(m, 0, "position"),
                            i.linkProgram(m),
                            t.debug.checkShaderErrors)
                    ) {
                        const t = i.getProgramInfoLog(m).trim(),
                            e = i.getShaderInfoLog(_).trim(),
                            n = i.getShaderInfoLog(b).trim();
                        let r = !0,
                            o = !0;
                        if (!1 === i.getProgramParameter(m, 35714)) {
                            r = !1;
                            const e = lc(i, _, "vertex"),
                                n = lc(i, b, "fragment");
                            console.error("THREE.WebGLProgram: shader error: ", i.getError(), "35715", i.getProgramParameter(m, 35715), "gl.getProgramInfoLog", t, e, n);
                        } else "" !== t ? console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", t) : ("" !== e && "" !== n) || (o = !1);
                        o && (this.diagnostics = { runnable: r, programLog: t, vertexShader: { log: e, prefix: g }, fragmentShader: { log: n, prefix: v } });
                    }
                    let w, S;
                    return (
                        i.deleteShader(_),
                            i.deleteShader(b),
                            (this.getUniforms = function () {
                                return void 0 === w && (w = new ic(i, m)), w;
                            }),
                            (this.getAttributes = function () {
                                return (
                                    void 0 === S &&
                                    (S = (function (t, e) {
                                        const n = {},
                                            r = t.getProgramParameter(e, 35721);
                                        for (let i = 0; i < r; i++) {
                                            const r = t.getActiveAttrib(e, i).name;
                                            n[r] = t.getAttribLocation(e, r);
                                        }
                                        return n;
                                    })(i, m)),
                                        S
                                );
                            }),
                            (this.destroy = function () {
                                r.releaseStatesOfProgram(this), i.deleteProgram(m), (this.program = void 0);
                            }),
                            (this.name = n.shaderName),
                            (this.id = ac++),
                            (this.cacheKey = e),
                            (this.usedTimes = 1),
                            (this.program = m),
                            (this.vertexShader = _),
                            (this.fragmentShader = b),
                            this
                    );
                }
                function Tc(t, e, n, r, i, o, a) {
                    const s = [],
                        l = i.isWebGL2,
                        c = i.logarithmicDepthBuffer,
                        u = i.floatVertexTextures,
                        h = i.maxVertexUniforms,
                        d = i.vertexTextures;
                    let f = i.precision;
                    const p = {
                            MeshDepthMaterial: "depth",
                            MeshDistanceMaterial: "distanceRGBA",
                            MeshNormalMaterial: "normal",
                            MeshBasicMaterial: "basic",
                            MeshLambertMaterial: "lambert",
                            MeshPhongMaterial: "phong",
                            MeshToonMaterial: "toon",
                            MeshStandardMaterial: "physical",
                            MeshPhysicalMaterial: "physical",
                            MeshMatcapMaterial: "matcap",
                            LineBasicMaterial: "basic",
                            LineDashedMaterial: "dashed",
                            PointsMaterial: "points",
                            ShadowMaterial: "shadow",
                            SpriteMaterial: "sprite",
                        },
                        m = [
                            "precision",
                            "isWebGL2",
                            "supportsVertexTextures",
                            "outputEncoding",
                            "instancing",
                            "instancingColor",
                            "map",
                            "mapEncoding",
                            "matcap",
                            "matcapEncoding",
                            "envMap",
                            "envMapMode",
                            "envMapEncoding",
                            "envMapCubeUV",
                            "lightMap",
                            "lightMapEncoding",
                            "aoMap",
                            "emissiveMap",
                            "emissiveMapEncoding",
                            "bumpMap",
                            "normalMap",
                            "objectSpaceNormalMap",
                            "tangentSpaceNormalMap",
                            "clearcoatMap",
                            "clearcoatRoughnessMap",
                            "clearcoatNormalMap",
                            "displacementMap",
                            "specularMap",
                            "specularIntensityMap",
                            "specularTintMap",
                            "specularTintMapEncoding",
                            "roughnessMap",
                            "metalnessMap",
                            "gradientMap",
                            "alphaMap",
                            "combine",
                            "vertexColors",
                            "vertexAlphas",
                            "vertexTangents",
                            "vertexUvs",
                            "uvsVertexOnly",
                            "fog",
                            "useFog",
                            "fogExp2",
                            "flatShading",
                            "sizeAttenuation",
                            "logarithmicDepthBuffer",
                            "skinning",
                            "maxBones",
                            "useVertexTexture",
                            "morphTargets",
                            "morphNormals",
                            "premultipliedAlpha",
                            "numDirLights",
                            "numPointLights",
                            "numSpotLights",
                            "numHemiLights",
                            "numRectAreaLights",
                            "numDirLightShadows",
                            "numPointLightShadows",
                            "numSpotLightShadows",
                            "shadowMapEnabled",
                            "shadowMapType",
                            "toneMapping",
                            "physicallyCorrectLights",
                            "alphaTest",
                            "doubleSided",
                            "flipSided",
                            "numClippingPlanes",
                            "numClipIntersection",
                            "depthPacking",
                            "dithering",
                            "sheen",
                            "transmission",
                            "transmissionMap",
                            "thicknessMap",
                        ];
                    function g(t) {
                        let e;
                        return (
                            t && t.isTexture
                                ? (e = t.encoding)
                                : t && t.isWebGLRenderTarget
                                    ? (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), (e = t.texture.encoding))
                                    : (e = oi),
                                e
                        );
                    }
                    return {
                        getParameters: function (o, s, m, v, y) {
                            const x = v.fog,
                                _ = o.isMeshStandardMaterial ? v.environment : null,
                                b = (o.isMeshStandardMaterial ? n : e).get(o.envMap || _),
                                w = p[o.type],
                                S = y.isSkinnedMesh
                                    ? (function (t) {
                                        const e = t.skeleton.bones;
                                        if (u) return 1024;
                                        {
                                            const t = h,
                                                n = Math.floor((t - 20) / 4),
                                                r = Math.min(n, e.length);
                                            return r < e.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + e.length + " bones. This GPU supports " + r + "."), 0) : r;
                                        }
                                    })(y)
                                    : 0;
                            let M, T;
                            if ((null !== o.precision && ((f = i.getMaxPrecision(o.precision)), f !== o.precision && console.warn("THREE.WebGLProgram.getParameters:", o.precision, "not supported, using", f, "instead.")), w)) {
                                const t = hs[w];
                                (M = t.vertexShader), (T = t.fragmentShader);
                            } else (M = o.vertexShader), (T = o.fragmentShader);
                            const E = t.getRenderTarget();
                            return {
                                isWebGL2: l,
                                shaderID: w,
                                shaderName: o.type,
                                vertexShader: M,
                                fragmentShader: T,
                                defines: o.defines,
                                isRawShaderMaterial: !0 === o.isRawShaderMaterial,
                                glslVersion: o.glslVersion,
                                precision: f,
                                instancing: !0 === y.isInstancedMesh,
                                instancingColor: !0 === y.isInstancedMesh && null !== y.instanceColor,
                                supportsVertexTextures: d,
                                outputEncoding: null !== E ? g(E.texture) : t.outputEncoding,
                                map: !!o.map,
                                mapEncoding: g(o.map),
                                matcap: !!o.matcap,
                                matcapEncoding: g(o.matcap),
                                envMap: !!b,
                                envMapMode: b && b.mapping,
                                envMapEncoding: g(b),
                                envMapCubeUV: !!b && (b.mapping === Ir || b.mapping === Or),
                                lightMap: !!o.lightMap,
                                lightMapEncoding: g(o.lightMap),
                                aoMap: !!o.aoMap,
                                emissiveMap: !!o.emissiveMap,
                                emissiveMapEncoding: g(o.emissiveMap),
                                bumpMap: !!o.bumpMap,
                                normalMap: !!o.normalMap,
                                objectSpaceNormalMap: 1 === o.normalMapType,
                                tangentSpaceNormalMap: 0 === o.normalMapType,
                                clearcoatMap: !!o.clearcoatMap,
                                clearcoatRoughnessMap: !!o.clearcoatRoughnessMap,
                                clearcoatNormalMap: !!o.clearcoatNormalMap,
                                displacementMap: !!o.displacementMap,
                                roughnessMap: !!o.roughnessMap,
                                metalnessMap: !!o.metalnessMap,
                                specularMap: !!o.specularMap,
                                specularIntensityMap: !!o.specularIntensityMap,
                                specularTintMap: !!o.specularTintMap,
                                specularTintMapEncoding: g(o.specularTintMap),
                                alphaMap: !!o.alphaMap,
                                gradientMap: !!o.gradientMap,
                                sheen: !!o.sheen,
                                transmission: !!o.transmission,
                                transmissionMap: !!o.transmissionMap,
                                thicknessMap: !!o.thicknessMap,
                                combine: o.combine,
                                vertexTangents: !!o.normalMap && !!y.geometry && !!y.geometry.attributes.tangent,
                                vertexColors: o.vertexColors,
                                vertexAlphas: !0 === o.vertexColors && !!y.geometry && !!y.geometry.attributes.color && 4 === y.geometry.attributes.color.itemSize,
                                vertexUvs: !!(
                                    o.map ||
                                    o.bumpMap ||
                                    o.normalMap ||
                                    o.specularMap ||
                                    o.alphaMap ||
                                    o.emissiveMap ||
                                    o.roughnessMap ||
                                    o.metalnessMap ||
                                    o.clearcoatMap ||
                                    o.clearcoatRoughnessMap ||
                                    o.clearcoatNormalMap ||
                                    o.displacementMap ||
                                    o.transmissionMap ||
                                    o.thicknessMap ||
                                    o.specularIntensityMap ||
                                    o.specularTintMap
                                ),
                                uvsVertexOnly: !(
                                    o.map ||
                                    o.bumpMap ||
                                    o.normalMap ||
                                    o.specularMap ||
                                    o.alphaMap ||
                                    o.emissiveMap ||
                                    o.roughnessMap ||
                                    o.metalnessMap ||
                                    o.clearcoatNormalMap ||
                                    o.transmission ||
                                    o.transmissionMap ||
                                    o.thicknessMap ||
                                    o.specularIntensityMap ||
                                    o.specularTintMap ||
                                    !o.displacementMap
                                ),
                                fog: !!x,
                                useFog: o.fog,
                                fogExp2: x && x.isFogExp2,
                                flatShading: !!o.flatShading,
                                sizeAttenuation: o.sizeAttenuation,
                                logarithmicDepthBuffer: c,
                                skinning: !0 === y.isSkinnedMesh && S > 0,
                                maxBones: S,
                                useVertexTexture: u,
                                morphTargets: !!y.geometry && !!y.geometry.morphAttributes.position,
                                morphNormals: !!y.geometry && !!y.geometry.morphAttributes.normal,
                                numDirLights: s.directional.length,
                                numPointLights: s.point.length,
                                numSpotLights: s.spot.length,
                                numRectAreaLights: s.rectArea.length,
                                numHemiLights: s.hemi.length,
                                numDirLightShadows: s.directionalShadowMap.length,
                                numPointLightShadows: s.pointShadowMap.length,
                                numSpotLightShadows: s.spotShadowMap.length,
                                numClippingPlanes: a.numPlanes,
                                numClipIntersection: a.numIntersection,
                                dithering: o.dithering,
                                shadowMapEnabled: t.shadowMap.enabled && m.length > 0,
                                shadowMapType: t.shadowMap.type,
                                toneMapping: o.toneMapped ? t.toneMapping : 0,
                                physicallyCorrectLights: t.physicallyCorrectLights,
                                premultipliedAlpha: o.premultipliedAlpha,
                                alphaTest: o.alphaTest,
                                doubleSided: 2 === o.side,
                                flipSided: 1 === o.side,
                                depthPacking: void 0 !== o.depthPacking && o.depthPacking,
                                index0AttributeName: o.index0AttributeName,
                                extensionDerivatives: o.extensions && o.extensions.derivatives,
                                extensionFragDepth: o.extensions && o.extensions.fragDepth,
                                extensionDrawBuffers: o.extensions && o.extensions.drawBuffers,
                                extensionShaderTextureLOD: o.extensions && o.extensions.shaderTextureLOD,
                                rendererExtensionFragDepth: l || r.has("EXT_frag_depth"),
                                rendererExtensionDrawBuffers: l || r.has("WEBGL_draw_buffers"),
                                rendererExtensionShaderTextureLod: l || r.has("EXT_shader_texture_lod"),
                                customProgramCacheKey: o.customProgramCacheKey(),
                            };
                        },
                        getProgramCacheKey: function (e) {
                            const n = [];
                            if ((e.shaderID ? n.push(e.shaderID) : (n.push(e.fragmentShader), n.push(e.vertexShader)), void 0 !== e.defines)) for (const t in e.defines) n.push(t), n.push(e.defines[t]);
                            if (!1 === e.isRawShaderMaterial) {
                                for (let t = 0; t < m.length; t++) n.push(e[m[t]]);
                                n.push(t.outputEncoding), n.push(t.gammaFactor);
                            }
                            return n.push(e.customProgramCacheKey), n.join();
                        },
                        getUniforms: function (t) {
                            const e = p[t.type];
                            let n;
                            if (e) {
                                const t = hs[e];
                                n = ja.clone(t.uniforms);
                            } else n = t.uniforms;
                            return n;
                        },
                        acquireProgram: function (e, n) {
                            let r;
                            for (let t = 0, e = s.length; t < e; t++) {
                                const e = s[t];
                                if (e.cacheKey === n) {
                                    (r = e), ++r.usedTimes;
                                    break;
                                }
                            }
                            return void 0 === r && ((r = new Mc(t, n, e, o)), s.push(r)), r;
                        },
                        releaseProgram: function (t) {
                            if (0 == --t.usedTimes) {
                                const e = s.indexOf(t);
                                (s[e] = s[s.length - 1]), s.pop(), t.destroy();
                            }
                        },
                        programs: s,
                    };
                }
                function Ec() {
                    let t = new WeakMap();
                    return {
                        get: function (e) {
                            let n = t.get(e);
                            return void 0 === n && ((n = {}), t.set(e, n)), n;
                        },
                        remove: function (e) {
                            t.delete(e);
                        },
                        update: function (e, n, r) {
                            t.get(e)[n] = r;
                        },
                        dispose: function () {
                            t = new WeakMap();
                        },
                    };
                }
                function Ac(t, e) {
                    return t.groupOrder !== e.groupOrder
                        ? t.groupOrder - e.groupOrder
                        : t.renderOrder !== e.renderOrder
                            ? t.renderOrder - e.renderOrder
                            : t.program !== e.program
                                ? t.program.id - e.program.id
                                : t.material.id !== e.material.id
                                    ? t.material.id - e.material.id
                                    : t.z !== e.z
                                        ? t.z - e.z
                                        : t.id - e.id;
                }
                function Lc(t, e) {
                    return t.groupOrder !== e.groupOrder ? t.groupOrder - e.groupOrder : t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.z !== e.z ? e.z - t.z : t.id - e.id;
                }
                function Cc(t) {
                    const e = [];
                    let n = 0;
                    const r = [],
                        i = [],
                        o = [],
                        a = { id: -1 };
                    function s(r, i, o, s, l, c) {
                        let u = e[n];
                        const h = t.get(o);
                        return (
                            void 0 === u
                                ? ((u = { id: r.id, object: r, geometry: i, material: o, program: h.program || a, groupOrder: s, renderOrder: r.renderOrder, z: l, group: c }), (e[n] = u))
                                : ((u.id = r.id), (u.object = r), (u.geometry = i), (u.material = o), (u.program = h.program || a), (u.groupOrder = s), (u.renderOrder = r.renderOrder), (u.z = l), (u.group = c)),
                                n++,
                                u
                        );
                    }
                    return {
                        opaque: r,
                        transmissive: i,
                        transparent: o,
                        init: function () {
                            (n = 0), (r.length = 0), (i.length = 0), (o.length = 0);
                        },
                        push: function (t, e, n, a, l, c) {
                            const u = s(t, e, n, a, l, c);
                            n.transmission > 0 ? i.push(u) : !0 === n.transparent ? o.push(u) : r.push(u);
                        },
                        unshift: function (t, e, n, a, l, c) {
                            const u = s(t, e, n, a, l, c);
                            n.transmission > 0 ? i.unshift(u) : !0 === n.transparent ? o.unshift(u) : r.unshift(u);
                        },
                        finish: function () {
                            for (let t = n, r = e.length; t < r; t++) {
                                const n = e[t];
                                if (null === n.id) break;
                                (n.id = null), (n.object = null), (n.geometry = null), (n.material = null), (n.program = null), (n.group = null);
                            }
                        },
                        sort: function (t, e) {
                            r.length > 1 && r.sort(t || Ac), i.length > 1 && i.sort(e || Lc), o.length > 1 && o.sort(e || Lc);
                        },
                    };
                }
                function Rc(t) {
                    let e = new WeakMap();
                    return {
                        get: function (n, r) {
                            let i;
                            return !1 === e.has(n) ? ((i = new Cc(t)), e.set(n, [i])) : r >= e.get(n).length ? ((i = new Cc(t)), e.get(n).push(i)) : (i = e.get(n)[r]), i;
                        },
                        dispose: function () {
                            e = new WeakMap();
                        },
                    };
                }
                function Pc() {
                    const t = {};
                    return {
                        get: function (e) {
                            if (void 0 !== t[e.id]) return t[e.id];
                            let n;
                            switch (e.type) {
                                case "DirectionalLight":
                                    n = { direction: new Fi(), color: new aa() };
                                    break;
                                case "SpotLight":
                                    n = { position: new Fi(), direction: new Fi(), color: new aa(), distance: 0, coneCos: 0, penumbraCos: 0, decay: 0 };
                                    break;
                                case "PointLight":
                                    n = { position: new Fi(), color: new aa(), distance: 0, decay: 0 };
                                    break;
                                case "HemisphereLight":
                                    n = { direction: new Fi(), skyColor: new aa(), groundColor: new aa() };
                                    break;
                                case "RectAreaLight":
                                    n = { color: new aa(), position: new Fi(), halfWidth: new Fi(), halfHeight: new Fi() };
                            }
                            return (t[e.id] = n), n;
                        },
                    };
                }
                let Ic = 0;
                function Oc(t, e) {
                    return (e.castShadow ? 1 : 0) - (t.castShadow ? 1 : 0);
                }
                function Dc(t, e) {
                    const n = new Pc(),
                        r = (function () {
                            const t = {};
                            return {
                                get: function (e) {
                                    if (void 0 !== t[e.id]) return t[e.id];
                                    let n;
                                    switch (e.type) {
                                        case "DirectionalLight":
                                        case "SpotLight":
                                            n = { shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new Ei() };
                                            break;
                                        case "PointLight":
                                            n = { shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new Ei(), shadowCameraNear: 1, shadowCameraFar: 1e3 };
                                    }
                                    return (t[e.id] = n), n;
                                },
                            };
                        })(),
                        i = {
                            version: 0,
                            hash: { directionalLength: -1, pointLength: -1, spotLength: -1, rectAreaLength: -1, hemiLength: -1, numDirectionalShadows: -1, numPointShadows: -1, numSpotShadows: -1 },
                            ambient: [0, 0, 0],
                            probe: [],
                            directional: [],
                            directionalShadow: [],
                            directionalShadowMap: [],
                            directionalShadowMatrix: [],
                            spot: [],
                            spotShadow: [],
                            spotShadowMap: [],
                            spotShadowMatrix: [],
                            rectArea: [],
                            rectAreaLTC1: null,
                            rectAreaLTC2: null,
                            point: [],
                            pointShadow: [],
                            pointShadowMap: [],
                            pointShadowMatrix: [],
                            hemi: [],
                        };
                    for (let t = 0; t < 9; t++) i.probe.push(new Fi());
                    const o = new Fi(),
                        a = new mo(),
                        s = new mo();
                    return {
                        setup: function (o) {
                            let a = 0,
                                s = 0,
                                l = 0;
                            for (let t = 0; t < 9; t++) i.probe[t].set(0, 0, 0);
                            let c = 0,
                                u = 0,
                                h = 0,
                                d = 0,
                                f = 0,
                                p = 0,
                                m = 0,
                                g = 0;
                            o.sort(Oc);
                            for (let t = 0, e = o.length; t < e; t++) {
                                const e = o[t],
                                    v = e.color,
                                    y = e.intensity,
                                    x = e.distance,
                                    _ = e.shadow && e.shadow.map ? e.shadow.map.texture : null;
                                if (e.isAmbientLight) (a += v.r * y), (s += v.g * y), (l += v.b * y);
                                else if (e.isLightProbe) for (let t = 0; t < 9; t++) i.probe[t].addScaledVector(e.sh.coefficients[t], y);
                                else if (e.isDirectionalLight) {
                                    const t = n.get(e);
                                    if ((t.color.copy(e.color).multiplyScalar(e.intensity), e.castShadow)) {
                                        const t = e.shadow,
                                            n = r.get(e);
                                        (n.shadowBias = t.bias),
                                            (n.shadowNormalBias = t.normalBias),
                                            (n.shadowRadius = t.radius),
                                            (n.shadowMapSize = t.mapSize),
                                            (i.directionalShadow[c] = n),
                                            (i.directionalShadowMap[c] = _),
                                            (i.directionalShadowMatrix[c] = e.shadow.matrix),
                                            p++;
                                    }
                                    (i.directional[c] = t), c++;
                                } else if (e.isSpotLight) {
                                    const t = n.get(e);
                                    if (
                                        (t.position.setFromMatrixPosition(e.matrixWorld),
                                            t.color.copy(v).multiplyScalar(y),
                                            (t.distance = x),
                                            (t.coneCos = Math.cos(e.angle)),
                                            (t.penumbraCos = Math.cos(e.angle * (1 - e.penumbra))),
                                            (t.decay = e.decay),
                                            e.castShadow)
                                    ) {
                                        const t = e.shadow,
                                            n = r.get(e);
                                        (n.shadowBias = t.bias),
                                            (n.shadowNormalBias = t.normalBias),
                                            (n.shadowRadius = t.radius),
                                            (n.shadowMapSize = t.mapSize),
                                            (i.spotShadow[h] = n),
                                            (i.spotShadowMap[h] = _),
                                            (i.spotShadowMatrix[h] = e.shadow.matrix),
                                            g++;
                                    }
                                    (i.spot[h] = t), h++;
                                } else if (e.isRectAreaLight) {
                                    const t = n.get(e);
                                    t.color.copy(v).multiplyScalar(y), t.halfWidth.set(0.5 * e.width, 0, 0), t.halfHeight.set(0, 0.5 * e.height, 0), (i.rectArea[d] = t), d++;
                                } else if (e.isPointLight) {
                                    const t = n.get(e);
                                    if ((t.color.copy(e.color).multiplyScalar(e.intensity), (t.distance = e.distance), (t.decay = e.decay), e.castShadow)) {
                                        const t = e.shadow,
                                            n = r.get(e);
                                        (n.shadowBias = t.bias),
                                            (n.shadowNormalBias = t.normalBias),
                                            (n.shadowRadius = t.radius),
                                            (n.shadowMapSize = t.mapSize),
                                            (n.shadowCameraNear = t.camera.near),
                                            (n.shadowCameraFar = t.camera.far),
                                            (i.pointShadow[u] = n),
                                            (i.pointShadowMap[u] = _),
                                            (i.pointShadowMatrix[u] = e.shadow.matrix),
                                            m++;
                                    }
                                    (i.point[u] = t), u++;
                                } else if (e.isHemisphereLight) {
                                    const t = n.get(e);
                                    t.skyColor.copy(e.color).multiplyScalar(y), t.groundColor.copy(e.groundColor).multiplyScalar(y), (i.hemi[f] = t), f++;
                                }
                            }
                            d > 0 &&
                            (e.isWebGL2 || !0 === t.has("OES_texture_float_linear")
                                ? ((i.rectAreaLTC1 = us.LTC_FLOAT_1), (i.rectAreaLTC2 = us.LTC_FLOAT_2))
                                : !0 === t.has("OES_texture_half_float_linear")
                                    ? ((i.rectAreaLTC1 = us.LTC_HALF_1), (i.rectAreaLTC2 = us.LTC_HALF_2))
                                    : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),
                                (i.ambient[0] = a),
                                (i.ambient[1] = s),
                                (i.ambient[2] = l);
                            const v = i.hash;
                            (v.directionalLength === c && v.pointLength === u && v.spotLength === h && v.rectAreaLength === d && v.hemiLength === f && v.numDirectionalShadows === p && v.numPointShadows === m && v.numSpotShadows === g) ||
                            ((i.directional.length = c),
                                (i.spot.length = h),
                                (i.rectArea.length = d),
                                (i.point.length = u),
                                (i.hemi.length = f),
                                (i.directionalShadow.length = p),
                                (i.directionalShadowMap.length = p),
                                (i.pointShadow.length = m),
                                (i.pointShadowMap.length = m),
                                (i.spotShadow.length = g),
                                (i.spotShadowMap.length = g),
                                (i.directionalShadowMatrix.length = p),
                                (i.pointShadowMatrix.length = m),
                                (i.spotShadowMatrix.length = g),
                                (v.directionalLength = c),
                                (v.pointLength = u),
                                (v.spotLength = h),
                                (v.rectAreaLength = d),
                                (v.hemiLength = f),
                                (v.numDirectionalShadows = p),
                                (v.numPointShadows = m),
                                (v.numSpotShadows = g),
                                (i.version = Ic++));
                        },
                        setupView: function (t, e) {
                            let n = 0,
                                r = 0,
                                l = 0,
                                c = 0,
                                u = 0;
                            const h = e.matrixWorldInverse;
                            for (let e = 0, d = t.length; e < d; e++) {
                                const d = t[e];
                                if (d.isDirectionalLight) {
                                    const t = i.directional[n];
                                    t.direction.setFromMatrixPosition(d.matrixWorld), o.setFromMatrixPosition(d.target.matrixWorld), t.direction.sub(o), t.direction.transformDirection(h), n++;
                                } else if (d.isSpotLight) {
                                    const t = i.spot[l];
                                    t.position.setFromMatrixPosition(d.matrixWorld),
                                        t.position.applyMatrix4(h),
                                        t.direction.setFromMatrixPosition(d.matrixWorld),
                                        o.setFromMatrixPosition(d.target.matrixWorld),
                                        t.direction.sub(o),
                                        t.direction.transformDirection(h),
                                        l++;
                                } else if (d.isRectAreaLight) {
                                    const t = i.rectArea[c];
                                    t.position.setFromMatrixPosition(d.matrixWorld),
                                        t.position.applyMatrix4(h),
                                        s.identity(),
                                        a.copy(d.matrixWorld),
                                        a.premultiply(h),
                                        s.extractRotation(a),
                                        t.halfWidth.set(0.5 * d.width, 0, 0),
                                        t.halfHeight.set(0, 0.5 * d.height, 0),
                                        t.halfWidth.applyMatrix4(s),
                                        t.halfHeight.applyMatrix4(s),
                                        c++;
                                } else if (d.isPointLight) {
                                    const t = i.point[r];
                                    t.position.setFromMatrixPosition(d.matrixWorld), t.position.applyMatrix4(h), r++;
                                } else if (d.isHemisphereLight) {
                                    const t = i.hemi[u];
                                    t.direction.setFromMatrixPosition(d.matrixWorld), t.direction.transformDirection(h), t.direction.normalize(), u++;
                                }
                            }
                        },
                        state: i,
                    };
                }
                function kc(t, e) {
                    const n = new Dc(t, e),
                        r = [],
                        i = [];
                    return {
                        init: function () {
                            (r.length = 0), (i.length = 0);
                        },
                        state: { lightsArray: r, shadowsArray: i, lights: n },
                        setupLights: function () {
                            n.setup(r);
                        },
                        setupLightsView: function (t) {
                            n.setupView(r, t);
                        },
                        pushLight: function (t) {
                            r.push(t);
                        },
                        pushShadow: function (t) {
                            i.push(t);
                        },
                    };
                }
                function Uc(t, e) {
                    let n = new WeakMap();
                    return {
                        get: function (r, i = 0) {
                            let o;
                            return !1 === n.has(r) ? ((o = new kc(t, e)), n.set(r, [o])) : i >= n.get(r).length ? ((o = new kc(t, e)), n.get(r).push(o)) : (o = n.get(r)[i]), o;
                        },
                        dispose: function () {
                            n = new WeakMap();
                        },
                    };
                }
                class Fc extends Ko {
                    constructor(t) {
                        super(),
                            (this.type = "MeshDepthMaterial"),
                            (this.depthPacking = 3200),
                            (this.map = null),
                            (this.alphaMap = null),
                            (this.displacementMap = null),
                            (this.displacementScale = 1),
                            (this.displacementBias = 0),
                            (this.wireframe = !1),
                            (this.wireframeLinewidth = 1),
                            (this.fog = !1),
                            this.setValues(t);
                    }
                    copy(t) {
                        return (
                            super.copy(t),
                                (this.depthPacking = t.depthPacking),
                                (this.map = t.map),
                                (this.alphaMap = t.alphaMap),
                                (this.displacementMap = t.displacementMap),
                                (this.displacementScale = t.displacementScale),
                                (this.displacementBias = t.displacementBias),
                                (this.wireframe = t.wireframe),
                                (this.wireframeLinewidth = t.wireframeLinewidth),
                                this
                        );
                    }
                }
                Fc.prototype.isMeshDepthMaterial = !0;
                class Nc extends Ko {
                    constructor(t) {
                        super(),
                            (this.type = "MeshDistanceMaterial"),
                            (this.referencePosition = new Fi()),
                            (this.nearDistance = 1),
                            (this.farDistance = 1e3),
                            (this.map = null),
                            (this.alphaMap = null),
                            (this.displacementMap = null),
                            (this.displacementScale = 1),
                            (this.displacementBias = 0),
                            (this.fog = !1),
                            this.setValues(t);
                    }
                    copy(t) {
                        return (
                            super.copy(t),
                                this.referencePosition.copy(t.referencePosition),
                                (this.nearDistance = t.nearDistance),
                                (this.farDistance = t.farDistance),
                                (this.map = t.map),
                                (this.alphaMap = t.alphaMap),
                                (this.displacementMap = t.displacementMap),
                                (this.displacementScale = t.displacementScale),
                                (this.displacementBias = t.displacementBias),
                                this
                        );
                    }
                }
                Nc.prototype.isMeshDistanceMaterial = !0;
                function zc(t, e, n) {
                    let r = new os();
                    const i = new Ei(),
                        o = new Ei(),
                        a = new Oi(),
                        s = new Fc({ depthPacking: 3201 }),
                        l = new Nc(),
                        c = {},
                        u = n.maxTextureSize,
                        h = { 0: 1, 1: 0, 2: 2 },
                        d = new qa({
                            defines: { SAMPLE_RATE: 2 / 8, HALF_SAMPLE_RATE: 1 / 8 },
                            uniforms: { shadow_pass: { value: null }, resolution: { value: new Ei() }, radius: { value: 4 } },
                            vertexShader: "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",
                            fragmentShader:
                                "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}",
                        }),
                        f = d.clone();
                    f.defines.HORIZONTAL_PASS = 1;
                    const p = new wa();
                    p.setAttribute("position", new ua(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
                    const m = new Ba(p, d),
                        g = this;
                    function v(n, r) {
                        const i = e.update(m);
                        (d.uniforms.shadow_pass.value = n.map.texture),
                            (d.uniforms.resolution.value = n.mapSize),
                            (d.uniforms.radius.value = n.radius),
                            t.setRenderTarget(n.mapPass),
                            t.clear(),
                            t.renderBufferDirect(r, null, i, d, m, null),
                            (f.uniforms.shadow_pass.value = n.mapPass.texture),
                            (f.uniforms.resolution.value = n.mapSize),
                            (f.uniforms.radius.value = n.radius),
                            t.setRenderTarget(n.map),
                            t.clear(),
                            t.renderBufferDirect(r, null, i, f, m, null);
                    }
                    function y(e, n, r, i, o, a, u) {
                        let d = null;
                        const f = !0 === i.isPointLight ? e.customDistanceMaterial : e.customDepthMaterial;
                        if (((d = void 0 !== f ? f : !0 === i.isPointLight ? l : s), t.localClippingEnabled && !0 === r.clipShadows && 0 !== r.clippingPlanes.length)) {
                            const t = d.uuid,
                                e = r.uuid;
                            let n = c[t];
                            void 0 === n && ((n = {}), (c[t] = n));
                            let i = n[e];
                            void 0 === i && ((i = d.clone()), (n[e] = i)), (d = i);
                        }
                        return (
                            (d.visible = r.visible),
                                (d.wireframe = r.wireframe),
                                (d.side = 3 === u ? (null !== r.shadowSide ? r.shadowSide : r.side) : null !== r.shadowSide ? r.shadowSide : h[r.side]),
                                (d.clipShadows = r.clipShadows),
                                (d.clippingPlanes = r.clippingPlanes),
                                (d.clipIntersection = r.clipIntersection),
                                (d.wireframeLinewidth = r.wireframeLinewidth),
                                (d.linewidth = r.linewidth),
                            !0 === i.isPointLight && !0 === d.isMeshDistanceMaterial && (d.referencePosition.setFromMatrixPosition(i.matrixWorld), (d.nearDistance = o), (d.farDistance = a)),
                                d
                        );
                    }
                    function x(n, i, o, a, s) {
                        if (!1 === n.visible) return;
                        if (n.layers.test(i.layers) && (n.isMesh || n.isLine || n.isPoints) && (n.castShadow || (n.receiveShadow && 3 === s)) && (!n.frustumCulled || r.intersectsObject(n))) {
                            n.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse, n.matrixWorld);
                            const r = e.update(n),
                                i = n.material;
                            if (Array.isArray(i)) {
                                const e = r.groups;
                                for (let l = 0, c = e.length; l < c; l++) {
                                    const c = e[l],
                                        u = i[c.materialIndex];
                                    if (u && u.visible) {
                                        const e = y(n, 0, u, a, o.near, o.far, s);
                                        t.renderBufferDirect(o, null, r, e, n, c);
                                    }
                                }
                            } else if (i.visible) {
                                const e = y(n, 0, i, a, o.near, o.far, s);
                                t.renderBufferDirect(o, null, r, e, n, null);
                            }
                        }
                        const l = n.children;
                        for (let t = 0, e = l.length; t < e; t++) x(l[t], i, o, a, s);
                    }
                    (this.enabled = !1),
                        (this.autoUpdate = !0),
                        (this.needsUpdate = !1),
                        (this.type = 1),
                        (this.render = function (e, n, s) {
                            if (!1 === g.enabled) return;
                            if (!1 === g.autoUpdate && !1 === g.needsUpdate) return;
                            if (0 === e.length) return;
                            const l = t.getRenderTarget(),
                                c = t.getActiveCubeFace(),
                                h = t.getActiveMipmapLevel(),
                                d = t.state;
                            d.setBlending(0), d.buffers.color.setClear(1, 1, 1, 1), d.buffers.depth.setTest(!0), d.setScissorTest(!1);
                            for (let l = 0, c = e.length; l < c; l++) {
                                const c = e[l],
                                    h = c.shadow;
                                if (void 0 === h) {
                                    console.warn("THREE.WebGLShadowMap:", c, "has no shadow.");
                                    continue;
                                }
                                if (!1 === h.autoUpdate && !1 === h.needsUpdate) continue;
                                i.copy(h.mapSize);
                                const f = h.getFrameExtents();
                                if (
                                    (i.multiply(f),
                                        o.copy(h.mapSize),
                                    (i.x > u || i.y > u) && (i.x > u && ((o.x = Math.floor(u / f.x)), (i.x = o.x * f.x), (h.mapSize.x = o.x)), i.y > u && ((o.y = Math.floor(u / f.y)), (i.y = o.y * f.y), (h.mapSize.y = o.y))),
                                    null === h.map && !h.isPointLightShadow && 3 === this.type)
                                ) {
                                    const t = { minFilter: Br, magFilter: Br, format: Zr };
                                    (h.map = new Di(i.x, i.y, t)), (h.map.texture.name = c.name + ".shadowMap"), (h.mapPass = new Di(i.x, i.y, t)), h.camera.updateProjectionMatrix();
                                }
                                if (null === h.map) {
                                    const t = { minFilter: Fr, magFilter: Fr, format: Zr };
                                    (h.map = new Di(i.x, i.y, t)), (h.map.texture.name = c.name + ".shadowMap"), h.camera.updateProjectionMatrix();
                                }
                                t.setRenderTarget(h.map), t.clear();
                                const p = h.getViewportCount();
                                for (let t = 0; t < p; t++) {
                                    const e = h.getViewport(t);
                                    a.set(o.x * e.x, o.y * e.y, o.x * e.z, o.y * e.w), d.viewport(a), h.updateMatrices(c, t), (r = h.getFrustum()), x(n, s, h.camera, c, this.type);
                                }
                                h.isPointLightShadow || 3 !== this.type || v(h, s), (h.needsUpdate = !1);
                            }
                            (g.needsUpdate = !1), t.setRenderTarget(l, c, h);
                        });
                }
                function Bc(t, e, n) {
                    const r = n.isWebGL2;
                    const i = new (function () {
                            let e = !1;
                            const n = new Oi();
                            let r = null;
                            const i = new Oi(0, 0, 0, 0);
                            return {
                                setMask: function (n) {
                                    r === n || e || (t.colorMask(n, n, n, n), (r = n));
                                },
                                setLocked: function (t) {
                                    e = t;
                                },
                                setClear: function (e, r, o, a, s) {
                                    !0 === s && ((e *= a), (r *= a), (o *= a)), n.set(e, r, o, a), !1 === i.equals(n) && (t.clearColor(e, r, o, a), i.copy(n));
                                },
                                reset: function () {
                                    (e = !1), (r = null), i.set(-1, 0, 0, 0);
                                },
                            };
                        })(),
                        o = new (function () {
                            let e = !1,
                                n = null,
                                r = null,
                                i = null;
                            return {
                                setTest: function (t) {
                                    t ? F(2929) : N(2929);
                                },
                                setMask: function (r) {
                                    n === r || e || (t.depthMask(r), (n = r));
                                },
                                setFunc: function (e) {
                                    if (r !== e) {
                                        if (e)
                                            switch (e) {
                                                case 0:
                                                    t.depthFunc(512);
                                                    break;
                                                case 1:
                                                    t.depthFunc(519);
                                                    break;
                                                case 2:
                                                    t.depthFunc(513);
                                                    break;
                                                case 3:
                                                    t.depthFunc(515);
                                                    break;
                                                case 4:
                                                    t.depthFunc(514);
                                                    break;
                                                case 5:
                                                    t.depthFunc(518);
                                                    break;
                                                case 6:
                                                    t.depthFunc(516);
                                                    break;
                                                case 7:
                                                    t.depthFunc(517);
                                                    break;
                                                default:
                                                    t.depthFunc(515);
                                            }
                                        else t.depthFunc(515);
                                        r = e;
                                    }
                                },
                                setLocked: function (t) {
                                    e = t;
                                },
                                setClear: function (e) {
                                    i !== e && (t.clearDepth(e), (i = e));
                                },
                                reset: function () {
                                    (e = !1), (n = null), (r = null), (i = null);
                                },
                            };
                        })(),
                        a = new (function () {
                            let e = !1,
                                n = null,
                                r = null,
                                i = null,
                                o = null,
                                a = null,
                                s = null,
                                l = null,
                                c = null;
                            return {
                                setTest: function (t) {
                                    e || (t ? F(2960) : N(2960));
                                },
                                setMask: function (r) {
                                    n === r || e || (t.stencilMask(r), (n = r));
                                },
                                setFunc: function (e, n, a) {
                                    (r === e && i === n && o === a) || (t.stencilFunc(e, n, a), (r = e), (i = n), (o = a));
                                },
                                setOp: function (e, n, r) {
                                    (a === e && s === n && l === r) || (t.stencilOp(e, n, r), (a = e), (s = n), (l = r));
                                },
                                setLocked: function (t) {
                                    e = t;
                                },
                                setClear: function (e) {
                                    c !== e && (t.clearStencil(e), (c = e));
                                },
                                reset: function () {
                                    (e = !1), (n = null), (r = null), (i = null), (o = null), (a = null), (s = null), (l = null), (c = null);
                                },
                            };
                        })();
                    let s = {},
                        l = null,
                        c = {},
                        u = null,
                        h = !1,
                        d = null,
                        f = null,
                        p = null,
                        m = null,
                        g = null,
                        v = null,
                        y = null,
                        x = !1,
                        _ = null,
                        b = null,
                        w = null,
                        S = null,
                        M = null;
                    const T = t.getParameter(35661);
                    let E = !1,
                        A = 0;
                    const L = t.getParameter(7938);
                    -1 !== L.indexOf("WebGL") ? ((A = parseFloat(/^WebGL (\d)/.exec(L)[1])), (E = A >= 1)) : -1 !== L.indexOf("OpenGL ES") && ((A = parseFloat(/^OpenGL ES (\d)/.exec(L)[1])), (E = A >= 2));
                    let C = null,
                        R = {};
                    const P = t.getParameter(3088),
                        I = t.getParameter(2978),
                        O = new Oi().fromArray(P),
                        D = new Oi().fromArray(I);
                    function k(e, n, r) {
                        const i = new Uint8Array(4),
                            o = t.createTexture();
                        t.bindTexture(e, o), t.texParameteri(e, 10241, 9728), t.texParameteri(e, 10240, 9728);
                        for (let e = 0; e < r; e++) t.texImage2D(n + e, 0, 6408, 1, 1, 0, 6408, 5121, i);
                        return o;
                    }
                    const U = {};
                    function F(e) {
                        !0 !== s[e] && (t.enable(e), (s[e] = !0));
                    }
                    function N(e) {
                        !1 !== s[e] && (t.disable(e), (s[e] = !1));
                    }
                    (U[3553] = k(3553, 3553, 1)), (U[34067] = k(34067, 34069, 6)), i.setClear(0, 0, 0, 1), o.setClear(1), a.setClear(0), F(2929), o.setFunc(3), H(!1), V(1), F(2884), G(0);
                    const z = { [Ar]: 32774, 101: 32778, 102: 32779 };
                    if (r) (z[103] = 32775), (z[104] = 32776);
                    else {
                        const t = e.get("EXT_blend_minmax");
                        null !== t && ((z[103] = t.MIN_EXT), (z[104] = t.MAX_EXT));
                    }
                    const B = { 200: 0, 201: 1, 202: 768, 204: 770, 210: 776, 208: 774, 206: 772, 203: 769, 205: 771, 209: 775, 207: 773 };
                    function G(e, n, r, i, o, a, s, l) {
                        if (0 !== e) {
                            if ((!1 === h && (F(3042), (h = !0)), 5 === e))
                                (o = o || n),
                                    (a = a || r),
                                    (s = s || i),
                                (n === f && o === g) || (t.blendEquationSeparate(z[n], z[o]), (f = n), (g = o)),
                                (r === p && i === m && a === v && s === y) || (t.blendFuncSeparate(B[r], B[i], B[a], B[s]), (p = r), (m = i), (v = a), (y = s)),
                                    (d = e),
                                    (x = null);
                            else if (e !== d || l !== x) {
                                if (((f === Ar && g === Ar) || (t.blendEquation(32774), (f = Ar), (g = Ar)), l))
                                    switch (e) {
                                        case 1:
                                            t.blendFuncSeparate(1, 771, 1, 771);
                                            break;
                                        case 2:
                                            t.blendFunc(1, 1);
                                            break;
                                        case 3:
                                            t.blendFuncSeparate(0, 0, 769, 771);
                                            break;
                                        case 4:
                                            t.blendFuncSeparate(0, 768, 0, 770);
                                            break;
                                        default:
                                            console.error("THREE.WebGLState: Invalid blending: ", e);
                                    }
                                else
                                    switch (e) {
                                        case 1:
                                            t.blendFuncSeparate(770, 771, 1, 771);
                                            break;
                                        case 2:
                                            t.blendFunc(770, 1);
                                            break;
                                        case 3:
                                            t.blendFunc(0, 769);
                                            break;
                                        case 4:
                                            t.blendFunc(0, 768);
                                            break;
                                        default:
                                            console.error("THREE.WebGLState: Invalid blending: ", e);
                                    }
                                (p = null), (m = null), (v = null), (y = null), (d = e), (x = l);
                            }
                        } else !0 === h && (N(3042), (h = !1));
                    }
                    function H(e) {
                        _ !== e && (e ? t.frontFace(2304) : t.frontFace(2305), (_ = e));
                    }
                    function V(e) {
                        0 !== e ? (F(2884), e !== b && (1 === e ? t.cullFace(1029) : 2 === e ? t.cullFace(1028) : t.cullFace(1032))) : N(2884), (b = e);
                    }
                    function W(e, n, r) {
                        e ? (F(32823), (S === n && M === r) || (t.polygonOffset(n, r), (S = n), (M = r))) : N(32823);
                    }
                    function j(e) {
                        void 0 === e && (e = 33984 + T - 1), C !== e && (t.activeTexture(e), (C = e));
                    }
                    return {
                        buffers: { color: i, depth: o, stencil: a },
                        enable: F,
                        disable: N,
                        bindFramebuffer: function (e, n) {
                            return null === n && null !== l && (n = l), c[e] !== n && (t.bindFramebuffer(e, n), (c[e] = n), r && (36009 === e && (c[36160] = n), 36160 === e && (c[36009] = n)), !0);
                        },
                        bindXRFramebuffer: function (e) {
                            e !== l && (t.bindFramebuffer(36160, e), (l = e));
                        },
                        useProgram: function (e) {
                            return u !== e && (t.useProgram(e), (u = e), !0);
                        },
                        setBlending: G,
                        setMaterial: function (t, e) {
                            2 === t.side ? N(2884) : F(2884);
                            let n = 1 === t.side;
                            e && (n = !n),
                                H(n),
                                1 === t.blending && !1 === t.transparent ? G(0) : G(t.blending, t.blendEquation, t.blendSrc, t.blendDst, t.blendEquationAlpha, t.blendSrcAlpha, t.blendDstAlpha, t.premultipliedAlpha),
                                o.setFunc(t.depthFunc),
                                o.setTest(t.depthTest),
                                o.setMask(t.depthWrite),
                                i.setMask(t.colorWrite);
                            const r = t.stencilWrite;
                            a.setTest(r),
                            r && (a.setMask(t.stencilWriteMask), a.setFunc(t.stencilFunc, t.stencilRef, t.stencilFuncMask), a.setOp(t.stencilFail, t.stencilZFail, t.stencilZPass)),
                                W(t.polygonOffset, t.polygonOffsetFactor, t.polygonOffsetUnits),
                                !0 === t.alphaToCoverage ? F(32926) : N(32926);
                        },
                        setFlipSided: H,
                        setCullFace: V,
                        setLineWidth: function (e) {
                            e !== w && (E && t.lineWidth(e), (w = e));
                        },
                        setPolygonOffset: W,
                        setScissorTest: function (t) {
                            t ? F(3089) : N(3089);
                        },
                        activeTexture: j,
                        bindTexture: function (e, n) {
                            null === C && j();
                            let r = R[C];
                            void 0 === r && ((r = { type: void 0, texture: void 0 }), (R[C] = r)), (r.type === e && r.texture === n) || (t.bindTexture(e, n || U[e]), (r.type = e), (r.texture = n));
                        },
                        unbindTexture: function () {
                            const e = R[C];
                            void 0 !== e && void 0 !== e.type && (t.bindTexture(e.type, null), (e.type = void 0), (e.texture = void 0));
                        },
                        compressedTexImage2D: function () {
                            try {
                                t.compressedTexImage2D.apply(t, arguments);
                            } catch (t) {
                                console.error("THREE.WebGLState:", t);
                            }
                        },
                        texImage2D: function () {
                            try {
                                t.texImage2D.apply(t, arguments);
                            } catch (t) {
                                console.error("THREE.WebGLState:", t);
                            }
                        },
                        texImage3D: function () {
                            try {
                                t.texImage3D.apply(t, arguments);
                            } catch (t) {
                                console.error("THREE.WebGLState:", t);
                            }
                        },
                        scissor: function (e) {
                            !1 === O.equals(e) && (t.scissor(e.x, e.y, e.z, e.w), O.copy(e));
                        },
                        viewport: function (e) {
                            !1 === D.equals(e) && (t.viewport(e.x, e.y, e.z, e.w), D.copy(e));
                        },
                        reset: function () {
                            t.disable(3042),
                                t.disable(2884),
                                t.disable(2929),
                                t.disable(32823),
                                t.disable(3089),
                                t.disable(2960),
                                t.disable(32926),
                                t.blendEquation(32774),
                                t.blendFunc(1, 0),
                                t.blendFuncSeparate(1, 0, 1, 0),
                                t.colorMask(!0, !0, !0, !0),
                                t.clearColor(0, 0, 0, 0),
                                t.depthMask(!0),
                                t.depthFunc(513),
                                t.clearDepth(1),
                                t.stencilMask(4294967295),
                                t.stencilFunc(519, 0, 4294967295),
                                t.stencilOp(7680, 7680, 7680),
                                t.clearStencil(0),
                                t.cullFace(1029),
                                t.frontFace(2305),
                                t.polygonOffset(0, 0),
                                t.activeTexture(33984),
                                t.bindFramebuffer(36160, null),
                            !0 === r && (t.bindFramebuffer(36009, null), t.bindFramebuffer(36008, null)),
                                t.useProgram(null),
                                t.lineWidth(1),
                                t.scissor(0, 0, t.canvas.width, t.canvas.height),
                                t.viewport(0, 0, t.canvas.width, t.canvas.height),
                                (s = {}),
                                (C = null),
                                (R = {}),
                                (l = null),
                                (c = {}),
                                (u = null),
                                (h = !1),
                                (d = null),
                                (f = null),
                                (p = null),
                                (m = null),
                                (g = null),
                                (v = null),
                                (y = null),
                                (x = !1),
                                (_ = null),
                                (b = null),
                                (w = null),
                                (S = null),
                                (M = null),
                                O.set(0, 0, t.canvas.width, t.canvas.height),
                                D.set(0, 0, t.canvas.width, t.canvas.height),
                                i.reset(),
                                o.reset(),
                                a.reset();
                        },
                    };
                }
                function Gc(t, e, n, r, i, o, a) {
                    const s = i.isWebGL2,
                        l = i.maxTextures,
                        c = i.maxCubemapSize,
                        u = i.maxTextureSize,
                        h = i.maxSamples,
                        d = new WeakMap();
                    let f,
                        p = !1;
                    try {
                        p = "undefined" != typeof OffscreenCanvas && null !== new OffscreenCanvas(1, 1).getContext("2d");
                    } catch (t) {}
                    function m(t, e) {
                        return p ? new OffscreenCanvas(t, e) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
                    }
                    function g(t, e, n, r) {
                        let i = 1;
                        if (((t.width > r || t.height > r) && (i = r / Math.max(t.width, t.height)), i < 1 || !0 === e)) {
                            if (
                                ("undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement) ||
                                ("undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement) ||
                                ("undefined" != typeof ImageBitmap && t instanceof ImageBitmap)
                            ) {
                                const r = e ? Mi : Math.floor,
                                    o = r(i * t.width),
                                    a = r(i * t.height);
                                void 0 === f && (f = m(o, a));
                                const s = n ? m(o, a) : f;
                                (s.width = o), (s.height = a);
                                return s.getContext("2d").drawImage(t, 0, 0, o, a), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + t.width + "x" + t.height + ") to (" + o + "x" + a + ")."), s;
                            }
                            return "data" in t && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + t.width + "x" + t.height + ")."), t;
                        }
                        return t;
                    }
                    function v(t) {
                        return wi(t.width) && wi(t.height);
                    }
                    function y(t, e) {
                        return t.generateMipmaps && e && t.minFilter !== Fr && t.minFilter !== Br;
                    }
                    function x(e, n, i, o, a = 1) {
                        t.generateMipmap(e);
                        r.get(n).__maxMipLevel = Math.log2(Math.max(i, o, a));
                    }
                    function _(n, r, i) {
                        if (!1 === s) return r;
                        if (null !== n) {
                            if (void 0 !== t[n]) return t[n];
                            console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + n + "'");
                        }
                        let o = r;
                        return (
                            6403 === r && (5126 === i && (o = 33326), 5131 === i && (o = 33325), 5121 === i && (o = 33321)),
                            6407 === r && (5126 === i && (o = 34837), 5131 === i && (o = 34843), 5121 === i && (o = 32849)),
                            6408 === r && (5126 === i && (o = 34836), 5131 === i && (o = 34842), 5121 === i && (o = 32856)),
                            (33325 !== o && 33326 !== o && 34842 !== o && 34836 !== o) || e.get("EXT_color_buffer_float"),
                                o
                        );
                    }
                    function b(t) {
                        return t === Fr || t === Nr || t === zr ? 9728 : 9729;
                    }
                    function w(e) {
                        const n = e.target;
                        n.removeEventListener("dispose", w),
                            (function (e) {
                                const n = r.get(e);
                                if (void 0 === n.__webglInit) return;
                                t.deleteTexture(n.__webglTexture), r.remove(e);
                            })(n),
                        n.isVideoTexture && d.delete(n),
                            a.memory.textures--;
                    }
                    function S(e) {
                        const n = e.target;
                        n.removeEventListener("dispose", S),
                            (function (e) {
                                const n = e.texture,
                                    i = r.get(e),
                                    o = r.get(n);
                                if (!e) return;
                                void 0 !== o.__webglTexture && (t.deleteTexture(o.__webglTexture), a.memory.textures--);
                                e.depthTexture && e.depthTexture.dispose();
                                if (e.isWebGLCubeRenderTarget) for (let e = 0; e < 6; e++) t.deleteFramebuffer(i.__webglFramebuffer[e]), i.__webglDepthbuffer && t.deleteRenderbuffer(i.__webglDepthbuffer[e]);
                                else
                                    t.deleteFramebuffer(i.__webglFramebuffer),
                                    i.__webglDepthbuffer && t.deleteRenderbuffer(i.__webglDepthbuffer),
                                    i.__webglMultisampledFramebuffer && t.deleteFramebuffer(i.__webglMultisampledFramebuffer),
                                    i.__webglColorRenderbuffer && t.deleteRenderbuffer(i.__webglColorRenderbuffer),
                                    i.__webglDepthRenderbuffer && t.deleteRenderbuffer(i.__webglDepthRenderbuffer);
                                if (e.isWebGLMultipleRenderTargets)
                                    for (let e = 0, i = n.length; e < i; e++) {
                                        const i = r.get(n[e]);
                                        i.__webglTexture && (t.deleteTexture(i.__webglTexture), a.memory.textures--), r.remove(n[e]);
                                    }
                                r.remove(n), r.remove(e);
                            })(n);
                    }
                    let M = 0;
                    function T(t, e) {
                        const i = r.get(t);
                        if (
                            (t.isVideoTexture &&
                            (function (t) {
                                const e = a.render.frame;
                                d.get(t) !== e && (d.set(t, e), t.update());
                            })(t),
                            t.version > 0 && i.__version !== t.version)
                        ) {
                            const n = t.image;
                            if (void 0 === n) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
                            else {
                                if (!1 !== n.complete) return void P(i, t, e);
                                console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
                            }
                        }
                        n.activeTexture(33984 + e), n.bindTexture(3553, i.__webglTexture);
                    }
                    function E(e, i) {
                        const a = r.get(e);
                        e.version > 0 && a.__version !== e.version
                            ? (function (e, r, i) {
                                if (6 !== r.image.length) return;
                                R(e, r),
                                    n.activeTexture(33984 + i),
                                    n.bindTexture(34067, e.__webglTexture),
                                    t.pixelStorei(37440, r.flipY),
                                    t.pixelStorei(37441, r.premultiplyAlpha),
                                    t.pixelStorei(3317, r.unpackAlignment),
                                    t.pixelStorei(37443, 0);
                                const a = r && (r.isCompressedTexture || r.image[0].isCompressedTexture),
                                    l = r.image[0] && r.image[0].isDataTexture,
                                    u = [];
                                for (let t = 0; t < 6; t++) u[t] = a || l ? (l ? r.image[t].image : r.image[t]) : g(r.image[t], !1, !0, c);
                                const h = u[0],
                                    d = v(h) || s,
                                    f = o.convert(r.format),
                                    p = o.convert(r.type),
                                    m = _(r.internalFormat, f, p);
                                let b;
                                if ((C(34067, r, d), a)) {
                                    for (let t = 0; t < 6; t++) {
                                        b = u[t].mipmaps;
                                        for (let e = 0; e < b.length; e++) {
                                            const i = b[e];
                                            r.format !== Zr && r.format !== Yr
                                                ? null !== f
                                                    ? n.compressedTexImage2D(34069 + t, e, m, i.width, i.height, 0, i.data)
                                                    : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()")
                                                : n.texImage2D(34069 + t, e, m, i.width, i.height, 0, f, p, i.data);
                                        }
                                    }
                                    e.__maxMipLevel = b.length - 1;
                                } else {
                                    b = r.mipmaps;
                                    for (let t = 0; t < 6; t++)
                                        if (l) {
                                            n.texImage2D(34069 + t, 0, m, u[t].width, u[t].height, 0, f, p, u[t].data);
                                            for (let e = 0; e < b.length; e++) {
                                                const r = b[e].image[t].image;
                                                n.texImage2D(34069 + t, e + 1, m, r.width, r.height, 0, f, p, r.data);
                                            }
                                        } else {
                                            n.texImage2D(34069 + t, 0, m, f, p, u[t]);
                                            for (let e = 0; e < b.length; e++) {
                                                const r = b[e];
                                                n.texImage2D(34069 + t, e + 1, m, f, p, r.image[t]);
                                            }
                                        }
                                    e.__maxMipLevel = b.length;
                                }
                                y(r, d) && x(34067, r, h.width, h.height);
                                (e.__version = r.version), r.onUpdate && r.onUpdate(r);
                            })(a, e, i)
                            : (n.activeTexture(33984 + i), n.bindTexture(34067, a.__webglTexture));
                    }
                    const A = { [Dr]: 10497, [kr]: 33071, [Ur]: 33648 },
                        L = { [Fr]: 9728, [Nr]: 9984, [zr]: 9986, [Br]: 9729, 1007: 9985, [Gr]: 9987 };
                    function C(n, o, a) {
                        if (
                            (a
                                ? (t.texParameteri(n, 10242, A[o.wrapS]),
                                    t.texParameteri(n, 10243, A[o.wrapT]),
                                (32879 !== n && 35866 !== n) || t.texParameteri(n, 32882, A[o.wrapR]),
                                    t.texParameteri(n, 10240, L[o.magFilter]),
                                    t.texParameteri(n, 10241, L[o.minFilter]))
                                : (t.texParameteri(n, 10242, 33071),
                                    t.texParameteri(n, 10243, 33071),
                                (32879 !== n && 35866 !== n) || t.texParameteri(n, 32882, 33071),
                                (o.wrapS === kr && o.wrapT === kr) || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),
                                    t.texParameteri(n, 10240, b(o.magFilter)),
                                    t.texParameteri(n, 10241, b(o.minFilter)),
                                o.minFilter !== Fr && o.minFilter !== Br && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),
                            !0 === e.has("EXT_texture_filter_anisotropic"))
                        ) {
                            const a = e.get("EXT_texture_filter_anisotropic");
                            if (o.type === jr && !1 === e.has("OES_texture_float_linear")) return;
                            if (!1 === s && o.type === qr && !1 === e.has("OES_texture_half_float_linear")) return;
                            (o.anisotropy > 1 || r.get(o).__currentAnisotropy) && (t.texParameterf(n, a.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(o.anisotropy, i.getMaxAnisotropy())), (r.get(o).__currentAnisotropy = o.anisotropy));
                        }
                    }
                    function R(e, n) {
                        void 0 === e.__webglInit && ((e.__webglInit = !0), n.addEventListener("dispose", w), (e.__webglTexture = t.createTexture()), a.memory.textures++);
                    }
                    function P(e, r, i) {
                        let a = 3553;
                        r.isDataTexture2DArray && (a = 35866),
                        r.isDataTexture3D && (a = 32879),
                            R(e, r),
                            n.activeTexture(33984 + i),
                            n.bindTexture(a, e.__webglTexture),
                            t.pixelStorei(37440, r.flipY),
                            t.pixelStorei(37441, r.premultiplyAlpha),
                            t.pixelStorei(3317, r.unpackAlignment),
                            t.pixelStorei(37443, 0);
                        const l =
                                (function (t) {
                                    return !s && (t.wrapS !== kr || t.wrapT !== kr || (t.minFilter !== Fr && t.minFilter !== Br));
                                })(r) && !1 === v(r.image),
                            c = g(r.image, l, !1, u),
                            h = v(c) || s,
                            d = o.convert(r.format);
                        let f,
                            p = o.convert(r.type),
                            m = _(r.internalFormat, d, p);
                        C(a, r, h);
                        const b = r.mipmaps;
                        if (r.isDepthTexture)
                            (m = 6402),
                                s ? (m = r.type === jr ? 36012 : r.type === Wr ? 33190 : r.type === Xr ? 35056 : 33189) : r.type === jr && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),
                            r.format === Jr &&
                            6402 === m &&
                            r.type !== Vr &&
                            r.type !== Wr &&
                            (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), (r.type = Vr), (p = o.convert(r.type))),
                            r.format === $r && 6402 === m && ((m = 34041), r.type !== Xr && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), (r.type = Xr), (p = o.convert(r.type)))),
                                n.texImage2D(3553, 0, m, c.width, c.height, 0, d, p, null);
                        else if (r.isDataTexture)
                            if (b.length > 0 && h) {
                                for (let t = 0, e = b.length; t < e; t++) (f = b[t]), n.texImage2D(3553, t, m, f.width, f.height, 0, d, p, f.data);
                                (r.generateMipmaps = !1), (e.__maxMipLevel = b.length - 1);
                            } else n.texImage2D(3553, 0, m, c.width, c.height, 0, d, p, c.data), (e.__maxMipLevel = 0);
                        else if (r.isCompressedTexture) {
                            for (let t = 0, e = b.length; t < e; t++)
                                (f = b[t]),
                                    r.format !== Zr && r.format !== Yr
                                        ? null !== d
                                            ? n.compressedTexImage2D(3553, t, m, f.width, f.height, 0, f.data)
                                            : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")
                                        : n.texImage2D(3553, t, m, f.width, f.height, 0, d, p, f.data);
                            e.__maxMipLevel = b.length - 1;
                        } else if (r.isDataTexture2DArray) n.texImage3D(35866, 0, m, c.width, c.height, c.depth, 0, d, p, c.data), (e.__maxMipLevel = 0);
                        else if (r.isDataTexture3D) n.texImage3D(32879, 0, m, c.width, c.height, c.depth, 0, d, p, c.data), (e.__maxMipLevel = 0);
                        else if (b.length > 0 && h) {
                            for (let t = 0, e = b.length; t < e; t++) (f = b[t]), n.texImage2D(3553, t, m, d, p, f);
                            (r.generateMipmaps = !1), (e.__maxMipLevel = b.length - 1);
                        } else n.texImage2D(3553, 0, m, d, p, c), (e.__maxMipLevel = 0);
                        y(r, h) && x(a, r, c.width, c.height), (e.__version = r.version), r.onUpdate && r.onUpdate(r);
                    }
                    function I(e, i, a, s, l) {
                        const c = o.convert(a.format),
                            u = o.convert(a.type),
                            h = _(a.internalFormat, c, u);
                        32879 === l || 35866 === l ? n.texImage3D(l, 0, h, i.width, i.height, i.depth, 0, c, u, null) : n.texImage2D(l, 0, h, i.width, i.height, 0, c, u, null),
                            n.bindFramebuffer(36160, e),
                            t.framebufferTexture2D(36160, s, l, r.get(a).__webglTexture, 0),
                            n.bindFramebuffer(36160, null);
                    }
                    function O(e, n, r) {
                        if ((t.bindRenderbuffer(36161, e), n.depthBuffer && !n.stencilBuffer)) {
                            let i = 33189;
                            if (r) {
                                const e = n.depthTexture;
                                e && e.isDepthTexture && (e.type === jr ? (i = 36012) : e.type === Wr && (i = 33190));
                                const r = k(n);
                                t.renderbufferStorageMultisample(36161, r, i, n.width, n.height);
                            } else t.renderbufferStorage(36161, i, n.width, n.height);
                            t.framebufferRenderbuffer(36160, 36096, 36161, e);
                        } else if (n.depthBuffer && n.stencilBuffer) {
                            if (r) {
                                const e = k(n);
                                t.renderbufferStorageMultisample(36161, e, 35056, n.width, n.height);
                            } else t.renderbufferStorage(36161, 34041, n.width, n.height);
                            t.framebufferRenderbuffer(36160, 33306, 36161, e);
                        } else {
                            const e = !0 === n.isWebGLMultipleRenderTargets ? n.texture[0] : n.texture,
                                i = o.convert(e.format),
                                a = o.convert(e.type),
                                s = _(e.internalFormat, i, a);
                            if (r) {
                                const e = k(n);
                                t.renderbufferStorageMultisample(36161, e, s, n.width, n.height);
                            } else t.renderbufferStorage(36161, s, n.width, n.height);
                        }
                        t.bindRenderbuffer(36161, null);
                    }
                    function D(e) {
                        const i = r.get(e),
                            o = !0 === e.isWebGLCubeRenderTarget;
                        if (e.depthTexture) {
                            if (o) throw new Error("target.depthTexture not supported in Cube render targets");
                            !(function (e, i) {
                                if (i && i.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
                                if ((n.bindFramebuffer(36160, e), !i.depthTexture || !i.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
                                (r.get(i.depthTexture).__webglTexture && i.depthTexture.image.width === i.width && i.depthTexture.image.height === i.height) ||
                                ((i.depthTexture.image.width = i.width), (i.depthTexture.image.height = i.height), (i.depthTexture.needsUpdate = !0)),
                                    T(i.depthTexture, 0);
                                const o = r.get(i.depthTexture).__webglTexture;
                                if (i.depthTexture.format === Jr) t.framebufferTexture2D(36160, 36096, 3553, o, 0);
                                else {
                                    if (i.depthTexture.format !== $r) throw new Error("Unknown depthTexture format");
                                    t.framebufferTexture2D(36160, 33306, 3553, o, 0);
                                }
                            })(i.__webglFramebuffer, e);
                        } else if (o) {
                            i.__webglDepthbuffer = [];
                            for (let r = 0; r < 6; r++) n.bindFramebuffer(36160, i.__webglFramebuffer[r]), (i.__webglDepthbuffer[r] = t.createRenderbuffer()), O(i.__webglDepthbuffer[r], e, !1);
                        } else n.bindFramebuffer(36160, i.__webglFramebuffer), (i.__webglDepthbuffer = t.createRenderbuffer()), O(i.__webglDepthbuffer, e, !1);
                        n.bindFramebuffer(36160, null);
                    }
                    function k(t) {
                        return s && t.isWebGLMultisampleRenderTarget ? Math.min(h, t.samples) : 0;
                    }
                    let U = !1,
                        F = !1;
                    (this.allocateTextureUnit = function () {
                        const t = M;
                        return t >= l && console.warn("THREE.WebGLTextures: Trying to use " + t + " texture units while this GPU supports only " + l), (M += 1), t;
                    }),
                        (this.resetTextureUnits = function () {
                            M = 0;
                        }),
                        (this.setTexture2D = T),
                        (this.setTexture2DArray = function (t, e) {
                            const i = r.get(t);
                            t.version > 0 && i.__version !== t.version ? P(i, t, e) : (n.activeTexture(33984 + e), n.bindTexture(35866, i.__webglTexture));
                        }),
                        (this.setTexture3D = function (t, e) {
                            const i = r.get(t);
                            t.version > 0 && i.__version !== t.version ? P(i, t, e) : (n.activeTexture(33984 + e), n.bindTexture(32879, i.__webglTexture));
                        }),
                        (this.setTextureCube = E),
                        (this.setupRenderTarget = function (e) {
                            const l = e.texture,
                                c = r.get(e),
                                u = r.get(l);
                            e.addEventListener("dispose", S), !0 !== e.isWebGLMultipleRenderTargets && ((u.__webglTexture = t.createTexture()), (u.__version = l.version), a.memory.textures++);
                            const h = !0 === e.isWebGLCubeRenderTarget,
                                d = !0 === e.isWebGLMultipleRenderTargets,
                                f = !0 === e.isWebGLMultisampleRenderTarget,
                                p = l.isDataTexture3D || l.isDataTexture2DArray,
                                m = v(e) || s;
                            if ((!s || l.format !== Yr || (l.type !== jr && l.type !== qr) || ((l.format = Zr), console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")), h)) {
                                c.__webglFramebuffer = [];
                                for (let e = 0; e < 6; e++) c.__webglFramebuffer[e] = t.createFramebuffer();
                            } else if (((c.__webglFramebuffer = t.createFramebuffer()), d))
                                if (i.drawBuffers) {
                                    const n = e.texture;
                                    for (let e = 0, i = n.length; e < i; e++) {
                                        const i = r.get(n[e]);
                                        void 0 === i.__webglTexture && ((i.__webglTexture = t.createTexture()), a.memory.textures++);
                                    }
                                } else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
                            else if (f)
                                if (s) {
                                    (c.__webglMultisampledFramebuffer = t.createFramebuffer()), (c.__webglColorRenderbuffer = t.createRenderbuffer()), t.bindRenderbuffer(36161, c.__webglColorRenderbuffer);
                                    const r = o.convert(l.format),
                                        i = o.convert(l.type),
                                        a = _(l.internalFormat, r, i),
                                        s = k(e);
                                    t.renderbufferStorageMultisample(36161, s, a, e.width, e.height),
                                        n.bindFramebuffer(36160, c.__webglMultisampledFramebuffer),
                                        t.framebufferRenderbuffer(36160, 36064, 36161, c.__webglColorRenderbuffer),
                                        t.bindRenderbuffer(36161, null),
                                    e.depthBuffer && ((c.__webglDepthRenderbuffer = t.createRenderbuffer()), O(c.__webglDepthRenderbuffer, e, !0)),
                                        n.bindFramebuffer(36160, null);
                                } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
                            if (h) {
                                n.bindTexture(34067, u.__webglTexture), C(34067, l, m);
                                for (let t = 0; t < 6; t++) I(c.__webglFramebuffer[t], e, l, 36064, 34069 + t);
                                y(l, m) && x(34067, l, e.width, e.height), n.bindTexture(34067, null);
                            } else if (d) {
                                const t = e.texture;
                                for (let i = 0, o = t.length; i < o; i++) {
                                    const o = t[i],
                                        a = r.get(o);
                                    n.bindTexture(3553, a.__webglTexture), C(3553, o, m), I(c.__webglFramebuffer, e, o, 36064 + i, 3553), y(o, m) && x(3553, o, e.width, e.height);
                                }
                                n.bindTexture(3553, null);
                            } else {
                                let t = 3553;
                                if (p)
                                    if (s) {
                                        t = l.isDataTexture3D ? 32879 : 35866;
                                    } else console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.");
                                n.bindTexture(t, u.__webglTexture), C(t, l, m), I(c.__webglFramebuffer, e, l, 36064, t), y(l, m) && x(t, l, e.width, e.height, e.depth), n.bindTexture(t, null);
                            }
                            e.depthBuffer && D(e);
                        }),
                        (this.updateRenderTargetMipmap = function (t) {
                            const e = v(t) || s,
                                i = !0 === t.isWebGLMultipleRenderTargets ? t.texture : [t.texture];
                            for (let o = 0, a = i.length; o < a; o++) {
                                const a = i[o];
                                if (y(a, e)) {
                                    const e = t.isWebGLCubeRenderTarget ? 34067 : 3553,
                                        i = r.get(a).__webglTexture;
                                    n.bindTexture(e, i), x(e, a, t.width, t.height), n.bindTexture(e, null);
                                }
                            }
                        }),
                        (this.updateMultisampleRenderTarget = function (e) {
                            if (e.isWebGLMultisampleRenderTarget)
                                if (s) {
                                    const i = e.width,
                                        o = e.height;
                                    let a = 16384;
                                    e.depthBuffer && (a |= 256), e.stencilBuffer && (a |= 1024);
                                    const s = r.get(e);
                                    n.bindFramebuffer(36008, s.__webglMultisampledFramebuffer),
                                        n.bindFramebuffer(36009, s.__webglFramebuffer),
                                        t.blitFramebuffer(0, 0, i, o, 0, 0, i, o, a, 9728),
                                        n.bindFramebuffer(36008, null),
                                        n.bindFramebuffer(36009, s.__webglMultisampledFramebuffer);
                                } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
                        }),
                        (this.safeSetTexture2D = function (t, e) {
                            t && t.isWebGLRenderTarget && (!1 === U && (console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."), (U = !0)), (t = t.texture)), T(t, e);
                        }),
                        (this.safeSetTextureCube = function (t, e) {
                            t &&
                            t.isWebGLCubeRenderTarget &&
                            (!1 === F && (console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."), (F = !0)), (t = t.texture)),
                                E(t, e);
                        });
                }
                function Hc(t, e, n) {
                    const r = n.isWebGL2;
                    return {
                        convert: function (t) {
                            let n;
                            if (t === Hr) return 5121;
                            if (1017 === t) return 32819;
                            if (1018 === t) return 32820;
                            if (1019 === t) return 33635;
                            if (1010 === t) return 5120;
                            if (1011 === t) return 5122;
                            if (t === Vr) return 5123;
                            if (1013 === t) return 5124;
                            if (t === Wr) return 5125;
                            if (t === jr) return 5126;
                            if (t === qr) return r ? 5131 : ((n = e.get("OES_texture_half_float")), null !== n ? n.HALF_FLOAT_OES : null);
                            if (1021 === t) return 6406;
                            if (t === Yr) return 6407;
                            if (t === Zr) return 6408;
                            if (1024 === t) return 6409;
                            if (1025 === t) return 6410;
                            if (t === Jr) return 6402;
                            if (t === $r) return 34041;
                            if (1028 === t) return 6403;
                            if (1029 === t) return 36244;
                            if (1030 === t) return 33319;
                            if (1031 === t) return 33320;
                            if (1032 === t) return 36248;
                            if (1033 === t) return 36249;
                            if (33776 === t || 33777 === t || 33778 === t || 33779 === t) {
                                if (((n = e.get("WEBGL_compressed_texture_s3tc")), null === n)) return null;
                                if (33776 === t) return n.COMPRESSED_RGB_S3TC_DXT1_EXT;
                                if (33777 === t) return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                                if (33778 === t) return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                                if (33779 === t) return n.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                            }
                            if (35840 === t || 35841 === t || 35842 === t || 35843 === t) {
                                if (((n = e.get("WEBGL_compressed_texture_pvrtc")), null === n)) return null;
                                if (35840 === t) return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                                if (35841 === t) return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                                if (35842 === t) return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                                if (35843 === t) return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                            }
                            if (36196 === t) return (n = e.get("WEBGL_compressed_texture_etc1")), null !== n ? n.COMPRESSED_RGB_ETC1_WEBGL : null;
                            if ((37492 === t || 37496 === t) && ((n = e.get("WEBGL_compressed_texture_etc")), null !== n)) {
                                if (37492 === t) return n.COMPRESSED_RGB8_ETC2;
                                if (37496 === t) return n.COMPRESSED_RGBA8_ETC2_EAC;
                            }
                            return 37808 === t ||
                            37809 === t ||
                            37810 === t ||
                            37811 === t ||
                            37812 === t ||
                            37813 === t ||
                            37814 === t ||
                            37815 === t ||
                            37816 === t ||
                            37817 === t ||
                            37818 === t ||
                            37819 === t ||
                            37820 === t ||
                            37821 === t ||
                            37840 === t ||
                            37841 === t ||
                            37842 === t ||
                            37843 === t ||
                            37844 === t ||
                            37845 === t ||
                            37846 === t ||
                            37847 === t ||
                            37848 === t ||
                            37849 === t ||
                            37850 === t ||
                            37851 === t ||
                            37852 === t ||
                            37853 === t
                                ? ((n = e.get("WEBGL_compressed_texture_astc")), null !== n ? t : null)
                                : 36492 === t
                                    ? ((n = e.get("EXT_texture_compression_bptc")), null !== n ? t : null)
                                    : t === Xr
                                        ? r
                                            ? 34042
                                            : ((n = e.get("WEBGL_depth_texture")), null !== n ? n.UNSIGNED_INT_24_8_WEBGL : null)
                                        : void 0;
                        },
                    };
                }
                class Vc extends Ya {
                    constructor(t = []) {
                        super(), (this.cameras = t);
                    }
                }
                Vc.prototype.isArrayCamera = !0;
                class Wc extends Bo {
                    constructor() {
                        super(), (this.type = "Group");
                    }
                }
                Wc.prototype.isGroup = !0;
                const jc = { type: "move" };
                class qc {
                    constructor() {
                        (this._targetRay = null), (this._grip = null), (this._hand = null);
                    }
                    getHandSpace() {
                        return null === this._hand && ((this._hand = new Wc()), (this._hand.matrixAutoUpdate = !1), (this._hand.visible = !1), (this._hand.joints = {}), (this._hand.inputState = { pinching: !1 })), this._hand;
                    }
                    getTargetRaySpace() {
                        return (
                            null === this._targetRay &&
                            ((this._targetRay = new Wc()),
                                (this._targetRay.matrixAutoUpdate = !1),
                                (this._targetRay.visible = !1),
                                (this._targetRay.hasLinearVelocity = !1),
                                (this._targetRay.linearVelocity = new Fi()),
                                (this._targetRay.hasAngularVelocity = !1),
                                (this._targetRay.angularVelocity = new Fi())),
                                this._targetRay
                        );
                    }
                    getGripSpace() {
                        return (
                            null === this._grip &&
                            ((this._grip = new Wc()),
                                (this._grip.matrixAutoUpdate = !1),
                                (this._grip.visible = !1),
                                (this._grip.hasLinearVelocity = !1),
                                (this._grip.linearVelocity = new Fi()),
                                (this._grip.hasAngularVelocity = !1),
                                (this._grip.angularVelocity = new Fi())),
                                this._grip
                        );
                    }
                    dispatchEvent(t) {
                        return null !== this._targetRay && this._targetRay.dispatchEvent(t), null !== this._grip && this._grip.dispatchEvent(t), null !== this._hand && this._hand.dispatchEvent(t), this;
                    }
                    disconnect(t) {
                        return (
                            this.dispatchEvent({ type: "disconnected", data: t }),
                            null !== this._targetRay && (this._targetRay.visible = !1),
                            null !== this._grip && (this._grip.visible = !1),
                            null !== this._hand && (this._hand.visible = !1),
                                this
                        );
                    }
                    update(t, e, n) {
                        let r = null,
                            i = null,
                            o = null;
                        const a = this._targetRay,
                            s = this._grip,
                            l = this._hand;
                        if (t && "visible-blurred" !== e.session.visibilityState)
                            if (
                                (null !== a &&
                                ((r = e.getPose(t.targetRaySpace, n)),
                                null !== r &&
                                (a.matrix.fromArray(r.transform.matrix),
                                    a.matrix.decompose(a.position, a.rotation, a.scale),
                                    r.linearVelocity ? ((a.hasLinearVelocity = !0), a.linearVelocity.copy(r.linearVelocity)) : (a.hasLinearVelocity = !1),
                                    r.angularVelocity ? ((a.hasAngularVelocity = !0), a.angularVelocity.copy(r.angularVelocity)) : (a.hasAngularVelocity = !1),
                                    this.dispatchEvent(jc))),
                                l && t.hand)
                            ) {
                                o = !0;
                                for (const r of t.hand.values()) {
                                    const t = e.getJointPose(r, n);
                                    if (void 0 === l.joints[r.jointName]) {
                                        const t = new Wc();
                                        (t.matrixAutoUpdate = !1), (t.visible = !1), (l.joints[r.jointName] = t), l.add(t);
                                    }
                                    const i = l.joints[r.jointName];
                                    null !== t && (i.matrix.fromArray(t.transform.matrix), i.matrix.decompose(i.position, i.rotation, i.scale), (i.jointRadius = t.radius)), (i.visible = null !== t);
                                }
                                const r = l.joints["index-finger-tip"],
                                    i = l.joints["thumb-tip"],
                                    a = r.position.distanceTo(i.position),
                                    s = 0.02,
                                    c = 0.005;
                                l.inputState.pinching && a > s + c
                                    ? ((l.inputState.pinching = !1), this.dispatchEvent({ type: "pinchend", handedness: t.handedness, target: this }))
                                    : !l.inputState.pinching && a <= s - c && ((l.inputState.pinching = !0), this.dispatchEvent({ type: "pinchstart", handedness: t.handedness, target: this }));
                            } else
                                null !== s &&
                                t.gripSpace &&
                                ((i = e.getPose(t.gripSpace, n)),
                                null !== i &&
                                (s.matrix.fromArray(i.transform.matrix),
                                    s.matrix.decompose(s.position, s.rotation, s.scale),
                                    i.linearVelocity ? ((s.hasLinearVelocity = !0), s.linearVelocity.copy(i.linearVelocity)) : (s.hasLinearVelocity = !1),
                                    i.angularVelocity ? ((s.hasAngularVelocity = !0), s.angularVelocity.copy(i.angularVelocity)) : (s.hasAngularVelocity = !1)));
                        return null !== a && (a.visible = null !== r), null !== s && (s.visible = null !== i), null !== l && (l.visible = null !== o), this;
                    }
                }
                class Xc extends fi {
                    constructor(t, e) {
                        super();
                        const n = this,
                            r = t.state;
                        let i = null,
                            o = 1,
                            a = null,
                            s = "local-floor",
                            l = null,
                            c = null,
                            u = null,
                            h = null,
                            d = null;
                        const f = [],
                            p = new Map(),
                            m = new Ya();
                        m.layers.enable(1), (m.viewport = new Oi());
                        const g = new Ya();
                        g.layers.enable(2), (g.viewport = new Oi());
                        const v = [m, g],
                            y = new Vc();
                        y.layers.enable(1), y.layers.enable(2);
                        let x = null,
                            _ = null;
                        function b(t) {
                            const e = p.get(t.inputSource);
                            e && e.dispatchEvent({ type: t.type, data: t.inputSource });
                        }
                        function w() {
                            p.forEach(function (t, e) {
                                t.disconnect(e);
                            }),
                                p.clear(),
                                (x = null),
                                (_ = null),
                                r.bindXRFramebuffer(null),
                                t.setRenderTarget(t.getRenderTarget()),
                                L.stop(),
                                (n.isPresenting = !1),
                                n.dispatchEvent({ type: "sessionend" });
                        }
                        function S(t) {
                            const e = i.inputSources;
                            for (let t = 0; t < f.length; t++) p.set(e[t], f[t]);
                            for (let e = 0; e < t.removed.length; e++) {
                                const n = t.removed[e],
                                    r = p.get(n);
                                r && (r.dispatchEvent({ type: "disconnected", data: n }), p.delete(n));
                            }
                            for (let e = 0; e < t.added.length; e++) {
                                const n = t.added[e],
                                    r = p.get(n);
                                r && r.dispatchEvent({ type: "connected", data: n });
                            }
                        }
                        (this.cameraAutoUpdate = !0),
                            (this.enabled = !1),
                            (this.isPresenting = !1),
                            (this.getController = function (t) {
                                let e = f[t];
                                return void 0 === e && ((e = new qc()), (f[t] = e)), e.getTargetRaySpace();
                            }),
                            (this.getControllerGrip = function (t) {
                                let e = f[t];
                                return void 0 === e && ((e = new qc()), (f[t] = e)), e.getGripSpace();
                            }),
                            (this.getHand = function (t) {
                                let e = f[t];
                                return void 0 === e && ((e = new qc()), (f[t] = e)), e.getHandSpace();
                            }),
                            (this.setFramebufferScaleFactor = function (t) {
                                (o = t), !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
                            }),
                            (this.setReferenceSpaceType = function (t) {
                                (s = t), !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
                            }),
                            (this.getReferenceSpace = function () {
                                return a;
                            }),
                            (this.getSession = function () {
                                return i;
                            }),
                            (this.setSession = async function (t) {
                                if (((i = t), null !== i)) {
                                    i.addEventListener("select", b),
                                        i.addEventListener("selectstart", b),
                                        i.addEventListener("selectend", b),
                                        i.addEventListener("squeeze", b),
                                        i.addEventListener("squeezestart", b),
                                        i.addEventListener("squeezeend", b),
                                        i.addEventListener("end", w),
                                        i.addEventListener("inputsourceschange", S);
                                    const t = e.getContextAttributes();
                                    if ((!0 !== t.xrCompatible && (await e.makeXRCompatible()), void 0 === i.renderState.layers)) {
                                        const n = { antialias: t.antialias, alpha: t.alpha, depth: t.depth, stencil: t.stencil, framebufferScaleFactor: o };
                                        (d = new XRWebGLLayer(i, e, n)), i.updateRenderState({ baseLayer: d });
                                    } else {
                                        let n = 0;
                                        if (t.antialias) {
                                            const n = { antialias: !0, alpha: t.alpha, depth: t.depth, stencil: t.stencil, framebufferScaleFactor: o };
                                            (d = new XRWebGLLayer(i, e, n)), i.updateRenderState({ layers: [d] });
                                        } else {
                                            t.depth && (n = t.stencil ? 34041 : 6402);
                                            const r = { colorFormat: t.alpha ? 6408 : 6407, depthFormat: n, scaleFactor: o };
                                            (c = new XRWebGLBinding(i, e)), (h = c.createProjectionLayer(r)), (u = e.createFramebuffer()), i.updateRenderState({ layers: [h] });
                                        }
                                    }
                                    (a = await i.requestReferenceSpace(s)), L.setContext(i), L.start(), (n.isPresenting = !0), n.dispatchEvent({ type: "sessionstart" });
                                }
                            });
                        const M = new Fi(),
                            T = new Fi();
                        function E(t, e) {
                            null === e ? t.matrixWorld.copy(t.matrix) : t.matrixWorld.multiplyMatrices(e.matrixWorld, t.matrix), t.matrixWorldInverse.copy(t.matrixWorld).invert();
                        }
                        (this.updateCamera = function (t) {
                            if (null === i) return;
                            (y.near = g.near = m.near = t.near), (y.far = g.far = m.far = t.far), (x === y.near && _ === y.far) || (i.updateRenderState({ depthNear: y.near, depthFar: y.far }), (x = y.near), (_ = y.far));
                            const e = t.parent,
                                n = y.cameras;
                            E(y, e);
                            for (let t = 0; t < n.length; t++) E(n[t], e);
                            y.matrixWorld.decompose(y.position, y.quaternion, y.scale), t.position.copy(y.position), t.quaternion.copy(y.quaternion), t.scale.copy(y.scale), t.matrix.copy(y.matrix), t.matrixWorld.copy(y.matrixWorld);
                            const r = t.children;
                            for (let t = 0, e = r.length; t < e; t++) r[t].updateMatrixWorld(!0);
                            2 === n.length
                                ? (function (t, e, n) {
                                    M.setFromMatrixPosition(e.matrixWorld), T.setFromMatrixPosition(n.matrixWorld);
                                    const r = M.distanceTo(T),
                                        i = e.projectionMatrix.elements,
                                        o = n.projectionMatrix.elements,
                                        a = i[14] / (i[10] - 1),
                                        s = i[14] / (i[10] + 1),
                                        l = (i[9] + 1) / i[5],
                                        c = (i[9] - 1) / i[5],
                                        u = (i[8] - 1) / i[0],
                                        h = (o[8] + 1) / o[0],
                                        d = a * u,
                                        f = a * h,
                                        p = r / (-u + h),
                                        m = p * -u;
                                    e.matrixWorld.decompose(t.position, t.quaternion, t.scale), t.translateX(m), t.translateZ(p), t.matrixWorld.compose(t.position, t.quaternion, t.scale), t.matrixWorldInverse.copy(t.matrixWorld).invert();
                                    const g = a + p,
                                        v = s + p,
                                        y = d - m,
                                        x = f + (r - m),
                                        _ = ((l * s) / v) * g,
                                        b = ((c * s) / v) * g;
                                    t.projectionMatrix.makePerspective(y, x, _, b, g, v);
                                })(y, m, g)
                                : y.projectionMatrix.copy(m.projectionMatrix);
                        }),
                            (this.getCamera = function () {
                                return y;
                            }),
                            (this.getFoveation = function () {
                                return null !== h ? h.fixedFoveation : null !== d ? d.fixedFoveation : void 0;
                            }),
                            (this.setFoveation = function (t) {
                                null !== h && (h.fixedFoveation = t), null !== d && void 0 !== d.fixedFoveation && (d.fixedFoveation = t);
                            });
                        let A = null;
                        const L = new as();
                        L.setAnimationLoop(function (t, n) {
                            if (((l = n.getViewerPose(a)), null !== l)) {
                                const t = l.views;
                                null !== d && r.bindXRFramebuffer(d.framebuffer);
                                let n = !1;
                                t.length !== y.cameras.length && ((y.cameras.length = 0), (n = !0));
                                for (let i = 0; i < t.length; i++) {
                                    const o = t[i];
                                    let a = null;
                                    if (null !== d) a = d.getViewport(o);
                                    else {
                                        const t = c.getViewSubImage(h, o);
                                        r.bindXRFramebuffer(u),
                                        void 0 !== t.depthStencilTexture && e.framebufferTexture2D(36160, 36096, 3553, t.depthStencilTexture, 0),
                                            e.framebufferTexture2D(36160, 36064, 3553, t.colorTexture, 0),
                                            (a = t.viewport);
                                    }
                                    const s = v[i];
                                    s.matrix.fromArray(o.transform.matrix), s.projectionMatrix.fromArray(o.projectionMatrix), s.viewport.set(a.x, a.y, a.width, a.height), 0 === i && y.matrix.copy(s.matrix), !0 === n && y.cameras.push(s);
                                }
                            }
                            const o = i.inputSources;
                            for (let t = 0; t < f.length; t++) {
                                const e = f[t],
                                    r = o[t];
                                e.update(r, n, a);
                            }
                            A && A(t, n);
                        }),
                            (this.setAnimationLoop = function (t) {
                                A = t;
                            }),
                            (this.dispose = function () {});
                    }
                }
                function Yc(t) {
                    function e(e, n) {
                        (e.opacity.value = n.opacity),
                        n.color && e.diffuse.value.copy(n.color),
                        n.emissive && e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),
                        n.map && (e.map.value = n.map),
                        n.alphaMap && (e.alphaMap.value = n.alphaMap),
                        n.specularMap && (e.specularMap.value = n.specularMap);
                        const r = t.get(n).envMap;
                        if (r) {
                            (e.envMap.value = r), (e.flipEnvMap.value = r.isCubeTexture && !1 === r.isRenderTargetTexture ? -1 : 1), (e.reflectivity.value = n.reflectivity), (e.refractionRatio.value = n.refractionRatio);
                            const i = t.get(r).__maxMipLevel;
                            void 0 !== i && (e.maxMipLevel.value = i);
                        }
                        let i, o;
                        n.lightMap && ((e.lightMap.value = n.lightMap), (e.lightMapIntensity.value = n.lightMapIntensity)),
                        n.aoMap && ((e.aoMap.value = n.aoMap), (e.aoMapIntensity.value = n.aoMapIntensity)),
                            n.map
                                ? (i = n.map)
                                : n.specularMap
                                    ? (i = n.specularMap)
                                    : n.displacementMap
                                        ? (i = n.displacementMap)
                                        : n.normalMap
                                            ? (i = n.normalMap)
                                            : n.bumpMap
                                                ? (i = n.bumpMap)
                                                : n.roughnessMap
                                                    ? (i = n.roughnessMap)
                                                    : n.metalnessMap
                                                        ? (i = n.metalnessMap)
                                                        : n.alphaMap
                                                            ? (i = n.alphaMap)
                                                            : n.emissiveMap
                                                                ? (i = n.emissiveMap)
                                                                : n.clearcoatMap
                                                                    ? (i = n.clearcoatMap)
                                                                    : n.clearcoatNormalMap
                                                                        ? (i = n.clearcoatNormalMap)
                                                                        : n.clearcoatRoughnessMap
                                                                            ? (i = n.clearcoatRoughnessMap)
                                                                            : n.specularIntensityMap
                                                                                ? (i = n.specularIntensityMap)
                                                                                : n.specularTintMap && (i = n.specularTintMap),
                        void 0 !== i && (i.isWebGLRenderTarget && (i = i.texture), !0 === i.matrixAutoUpdate && i.updateMatrix(), e.uvTransform.value.copy(i.matrix)),
                            n.aoMap ? (o = n.aoMap) : n.lightMap && (o = n.lightMap),
                        void 0 !== o && (o.isWebGLRenderTarget && (o = o.texture), !0 === o.matrixAutoUpdate && o.updateMatrix(), e.uv2Transform.value.copy(o.matrix));
                    }
                    function n(e, n) {
                        (e.roughness.value = n.roughness),
                            (e.metalness.value = n.metalness),
                        n.roughnessMap && (e.roughnessMap.value = n.roughnessMap),
                        n.metalnessMap && (e.metalnessMap.value = n.metalnessMap),
                        n.emissiveMap && (e.emissiveMap.value = n.emissiveMap),
                        n.bumpMap && ((e.bumpMap.value = n.bumpMap), (e.bumpScale.value = n.bumpScale), 1 === n.side && (e.bumpScale.value *= -1)),
                        n.normalMap && ((e.normalMap.value = n.normalMap), e.normalScale.value.copy(n.normalScale), 1 === n.side && e.normalScale.value.negate()),
                        n.displacementMap && ((e.displacementMap.value = n.displacementMap), (e.displacementScale.value = n.displacementScale), (e.displacementBias.value = n.displacementBias));
                        t.get(n).envMap && (e.envMapIntensity.value = n.envMapIntensity);
                    }
                    return {
                        refreshFogUniforms: function (t, e) {
                            t.fogColor.value.copy(e.color), e.isFog ? ((t.fogNear.value = e.near), (t.fogFar.value = e.far)) : e.isFogExp2 && (t.fogDensity.value = e.density);
                        },
                        refreshMaterialUniforms: function (t, r, i, o, a) {
                            r.isMeshBasicMaterial
                                ? e(t, r)
                                : r.isMeshLambertMaterial
                                    ? (e(t, r),
                                        (function (t, e) {
                                            e.emissiveMap && (t.emissiveMap.value = e.emissiveMap);
                                        })(t, r))
                                    : r.isMeshToonMaterial
                                        ? (e(t, r),
                                            (function (t, e) {
                                                e.gradientMap && (t.gradientMap.value = e.gradientMap);
                                                e.emissiveMap && (t.emissiveMap.value = e.emissiveMap);
                                                e.bumpMap && ((t.bumpMap.value = e.bumpMap), (t.bumpScale.value = e.bumpScale), 1 === e.side && (t.bumpScale.value *= -1));
                                                e.normalMap && ((t.normalMap.value = e.normalMap), t.normalScale.value.copy(e.normalScale), 1 === e.side && t.normalScale.value.negate());
                                                e.displacementMap && ((t.displacementMap.value = e.displacementMap), (t.displacementScale.value = e.displacementScale), (t.displacementBias.value = e.displacementBias));
                                            })(t, r))
                                        : r.isMeshPhongMaterial
                                            ? (e(t, r),
                                                (function (t, e) {
                                                    t.specular.value.copy(e.specular), (t.shininess.value = Math.max(e.shininess, 1e-4)), e.emissiveMap && (t.emissiveMap.value = e.emissiveMap);
                                                    e.bumpMap && ((t.bumpMap.value = e.bumpMap), (t.bumpScale.value = e.bumpScale), 1 === e.side && (t.bumpScale.value *= -1));
                                                    e.normalMap && ((t.normalMap.value = e.normalMap), t.normalScale.value.copy(e.normalScale), 1 === e.side && t.normalScale.value.negate());
                                                    e.displacementMap && ((t.displacementMap.value = e.displacementMap), (t.displacementScale.value = e.displacementScale), (t.displacementBias.value = e.displacementBias));
                                                })(t, r))
                                            : r.isMeshStandardMaterial
                                                ? (e(t, r),
                                                    r.isMeshPhysicalMaterial
                                                        ? (function (t, e, r) {
                                                            n(t, e), (t.reflectivity.value = e.reflectivity), (t.clearcoat.value = e.clearcoat), (t.clearcoatRoughness.value = e.clearcoatRoughness), e.sheen && t.sheen.value.copy(e.sheen);
                                                            e.clearcoatMap && (t.clearcoatMap.value = e.clearcoatMap);
                                                            e.clearcoatRoughnessMap && (t.clearcoatRoughnessMap.value = e.clearcoatRoughnessMap);
                                                            e.clearcoatNormalMap && (t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale), (t.clearcoatNormalMap.value = e.clearcoatNormalMap), 1 === e.side && t.clearcoatNormalScale.value.negate());
                                                            (t.transmission.value = e.transmission), e.transmissionMap && (t.transmissionMap.value = e.transmissionMap);
                                                            e.transmission > 0 && ((t.transmissionSamplerMap.value = r.texture), t.transmissionSamplerSize.value.set(r.width, r.height));
                                                            (t.thickness.value = e.thickness), e.thicknessMap && (t.thicknessMap.value = e.thicknessMap);
                                                            (t.attenuationDistance.value = e.attenuationDistance),
                                                                t.attenuationTint.value.copy(e.attenuationTint),
                                                                (t.specularIntensity.value = e.specularIntensity),
                                                                t.specularTint.value.copy(e.specularTint),
                                                            e.specularIntensityMap && (t.specularIntensityMap.value = e.specularIntensityMap);
                                                            e.specularTintMap && (t.specularTintMap.value = e.specularTintMap);
                                                        })(t, r, a)
                                                        : n(t, r))
                                                : r.isMeshMatcapMaterial
                                                    ? (e(t, r),
                                                        (function (t, e) {
                                                            e.matcap && (t.matcap.value = e.matcap);
                                                            e.bumpMap && ((t.bumpMap.value = e.bumpMap), (t.bumpScale.value = e.bumpScale), 1 === e.side && (t.bumpScale.value *= -1));
                                                            e.normalMap && ((t.normalMap.value = e.normalMap), t.normalScale.value.copy(e.normalScale), 1 === e.side && t.normalScale.value.negate());
                                                            e.displacementMap && ((t.displacementMap.value = e.displacementMap), (t.displacementScale.value = e.displacementScale), (t.displacementBias.value = e.displacementBias));
                                                        })(t, r))
                                                    : r.isMeshDepthMaterial
                                                        ? (e(t, r),
                                                            (function (t, e) {
                                                                e.displacementMap && ((t.displacementMap.value = e.displacementMap), (t.displacementScale.value = e.displacementScale), (t.displacementBias.value = e.displacementBias));
                                                            })(t, r))
                                                        : r.isMeshDistanceMaterial
                                                            ? (e(t, r),
                                                                (function (t, e) {
                                                                    e.displacementMap && ((t.displacementMap.value = e.displacementMap), (t.displacementScale.value = e.displacementScale), (t.displacementBias.value = e.displacementBias));
                                                                    t.referencePosition.value.copy(e.referencePosition), (t.nearDistance.value = e.nearDistance), (t.farDistance.value = e.farDistance);
                                                                })(t, r))
                                                            : r.isMeshNormalMaterial
                                                                ? (e(t, r),
                                                                    (function (t, e) {
                                                                        e.bumpMap && ((t.bumpMap.value = e.bumpMap), (t.bumpScale.value = e.bumpScale), 1 === e.side && (t.bumpScale.value *= -1));
                                                                        e.normalMap && ((t.normalMap.value = e.normalMap), t.normalScale.value.copy(e.normalScale), 1 === e.side && t.normalScale.value.negate());
                                                                        e.displacementMap && ((t.displacementMap.value = e.displacementMap), (t.displacementScale.value = e.displacementScale), (t.displacementBias.value = e.displacementBias));
                                                                    })(t, r))
                                                                : r.isLineBasicMaterial
                                                                    ? ((function (t, e) {
                                                                        t.diffuse.value.copy(e.color), (t.opacity.value = e.opacity);
                                                                    })(t, r),
                                                                    r.isLineDashedMaterial &&
                                                                    (function (t, e) {
                                                                        (t.dashSize.value = e.dashSize), (t.totalSize.value = e.dashSize + e.gapSize), (t.scale.value = e.scale);
                                                                    })(t, r))
                                                                    : r.isPointsMaterial
                                                                        ? (function (t, e, n, r) {
                                                                            t.diffuse.value.copy(e.color), (t.opacity.value = e.opacity), (t.size.value = e.size * n), (t.scale.value = 0.5 * r), e.map && (t.map.value = e.map);
                                                                            e.alphaMap && (t.alphaMap.value = e.alphaMap);
                                                                            let i;
                                                                            e.map ? (i = e.map) : e.alphaMap && (i = e.alphaMap);
                                                                            void 0 !== i && (!0 === i.matrixAutoUpdate && i.updateMatrix(), t.uvTransform.value.copy(i.matrix));
                                                                        })(t, r, i, o)
                                                                        : r.isSpriteMaterial
                                                                            ? (function (t, e) {
                                                                                t.diffuse.value.copy(e.color), (t.opacity.value = e.opacity), (t.rotation.value = e.rotation), e.map && (t.map.value = e.map);
                                                                                e.alphaMap && (t.alphaMap.value = e.alphaMap);
                                                                                let n;
                                                                                e.map ? (n = e.map) : e.alphaMap && (n = e.alphaMap);
                                                                                void 0 !== n && (!0 === n.matrixAutoUpdate && n.updateMatrix(), t.uvTransform.value.copy(n.matrix));
                                                                            })(t, r)
                                                                            : r.isShadowMaterial
                                                                                ? (t.color.value.copy(r.color), (t.opacity.value = r.opacity))
                                                                                : r.isShaderMaterial && (r.uniformsNeedUpdate = !1);
                        },
                    };
                }
                function Zc(t = {}) {
                    const e =
                            void 0 !== t.canvas
                                ? t.canvas
                                : (function () {
                                    const t = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
                                    return (t.style.display = "block"), t;
                                })(),
                        n = void 0 !== t.context ? t.context : null,
                        r = void 0 !== t.alpha && t.alpha,
                        i = void 0 === t.depth || t.depth,
                        o = void 0 === t.stencil || t.stencil,
                        a = void 0 !== t.antialias && t.antialias,
                        s = void 0 === t.premultipliedAlpha || t.premultipliedAlpha,
                        l = void 0 !== t.preserveDrawingBuffer && t.preserveDrawingBuffer,
                        c = void 0 !== t.powerPreference ? t.powerPreference : "default",
                        u = void 0 !== t.failIfMajorPerformanceCaveat && t.failIfMajorPerformanceCaveat;
                    let h = null,
                        d = null;
                    const f = [],
                        p = [];
                    (this.domElement = e),
                        (this.debug = { checkShaderErrors: !0 }),
                        (this.autoClear = !0),
                        (this.autoClearColor = !0),
                        (this.autoClearDepth = !0),
                        (this.autoClearStencil = !0),
                        (this.sortObjects = !0),
                        (this.clippingPlanes = []),
                        (this.localClippingEnabled = !1),
                        (this.gammaFactor = 2),
                        (this.outputEncoding = oi),
                        (this.physicallyCorrectLights = !1),
                        (this.toneMapping = 0),
                        (this.toneMappingExposure = 1);
                    const m = this;
                    let g = !1,
                        v = 0,
                        y = 0,
                        x = null,
                        _ = -1,
                        b = null;
                    const w = new Oi(),
                        S = new Oi();
                    let M = null,
                        T = e.width,
                        E = e.height,
                        A = 1,
                        L = null,
                        C = null;
                    const R = new Oi(0, 0, T, E),
                        P = new Oi(0, 0, T, E);
                    let I = !1;
                    const O = [],
                        D = new os();
                    let k = !1,
                        U = !1,
                        F = null;
                    const N = new mo(),
                        z = new Fi(),
                        B = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 };
                    function G() {
                        return null === x ? A : 1;
                    }
                    let H,
                        V,
                        W,
                        j,
                        q,
                        X,
                        Y,
                        Z,
                        J,
                        $,
                        Q,
                        K,
                        tt,
                        et,
                        nt,
                        rt,
                        it,
                        ot,
                        at,
                        st,
                        lt,
                        ct,
                        ut,
                        ht = n;
                    function dt(t, n) {
                        for (let r = 0; r < t.length; r++) {
                            const i = t[r],
                                o = e.getContext(i, n);
                            if (null !== o) return o;
                        }
                        return null;
                    }
                    try {
                        const t = { alpha: r, depth: i, stencil: o, antialias: a, premultipliedAlpha: s, preserveDrawingBuffer: l, powerPreference: c, failIfMajorPerformanceCaveat: u };
                        if ((e.addEventListener("webglcontextlost", mt, !1), e.addEventListener("webglcontextrestored", gt, !1), null === ht)) {
                            const e = ["webgl2", "webgl", "experimental-webgl"];
                            if ((!0 === m.isWebGL1Renderer && e.shift(), (ht = dt(e, t)), null === ht)) throw dt(e) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
                        }
                        void 0 === ht.getShaderPrecisionFormat &&
                        (ht.getShaderPrecisionFormat = function () {
                            return { rangeMin: 1, rangeMax: 1, precision: 1 };
                        });
                    } catch (t) {
                        throw (console.error("THREE.WebGLRenderer: " + t.message), t);
                    }
                    function ft() {
                        (H = new Xs(ht)),
                            (V = new ms(ht, H, t)),
                            H.init(V),
                            (ct = new Hc(ht, H, V)),
                            (W = new Bc(ht, H, V)),
                            (O[0] = 1029),
                            (j = new Js(ht)),
                            (q = new Ec()),
                            (X = new Gc(ht, H, W, q, V, ct, j)),
                            (Y = new vs(m)),
                            (Z = new qs(m)),
                            (J = new ss(ht, V)),
                            (ut = new fs(ht, H, J, V)),
                            ($ = new Ys(ht, J, j, ut)),
                            (Q = new tl(ht, $, J, j)),
                            (at = new Ks(ht)),
                            (rt = new gs(q)),
                            (K = new Tc(m, Y, Z, H, V, ut, rt)),
                            (tt = new Yc(q)),
                            (et = new Rc(q)),
                            (nt = new Uc(H, V)),
                            (ot = new ds(m, Y, W, Q, s)),
                            (it = new zc(m, Q, V)),
                            (st = new ps(ht, H, j, V)),
                            (lt = new Zs(ht, H, j, V)),
                            (j.programs = K.programs),
                            (m.capabilities = V),
                            (m.extensions = H),
                            (m.properties = q),
                            (m.renderLists = et),
                            (m.shadowMap = it),
                            (m.state = W),
                            (m.info = j);
                    }
                    ft();
                    const pt = new Xc(m, ht);
                    function mt(t) {
                        t.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), (g = !0);
                    }
                    function gt() {
                        console.log("THREE.WebGLRenderer: Context Restored."), (g = !1);
                        const t = j.autoReset,
                            e = it.enabled,
                            n = it.autoUpdate,
                            r = it.needsUpdate,
                            i = it.type;
                        ft(), (j.autoReset = t), (it.enabled = e), (it.autoUpdate = n), (it.needsUpdate = r), (it.type = i);
                    }
                    function vt(t) {
                        const e = t.target;
                        e.removeEventListener("dispose", vt),
                            (function (t) {
                                (function (t) {
                                    const e = q.get(t).programs;
                                    void 0 !== e &&
                                    e.forEach(function (t) {
                                        K.releaseProgram(t);
                                    });
                                })(t),
                                    q.remove(t);
                            })(e);
                    }
                    (this.xr = pt),
                        (this.getContext = function () {
                            return ht;
                        }),
                        (this.getContextAttributes = function () {
                            return ht.getContextAttributes();
                        }),
                        (this.forceContextLoss = function () {
                            const t = H.get("WEBGL_lose_context");
                            t && t.loseContext();
                        }),
                        (this.forceContextRestore = function () {
                            const t = H.get("WEBGL_lose_context");
                            t && t.restoreContext();
                        }),
                        (this.getPixelRatio = function () {
                            return A;
                        }),
                        (this.setPixelRatio = function (t) {
                            void 0 !== t && ((A = t), this.setSize(T, E, !1));
                        }),
                        (this.getSize = function (t) {
                            return t.set(T, E);
                        }),
                        (this.setSize = function (t, n, r) {
                            pt.isPresenting
                                ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.")
                                : ((T = t), (E = n), (e.width = Math.floor(t * A)), (e.height = Math.floor(n * A)), !1 !== r && ((e.style.width = t + "px"), (e.style.height = n + "px")), this.setViewport(0, 0, t, n));
                        }),
                        (this.getDrawingBufferSize = function (t) {
                            return t.set(T * A, E * A).floor();
                        }),
                        (this.setDrawingBufferSize = function (t, n, r) {
                            (T = t), (E = n), (A = r), (e.width = Math.floor(t * r)), (e.height = Math.floor(n * r)), this.setViewport(0, 0, t, n);
                        }),
                        (this.getCurrentViewport = function (t) {
                            return t.copy(w);
                        }),
                        (this.getViewport = function (t) {
                            return t.copy(R);
                        }),
                        (this.setViewport = function (t, e, n, r) {
                            t.isVector4 ? R.set(t.x, t.y, t.z, t.w) : R.set(t, e, n, r), W.viewport(w.copy(R).multiplyScalar(A).floor());
                        }),
                        (this.getScissor = function (t) {
                            return t.copy(P);
                        }),
                        (this.setScissor = function (t, e, n, r) {
                            t.isVector4 ? P.set(t.x, t.y, t.z, t.w) : P.set(t, e, n, r), W.scissor(S.copy(P).multiplyScalar(A).floor());
                        }),
                        (this.getScissorTest = function () {
                            return I;
                        }),
                        (this.setScissorTest = function (t) {
                            W.setScissorTest((I = t));
                        }),
                        (this.setOpaqueSort = function (t) {
                            L = t;
                        }),
                        (this.setTransparentSort = function (t) {
                            C = t;
                        }),
                        (this.getClearColor = function (t) {
                            return t.copy(ot.getClearColor());
                        }),
                        (this.setClearColor = function () {
                            ot.setClearColor.apply(ot, arguments);
                        }),
                        (this.getClearAlpha = function () {
                            return ot.getClearAlpha();
                        }),
                        (this.setClearAlpha = function () {
                            ot.setClearAlpha.apply(ot, arguments);
                        }),
                        (this.clear = function (t, e, n) {
                            let r = 0;
                            (void 0 === t || t) && (r |= 16384), (void 0 === e || e) && (r |= 256), (void 0 === n || n) && (r |= 1024), ht.clear(r);
                        }),
                        (this.clearColor = function () {
                            this.clear(!0, !1, !1);
                        }),
                        (this.clearDepth = function () {
                            this.clear(!1, !0, !1);
                        }),
                        (this.clearStencil = function () {
                            this.clear(!1, !1, !0);
                        }),
                        (this.dispose = function () {
                            e.removeEventListener("webglcontextlost", mt, !1),
                                e.removeEventListener("webglcontextrestored", gt, !1),
                                et.dispose(),
                                nt.dispose(),
                                q.dispose(),
                                Y.dispose(),
                                Z.dispose(),
                                Q.dispose(),
                                ut.dispose(),
                                pt.dispose(),
                                pt.removeEventListener("sessionstart", xt),
                                pt.removeEventListener("sessionend", _t),
                            F && (F.dispose(), (F = null)),
                                bt.stop();
                        }),
                        (this.renderBufferImmediate = function (t, e) {
                            ut.initAttributes();
                            const n = q.get(t);
                            t.hasPositions && !n.position && (n.position = ht.createBuffer()),
                            t.hasNormals && !n.normal && (n.normal = ht.createBuffer()),
                            t.hasUvs && !n.uv && (n.uv = ht.createBuffer()),
                            t.hasColors && !n.color && (n.color = ht.createBuffer());
                            const r = e.getAttributes();
                            t.hasPositions && (ht.bindBuffer(34962, n.position), ht.bufferData(34962, t.positionArray, 35048), ut.enableAttribute(r.position), ht.vertexAttribPointer(r.position, 3, 5126, !1, 0, 0)),
                            t.hasNormals && (ht.bindBuffer(34962, n.normal), ht.bufferData(34962, t.normalArray, 35048), ut.enableAttribute(r.normal), ht.vertexAttribPointer(r.normal, 3, 5126, !1, 0, 0)),
                            t.hasUvs && (ht.bindBuffer(34962, n.uv), ht.bufferData(34962, t.uvArray, 35048), ut.enableAttribute(r.uv), ht.vertexAttribPointer(r.uv, 2, 5126, !1, 0, 0)),
                            t.hasColors && (ht.bindBuffer(34962, n.color), ht.bufferData(34962, t.colorArray, 35048), ut.enableAttribute(r.color), ht.vertexAttribPointer(r.color, 3, 5126, !1, 0, 0)),
                                ut.disableUnusedAttributes(),
                                ht.drawArrays(4, 0, t.count),
                                (t.count = 0);
                        }),
                        (this.renderBufferDirect = function (t, e, n, r, i, o) {
                            null === e && (e = B);
                            const a = i.isMesh && i.matrixWorld.determinant() < 0,
                                s = At(t, e, r, i);
                            W.setMaterial(r, a);
                            let l = n.index;
                            const c = n.attributes.position;
                            if (null === l) {
                                if (void 0 === c || 0 === c.count) return;
                            } else if (0 === l.count) return;
                            let u,
                                h = 1;
                            !0 === r.wireframe && ((l = $.getWireframeAttribute(n)), (h = 2)), (void 0 === n.morphAttributes.position && void 0 === n.morphAttributes.normal) || at.update(i, n, r, s), ut.setup(i, r, s, n, l);
                            let d = st;
                            null !== l && ((u = J.get(l)), (d = lt), d.setIndex(u));
                            const f = null !== l ? l.count : c.count,
                                p = n.drawRange.start * h,
                                m = n.drawRange.count * h,
                                g = null !== o ? o.start * h : 0,
                                v = null !== o ? o.count * h : 1 / 0,
                                y = Math.max(p, g),
                                x = Math.min(f, p + m, g + v) - 1,
                                _ = Math.max(0, x - y + 1);
                            if (0 !== _) {
                                if (i.isMesh) !0 === r.wireframe ? (W.setLineWidth(r.wireframeLinewidth * G()), d.setMode(1)) : d.setMode(4);
                                else if (i.isLine) {
                                    let t = r.linewidth;
                                    void 0 === t && (t = 1), W.setLineWidth(t * G()), i.isLineSegments ? d.setMode(1) : i.isLineLoop ? d.setMode(2) : d.setMode(3);
                                } else i.isPoints ? d.setMode(0) : i.isSprite && d.setMode(4);
                                if (i.isInstancedMesh) d.renderInstances(y, _, i.count);
                                else if (n.isInstancedBufferGeometry) {
                                    const t = Math.min(n.instanceCount, n._maxInstanceCount);
                                    d.renderInstances(y, _, t);
                                } else d.render(y, _);
                            }
                        }),
                        (this.compile = function (t, e) {
                            (d = nt.get(t)),
                                d.init(),
                                p.push(d),
                                t.traverseVisible(function (t) {
                                    t.isLight && t.layers.test(e.layers) && (d.pushLight(t), t.castShadow && d.pushShadow(t));
                                }),
                                d.setupLights(),
                                t.traverse(function (e) {
                                    const n = e.material;
                                    if (n)
                                        if (Array.isArray(n))
                                            for (let r = 0; r < n.length; r++) {
                                                Tt(n[r], t, e);
                                            }
                                        else Tt(n, t, e);
                                }),
                                p.pop(),
                                (d = null);
                        });
                    let yt = null;
                    function xt() {
                        bt.stop();
                    }
                    function _t() {
                        bt.start();
                    }
                    const bt = new as();
                    function wt(t, e, n, r) {
                        if (!1 === t.visible) return;
                        if (t.layers.test(e.layers))
                            if (t.isGroup) n = t.renderOrder;
                            else if (t.isLOD) !0 === t.autoUpdate && t.update(e);
                            else if (t.isLight) d.pushLight(t), t.castShadow && d.pushShadow(t);
                            else if (t.isSprite) {
                                if (!t.frustumCulled || D.intersectsSprite(t)) {
                                    r && z.setFromMatrixPosition(t.matrixWorld).applyMatrix4(N);
                                    const e = Q.update(t),
                                        i = t.material;
                                    i.visible && h.push(t, e, i, n, z.z, null);
                                }
                            } else if (t.isImmediateRenderObject) r && z.setFromMatrixPosition(t.matrixWorld).applyMatrix4(N), h.push(t, null, t.material, n, z.z, null);
                            else if (
                                (t.isMesh || t.isLine || t.isPoints) &&
                                (t.isSkinnedMesh && t.skeleton.frame !== j.render.frame && (t.skeleton.update(), (t.skeleton.frame = j.render.frame)), !t.frustumCulled || D.intersectsObject(t))
                            ) {
                                r && z.setFromMatrixPosition(t.matrixWorld).applyMatrix4(N);
                                const e = Q.update(t),
                                    i = t.material;
                                if (Array.isArray(i)) {
                                    const r = e.groups;
                                    for (let o = 0, a = r.length; o < a; o++) {
                                        const a = r[o],
                                            s = i[a.materialIndex];
                                        s && s.visible && h.push(t, e, s, n, z.z, a);
                                    }
                                } else i.visible && h.push(t, e, i, n, z.z, null);
                            }
                        const i = t.children;
                        for (let t = 0, o = i.length; t < o; t++) wt(i[t], e, n, r);
                    }
                    function St(t, e, n) {
                        const r = !0 === e.isScene ? e.overrideMaterial : null;
                        if (n.isArrayCamera) {
                            const i = n.cameras;
                            for (let n = 0, o = i.length; n < o; n++) {
                                const o = i[n];
                                W.viewport(w.copy(o.viewport)), d.setupLightsView(o);
                                for (let n = 0, i = t.length; n < i; n++) {
                                    const i = t[n],
                                        a = i.object,
                                        s = i.geometry,
                                        l = null === r ? i.material : r,
                                        c = i.group;
                                    a.layers.test(o.layers) && Mt(a, e, o, s, l, c);
                                }
                            }
                        } else
                            for (let i = 0, o = t.length; i < o; i++) {
                                const o = t[i];
                                Mt(o.object, e, n, o.geometry, null === r ? o.material : r, o.group);
                            }
                    }
                    function Mt(t, e, n, r, i, o) {
                        if ((t.onBeforeRender(m, e, n, r, i, o), t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse, t.matrixWorld), t.normalMatrix.getNormalMatrix(t.modelViewMatrix), t.isImmediateRenderObject)) {
                            const r = At(n, e, i, t);
                            W.setMaterial(i),
                                ut.reset(),
                                (function (t, e) {
                                    t.render(function (t) {
                                        m.renderBufferImmediate(t, e);
                                    });
                                })(t, r);
                        } else
                            !0 === i.transparent && 2 === i.side
                                ? ((i.side = 1), (i.needsUpdate = !0), m.renderBufferDirect(n, e, r, i, t, o), (i.side = 0), (i.needsUpdate = !0), m.renderBufferDirect(n, e, r, i, t, o), (i.side = 2))
                                : m.renderBufferDirect(n, e, r, i, t, o);
                        t.onAfterRender(m, e, n, r, i, o);
                    }
                    function Tt(t, e, n) {
                        !0 !== e.isScene && (e = B);
                        const r = q.get(t),
                            i = d.state.lights,
                            o = d.state.shadowsArray,
                            a = i.state.version,
                            s = K.getParameters(t, i.state, o, e, n),
                            l = K.getProgramCacheKey(s);
                        let c = r.programs;
                        (r.environment = t.isMeshStandardMaterial ? e.environment : null),
                            (r.fog = e.fog),
                            (r.envMap = (t.isMeshStandardMaterial ? Z : Y).get(t.envMap || r.environment)),
                        void 0 === c && (t.addEventListener("dispose", vt), (c = new Map()), (r.programs = c));
                        let u = c.get(l);
                        if (void 0 !== u) {
                            if (r.currentProgram === u && r.lightsStateVersion === a) return Et(t, s), u;
                        } else (s.uniforms = K.getUniforms(t)), t.onBuild(s, m), t.onBeforeCompile(s, m), (u = K.acquireProgram(s, l)), c.set(l, u), (r.uniforms = s.uniforms);
                        const h = r.uniforms;
                        ((t.isShaderMaterial || t.isRawShaderMaterial) && !0 !== t.clipping) || (h.clippingPlanes = rt.uniform),
                            Et(t, s),
                            (r.needsLights = (function (t) {
                                return t.isMeshLambertMaterial || t.isMeshToonMaterial || t.isMeshPhongMaterial || t.isMeshStandardMaterial || t.isShadowMaterial || (t.isShaderMaterial && !0 === t.lights);
                            })(t)),
                            (r.lightsStateVersion = a),
                        r.needsLights &&
                        ((h.ambientLightColor.value = i.state.ambient),
                            (h.lightProbe.value = i.state.probe),
                            (h.directionalLights.value = i.state.directional),
                            (h.directionalLightShadows.value = i.state.directionalShadow),
                            (h.spotLights.value = i.state.spot),
                            (h.spotLightShadows.value = i.state.spotShadow),
                            (h.rectAreaLights.value = i.state.rectArea),
                            (h.ltc_1.value = i.state.rectAreaLTC1),
                            (h.ltc_2.value = i.state.rectAreaLTC2),
                            (h.pointLights.value = i.state.point),
                            (h.pointLightShadows.value = i.state.pointShadow),
                            (h.hemisphereLights.value = i.state.hemi),
                            (h.directionalShadowMap.value = i.state.directionalShadowMap),
                            (h.directionalShadowMatrix.value = i.state.directionalShadowMatrix),
                            (h.spotShadowMap.value = i.state.spotShadowMap),
                            (h.spotShadowMatrix.value = i.state.spotShadowMatrix),
                            (h.pointShadowMap.value = i.state.pointShadowMap),
                            (h.pointShadowMatrix.value = i.state.pointShadowMatrix));
                        const f = u.getUniforms(),
                            p = ic.seqWithValue(f.seq, h);
                        return (r.currentProgram = u), (r.uniformsList = p), u;
                    }
                    function Et(t, e) {
                        const n = q.get(t);
                        (n.outputEncoding = e.outputEncoding),
                            (n.instancing = e.instancing),
                            (n.skinning = e.skinning),
                            (n.morphTargets = e.morphTargets),
                            (n.morphNormals = e.morphNormals),
                            (n.numClippingPlanes = e.numClippingPlanes),
                            (n.numIntersection = e.numClipIntersection),
                            (n.vertexAlphas = e.vertexAlphas),
                            (n.vertexTangents = e.vertexTangents);
                    }
                    function At(t, e, n, r) {
                        !0 !== e.isScene && (e = B), X.resetTextureUnits();
                        const i = e.fog,
                            o = n.isMeshStandardMaterial ? e.environment : null,
                            a = null === x ? m.outputEncoding : x.texture.encoding,
                            s = (n.isMeshStandardMaterial ? Z : Y).get(n.envMap || o),
                            l = !0 === n.vertexColors && !!r.geometry && !!r.geometry.attributes.color && 4 === r.geometry.attributes.color.itemSize,
                            c = !!r.geometry && !!r.geometry.attributes.tangent,
                            u = !!r.geometry && !!r.geometry.morphAttributes.position,
                            h = !!r.geometry && !!r.geometry.morphAttributes.normal,
                            f = q.get(n),
                            p = d.state.lights;
                        if (!0 === k && (!0 === U || t !== b)) {
                            const e = t === b && n.id === _;
                            rt.setState(n, t, e);
                        }
                        let g = !1;
                        n.version === f.__version
                            ? (f.needsLights && f.lightsStateVersion !== p.state.version) || f.outputEncoding !== a || (r.isInstancedMesh && !1 === f.instancing)
                                ? (g = !0)
                                : r.isInstancedMesh || !0 !== f.instancing
                                    ? r.isSkinnedMesh && !1 === f.skinning
                                        ? (g = !0)
                                        : r.isSkinnedMesh || !0 !== f.skinning
                                            ? f.envMap !== s || (n.fog && f.fog !== i)
                                                ? (g = !0)
                                                : void 0 === f.numClippingPlanes || (f.numClippingPlanes === rt.numPlanes && f.numIntersection === rt.numIntersection)
                                                    ? (f.vertexAlphas !== l || f.vertexTangents !== c || f.morphTargets !== u || f.morphNormals !== h) && (g = !0)
                                                    : (g = !0)
                                            : (g = !0)
                                    : (g = !0)
                            : ((g = !0), (f.__version = n.version));
                        let v = f.currentProgram;
                        !0 === g && (v = Tt(n, e, r));
                        let y = !1,
                            w = !1,
                            S = !1;
                        const M = v.getUniforms(),
                            T = f.uniforms;
                        if ((W.useProgram(v.program) && ((y = !0), (w = !0), (S = !0)), n.id !== _ && ((_ = n.id), (w = !0)), y || b !== t)) {
                            if (
                                (M.setValue(ht, "projectionMatrix", t.projectionMatrix),
                                V.logarithmicDepthBuffer && M.setValue(ht, "logDepthBufFC", 2 / (Math.log(t.far + 1) / Math.LN2)),
                                b !== t && ((b = t), (w = !0), (S = !0)),
                                n.isShaderMaterial || n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshStandardMaterial || n.envMap)
                            ) {
                                const e = M.map.cameraPosition;
                                void 0 !== e && e.setValue(ht, z.setFromMatrixPosition(t.matrixWorld));
                            }
                            (n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshLambertMaterial || n.isMeshBasicMaterial || n.isMeshStandardMaterial || n.isShaderMaterial) &&
                            M.setValue(ht, "isOrthographic", !0 === t.isOrthographicCamera),
                            (n.isMeshPhongMaterial || n.isMeshToonMaterial || n.isMeshLambertMaterial || n.isMeshBasicMaterial || n.isMeshStandardMaterial || n.isShaderMaterial || n.isShadowMaterial || r.isSkinnedMesh) &&
                            M.setValue(ht, "viewMatrix", t.matrixWorldInverse);
                        }
                        if (r.isSkinnedMesh) {
                            M.setOptional(ht, r, "bindMatrix"), M.setOptional(ht, r, "bindMatrixInverse");
                            const t = r.skeleton;
                            t &&
                            (V.floatVertexTextures
                                ? (null === t.boneTexture && t.computeBoneTexture(), M.setValue(ht, "boneTexture", t.boneTexture, X), M.setValue(ht, "boneTextureSize", t.boneTextureSize))
                                : M.setOptional(ht, t, "boneMatrices"));
                        }
                        var L, C;
                        return (
                            (w || f.receiveShadow !== r.receiveShadow) && ((f.receiveShadow = r.receiveShadow), M.setValue(ht, "receiveShadow", r.receiveShadow)),
                            w &&
                            (M.setValue(ht, "toneMappingExposure", m.toneMappingExposure),
                            f.needsLights &&
                            ((C = S),
                                ((L = T).ambientLightColor.needsUpdate = C),
                                (L.lightProbe.needsUpdate = C),
                                (L.directionalLights.needsUpdate = C),
                                (L.directionalLightShadows.needsUpdate = C),
                                (L.pointLights.needsUpdate = C),
                                (L.pointLightShadows.needsUpdate = C),
                                (L.spotLights.needsUpdate = C),
                                (L.spotLightShadows.needsUpdate = C),
                                (L.rectAreaLights.needsUpdate = C),
                                (L.hemisphereLights.needsUpdate = C)),
                            i && n.fog && tt.refreshFogUniforms(T, i),
                                tt.refreshMaterialUniforms(T, n, A, E, F),
                                ic.upload(ht, f.uniformsList, T, X)),
                            n.isShaderMaterial && !0 === n.uniformsNeedUpdate && (ic.upload(ht, f.uniformsList, T, X), (n.uniformsNeedUpdate = !1)),
                            n.isSpriteMaterial && M.setValue(ht, "center", r.center),
                                M.setValue(ht, "modelViewMatrix", r.modelViewMatrix),
                                M.setValue(ht, "normalMatrix", r.normalMatrix),
                                M.setValue(ht, "modelMatrix", r.matrixWorld),
                                v
                        );
                    }
                    bt.setAnimationLoop(function (t) {
                        yt && yt(t);
                    }),
                    "undefined" != typeof window && bt.setContext(window),
                        (this.setAnimationLoop = function (t) {
                            (yt = t), pt.setAnimationLoop(t), null === t ? bt.stop() : bt.start();
                        }),
                        pt.addEventListener("sessionstart", xt),
                        pt.addEventListener("sessionend", _t),
                        (this.render = function (t, e) {
                            if (void 0 !== e && !0 !== e.isCamera) return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
                            if (!0 === g) return;
                            !0 === t.autoUpdate && t.updateMatrixWorld(),
                            null === e.parent && e.updateMatrixWorld(),
                            !0 === pt.enabled && !0 === pt.isPresenting && (!0 === pt.cameraAutoUpdate && pt.updateCamera(e), (e = pt.getCamera())),
                            !0 === t.isScene && t.onBeforeRender(m, t, e, x),
                                (d = nt.get(t, p.length)),
                                d.init(),
                                p.push(d),
                                N.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
                                D.setFromProjectionMatrix(N),
                                (U = this.localClippingEnabled),
                                (k = rt.init(this.clippingPlanes, U, e)),
                                (h = et.get(t, f.length)),
                                h.init(),
                                f.push(h),
                                wt(t, e, 0, m.sortObjects),
                                h.finish(),
                            !0 === m.sortObjects && h.sort(L, C),
                            !0 === k && rt.beginShadows();
                            const n = d.state.shadowsArray;
                            it.render(n, t, e), d.setupLights(), d.setupLightsView(e), !0 === k && rt.endShadows(), !0 === this.info.autoReset && this.info.reset(), ot.render(h, t);
                            const r = h.opaque,
                                i = h.transmissive,
                                o = h.transparent;
                            r.length > 0 && St(r, t, e),
                            i.length > 0 &&
                            (function (t, e, n, r) {
                                if (null === F) {
                                    const t = !0 === a && !0 === V.isWebGL2;
                                    F = new (t ? ki : Di)(1024, 1024, { generateMipmaps: !0, type: null !== ct.convert(qr) ? qr : Hr, minFilter: Gr, magFilter: Fr, wrapS: kr, wrapT: kr });
                                }
                                const i = m.getRenderTarget();
                                m.setRenderTarget(F), m.clear();
                                const o = m.toneMapping;
                                (m.toneMapping = 0), St(t, n, r), (m.toneMapping = o), X.updateMultisampleRenderTarget(F), X.updateRenderTargetMipmap(F), m.setRenderTarget(i), St(e, n, r);
                            })(r, i, t, e),
                            o.length > 0 && St(o, t, e),
                            null !== x && (X.updateMultisampleRenderTarget(x), X.updateRenderTargetMipmap(x)),
                            !0 === t.isScene && t.onAfterRender(m, t, e),
                                W.buffers.depth.setTest(!0),
                                W.buffers.depth.setMask(!0),
                                W.buffers.color.setMask(!0),
                                W.setPolygonOffset(!1),
                                ut.resetDefaultState(),
                                (_ = -1),
                                (b = null),
                                p.pop(),
                                (d = p.length > 0 ? p[p.length - 1] : null),
                                f.pop(),
                                (h = f.length > 0 ? f[f.length - 1] : null);
                        }),
                        (this.getActiveCubeFace = function () {
                            return v;
                        }),
                        (this.getActiveMipmapLevel = function () {
                            return y;
                        }),
                        (this.getRenderTarget = function () {
                            return x;
                        }),
                        (this.setRenderTarget = function (t, e = 0, n = 0) {
                            (x = t), (v = e), (y = n), t && void 0 === q.get(t).__webglFramebuffer && X.setupRenderTarget(t);
                            let r = null,
                                i = !1,
                                o = !1;
                            if (t) {
                                const n = t.texture;
                                (n.isDataTexture3D || n.isDataTexture2DArray) && (o = !0);
                                const a = q.get(t).__webglFramebuffer;
                                t.isWebGLCubeRenderTarget ? ((r = a[e]), (i = !0)) : (r = t.isWebGLMultisampleRenderTarget ? q.get(t).__webglMultisampledFramebuffer : a), w.copy(t.viewport), S.copy(t.scissor), (M = t.scissorTest);
                            } else w.copy(R).multiplyScalar(A).floor(), S.copy(P).multiplyScalar(A).floor(), (M = I);
                            if (W.bindFramebuffer(36160, r) && V.drawBuffers) {
                                let e = !1;
                                if (t)
                                    if (t.isWebGLMultipleRenderTargets) {
                                        const n = t.texture;
                                        if (O.length !== n.length || 36064 !== O[0]) {
                                            for (let t = 0, e = n.length; t < e; t++) O[t] = 36064 + t;
                                            (O.length = n.length), (e = !0);
                                        }
                                    } else (1 === O.length && 36064 === O[0]) || ((O[0] = 36064), (O.length = 1), (e = !0));
                                else (1 === O.length && 1029 === O[0]) || ((O[0] = 1029), (O.length = 1), (e = !0));
                                e && (V.isWebGL2 ? ht.drawBuffers(O) : H.get("WEBGL_draw_buffers").drawBuffersWEBGL(O));
                            }
                            if ((W.viewport(w), W.scissor(S), W.setScissorTest(M), i)) {
                                const r = q.get(t.texture);
                                ht.framebufferTexture2D(36160, 36064, 34069 + e, r.__webglTexture, n);
                            } else if (o) {
                                const r = q.get(t.texture),
                                    i = e || 0;
                                ht.framebufferTextureLayer(36160, 36064, r.__webglTexture, n || 0, i);
                            }
                        }),
                        (this.readRenderTargetPixels = function (t, e, n, r, i, o, a) {
                            if (!t || !t.isWebGLRenderTarget) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
                            let s = q.get(t).__webglFramebuffer;
                            if ((t.isWebGLCubeRenderTarget && void 0 !== a && (s = s[a]), s)) {
                                W.bindFramebuffer(36160, s);
                                try {
                                    const a = t.texture,
                                        s = a.format,
                                        l = a.type;
                                    if (s !== Zr && ct.convert(s) !== ht.getParameter(35739)) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                                    const c = l === qr && (H.has("EXT_color_buffer_half_float") || (V.isWebGL2 && H.has("EXT_color_buffer_float")));
                                    if (!(l === Hr || ct.convert(l) === ht.getParameter(35738) || (l === jr && (V.isWebGL2 || H.has("OES_texture_float") || H.has("WEBGL_color_buffer_float"))) || c))
                                        return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                                    36053 === ht.checkFramebufferStatus(36160)
                                        ? e >= 0 && e <= t.width - r && n >= 0 && n <= t.height - i && ht.readPixels(e, n, r, i, ct.convert(s), ct.convert(l), o)
                                        : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
                                } finally {
                                    const t = null !== x ? q.get(x).__webglFramebuffer : null;
                                    W.bindFramebuffer(36160, t);
                                }
                            }
                        }),
                        (this.copyFramebufferToTexture = function (t, e, n = 0) {
                            const r = Math.pow(2, -n),
                                i = Math.floor(e.image.width * r),
                                o = Math.floor(e.image.height * r);
                            let a = ct.convert(e.format);
                            V.isWebGL2 && (6407 === a && (a = 32849), 6408 === a && (a = 32856)), X.setTexture2D(e, 0), ht.copyTexImage2D(3553, n, a, t.x, t.y, i, o, 0), W.unbindTexture();
                        }),
                        (this.copyTextureToTexture = function (t, e, n, r = 0) {
                            const i = e.image.width,
                                o = e.image.height,
                                a = ct.convert(n.format),
                                s = ct.convert(n.type);
                            X.setTexture2D(n, 0),
                                ht.pixelStorei(37440, n.flipY),
                                ht.pixelStorei(37441, n.premultiplyAlpha),
                                ht.pixelStorei(3317, n.unpackAlignment),
                                e.isDataTexture
                                    ? ht.texSubImage2D(3553, r, t.x, t.y, i, o, a, s, e.image.data)
                                    : e.isCompressedTexture
                                        ? ht.compressedTexSubImage2D(3553, r, t.x, t.y, e.mipmaps[0].width, e.mipmaps[0].height, a, e.mipmaps[0].data)
                                        : ht.texSubImage2D(3553, r, t.x, t.y, a, s, e.image),
                            0 === r && n.generateMipmaps && ht.generateMipmap(3553),
                                W.unbindTexture();
                        }),
                        (this.copyTextureToTexture3D = function (t, e, n, r, i = 0) {
                            if (m.isWebGL1Renderer) return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
                            const o = t.max.x - t.min.x + 1,
                                a = t.max.y - t.min.y + 1,
                                s = t.max.z - t.min.z + 1,
                                l = ct.convert(r.format),
                                c = ct.convert(r.type);
                            let u;
                            if (r.isDataTexture3D) X.setTexture3D(r, 0), (u = 32879);
                            else {
                                if (!r.isDataTexture2DArray) return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
                                X.setTexture2DArray(r, 0), (u = 35866);
                            }
                            ht.pixelStorei(37440, r.flipY), ht.pixelStorei(37441, r.premultiplyAlpha), ht.pixelStorei(3317, r.unpackAlignment);
                            const h = ht.getParameter(3314),
                                d = ht.getParameter(32878),
                                f = ht.getParameter(3316),
                                p = ht.getParameter(3315),
                                g = ht.getParameter(32877),
                                v = n.isCompressedTexture ? n.mipmaps[0] : n.image;
                            ht.pixelStorei(3314, v.width),
                                ht.pixelStorei(32878, v.height),
                                ht.pixelStorei(3316, t.min.x),
                                ht.pixelStorei(3315, t.min.y),
                                ht.pixelStorei(32877, t.min.z),
                                n.isDataTexture || n.isDataTexture3D
                                    ? ht.texSubImage3D(u, i, e.x, e.y, e.z, o, a, s, l, c, v.data)
                                    : n.isCompressedTexture
                                        ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."), ht.compressedTexSubImage3D(u, i, e.x, e.y, e.z, o, a, s, l, v.data))
                                        : ht.texSubImage3D(u, i, e.x, e.y, e.z, o, a, s, l, c, v),
                                ht.pixelStorei(3314, h),
                                ht.pixelStorei(32878, d),
                                ht.pixelStorei(3316, f),
                                ht.pixelStorei(3315, p),
                                ht.pixelStorei(32877, g),
                            0 === i && r.generateMipmaps && ht.generateMipmap(u),
                                W.unbindTexture();
                        }),
                        (this.initTexture = function (t) {
                            X.setTexture2D(t, 0), W.unbindTexture();
                        }),
                        (this.resetState = function () {
                            (v = 0), (y = 0), (x = null), W.reset(), ut.reset();
                        }),
                    "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
                }
                (class extends Zc {}.prototype.isWebGL1Renderer = !0);
                class Jc {
                    constructor(t, e = 25e-5) {
                        (this.name = ""), (this.color = new aa(t)), (this.density = e);
                    }
                    clone() {
                        return new Jc(this.color, this.density);
                    }
                    toJSON() {
                        return { type: "FogExp2", color: this.color.getHex(), density: this.density };
                    }
                }
                Jc.prototype.isFogExp2 = !0;
                class $c {
                    constructor(t, e = 1, n = 1e3) {
                        (this.name = ""), (this.color = new aa(t)), (this.near = e), (this.far = n);
                    }
                    clone() {
                        return new $c(this.color, this.near, this.far);
                    }
                    toJSON() {
                        return { type: "Fog", color: this.color.getHex(), near: this.near, far: this.far };
                    }
                }
                $c.prototype.isFog = !0;
                class Qc extends Bo {
                    constructor() {
                        super(),
                            (this.type = "Scene"),
                            (this.background = null),
                            (this.environment = null),
                            (this.fog = null),
                            (this.overrideMaterial = null),
                            (this.autoUpdate = !0),
                        "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
                    }
                    copy(t, e) {
                        return (
                            super.copy(t, e),
                            null !== t.background && (this.background = t.background.clone()),
                            null !== t.environment && (this.environment = t.environment.clone()),
                            null !== t.fog && (this.fog = t.fog.clone()),
                            null !== t.overrideMaterial && (this.overrideMaterial = t.overrideMaterial.clone()),
                                (this.autoUpdate = t.autoUpdate),
                                (this.matrixAutoUpdate = t.matrixAutoUpdate),
                                this
                        );
                    }
                    toJSON(t) {
                        const e = super.toJSON(t);
                        return null !== this.fog && (e.object.fog = this.fog.toJSON()), e;
                    }
                }
                Qc.prototype.isScene = !0;
                class Kc {
                    constructor(t, e) {
                        (this.array = t), (this.stride = e), (this.count = void 0 !== t ? t.length / e : 0), (this.usage = ui), (this.updateRange = { offset: 0, count: -1 }), (this.version = 0), (this.uuid = yi());
                    }
                    onUploadCallback() {}
                    set needsUpdate(t) {
                        !0 === t && this.version++;
                    }
                    setUsage(t) {
                        return (this.usage = t), this;
                    }
                    copy(t) {
                        return (this.array = new t.array.constructor(t.array)), (this.count = t.count), (this.stride = t.stride), (this.usage = t.usage), this;
                    }
                    copyAt(t, e, n) {
                        (t *= this.stride), (n *= e.stride);
                        for (let r = 0, i = this.stride; r < i; r++) this.array[t + r] = e.array[n + r];
                        return this;
                    }
                    set(t, e = 0) {
                        return this.array.set(t, e), this;
                    }
                    clone(t) {
                        void 0 === t.arrayBuffers && (t.arrayBuffers = {}),
                        void 0 === this.array.buffer._uuid && (this.array.buffer._uuid = yi()),
                        void 0 === t.arrayBuffers[this.array.buffer._uuid] && (t.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
                        const e = new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),
                            n = new this.constructor(e, this.stride);
                        return n.setUsage(this.usage), n;
                    }
                    onUpload(t) {
                        return (this.onUploadCallback = t), this;
                    }
                    toJSON(t) {
                        return (
                            void 0 === t.arrayBuffers && (t.arrayBuffers = {}),
                            void 0 === this.array.buffer._uuid && (this.array.buffer._uuid = yi()),
                            void 0 === t.arrayBuffers[this.array.buffer._uuid] && (t.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer))),
                                { uuid: this.uuid, buffer: this.array.buffer._uuid, type: this.array.constructor.name, stride: this.stride }
                        );
                    }
                }
                Kc.prototype.isInterleavedBuffer = !0;
                const tu = new Fi();
                class eu {
                    constructor(t, e, n, r = !1) {
                        (this.name = ""), (this.data = t), (this.itemSize = e), (this.offset = n), (this.normalized = !0 === r);
                    }
                    get count() {
                        return this.data.count;
                    }
                    get array() {
                        return this.data.array;
                    }
                    set needsUpdate(t) {
                        this.data.needsUpdate = t;
                    }
                    applyMatrix4(t) {
                        for (let e = 0, n = this.data.count; e < n; e++) (tu.x = this.getX(e)), (tu.y = this.getY(e)), (tu.z = this.getZ(e)), tu.applyMatrix4(t), this.setXYZ(e, tu.x, tu.y, tu.z);
                        return this;
                    }
                    applyNormalMatrix(t) {
                        for (let e = 0, n = this.count; e < n; e++) (tu.x = this.getX(e)), (tu.y = this.getY(e)), (tu.z = this.getZ(e)), tu.applyNormalMatrix(t), this.setXYZ(e, tu.x, tu.y, tu.z);
                        return this;
                    }
                    transformDirection(t) {
                        for (let e = 0, n = this.count; e < n; e++) (tu.x = this.getX(e)), (tu.y = this.getY(e)), (tu.z = this.getZ(e)), tu.transformDirection(t), this.setXYZ(e, tu.x, tu.y, tu.z);
                        return this;
                    }
                    setX(t, e) {
                        return (this.data.array[t * this.data.stride + this.offset] = e), this;
                    }
                    setY(t, e) {
                        return (this.data.array[t * this.data.stride + this.offset + 1] = e), this;
                    }
                    setZ(t, e) {
                        return (this.data.array[t * this.data.stride + this.offset + 2] = e), this;
                    }
                    setW(t, e) {
                        return (this.data.array[t * this.data.stride + this.offset + 3] = e), this;
                    }
                    getX(t) {
                        return this.data.array[t * this.data.stride + this.offset];
                    }
                    getY(t) {
                        return this.data.array[t * this.data.stride + this.offset + 1];
                    }
                    getZ(t) {
                        return this.data.array[t * this.data.stride + this.offset + 2];
                    }
                    getW(t) {
                        return this.data.array[t * this.data.stride + this.offset + 3];
                    }
                    setXY(t, e, n) {
                        return (t = t * this.data.stride + this.offset), (this.data.array[t + 0] = e), (this.data.array[t + 1] = n), this;
                    }
                    setXYZ(t, e, n, r) {
                        return (t = t * this.data.stride + this.offset), (this.data.array[t + 0] = e), (this.data.array[t + 1] = n), (this.data.array[t + 2] = r), this;
                    }
                    setXYZW(t, e, n, r, i) {
                        return (t = t * this.data.stride + this.offset), (this.data.array[t + 0] = e), (this.data.array[t + 1] = n), (this.data.array[t + 2] = r), (this.data.array[t + 3] = i), this;
                    }
                    clone(t) {
                        if (void 0 === t) {
                            console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");
                            const t = [];
                            for (let e = 0; e < this.count; e++) {
                                const n = e * this.data.stride + this.offset;
                                for (let e = 0; e < this.itemSize; e++) t.push(this.data.array[n + e]);
                            }
                            return new ua(new this.array.constructor(t), this.itemSize, this.normalized);
                        }
                        return (
                            void 0 === t.interleavedBuffers && (t.interleavedBuffers = {}),
                            void 0 === t.interleavedBuffers[this.data.uuid] && (t.interleavedBuffers[this.data.uuid] = this.data.clone(t)),
                                new eu(t.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized)
                        );
                    }
                    toJSON(t) {
                        if (void 0 === t) {
                            console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");
                            const t = [];
                            for (let e = 0; e < this.count; e++) {
                                const n = e * this.data.stride + this.offset;
                                for (let e = 0; e < this.itemSize; e++) t.push(this.data.array[n + e]);
                            }
                            return { itemSize: this.itemSize, type: this.array.constructor.name, array: t, normalized: this.normalized };
                        }
                        return (
                            void 0 === t.interleavedBuffers && (t.interleavedBuffers = {}),
                            void 0 === t.interleavedBuffers[this.data.uuid] && (t.interleavedBuffers[this.data.uuid] = this.data.toJSON(t)),
                                { isInterleavedBufferAttribute: !0, itemSize: this.itemSize, data: this.data.uuid, offset: this.offset, normalized: this.normalized }
                        );
                    }
                }
                eu.prototype.isInterleavedBufferAttribute = !0;
                class nu extends Ko {
                    constructor(t) {
                        super(), (this.type = "SpriteMaterial"), (this.color = new aa(16777215)), (this.map = null), (this.alphaMap = null), (this.rotation = 0), (this.sizeAttenuation = !0), (this.transparent = !0), this.setValues(t);
                    }
                    copy(t) {
                        return super.copy(t), this.color.copy(t.color), (this.map = t.map), (this.alphaMap = t.alphaMap), (this.rotation = t.rotation), (this.sizeAttenuation = t.sizeAttenuation), this;
                    }
                }
                let ru;
                nu.prototype.isSpriteMaterial = !0;
                const iu = new Fi(),
                    ou = new Fi(),
                    au = new Fi(),
                    su = new Ei(),
                    lu = new Ei(),
                    cu = new mo(),
                    uu = new Fi(),
                    hu = new Fi(),
                    du = new Fi(),
                    fu = new Ei(),
                    pu = new Ei(),
                    mu = new Ei();
                class gu extends Bo {
                    constructor(t) {
                        if ((super(), (this.type = "Sprite"), void 0 === ru)) {
                            ru = new wa();
                            const t = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]),
                                e = new Kc(t, 5);
                            ru.setIndex([0, 1, 2, 0, 2, 3]), ru.setAttribute("position", new eu(e, 3, 0, !1)), ru.setAttribute("uv", new eu(e, 2, 3, !1));
                        }
                        (this.geometry = ru), (this.material = void 0 !== t ? t : new nu()), (this.center = new Ei(0.5, 0.5));
                    }
                    raycast(t, e) {
                        null === t.camera && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),
                            ou.setFromMatrixScale(this.matrixWorld),
                            cu.copy(t.camera.matrixWorld),
                            this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse, this.matrixWorld),
                            au.setFromMatrixPosition(this.modelViewMatrix),
                        t.camera.isPerspectiveCamera && !1 === this.material.sizeAttenuation && ou.multiplyScalar(-au.z);
                        const n = this.material.rotation;
                        let r, i;
                        0 !== n && ((i = Math.cos(n)), (r = Math.sin(n)));
                        const o = this.center;
                        vu(uu.set(-0.5, -0.5, 0), au, o, ou, r, i), vu(hu.set(0.5, -0.5, 0), au, o, ou, r, i), vu(du.set(0.5, 0.5, 0), au, o, ou, r, i), fu.set(0, 0), pu.set(1, 0), mu.set(1, 1);
                        let a = t.ray.intersectTriangle(uu, hu, du, !1, iu);
                        if (null === a && (vu(hu.set(-0.5, 0.5, 0), au, o, ou, r, i), pu.set(0, 1), (a = t.ray.intersectTriangle(uu, du, hu, !1, iu)), null === a)) return;
                        const s = t.ray.origin.distanceTo(iu);
                        s < t.near || s > t.far || e.push({ distance: s, point: iu.clone(), uv: $o.getUV(iu, uu, hu, du, fu, pu, mu, new Ei()), face: null, object: this });
                    }
                    copy(t) {
                        return super.copy(t), void 0 !== t.center && this.center.copy(t.center), (this.material = t.material), this;
                    }
                }
                function vu(t, e, n, r, i, o) {
                    su.subVectors(t, n).addScalar(0.5).multiply(r), void 0 !== i ? ((lu.x = o * su.x - i * su.y), (lu.y = i * su.x + o * su.y)) : lu.copy(su), t.copy(e), (t.x += lu.x), (t.y += lu.y), t.applyMatrix4(cu);
                }
                gu.prototype.isSprite = !0;
                const yu = new Fi(),
                    xu = new Oi(),
                    _u = new Oi(),
                    bu = new Fi(),
                    wu = new mo();
                class Su extends Ba {
                    constructor(t, e) {
                        super(t, e), (this.type = "SkinnedMesh"), (this.bindMode = "attached"), (this.bindMatrix = new mo()), (this.bindMatrixInverse = new mo());
                    }
                    copy(t) {
                        return super.copy(t), (this.bindMode = t.bindMode), this.bindMatrix.copy(t.bindMatrix), this.bindMatrixInverse.copy(t.bindMatrixInverse), (this.skeleton = t.skeleton), this;
                    }
                    bind(t, e) {
                        (this.skeleton = t), void 0 === e && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), (e = this.matrixWorld)), this.bindMatrix.copy(e), this.bindMatrixInverse.copy(e).invert();
                    }
                    pose() {
                        this.skeleton.pose();
                    }
                    normalizeSkinWeights() {
                        const t = new Oi(),
                            e = this.geometry.attributes.skinWeight;
                        for (let n = 0, r = e.count; n < r; n++) {
                            (t.x = e.getX(n)), (t.y = e.getY(n)), (t.z = e.getZ(n)), (t.w = e.getW(n));
                            const r = 1 / t.manhattanLength();
                            r !== 1 / 0 ? t.multiplyScalar(r) : t.set(1, 0, 0, 0), e.setXYZW(n, t.x, t.y, t.z, t.w);
                        }
                    }
                    updateMatrixWorld(t) {
                        super.updateMatrixWorld(t),
                            "attached" === this.bindMode
                                ? this.bindMatrixInverse.copy(this.matrixWorld).invert()
                                : "detached" === this.bindMode
                                    ? this.bindMatrixInverse.copy(this.bindMatrix).invert()
                                    : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
                    }
                    boneTransform(t, e) {
                        const n = this.skeleton,
                            r = this.geometry;
                        xu.fromBufferAttribute(r.attributes.skinIndex, t), _u.fromBufferAttribute(r.attributes.skinWeight, t), yu.fromBufferAttribute(r.attributes.position, t).applyMatrix4(this.bindMatrix), e.set(0, 0, 0);
                        for (let t = 0; t < 4; t++) {
                            const r = _u.getComponent(t);
                            if (0 !== r) {
                                const i = xu.getComponent(t);
                                wu.multiplyMatrices(n.bones[i].matrixWorld, n.boneInverses[i]), e.addScaledVector(bu.copy(yu).applyMatrix4(wu), r);
                            }
                        }
                        return e.applyMatrix4(this.bindMatrixInverse);
                    }
                }
                Su.prototype.isSkinnedMesh = !0;
                class Mu extends Bo {
                    constructor() {
                        super(), (this.type = "Bone");
                    }
                }
                Mu.prototype.isBone = !0;
                class Tu extends Pi {
                    constructor(t = null, e = 1, n = 1, r, i, o, a, s, l = 1003, c = 1003, u, h) {
                        super(null, o, a, s, l, c, r, i, u, h),
                            (this.image = { data: t, width: e, height: n }),
                            (this.magFilter = l),
                            (this.minFilter = c),
                            (this.generateMipmaps = !1),
                            (this.flipY = !1),
                            (this.unpackAlignment = 1),
                            (this.needsUpdate = !0);
                    }
                }
                Tu.prototype.isDataTexture = !0;
                const Eu = new mo(),
                    Au = new mo(),
                    Lu = [],
                    Cu = new Ba();
                class Ru extends Ba {
                    constructor(t, e, n) {
                        super(t, e), (this.instanceMatrix = new ua(new Float32Array(16 * n), 16)), (this.instanceColor = null), (this.count = n), (this.frustumCulled = !1);
                    }
                    copy(t) {
                        return super.copy(t), this.instanceMatrix.copy(t.instanceMatrix), null !== t.instanceColor && (this.instanceColor = t.instanceColor.clone()), (this.count = t.count), this;
                    }
                    getColorAt(t, e) {
                        e.fromArray(this.instanceColor.array, 3 * t);
                    }
                    getMatrixAt(t, e) {
                        e.fromArray(this.instanceMatrix.array, 16 * t);
                    }
                    raycast(t, e) {
                        const n = this.matrixWorld,
                            r = this.count;
                        if (((Cu.geometry = this.geometry), (Cu.material = this.material), void 0 !== Cu.material))
                            for (let i = 0; i < r; i++) {
                                this.getMatrixAt(i, Eu), Au.multiplyMatrices(n, Eu), (Cu.matrixWorld = Au), Cu.raycast(t, Lu);
                                for (let t = 0, n = Lu.length; t < n; t++) {
                                    const n = Lu[t];
                                    (n.instanceId = i), (n.object = this), e.push(n);
                                }
                                Lu.length = 0;
                            }
                    }
                    setColorAt(t, e) {
                        null === this.instanceColor && (this.instanceColor = new ua(new Float32Array(3 * this.instanceMatrix.count), 3)), e.toArray(this.instanceColor.array, 3 * t);
                    }
                    setMatrixAt(t, e) {
                        e.toArray(this.instanceMatrix.array, 16 * t);
                    }
                    updateMorphTargets() {}
                    dispose() {
                        this.dispatchEvent({ type: "dispose" });
                    }
                }
                Ru.prototype.isInstancedMesh = !0;
                class Pu extends Ko {
                    constructor(t) {
                        super(), (this.type = "LineBasicMaterial"), (this.color = new aa(16777215)), (this.linewidth = 1), (this.linecap = "round"), (this.linejoin = "round"), this.setValues(t);
                    }
                    copy(t) {
                        return super.copy(t), this.color.copy(t.color), (this.linewidth = t.linewidth), (this.linecap = t.linecap), (this.linejoin = t.linejoin), this;
                    }
                }
                Pu.prototype.isLineBasicMaterial = !0;
                const Iu = new Fi(),
                    Ou = new Fi(),
                    Du = new mo(),
                    ku = new po(),
                    Uu = new oo();
                class Fu extends Bo {
                    constructor(t = new wa(), e = new Pu()) {
                        super(), (this.type = "Line"), (this.geometry = t), (this.material = e), this.updateMorphTargets();
                    }
                    copy(t) {
                        return super.copy(t), (this.material = t.material), (this.geometry = t.geometry), this;
                    }
                    computeLineDistances() {
                        const t = this.geometry;
                        if (t.isBufferGeometry)
                            if (null === t.index) {
                                const e = t.attributes.position,
                                    n = [0];
                                for (let t = 1, r = e.count; t < r; t++) Iu.fromBufferAttribute(e, t - 1), Ou.fromBufferAttribute(e, t), (n[t] = n[t - 1]), (n[t] += Iu.distanceTo(Ou));
                                t.setAttribute("lineDistance", new fa(n, 1));
                            } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                        else t.isGeometry && console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
                        return this;
                    }
                    raycast(t, e) {
                        const n = this.geometry,
                            r = this.matrixWorld,
                            i = t.params.Line.threshold,
                            o = n.drawRange;
                        if ((null === n.boundingSphere && n.computeBoundingSphere(), Uu.copy(n.boundingSphere), Uu.applyMatrix4(r), (Uu.radius += i), !1 === t.ray.intersectsSphere(Uu))) return;
                        Du.copy(r).invert(), ku.copy(t.ray).applyMatrix4(Du);
                        const a = i / ((this.scale.x + this.scale.y + this.scale.z) / 3),
                            s = a * a,
                            l = new Fi(),
                            c = new Fi(),
                            u = new Fi(),
                            h = new Fi(),
                            d = this.isLineSegments ? 2 : 1;
                        if (n.isBufferGeometry) {
                            const r = n.index,
                                i = n.attributes.position;
                            if (null !== r) {
                                for (let n = Math.max(0, o.start), a = Math.min(r.count, o.start + o.count) - 1; n < a; n += d) {
                                    const o = r.getX(n),
                                        a = r.getX(n + 1);
                                    l.fromBufferAttribute(i, o), c.fromBufferAttribute(i, a);
                                    if (ku.distanceSqToSegment(l, c, h, u) > s) continue;
                                    h.applyMatrix4(this.matrixWorld);
                                    const d = t.ray.origin.distanceTo(h);
                                    d < t.near || d > t.far || e.push({ distance: d, point: u.clone().applyMatrix4(this.matrixWorld), index: n, face: null, faceIndex: null, object: this });
                                }
                            } else {
                                for (let n = Math.max(0, o.start), r = Math.min(i.count, o.start + o.count) - 1; n < r; n += d) {
                                    l.fromBufferAttribute(i, n), c.fromBufferAttribute(i, n + 1);
                                    if (ku.distanceSqToSegment(l, c, h, u) > s) continue;
                                    h.applyMatrix4(this.matrixWorld);
                                    const r = t.ray.origin.distanceTo(h);
                                    r < t.near || r > t.far || e.push({ distance: r, point: u.clone().applyMatrix4(this.matrixWorld), index: n, face: null, faceIndex: null, object: this });
                                }
                            }
                        } else n.isGeometry && console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
                    }
                    updateMorphTargets() {
                        const t = this.geometry;
                        if (t.isBufferGeometry) {
                            const e = t.morphAttributes,
                                n = Object.keys(e);
                            if (n.length > 0) {
                                const t = e[n[0]];
                                if (void 0 !== t) {
                                    (this.morphTargetInfluences = []), (this.morphTargetDictionary = {});
                                    for (let e = 0, n = t.length; e < n; e++) {
                                        const n = t[e].name || String(e);
                                        this.morphTargetInfluences.push(0), (this.morphTargetDictionary[n] = e);
                                    }
                                }
                            }
                        } else {
                            const e = t.morphTargets;
                            void 0 !== e && e.length > 0 && console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
                        }
                    }
                }
                Fu.prototype.isLine = !0;
                const Nu = new Fi(),
                    zu = new Fi();
                class Bu extends Fu {
                    constructor(t, e) {
                        super(t, e), (this.type = "LineSegments");
                    }
                    computeLineDistances() {
                        const t = this.geometry;
                        if (t.isBufferGeometry)
                            if (null === t.index) {
                                const e = t.attributes.position,
                                    n = [];
                                for (let t = 0, r = e.count; t < r; t += 2) Nu.fromBufferAttribute(e, t), zu.fromBufferAttribute(e, t + 1), (n[t] = 0 === t ? 0 : n[t - 1]), (n[t + 1] = n[t] + Nu.distanceTo(zu));
                                t.setAttribute("lineDistance", new fa(n, 1));
                            } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                        else t.isGeometry && console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
                        return this;
                    }
                }
                Bu.prototype.isLineSegments = !0;
                class Gu extends Fu {
                    constructor(t, e) {
                        super(t, e), (this.type = "LineLoop");
                    }
                }
                Gu.prototype.isLineLoop = !0;
                class Hu extends Ko {
                    constructor(t) {
                        super(), (this.type = "PointsMaterial"), (this.color = new aa(16777215)), (this.map = null), (this.alphaMap = null), (this.size = 1), (this.sizeAttenuation = !0), this.setValues(t);
                    }
                    copy(t) {
                        return super.copy(t), this.color.copy(t.color), (this.map = t.map), (this.alphaMap = t.alphaMap), (this.size = t.size), (this.sizeAttenuation = t.sizeAttenuation), this;
                    }
                }
                Hu.prototype.isPointsMaterial = !0;
                const Vu = new mo(),
                    Wu = new po(),
                    ju = new oo(),
                    qu = new Fi();
                class Xu extends Bo {
                    constructor(t = new wa(), e = new Hu()) {
                        super(), (this.type = "Points"), (this.geometry = t), (this.material = e), this.updateMorphTargets();
                    }
                    copy(t) {
                        return super.copy(t), (this.material = t.material), (this.geometry = t.geometry), this;
                    }
                    raycast(t, e) {
                        const n = this.geometry,
                            r = this.matrixWorld,
                            i = t.params.Points.threshold,
                            o = n.drawRange;
                        if ((null === n.boundingSphere && n.computeBoundingSphere(), ju.copy(n.boundingSphere), ju.applyMatrix4(r), (ju.radius += i), !1 === t.ray.intersectsSphere(ju))) return;
                        Vu.copy(r).invert(), Wu.copy(t.ray).applyMatrix4(Vu);
                        const a = i / ((this.scale.x + this.scale.y + this.scale.z) / 3),
                            s = a * a;
                        if (n.isBufferGeometry) {
                            const i = n.index,
                                a = n.attributes.position;
                            if (null !== i) {
                                for (let n = Math.max(0, o.start), l = Math.min(i.count, o.start + o.count); n < l; n++) {
                                    const o = i.getX(n);
                                    qu.fromBufferAttribute(a, o), Yu(qu, o, s, r, t, e, this);
                                }
                            } else {
                                for (let n = Math.max(0, o.start), i = Math.min(a.count, o.start + o.count); n < i; n++) qu.fromBufferAttribute(a, n), Yu(qu, n, s, r, t, e, this);
                            }
                        } else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
                    }
                    updateMorphTargets() {
                        const t = this.geometry;
                        if (t.isBufferGeometry) {
                            const e = t.morphAttributes,
                                n = Object.keys(e);
                            if (n.length > 0) {
                                const t = e[n[0]];
                                if (void 0 !== t) {
                                    (this.morphTargetInfluences = []), (this.morphTargetDictionary = {});
                                    for (let e = 0, n = t.length; e < n; e++) {
                                        const n = t[e].name || String(e);
                                        this.morphTargetInfluences.push(0), (this.morphTargetDictionary[n] = e);
                                    }
                                }
                            }
                        } else {
                            const e = t.morphTargets;
                            void 0 !== e && e.length > 0 && console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
                        }
                    }
                }
                function Yu(t, e, n, r, i, o, a) {
                    const s = Wu.distanceSqToPoint(t);
                    if (s < n) {
                        const n = new Fi();
                        Wu.closestPointToPoint(t, n), n.applyMatrix4(r);
                        const l = i.ray.origin.distanceTo(n);
                        if (l < i.near || l > i.far) return;
                        o.push({ distance: l, distanceToRay: Math.sqrt(s), point: n, index: e, face: null, object: a });
                    }
                }
                Xu.prototype.isPoints = !0;
                class Zu extends Pi {
                    constructor(t, e, n, r, i, o, a, s, l) {
                        super(t, e, n, r, i, o, a, s, l), (this.format = void 0 !== a ? a : Yr), (this.minFilter = void 0 !== o ? o : Br), (this.magFilter = void 0 !== i ? i : Br), (this.generateMipmaps = !1);
                        const c = this;
                        "requestVideoFrameCallback" in t &&
                        t.requestVideoFrameCallback(function e() {
                            (c.needsUpdate = !0), t.requestVideoFrameCallback(e);
                        });
                    }
                    clone() {
                        return new this.constructor(this.image).copy(this);
                    }
                    update() {
                        const t = this.image;
                        !1 === "requestVideoFrameCallback" in t && t.readyState >= t.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
                    }
                }
                Zu.prototype.isVideoTexture = !0;
                class Ju extends Pi {
                    constructor(t, e, n, r, i, o, a, s, l, c, u, h) {
                        super(null, o, a, s, l, c, r, i, u, h), (this.image = { width: e, height: n }), (this.mipmaps = t), (this.flipY = !1), (this.generateMipmaps = !1);
                    }
                }
                Ju.prototype.isCompressedTexture = !0;
                class $u extends Pi {
                    constructor(t, e, n, r, i, o, a, s, l) {
                        super(t, e, n, r, i, o, a, s, l), (this.needsUpdate = !0);
                    }
                }
                $u.prototype.isCanvasTexture = !0;
                (class extends Pi {
                    constructor(t, e, n, r, i, o, a, s, l, c) {
                        if ((c = void 0 !== c ? c : Jr) !== Jr && c !== $r) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
                        void 0 === n && c === Jr && (n = Vr),
                        void 0 === n && c === $r && (n = Xr),
                            super(null, r, i, o, a, s, c, n, l),
                            (this.image = { width: t, height: e }),
                            (this.magFilter = void 0 !== a ? a : Fr),
                            (this.minFilter = void 0 !== s ? s : Fr),
                            (this.flipY = !1),
                            (this.generateMipmaps = !1);
                    }
                }.prototype.isDepthTexture = !0);
                new Fi(), new Fi(), new Fi(), new $o();
                class Qu {
                    constructor() {
                        (this.type = "Curve"), (this.arcLengthDivisions = 200);
                    }
                    getPoint() {
                        return console.warn("THREE.Curve: .getPoint() not implemented."), null;
                    }
                    getPointAt(t, e) {
                        const n = this.getUtoTmapping(t);
                        return this.getPoint(n, e);
                    }
                    getPoints(t = 5) {
                        const e = [];
                        for (let n = 0; n <= t; n++) e.push(this.getPoint(n / t));
                        return e;
                    }
                    getSpacedPoints(t = 5) {
                        const e = [];
                        for (let n = 0; n <= t; n++) e.push(this.getPointAt(n / t));
                        return e;
                    }
                    getLength() {
                        const t = this.getLengths();
                        return t[t.length - 1];
                    }
                    getLengths(t = this.arcLengthDivisions) {
                        if (this.cacheArcLengths && this.cacheArcLengths.length === t + 1 && !this.needsUpdate) return this.cacheArcLengths;
                        this.needsUpdate = !1;
                        const e = [];
                        let n,
                            r = this.getPoint(0),
                            i = 0;
                        e.push(0);
                        for (let o = 1; o <= t; o++) (n = this.getPoint(o / t)), (i += n.distanceTo(r)), e.push(i), (r = n);
                        return (this.cacheArcLengths = e), e;
                    }
                    updateArcLengths() {
                        (this.needsUpdate = !0), this.getLengths();
                    }
                    getUtoTmapping(t, e) {
                        const n = this.getLengths();
                        let r = 0;
                        const i = n.length;
                        let o;
                        o = e || t * n[i - 1];
                        let a,
                            s = 0,
                            l = i - 1;
                        for (; s <= l; )
                            if (((r = Math.floor(s + (l - s) / 2)), (a = n[r] - o), a < 0)) s = r + 1;
                            else {
                                if (!(a > 0)) {
                                    l = r;
                                    break;
                                }
                                l = r - 1;
                            }
                        if (((r = l), n[r] === o)) return r / (i - 1);
                        const c = n[r];
                        return (r + (o - c) / (n[r + 1] - c)) / (i - 1);
                    }
                    getTangent(t, e) {
                        const n = 1e-4;
                        let r = t - n,
                            i = t + n;
                        r < 0 && (r = 0), i > 1 && (i = 1);
                        const o = this.getPoint(r),
                            a = this.getPoint(i),
                            s = e || (o.isVector2 ? new Ei() : new Fi());
                        return s.copy(a).sub(o).normalize(), s;
                    }
                    getTangentAt(t, e) {
                        const n = this.getUtoTmapping(t);
                        return this.getTangent(n, e);
                    }
                    computeFrenetFrames(t, e) {
                        const n = new Fi(),
                            r = [],
                            i = [],
                            o = [],
                            a = new Fi(),
                            s = new mo();
                        for (let e = 0; e <= t; e++) {
                            const n = e / t;
                            (r[e] = this.getTangentAt(n, new Fi())), r[e].normalize();
                        }
                        (i[0] = new Fi()), (o[0] = new Fi());
                        let l = Number.MAX_VALUE;
                        const c = Math.abs(r[0].x),
                            u = Math.abs(r[0].y),
                            h = Math.abs(r[0].z);
                        c <= l && ((l = c), n.set(1, 0, 0)), u <= l && ((l = u), n.set(0, 1, 0)), h <= l && n.set(0, 0, 1), a.crossVectors(r[0], n).normalize(), i[0].crossVectors(r[0], a), o[0].crossVectors(r[0], i[0]);
                        for (let e = 1; e <= t; e++) {
                            if (((i[e] = i[e - 1].clone()), (o[e] = o[e - 1].clone()), a.crossVectors(r[e - 1], r[e]), a.length() > Number.EPSILON)) {
                                a.normalize();
                                const t = Math.acos(xi(r[e - 1].dot(r[e]), -1, 1));
                                i[e].applyMatrix4(s.makeRotationAxis(a, t));
                            }
                            o[e].crossVectors(r[e], i[e]);
                        }
                        if (!0 === e) {
                            let e = Math.acos(xi(i[0].dot(i[t]), -1, 1));
                            (e /= t), r[0].dot(a.crossVectors(i[0], i[t])) > 0 && (e = -e);
                            for (let n = 1; n <= t; n++) i[n].applyMatrix4(s.makeRotationAxis(r[n], e * n)), o[n].crossVectors(r[n], i[n]);
                        }
                        return { tangents: r, normals: i, binormals: o };
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                    copy(t) {
                        return (this.arcLengthDivisions = t.arcLengthDivisions), this;
                    }
                    toJSON() {
                        const t = { metadata: { version: 4.5, type: "Curve", generator: "Curve.toJSON" } };
                        return (t.arcLengthDivisions = this.arcLengthDivisions), (t.type = this.type), t;
                    }
                    fromJSON(t) {
                        return (this.arcLengthDivisions = t.arcLengthDivisions), this;
                    }
                }
                class Ku extends Qu {
                    constructor(t = 0, e = 0, n = 1, r = 1, i = 0, o = 2 * Math.PI, a = !1, s = 0) {
                        super(), (this.type = "EllipseCurve"), (this.aX = t), (this.aY = e), (this.xRadius = n), (this.yRadius = r), (this.aStartAngle = i), (this.aEndAngle = o), (this.aClockwise = a), (this.aRotation = s);
                    }
                    getPoint(t, e) {
                        const n = e || new Ei(),
                            r = 2 * Math.PI;
                        let i = this.aEndAngle - this.aStartAngle;
                        const o = Math.abs(i) < Number.EPSILON;
                        for (; i < 0; ) i += r;
                        for (; i > r; ) i -= r;
                        i < Number.EPSILON && (i = o ? 0 : r), !0 !== this.aClockwise || o || (i === r ? (i = -r) : (i -= r));
                        const a = this.aStartAngle + t * i;
                        let s = this.aX + this.xRadius * Math.cos(a),
                            l = this.aY + this.yRadius * Math.sin(a);
                        if (0 !== this.aRotation) {
                            const t = Math.cos(this.aRotation),
                                e = Math.sin(this.aRotation),
                                n = s - this.aX,
                                r = l - this.aY;
                            (s = n * t - r * e + this.aX), (l = n * e + r * t + this.aY);
                        }
                        return n.set(s, l);
                    }
                    copy(t) {
                        return (
                            super.copy(t),
                                (this.aX = t.aX),
                                (this.aY = t.aY),
                                (this.xRadius = t.xRadius),
                                (this.yRadius = t.yRadius),
                                (this.aStartAngle = t.aStartAngle),
                                (this.aEndAngle = t.aEndAngle),
                                (this.aClockwise = t.aClockwise),
                                (this.aRotation = t.aRotation),
                                this
                        );
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (
                            (t.aX = this.aX),
                                (t.aY = this.aY),
                                (t.xRadius = this.xRadius),
                                (t.yRadius = this.yRadius),
                                (t.aStartAngle = this.aStartAngle),
                                (t.aEndAngle = this.aEndAngle),
                                (t.aClockwise = this.aClockwise),
                                (t.aRotation = this.aRotation),
                                t
                        );
                    }
                    fromJSON(t) {
                        return (
                            super.fromJSON(t),
                                (this.aX = t.aX),
                                (this.aY = t.aY),
                                (this.xRadius = t.xRadius),
                                (this.yRadius = t.yRadius),
                                (this.aStartAngle = t.aStartAngle),
                                (this.aEndAngle = t.aEndAngle),
                                (this.aClockwise = t.aClockwise),
                                (this.aRotation = t.aRotation),
                                this
                        );
                    }
                }
                Ku.prototype.isEllipseCurve = !0;
                class th extends Ku {
                    constructor(t, e, n, r, i, o) {
                        super(t, e, n, n, r, i, o), (this.type = "ArcCurve");
                    }
                }
                function eh() {
                    let t = 0,
                        e = 0,
                        n = 0,
                        r = 0;
                    function i(i, o, a, s) {
                        (t = i), (e = a), (n = -3 * i + 3 * o - 2 * a - s), (r = 2 * i - 2 * o + a + s);
                    }
                    return {
                        initCatmullRom: function (t, e, n, r, o) {
                            i(e, n, o * (n - t), o * (r - e));
                        },
                        initNonuniformCatmullRom: function (t, e, n, r, o, a, s) {
                            let l = (e - t) / o - (n - t) / (o + a) + (n - e) / a,
                                c = (n - e) / a - (r - e) / (a + s) + (r - n) / s;
                            (l *= a), (c *= a), i(e, n, l, c);
                        },
                        calc: function (i) {
                            const o = i * i;
                            return t + e * i + n * o + r * (o * i);
                        },
                    };
                }
                th.prototype.isArcCurve = !0;
                const nh = new Fi(),
                    rh = new eh(),
                    ih = new eh(),
                    oh = new eh();
                class ah extends Qu {
                    constructor(t = [], e = !1, n = "centripetal", r = 0.5) {
                        super(), (this.type = "CatmullRomCurve3"), (this.points = t), (this.closed = e), (this.curveType = n), (this.tension = r);
                    }
                    getPoint(t, e = new Fi()) {
                        const n = e,
                            r = this.points,
                            i = r.length,
                            o = (i - (this.closed ? 0 : 1)) * t;
                        let a,
                            s,
                            l = Math.floor(o),
                            c = o - l;
                        this.closed ? (l += l > 0 ? 0 : (Math.floor(Math.abs(l) / i) + 1) * i) : 0 === c && l === i - 1 && ((l = i - 2), (c = 1)),
                            this.closed || l > 0 ? (a = r[(l - 1) % i]) : (nh.subVectors(r[0], r[1]).add(r[0]), (a = nh));
                        const u = r[l % i],
                            h = r[(l + 1) % i];
                        if ((this.closed || l + 2 < i ? (s = r[(l + 2) % i]) : (nh.subVectors(r[i - 1], r[i - 2]).add(r[i - 1]), (s = nh)), "centripetal" === this.curveType || "chordal" === this.curveType)) {
                            const t = "chordal" === this.curveType ? 0.5 : 0.25;
                            let e = Math.pow(a.distanceToSquared(u), t),
                                n = Math.pow(u.distanceToSquared(h), t),
                                r = Math.pow(h.distanceToSquared(s), t);
                            n < 1e-4 && (n = 1),
                            e < 1e-4 && (e = n),
                            r < 1e-4 && (r = n),
                                rh.initNonuniformCatmullRom(a.x, u.x, h.x, s.x, e, n, r),
                                ih.initNonuniformCatmullRom(a.y, u.y, h.y, s.y, e, n, r),
                                oh.initNonuniformCatmullRom(a.z, u.z, h.z, s.z, e, n, r);
                        } else "catmullrom" === this.curveType && (rh.initCatmullRom(a.x, u.x, h.x, s.x, this.tension), ih.initCatmullRom(a.y, u.y, h.y, s.y, this.tension), oh.initCatmullRom(a.z, u.z, h.z, s.z, this.tension));
                        return n.set(rh.calc(c), ih.calc(c), oh.calc(c)), n;
                    }
                    copy(t) {
                        super.copy(t), (this.points = []);
                        for (let e = 0, n = t.points.length; e < n; e++) {
                            const n = t.points[e];
                            this.points.push(n.clone());
                        }
                        return (this.closed = t.closed), (this.curveType = t.curveType), (this.tension = t.tension), this;
                    }
                    toJSON() {
                        const t = super.toJSON();
                        t.points = [];
                        for (let e = 0, n = this.points.length; e < n; e++) {
                            const n = this.points[e];
                            t.points.push(n.toArray());
                        }
                        return (t.closed = this.closed), (t.curveType = this.curveType), (t.tension = this.tension), t;
                    }
                    fromJSON(t) {
                        super.fromJSON(t), (this.points = []);
                        for (let e = 0, n = t.points.length; e < n; e++) {
                            const n = t.points[e];
                            this.points.push(new Fi().fromArray(n));
                        }
                        return (this.closed = t.closed), (this.curveType = t.curveType), (this.tension = t.tension), this;
                    }
                }
                function sh(t, e, n, r, i) {
                    const o = 0.5 * (r - e),
                        a = 0.5 * (i - n),
                        s = t * t;
                    return (2 * n - 2 * r + o + a) * (t * s) + (-3 * n + 3 * r - 2 * o - a) * s + o * t + n;
                }
                function lh(t, e, n, r) {
                    return (
                        (function (t, e) {
                            const n = 1 - t;
                            return n * n * e;
                        })(t, e) +
                        (function (t, e) {
                            return 2 * (1 - t) * t * e;
                        })(t, n) +
                        (function (t, e) {
                            return t * t * e;
                        })(t, r)
                    );
                }
                function ch(t, e, n, r, i) {
                    return (
                        (function (t, e) {
                            const n = 1 - t;
                            return n * n * n * e;
                        })(t, e) +
                        (function (t, e) {
                            const n = 1 - t;
                            return 3 * n * n * t * e;
                        })(t, n) +
                        (function (t, e) {
                            return 3 * (1 - t) * t * t * e;
                        })(t, r) +
                        (function (t, e) {
                            return t * t * t * e;
                        })(t, i)
                    );
                }
                ah.prototype.isCatmullRomCurve3 = !0;
                class uh extends Qu {
                    constructor(t = new Ei(), e = new Ei(), n = new Ei(), r = new Ei()) {
                        super(), (this.type = "CubicBezierCurve"), (this.v0 = t), (this.v1 = e), (this.v2 = n), (this.v3 = r);
                    }
                    getPoint(t, e = new Ei()) {
                        const n = e,
                            r = this.v0,
                            i = this.v1,
                            o = this.v2,
                            a = this.v3;
                        return n.set(ch(t, r.x, i.x, o.x, a.x), ch(t, r.y, i.y, o.y, a.y)), n;
                    }
                    copy(t) {
                        return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this;
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (t.v0 = this.v0.toArray()), (t.v1 = this.v1.toArray()), (t.v2 = this.v2.toArray()), (t.v3 = this.v3.toArray()), t;
                    }
                    fromJSON(t) {
                        return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this;
                    }
                }
                uh.prototype.isCubicBezierCurve = !0;
                class hh extends Qu {
                    constructor(t = new Fi(), e = new Fi(), n = new Fi(), r = new Fi()) {
                        super(), (this.type = "CubicBezierCurve3"), (this.v0 = t), (this.v1 = e), (this.v2 = n), (this.v3 = r);
                    }
                    getPoint(t, e = new Fi()) {
                        const n = e,
                            r = this.v0,
                            i = this.v1,
                            o = this.v2,
                            a = this.v3;
                        return n.set(ch(t, r.x, i.x, o.x, a.x), ch(t, r.y, i.y, o.y, a.y), ch(t, r.z, i.z, o.z, a.z)), n;
                    }
                    copy(t) {
                        return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this;
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (t.v0 = this.v0.toArray()), (t.v1 = this.v1.toArray()), (t.v2 = this.v2.toArray()), (t.v3 = this.v3.toArray()), t;
                    }
                    fromJSON(t) {
                        return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this;
                    }
                }
                hh.prototype.isCubicBezierCurve3 = !0;
                class dh extends Qu {
                    constructor(t = new Ei(), e = new Ei()) {
                        super(), (this.type = "LineCurve"), (this.v1 = t), (this.v2 = e);
                    }
                    getPoint(t, e = new Ei()) {
                        const n = e;
                        return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n;
                    }
                    getPointAt(t, e) {
                        return this.getPoint(t, e);
                    }
                    getTangent(t, e) {
                        const n = e || new Ei();
                        return n.copy(this.v2).sub(this.v1).normalize(), n;
                    }
                    copy(t) {
                        return super.copy(t), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (t.v1 = this.v1.toArray()), (t.v2 = this.v2.toArray()), t;
                    }
                    fromJSON(t) {
                        return super.fromJSON(t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
                    }
                }
                dh.prototype.isLineCurve = !0;
                class fh extends Qu {
                    constructor(t = new Ei(), e = new Ei(), n = new Ei()) {
                        super(), (this.type = "QuadraticBezierCurve"), (this.v0 = t), (this.v1 = e), (this.v2 = n);
                    }
                    getPoint(t, e = new Ei()) {
                        const n = e,
                            r = this.v0,
                            i = this.v1,
                            o = this.v2;
                        return n.set(lh(t, r.x, i.x, o.x), lh(t, r.y, i.y, o.y)), n;
                    }
                    copy(t) {
                        return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (t.v0 = this.v0.toArray()), (t.v1 = this.v1.toArray()), (t.v2 = this.v2.toArray()), t;
                    }
                    fromJSON(t) {
                        return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
                    }
                }
                fh.prototype.isQuadraticBezierCurve = !0;
                class ph extends Qu {
                    constructor(t = new Fi(), e = new Fi(), n = new Fi()) {
                        super(), (this.type = "QuadraticBezierCurve3"), (this.v0 = t), (this.v1 = e), (this.v2 = n);
                    }
                    getPoint(t, e = new Fi()) {
                        const n = e,
                            r = this.v0,
                            i = this.v1,
                            o = this.v2;
                        return n.set(lh(t, r.x, i.x, o.x), lh(t, r.y, i.y, o.y), lh(t, r.z, i.z, o.z)), n;
                    }
                    copy(t) {
                        return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (t.v0 = this.v0.toArray()), (t.v1 = this.v1.toArray()), (t.v2 = this.v2.toArray()), t;
                    }
                    fromJSON(t) {
                        return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
                    }
                }
                ph.prototype.isQuadraticBezierCurve3 = !0;
                class mh extends Qu {
                    constructor(t = []) {
                        super(), (this.type = "SplineCurve"), (this.points = t);
                    }
                    getPoint(t, e = new Ei()) {
                        const n = e,
                            r = this.points,
                            i = (r.length - 1) * t,
                            o = Math.floor(i),
                            a = i - o,
                            s = r[0 === o ? o : o - 1],
                            l = r[o],
                            c = r[o > r.length - 2 ? r.length - 1 : o + 1],
                            u = r[o > r.length - 3 ? r.length - 1 : o + 2];
                        return n.set(sh(a, s.x, l.x, c.x, u.x), sh(a, s.y, l.y, c.y, u.y)), n;
                    }
                    copy(t) {
                        super.copy(t), (this.points = []);
                        for (let e = 0, n = t.points.length; e < n; e++) {
                            const n = t.points[e];
                            this.points.push(n.clone());
                        }
                        return this;
                    }
                    toJSON() {
                        const t = super.toJSON();
                        t.points = [];
                        for (let e = 0, n = this.points.length; e < n; e++) {
                            const n = this.points[e];
                            t.points.push(n.toArray());
                        }
                        return t;
                    }
                    fromJSON(t) {
                        super.fromJSON(t), (this.points = []);
                        for (let e = 0, n = t.points.length; e < n; e++) {
                            const n = t.points[e];
                            this.points.push(new Ei().fromArray(n));
                        }
                        return this;
                    }
                }
                mh.prototype.isSplineCurve = !0;
                var gh = Object.freeze({
                    __proto__: null,
                    ArcCurve: th,
                    CatmullRomCurve3: ah,
                    CubicBezierCurve: uh,
                    CubicBezierCurve3: hh,
                    EllipseCurve: Ku,
                    LineCurve: dh,
                    LineCurve3: class extends Qu {
                        constructor(t = new Fi(), e = new Fi()) {
                            super(), (this.type = "LineCurve3"), (this.isLineCurve3 = !0), (this.v1 = t), (this.v2 = e);
                        }
                        getPoint(t, e = new Fi()) {
                            const n = e;
                            return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n;
                        }
                        getPointAt(t, e) {
                            return this.getPoint(t, e);
                        }
                        copy(t) {
                            return super.copy(t), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
                        }
                        toJSON() {
                            const t = super.toJSON();
                            return (t.v1 = this.v1.toArray()), (t.v2 = this.v2.toArray()), t;
                        }
                        fromJSON(t) {
                            return super.fromJSON(t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
                        }
                    },
                    QuadraticBezierCurve: fh,
                    QuadraticBezierCurve3: ph,
                    SplineCurve: mh,
                });
                const vh = function (t, e, n = 2) {
                    const r = e && e.length,
                        i = r ? e[0] * n : t.length;
                    let o = yh(t, 0, i, n, !0);
                    const a = [];
                    if (!o || o.next === o.prev) return a;
                    let s, l, c, u, h, d, f;
                    if (
                        (r &&
                        (o = (function (t, e, n, r) {
                            const i = [];
                            let o, a, s, l, c;
                            for (o = 0, a = e.length; o < a; o++) (s = e[o] * r), (l = o < a - 1 ? e[o + 1] * r : t.length), (c = yh(t, s, l, r, !1)), c === c.next && (c.steiner = !0), i.push(Ch(c));
                            for (i.sort(Th), o = 0; o < i.length; o++) Eh(i[o], n), (n = xh(n, n.next));
                            return n;
                        })(t, e, o, n)),
                        t.length > 80 * n)
                    ) {
                        (s = c = t[0]), (l = u = t[1]);
                        for (let e = n; e < i; e += n) (h = t[e]), (d = t[e + 1]), h < s && (s = h), d < l && (l = d), h > c && (c = h), d > u && (u = d);
                        (f = Math.max(c - s, u - l)), (f = 0 !== f ? 1 / f : 0);
                    }
                    return _h(o, a, n, s, l, f), a;
                };
                function yh(t, e, n, r, i) {
                    let o, a;
                    if (
                        i ===
                        (function (t, e, n, r) {
                            let i = 0;
                            for (let o = e, a = n - r; o < n; o += r) (i += (t[a] - t[o]) * (t[o + 1] + t[a + 1])), (a = o);
                            return i;
                        })(t, e, n, r) >
                        0
                    )
                        for (o = e; o < n; o += r) a = zh(o, t[o], t[o + 1], a);
                    else for (o = n - r; o >= e; o -= r) a = zh(o, t[o], t[o + 1], a);
                    return a && Oh(a, a.next) && (Bh(a), (a = a.next)), a;
                }
                function xh(t, e) {
                    if (!t) return t;
                    e || (e = t);
                    let n,
                        r = t;
                    do {
                        if (((n = !1), r.steiner || (!Oh(r, r.next) && 0 !== Ih(r.prev, r, r.next)))) r = r.next;
                        else {
                            if ((Bh(r), (r = e = r.prev), r === r.next)) break;
                            n = !0;
                        }
                    } while (n || r !== e);
                    return e;
                }
                function _h(t, e, n, r, i, o, a) {
                    if (!t) return;
                    !a &&
                    o &&
                    (function (t, e, n, r) {
                        let i = t;
                        do {
                            null === i.z && (i.z = Lh(i.x, i.y, e, n, r)), (i.prevZ = i.prev), (i.nextZ = i.next), (i = i.next);
                        } while (i !== t);
                        (i.prevZ.nextZ = null),
                            (i.prevZ = null),
                            (function (t) {
                                let e,
                                    n,
                                    r,
                                    i,
                                    o,
                                    a,
                                    s,
                                    l,
                                    c = 1;
                                do {
                                    for (n = t, t = null, o = null, a = 0; n; ) {
                                        for (a++, r = n, s = 0, e = 0; e < c && (s++, (r = r.nextZ), r); e++);
                                        for (l = c; s > 0 || (l > 0 && r); ) 0 !== s && (0 === l || !r || n.z <= r.z) ? ((i = n), (n = n.nextZ), s--) : ((i = r), (r = r.nextZ), l--), o ? (o.nextZ = i) : (t = i), (i.prevZ = o), (o = i);
                                        n = r;
                                    }
                                    (o.nextZ = null), (c *= 2);
                                } while (a > 1);
                            })(i);
                    })(t, r, i, o);
                    let s,
                        l,
                        c = t;
                    for (; t.prev !== t.next; )
                        if (((s = t.prev), (l = t.next), o ? wh(t, r, i, o) : bh(t))) e.push(s.i / n), e.push(t.i / n), e.push(l.i / n), Bh(t), (t = l.next), (c = l.next);
                        else if ((t = l) === c) {
                            a ? (1 === a ? _h((t = Sh(xh(t), e, n)), e, n, r, i, o, 2) : 2 === a && Mh(t, e, n, r, i, o)) : _h(xh(t), e, n, r, i, o, 1);
                            break;
                        }
                }
                function bh(t) {
                    const e = t.prev,
                        n = t,
                        r = t.next;
                    if (Ih(e, n, r) >= 0) return !1;
                    let i = t.next.next;
                    for (; i !== t.prev; ) {
                        if (Rh(e.x, e.y, n.x, n.y, r.x, r.y, i.x, i.y) && Ih(i.prev, i, i.next) >= 0) return !1;
                        i = i.next;
                    }
                    return !0;
                }
                function wh(t, e, n, r) {
                    const i = t.prev,
                        o = t,
                        a = t.next;
                    if (Ih(i, o, a) >= 0) return !1;
                    const s = i.x < o.x ? (i.x < a.x ? i.x : a.x) : o.x < a.x ? o.x : a.x,
                        l = i.y < o.y ? (i.y < a.y ? i.y : a.y) : o.y < a.y ? o.y : a.y,
                        c = i.x > o.x ? (i.x > a.x ? i.x : a.x) : o.x > a.x ? o.x : a.x,
                        u = i.y > o.y ? (i.y > a.y ? i.y : a.y) : o.y > a.y ? o.y : a.y,
                        h = Lh(s, l, e, n, r),
                        d = Lh(c, u, e, n, r);
                    let f = t.prevZ,
                        p = t.nextZ;
                    for (; f && f.z >= h && p && p.z <= d; ) {
                        if (f !== t.prev && f !== t.next && Rh(i.x, i.y, o.x, o.y, a.x, a.y, f.x, f.y) && Ih(f.prev, f, f.next) >= 0) return !1;
                        if (((f = f.prevZ), p !== t.prev && p !== t.next && Rh(i.x, i.y, o.x, o.y, a.x, a.y, p.x, p.y) && Ih(p.prev, p, p.next) >= 0)) return !1;
                        p = p.nextZ;
                    }
                    for (; f && f.z >= h; ) {
                        if (f !== t.prev && f !== t.next && Rh(i.x, i.y, o.x, o.y, a.x, a.y, f.x, f.y) && Ih(f.prev, f, f.next) >= 0) return !1;
                        f = f.prevZ;
                    }
                    for (; p && p.z <= d; ) {
                        if (p !== t.prev && p !== t.next && Rh(i.x, i.y, o.x, o.y, a.x, a.y, p.x, p.y) && Ih(p.prev, p, p.next) >= 0) return !1;
                        p = p.nextZ;
                    }
                    return !0;
                }
                function Sh(t, e, n) {
                    let r = t;
                    do {
                        const i = r.prev,
                            o = r.next.next;
                        !Oh(i, o) && Dh(i, r, r.next, o) && Fh(i, o) && Fh(o, i) && (e.push(i.i / n), e.push(r.i / n), e.push(o.i / n), Bh(r), Bh(r.next), (r = t = o)), (r = r.next);
                    } while (r !== t);
                    return xh(r);
                }
                function Mh(t, e, n, r, i, o) {
                    let a = t;
                    do {
                        let t = a.next.next;
                        for (; t !== a.prev; ) {
                            if (a.i !== t.i && Ph(a, t)) {
                                let s = Nh(a, t);
                                return (a = xh(a, a.next)), (s = xh(s, s.next)), _h(a, e, n, r, i, o), void _h(s, e, n, r, i, o);
                            }
                            t = t.next;
                        }
                        a = a.next;
                    } while (a !== t);
                }
                function Th(t, e) {
                    return t.x - e.x;
                }
                function Eh(t, e) {
                    if (
                        (e = (function (t, e) {
                            let n = e;
                            const r = t.x,
                                i = t.y;
                            let o,
                                a = -1 / 0;
                            do {
                                if (i <= n.y && i >= n.next.y && n.next.y !== n.y) {
                                    const t = n.x + ((i - n.y) * (n.next.x - n.x)) / (n.next.y - n.y);
                                    if (t <= r && t > a) {
                                        if (((a = t), t === r)) {
                                            if (i === n.y) return n;
                                            if (i === n.next.y) return n.next;
                                        }
                                        o = n.x < n.next.x ? n : n.next;
                                    }
                                }
                                n = n.next;
                            } while (n !== e);
                            if (!o) return null;
                            if (r === a) return o;
                            const s = o,
                                l = o.x,
                                c = o.y;
                            let u,
                                h = 1 / 0;
                            n = o;
                            do {
                                r >= n.x &&
                                n.x >= l &&
                                r !== n.x &&
                                Rh(i < c ? r : a, i, l, c, i < c ? a : r, i, n.x, n.y) &&
                                ((u = Math.abs(i - n.y) / (r - n.x)), Fh(n, t) && (u < h || (u === h && (n.x > o.x || (n.x === o.x && Ah(o, n))))) && ((o = n), (h = u))),
                                    (n = n.next);
                            } while (n !== s);
                            return o;
                        })(t, e))
                    ) {
                        const n = Nh(e, t);
                        xh(e, e.next), xh(n, n.next);
                    }
                }
                function Ah(t, e) {
                    return Ih(t.prev, t, e.prev) < 0 && Ih(e.next, t, t.next) < 0;
                }
                function Lh(t, e, n, r, i) {
                    return (
                        (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - n) * i) | (t << 8))) | (t << 4))) | (t << 2))) | (t << 1))) |
                        ((e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - r) * i) | (e << 8))) | (e << 4))) | (e << 2))) | (e << 1))) << 1)
                    );
                }
                function Ch(t) {
                    let e = t,
                        n = t;
                    do {
                        (e.x < n.x || (e.x === n.x && e.y < n.y)) && (n = e), (e = e.next);
                    } while (e !== t);
                    return n;
                }
                function Rh(t, e, n, r, i, o, a, s) {
                    return (i - a) * (e - s) - (t - a) * (o - s) >= 0 && (t - a) * (r - s) - (n - a) * (e - s) >= 0 && (n - a) * (o - s) - (i - a) * (r - s) >= 0;
                }
                function Ph(t, e) {
                    return (
                        t.next.i !== e.i &&
                        t.prev.i !== e.i &&
                        !(function (t, e) {
                            let n = t;
                            do {
                                if (n.i !== t.i && n.next.i !== t.i && n.i !== e.i && n.next.i !== e.i && Dh(n, n.next, t, e)) return !0;
                                n = n.next;
                            } while (n !== t);
                            return !1;
                        })(t, e) &&
                        ((Fh(t, e) &&
                                Fh(e, t) &&
                                (function (t, e) {
                                    let n = t,
                                        r = !1;
                                    const i = (t.x + e.x) / 2,
                                        o = (t.y + e.y) / 2;
                                    do {
                                        n.y > o != n.next.y > o && n.next.y !== n.y && i < ((n.next.x - n.x) * (o - n.y)) / (n.next.y - n.y) + n.x && (r = !r), (n = n.next);
                                    } while (n !== t);
                                    return r;
                                })(t, e) &&
                                (Ih(t.prev, t, e.prev) || Ih(t, e.prev, e))) ||
                            (Oh(t, e) && Ih(t.prev, t, t.next) > 0 && Ih(e.prev, e, e.next) > 0))
                    );
                }
                function Ih(t, e, n) {
                    return (e.y - t.y) * (n.x - e.x) - (e.x - t.x) * (n.y - e.y);
                }
                function Oh(t, e) {
                    return t.x === e.x && t.y === e.y;
                }
                function Dh(t, e, n, r) {
                    const i = Uh(Ih(t, e, n)),
                        o = Uh(Ih(t, e, r)),
                        a = Uh(Ih(n, r, t)),
                        s = Uh(Ih(n, r, e));
                    return (i !== o && a !== s) || !(0 !== i || !kh(t, n, e)) || !(0 !== o || !kh(t, r, e)) || !(0 !== a || !kh(n, t, r)) || !(0 !== s || !kh(n, e, r));
                }
                function kh(t, e, n) {
                    return e.x <= Math.max(t.x, n.x) && e.x >= Math.min(t.x, n.x) && e.y <= Math.max(t.y, n.y) && e.y >= Math.min(t.y, n.y);
                }
                function Uh(t) {
                    return t > 0 ? 1 : t < 0 ? -1 : 0;
                }
                function Fh(t, e) {
                    return Ih(t.prev, t, t.next) < 0 ? Ih(t, e, t.next) >= 0 && Ih(t, t.prev, e) >= 0 : Ih(t, e, t.prev) < 0 || Ih(t, t.next, e) < 0;
                }
                function Nh(t, e) {
                    const n = new Gh(t.i, t.x, t.y),
                        r = new Gh(e.i, e.x, e.y),
                        i = t.next,
                        o = e.prev;
                    return (t.next = e), (e.prev = t), (n.next = i), (i.prev = n), (r.next = n), (n.prev = r), (o.next = r), (r.prev = o), r;
                }
                function zh(t, e, n, r) {
                    const i = new Gh(t, e, n);
                    return r ? ((i.next = r.next), (i.prev = r), (r.next.prev = i), (r.next = i)) : ((i.prev = i), (i.next = i)), i;
                }
                function Bh(t) {
                    (t.next.prev = t.prev), (t.prev.next = t.next), t.prevZ && (t.prevZ.nextZ = t.nextZ), t.nextZ && (t.nextZ.prevZ = t.prevZ);
                }
                function Gh(t, e, n) {
                    (this.i = t), (this.x = e), (this.y = n), (this.prev = null), (this.next = null), (this.z = null), (this.prevZ = null), (this.nextZ = null), (this.steiner = !1);
                }
                class Hh {
                    static area(t) {
                        const e = t.length;
                        let n = 0;
                        for (let r = e - 1, i = 0; i < e; r = i++) n += t[r].x * t[i].y - t[i].x * t[r].y;
                        return 0.5 * n;
                    }
                    static isClockWise(t) {
                        return Hh.area(t) < 0;
                    }
                    static triangulateShape(t, e) {
                        const n = [],
                            r = [],
                            i = [];
                        Vh(t), Wh(n, t);
                        let o = t.length;
                        e.forEach(Vh);
                        for (let t = 0; t < e.length; t++) r.push(o), (o += e[t].length), Wh(n, e[t]);
                        const a = vh(n, r);
                        for (let t = 0; t < a.length; t += 3) i.push(a.slice(t, t + 3));
                        return i;
                    }
                }
                function Vh(t) {
                    const e = t.length;
                    e > 2 && t[e - 1].equals(t[0]) && t.pop();
                }
                function Wh(t, e) {
                    for (let n = 0; n < e.length; n++) t.push(e[n].x), t.push(e[n].y);
                }
                class jh extends wa {
                    constructor(t, e) {
                        super(), (this.type = "ExtrudeGeometry"), (this.parameters = { shapes: t, options: e }), (t = Array.isArray(t) ? t : [t]);
                        const n = this,
                            r = [],
                            i = [];
                        for (let e = 0, n = t.length; e < n; e++) {
                            o(t[e]);
                        }
                        function o(t) {
                            const o = [],
                                a = void 0 !== e.curveSegments ? e.curveSegments : 12,
                                s = void 0 !== e.steps ? e.steps : 1;
                            let l = void 0 !== e.depth ? e.depth : 100,
                                c = void 0 === e.bevelEnabled || e.bevelEnabled,
                                u = void 0 !== e.bevelThickness ? e.bevelThickness : 6,
                                h = void 0 !== e.bevelSize ? e.bevelSize : u - 2,
                                d = void 0 !== e.bevelOffset ? e.bevelOffset : 0,
                                f = void 0 !== e.bevelSegments ? e.bevelSegments : 3;
                            const p = e.extrudePath,
                                m = void 0 !== e.UVGenerator ? e.UVGenerator : qh;
                            void 0 !== e.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), (l = e.amount));
                            let g,
                                v,
                                y,
                                x,
                                _,
                                b = !1;
                            p && ((g = p.getSpacedPoints(s)), (b = !0), (c = !1), (v = p.computeFrenetFrames(s, !1)), (y = new Fi()), (x = new Fi()), (_ = new Fi())), c || ((f = 0), (u = 0), (h = 0), (d = 0));
                            const w = t.extractPoints(a);
                            let S = w.shape;
                            const M = w.holes;
                            if (!Hh.isClockWise(S)) {
                                S = S.reverse();
                                for (let t = 0, e = M.length; t < e; t++) {
                                    const e = M[t];
                                    Hh.isClockWise(e) && (M[t] = e.reverse());
                                }
                            }
                            const T = Hh.triangulateShape(S, M),
                                E = S;
                            for (let t = 0, e = M.length; t < e; t++) {
                                const e = M[t];
                                S = S.concat(e);
                            }
                            function A(t, e, n) {
                                return e || console.error("THREE.ExtrudeGeometry: vec does not exist"), e.clone().multiplyScalar(n).add(t);
                            }
                            const L = S.length,
                                C = T.length;
                            function R(t, e, n) {
                                let r, i, o;
                                const a = t.x - e.x,
                                    s = t.y - e.y,
                                    l = n.x - t.x,
                                    c = n.y - t.y,
                                    u = a * a + s * s,
                                    h = a * c - s * l;
                                if (Math.abs(h) > Number.EPSILON) {
                                    const h = Math.sqrt(u),
                                        d = Math.sqrt(l * l + c * c),
                                        f = e.x - s / h,
                                        p = e.y + a / h,
                                        m = ((n.x - c / d - f) * c - (n.y + l / d - p) * l) / (a * c - s * l);
                                    (r = f + a * m - t.x), (i = p + s * m - t.y);
                                    const g = r * r + i * i;
                                    if (g <= 2) return new Ei(r, i);
                                    o = Math.sqrt(g / 2);
                                } else {
                                    let t = !1;
                                    a > Number.EPSILON ? l > Number.EPSILON && (t = !0) : a < -Number.EPSILON ? l < -Number.EPSILON && (t = !0) : Math.sign(s) === Math.sign(c) && (t = !0),
                                        t ? ((r = -s), (i = a), (o = Math.sqrt(u))) : ((r = a), (i = s), (o = Math.sqrt(u / 2)));
                                }
                                return new Ei(r / o, i / o);
                            }
                            const P = [];
                            for (let t = 0, e = E.length, n = e - 1, r = t + 1; t < e; t++, n++, r++) n === e && (n = 0), r === e && (r = 0), (P[t] = R(E[t], E[n], E[r]));
                            const I = [];
                            let O,
                                D = P.concat();
                            for (let t = 0, e = M.length; t < e; t++) {
                                const e = M[t];
                                O = [];
                                for (let t = 0, n = e.length, r = n - 1, i = t + 1; t < n; t++, r++, i++) r === n && (r = 0), i === n && (i = 0), (O[t] = R(e[t], e[r], e[i]));
                                I.push(O), (D = D.concat(O));
                            }
                            for (let t = 0; t < f; t++) {
                                const e = t / f,
                                    n = u * Math.cos((e * Math.PI) / 2),
                                    r = h * Math.sin((e * Math.PI) / 2) + d;
                                for (let t = 0, e = E.length; t < e; t++) {
                                    const e = A(E[t], P[t], r);
                                    F(e.x, e.y, -n);
                                }
                                for (let t = 0, e = M.length; t < e; t++) {
                                    const e = M[t];
                                    O = I[t];
                                    for (let t = 0, i = e.length; t < i; t++) {
                                        const i = A(e[t], O[t], r);
                                        F(i.x, i.y, -n);
                                    }
                                }
                            }
                            const k = h + d;
                            for (let t = 0; t < L; t++) {
                                const e = c ? A(S[t], D[t], k) : S[t];
                                b ? (x.copy(v.normals[0]).multiplyScalar(e.x), y.copy(v.binormals[0]).multiplyScalar(e.y), _.copy(g[0]).add(x).add(y), F(_.x, _.y, _.z)) : F(e.x, e.y, 0);
                            }
                            for (let t = 1; t <= s; t++)
                                for (let e = 0; e < L; e++) {
                                    const n = c ? A(S[e], D[e], k) : S[e];
                                    b ? (x.copy(v.normals[t]).multiplyScalar(n.x), y.copy(v.binormals[t]).multiplyScalar(n.y), _.copy(g[t]).add(x).add(y), F(_.x, _.y, _.z)) : F(n.x, n.y, (l / s) * t);
                                }
                            for (let t = f - 1; t >= 0; t--) {
                                const e = t / f,
                                    n = u * Math.cos((e * Math.PI) / 2),
                                    r = h * Math.sin((e * Math.PI) / 2) + d;
                                for (let t = 0, e = E.length; t < e; t++) {
                                    const e = A(E[t], P[t], r);
                                    F(e.x, e.y, l + n);
                                }
                                for (let t = 0, e = M.length; t < e; t++) {
                                    const e = M[t];
                                    O = I[t];
                                    for (let t = 0, i = e.length; t < i; t++) {
                                        const i = A(e[t], O[t], r);
                                        b ? F(i.x, i.y + g[s - 1].y, g[s - 1].x + n) : F(i.x, i.y, l + n);
                                    }
                                }
                            }
                            function U(t, e) {
                                let n = t.length;
                                for (; --n >= 0; ) {
                                    const r = n;
                                    let i = n - 1;
                                    i < 0 && (i = t.length - 1);
                                    for (let t = 0, n = s + 2 * f; t < n; t++) {
                                        const n = L * t,
                                            o = L * (t + 1);
                                        z(e + r + n, e + i + n, e + i + o, e + r + o);
                                    }
                                }
                            }
                            function F(t, e, n) {
                                o.push(t), o.push(e), o.push(n);
                            }
                            function N(t, e, i) {
                                B(t), B(e), B(i);
                                const o = r.length / 3,
                                    a = m.generateTopUV(n, r, o - 3, o - 2, o - 1);
                                G(a[0]), G(a[1]), G(a[2]);
                            }
                            function z(t, e, i, o) {
                                B(t), B(e), B(o), B(e), B(i), B(o);
                                const a = r.length / 3,
                                    s = m.generateSideWallUV(n, r, a - 6, a - 3, a - 2, a - 1);
                                G(s[0]), G(s[1]), G(s[3]), G(s[1]), G(s[2]), G(s[3]);
                            }
                            function B(t) {
                                r.push(o[3 * t + 0]), r.push(o[3 * t + 1]), r.push(o[3 * t + 2]);
                            }
                            function G(t) {
                                i.push(t.x), i.push(t.y);
                            }
                            !(function () {
                                const t = r.length / 3;
                                if (c) {
                                    let t = 0,
                                        e = L * t;
                                    for (let t = 0; t < C; t++) {
                                        const n = T[t];
                                        N(n[2] + e, n[1] + e, n[0] + e);
                                    }
                                    (t = s + 2 * f), (e = L * t);
                                    for (let t = 0; t < C; t++) {
                                        const n = T[t];
                                        N(n[0] + e, n[1] + e, n[2] + e);
                                    }
                                } else {
                                    for (let t = 0; t < C; t++) {
                                        const e = T[t];
                                        N(e[2], e[1], e[0]);
                                    }
                                    for (let t = 0; t < C; t++) {
                                        const e = T[t];
                                        N(e[0] + L * s, e[1] + L * s, e[2] + L * s);
                                    }
                                }
                                n.addGroup(t, r.length / 3 - t, 0);
                            })(),
                                (function () {
                                    const t = r.length / 3;
                                    let e = 0;
                                    U(E, e), (e += E.length);
                                    for (let t = 0, n = M.length; t < n; t++) {
                                        const n = M[t];
                                        U(n, e), (e += n.length);
                                    }
                                    n.addGroup(t, r.length / 3 - t, 1);
                                })();
                        }
                        this.setAttribute("position", new fa(r, 3)), this.setAttribute("uv", new fa(i, 2)), this.computeVertexNormals();
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (function (t, e, n) {
                            if (((n.shapes = []), Array.isArray(t)))
                                for (let e = 0, r = t.length; e < r; e++) {
                                    const r = t[e];
                                    n.shapes.push(r.uuid);
                                }
                            else n.shapes.push(t.uuid);
                            void 0 !== e.extrudePath && (n.options.extrudePath = e.extrudePath.toJSON());
                            return n;
                        })(this.parameters.shapes, this.parameters.options, t);
                    }
                    static fromJSON(t, e) {
                        const n = [];
                        for (let r = 0, i = t.shapes.length; r < i; r++) {
                            const i = e[t.shapes[r]];
                            n.push(i);
                        }
                        const r = t.options.extrudePath;
                        return void 0 !== r && (t.options.extrudePath = new gh[r.type]().fromJSON(r)), new jh(n, t.options);
                    }
                }
                const qh = {
                    generateTopUV: function (t, e, n, r, i) {
                        const o = e[3 * n],
                            a = e[3 * n + 1],
                            s = e[3 * r],
                            l = e[3 * r + 1],
                            c = e[3 * i],
                            u = e[3 * i + 1];
                        return [new Ei(o, a), new Ei(s, l), new Ei(c, u)];
                    },
                    generateSideWallUV: function (t, e, n, r, i, o) {
                        const a = e[3 * n],
                            s = e[3 * n + 1],
                            l = e[3 * n + 2],
                            c = e[3 * r],
                            u = e[3 * r + 1],
                            h = e[3 * r + 2],
                            d = e[3 * i],
                            f = e[3 * i + 1],
                            p = e[3 * i + 2],
                            m = e[3 * o],
                            g = e[3 * o + 1],
                            v = e[3 * o + 2];
                        return Math.abs(s - u) < Math.abs(a - c) ? [new Ei(a, 1 - l), new Ei(c, 1 - h), new Ei(d, 1 - p), new Ei(m, 1 - v)] : [new Ei(s, 1 - l), new Ei(u, 1 - h), new Ei(f, 1 - p), new Ei(g, 1 - v)];
                    },
                };
                class Xh extends wa {
                    constructor(t, e = 12) {
                        super(), (this.type = "ShapeGeometry"), (this.parameters = { shapes: t, curveSegments: e });
                        const n = [],
                            r = [],
                            i = [],
                            o = [];
                        let a = 0,
                            s = 0;
                        if (!1 === Array.isArray(t)) l(t);
                        else for (let e = 0; e < t.length; e++) l(t[e]), this.addGroup(a, s, e), (a += s), (s = 0);
                        function l(t) {
                            const a = r.length / 3,
                                l = t.extractPoints(e);
                            let c = l.shape;
                            const u = l.holes;
                            !1 === Hh.isClockWise(c) && (c = c.reverse());
                            for (let t = 0, e = u.length; t < e; t++) {
                                const e = u[t];
                                !0 === Hh.isClockWise(e) && (u[t] = e.reverse());
                            }
                            const h = Hh.triangulateShape(c, u);
                            for (let t = 0, e = u.length; t < e; t++) {
                                const e = u[t];
                                c = c.concat(e);
                            }
                            for (let t = 0, e = c.length; t < e; t++) {
                                const e = c[t];
                                r.push(e.x, e.y, 0), i.push(0, 0, 1), o.push(e.x, e.y);
                            }
                            for (let t = 0, e = h.length; t < e; t++) {
                                const e = h[t],
                                    r = e[0] + a,
                                    i = e[1] + a,
                                    o = e[2] + a;
                                n.push(r, i, o), (s += 3);
                            }
                        }
                        this.setIndex(n), this.setAttribute("position", new fa(r, 3)), this.setAttribute("normal", new fa(i, 3)), this.setAttribute("uv", new fa(o, 2));
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (function (t, e) {
                            if (((e.shapes = []), Array.isArray(t)))
                                for (let n = 0, r = t.length; n < r; n++) {
                                    const r = t[n];
                                    e.shapes.push(r.uuid);
                                }
                            else e.shapes.push(t.uuid);
                            return e;
                        })(this.parameters.shapes, t);
                    }
                    static fromJSON(t, e) {
                        const n = [];
                        for (let r = 0, i = t.shapes.length; r < i; r++) {
                            const i = e[t.shapes[r]];
                            n.push(i);
                        }
                        return new Xh(n, t.curveSegments);
                    }
                }
                class Yh extends Ko {
                    constructor(t) {
                        super(), (this.type = "ShadowMaterial"), (this.color = new aa(0)), (this.transparent = !0), this.setValues(t);
                    }
                    copy(t) {
                        return super.copy(t), this.color.copy(t.color), this;
                    }
                }
                Yh.prototype.isShadowMaterial = !0;
                class Zh extends Ko {
                    constructor(t) {
                        super(),
                            (this.defines = { STANDARD: "" }),
                            (this.type = "MeshStandardMaterial"),
                            (this.color = new aa(16777215)),
                            (this.roughness = 1),
                            (this.metalness = 0),
                            (this.map = null),
                            (this.lightMap = null),
                            (this.lightMapIntensity = 1),
                            (this.aoMap = null),
                            (this.aoMapIntensity = 1),
                            (this.emissive = new aa(0)),
                            (this.emissiveIntensity = 1),
                            (this.emissiveMap = null),
                            (this.bumpMap = null),
                            (this.bumpScale = 1),
                            (this.normalMap = null),
                            (this.normalMapType = 0),
                            (this.normalScale = new Ei(1, 1)),
                            (this.displacementMap = null),
                            (this.displacementScale = 1),
                            (this.displacementBias = 0),
                            (this.roughnessMap = null),
                            (this.metalnessMap = null),
                            (this.alphaMap = null),
                            (this.envMap = null),
                            (this.envMapIntensity = 1),
                            (this.refractionRatio = 0.98),
                            (this.wireframe = !1),
                            (this.wireframeLinewidth = 1),
                            (this.wireframeLinecap = "round"),
                            (this.wireframeLinejoin = "round"),
                            (this.flatShading = !1),
                            this.setValues(t);
                    }
                    copy(t) {
                        return (
                            super.copy(t),
                                (this.defines = { STANDARD: "" }),
                                this.color.copy(t.color),
                                (this.roughness = t.roughness),
                                (this.metalness = t.metalness),
                                (this.map = t.map),
                                (this.lightMap = t.lightMap),
                                (this.lightMapIntensity = t.lightMapIntensity),
                                (this.aoMap = t.aoMap),
                                (this.aoMapIntensity = t.aoMapIntensity),
                                this.emissive.copy(t.emissive),
                                (this.emissiveMap = t.emissiveMap),
                                (this.emissiveIntensity = t.emissiveIntensity),
                                (this.bumpMap = t.bumpMap),
                                (this.bumpScale = t.bumpScale),
                                (this.normalMap = t.normalMap),
                                (this.normalMapType = t.normalMapType),
                                this.normalScale.copy(t.normalScale),
                                (this.displacementMap = t.displacementMap),
                                (this.displacementScale = t.displacementScale),
                                (this.displacementBias = t.displacementBias),
                                (this.roughnessMap = t.roughnessMap),
                                (this.metalnessMap = t.metalnessMap),
                                (this.alphaMap = t.alphaMap),
                                (this.envMap = t.envMap),
                                (this.envMapIntensity = t.envMapIntensity),
                                (this.refractionRatio = t.refractionRatio),
                                (this.wireframe = t.wireframe),
                                (this.wireframeLinewidth = t.wireframeLinewidth),
                                (this.wireframeLinecap = t.wireframeLinecap),
                                (this.wireframeLinejoin = t.wireframeLinejoin),
                                (this.flatShading = t.flatShading),
                                this
                        );
                    }
                }
                Zh.prototype.isMeshStandardMaterial = !0;
                class Jh extends Zh {
                    constructor(t) {
                        super(),
                            (this.defines = { STANDARD: "", PHYSICAL: "" }),
                            (this.type = "MeshPhysicalMaterial"),
                            (this.clearcoat = 0),
                            (this.clearcoatMap = null),
                            (this.clearcoatRoughness = 0),
                            (this.clearcoatRoughnessMap = null),
                            (this.clearcoatNormalScale = new Ei(1, 1)),
                            (this.clearcoatNormalMap = null),
                            (this.reflectivity = 0.5),
                            Object.defineProperty(this, "ior", {
                                get: function () {
                                    return (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);
                                },
                                set: function (t) {
                                    this.reflectivity = xi((2.5 * (t - 1)) / (t + 1), 0, 1);
                                },
                            }),
                            (this.sheen = null),
                            (this.transmission = 0),
                            (this.transmissionMap = null),
                            (this.thickness = 0.01),
                            (this.thicknessMap = null),
                            (this.attenuationDistance = 0),
                            (this.attenuationTint = new aa(1, 1, 1)),
                            (this.specularIntensity = 1),
                            (this.specularIntensityMap = null),
                            (this.specularTint = new aa(1, 1, 1)),
                            (this.specularTintMap = null),
                            this.setValues(t);
                    }
                    copy(t) {
                        return (
                            super.copy(t),
                                (this.defines = { STANDARD: "", PHYSICAL: "" }),
                                (this.clearcoat = t.clearcoat),
                                (this.clearcoatMap = t.clearcoatMap),
                                (this.clearcoatRoughness = t.clearcoatRoughness),
                                (this.clearcoatRoughnessMap = t.clearcoatRoughnessMap),
                                (this.clearcoatNormalMap = t.clearcoatNormalMap),
                                this.clearcoatNormalScale.copy(t.clearcoatNormalScale),
                                (this.reflectivity = t.reflectivity),
                                t.sheen ? (this.sheen = (this.sheen || new aa()).copy(t.sheen)) : (this.sheen = null),
                                (this.transmission = t.transmission),
                                (this.transmissionMap = t.transmissionMap),
                                (this.thickness = t.thickness),
                                (this.thicknessMap = t.thicknessMap),
                                (this.attenuationDistance = t.attenuationDistance),
                                this.attenuationTint.copy(t.attenuationTint),
                                (this.specularIntensity = t.specularIntensity),
                                (this.specularIntensityMap = t.specularIntensityMap),
                                this.specularTint.copy(t.specularTint),
                                (this.specularTintMap = t.specularTintMap),
                                this
                        );
                    }
                }
                Jh.prototype.isMeshPhysicalMaterial = !0;
                class $h extends Ko {
                    constructor(t) {
                        super(),
                            (this.type = "MeshPhongMaterial"),
                            (this.color = new aa(16777215)),
                            (this.specular = new aa(1118481)),
                            (this.shininess = 30),
                            (this.map = null),
                            (this.lightMap = null),
                            (this.lightMapIntensity = 1),
                            (this.aoMap = null),
                            (this.aoMapIntensity = 1),
                            (this.emissive = new aa(0)),
                            (this.emissiveIntensity = 1),
                            (this.emissiveMap = null),
                            (this.bumpMap = null),
                            (this.bumpScale = 1),
                            (this.normalMap = null),
                            (this.normalMapType = 0),
                            (this.normalScale = new Ei(1, 1)),
                            (this.displacementMap = null),
                            (this.displacementScale = 1),
                            (this.displacementBias = 0),
                            (this.specularMap = null),
                            (this.alphaMap = null),
                            (this.envMap = null),
                            (this.combine = 0),
                            (this.reflectivity = 1),
                            (this.refractionRatio = 0.98),
                            (this.wireframe = !1),
                            (this.wireframeLinewidth = 1),
                            (this.wireframeLinecap = "round"),
                            (this.wireframeLinejoin = "round"),
                            (this.flatShading = !1),
                            this.setValues(t);
                    }
                    copy(t) {
                        return (
                            super.copy(t),
                                this.color.copy(t.color),
                                this.specular.copy(t.specular),
                                (this.shininess = t.shininess),
                                (this.map = t.map),
                                (this.lightMap = t.lightMap),
                                (this.lightMapIntensity = t.lightMapIntensity),
                                (this.aoMap = t.aoMap),
                                (this.aoMapIntensity = t.aoMapIntensity),
                                this.emissive.copy(t.emissive),
                                (this.emissiveMap = t.emissiveMap),
                                (this.emissiveIntensity = t.emissiveIntensity),
                                (this.bumpMap = t.bumpMap),
                                (this.bumpScale = t.bumpScale),
                                (this.normalMap = t.normalMap),
                                (this.normalMapType = t.normalMapType),
                                this.normalScale.copy(t.normalScale),
                                (this.displacementMap = t.displacementMap),
                                (this.displacementScale = t.displacementScale),
                                (this.displacementBias = t.displacementBias),
                                (this.specularMap = t.specularMap),
                                (this.alphaMap = t.alphaMap),
                                (this.envMap = t.envMap),
                                (this.combine = t.combine),
                                (this.reflectivity = t.reflectivity),
                                (this.refractionRatio = t.refractionRatio),
                                (this.wireframe = t.wireframe),
                                (this.wireframeLinewidth = t.wireframeLinewidth),
                                (this.wireframeLinecap = t.wireframeLinecap),
                                (this.wireframeLinejoin = t.wireframeLinejoin),
                                (this.flatShading = t.flatShading),
                                this
                        );
                    }
                }
                $h.prototype.isMeshPhongMaterial = !0;
                class Qh extends Ko {
                    constructor(t) {
                        super(),
                            (this.defines = { TOON: "" }),
                            (this.type = "MeshToonMaterial"),
                            (this.color = new aa(16777215)),
                            (this.map = null),
                            (this.gradientMap = null),
                            (this.lightMap = null),
                            (this.lightMapIntensity = 1),
                            (this.aoMap = null),
                            (this.aoMapIntensity = 1),
                            (this.emissive = new aa(0)),
                            (this.emissiveIntensity = 1),
                            (this.emissiveMap = null),
                            (this.bumpMap = null),
                            (this.bumpScale = 1),
                            (this.normalMap = null),
                            (this.normalMapType = 0),
                            (this.normalScale = new Ei(1, 1)),
                            (this.displacementMap = null),
                            (this.displacementScale = 1),
                            (this.displacementBias = 0),
                            (this.alphaMap = null),
                            (this.wireframe = !1),
                            (this.wireframeLinewidth = 1),
                            (this.wireframeLinecap = "round"),
                            (this.wireframeLinejoin = "round"),
                            this.setValues(t);
                    }
                    copy(t) {
                        return (
                            super.copy(t),
                                this.color.copy(t.color),
                                (this.map = t.map),
                                (this.gradientMap = t.gradientMap),
                                (this.lightMap = t.lightMap),
                                (this.lightMapIntensity = t.lightMapIntensity),
                                (this.aoMap = t.aoMap),
                                (this.aoMapIntensity = t.aoMapIntensity),
                                this.emissive.copy(t.emissive),
                                (this.emissiveMap = t.emissiveMap),
                                (this.emissiveIntensity = t.emissiveIntensity),
                                (this.bumpMap = t.bumpMap),
                                (this.bumpScale = t.bumpScale),
                                (this.normalMap = t.normalMap),
                                (this.normalMapType = t.normalMapType),
                                this.normalScale.copy(t.normalScale),
                                (this.displacementMap = t.displacementMap),
                                (this.displacementScale = t.displacementScale),
                                (this.displacementBias = t.displacementBias),
                                (this.alphaMap = t.alphaMap),
                                (this.wireframe = t.wireframe),
                                (this.wireframeLinewidth = t.wireframeLinewidth),
                                (this.wireframeLinecap = t.wireframeLinecap),
                                (this.wireframeLinejoin = t.wireframeLinejoin),
                                this
                        );
                    }
                }
                Qh.prototype.isMeshToonMaterial = !0;
                class Kh extends Ko {
                    constructor(t) {
                        super(),
                            (this.type = "MeshNormalMaterial"),
                            (this.bumpMap = null),
                            (this.bumpScale = 1),
                            (this.normalMap = null),
                            (this.normalMapType = 0),
                            (this.normalScale = new Ei(1, 1)),
                            (this.displacementMap = null),
                            (this.displacementScale = 1),
                            (this.displacementBias = 0),
                            (this.wireframe = !1),
                            (this.wireframeLinewidth = 1),
                            (this.fog = !1),
                            (this.flatShading = !1),
                            this.setValues(t);
                    }
                    copy(t) {
                        return (
                            super.copy(t),
                                (this.bumpMap = t.bumpMap),
                                (this.bumpScale = t.bumpScale),
                                (this.normalMap = t.normalMap),
                                (this.normalMapType = t.normalMapType),
                                this.normalScale.copy(t.normalScale),
                                (this.displacementMap = t.displacementMap),
                                (this.displacementScale = t.displacementScale),
                                (this.displacementBias = t.displacementBias),
                                (this.wireframe = t.wireframe),
                                (this.wireframeLinewidth = t.wireframeLinewidth),
                                (this.flatShading = t.flatShading),
                                this
                        );
                    }
                }
                Kh.prototype.isMeshNormalMaterial = !0;
                class td extends Ko {
                    constructor(t) {
                        super(),
                            (this.type = "MeshLambertMaterial"),
                            (this.color = new aa(16777215)),
                            (this.map = null),
                            (this.lightMap = null),
                            (this.lightMapIntensity = 1),
                            (this.aoMap = null),
                            (this.aoMapIntensity = 1),
                            (this.emissive = new aa(0)),
                            (this.emissiveIntensity = 1),
                            (this.emissiveMap = null),
                            (this.specularMap = null),
                            (this.alphaMap = null),
                            (this.envMap = null),
                            (this.combine = 0),
                            (this.reflectivity = 1),
                            (this.refractionRatio = 0.98),
                            (this.wireframe = !1),
                            (this.wireframeLinewidth = 1),
                            (this.wireframeLinecap = "round"),
                            (this.wireframeLinejoin = "round"),
                            this.setValues(t);
                    }
                    copy(t) {
                        return (
                            super.copy(t),
                                this.color.copy(t.color),
                                (this.map = t.map),
                                (this.lightMap = t.lightMap),
                                (this.lightMapIntensity = t.lightMapIntensity),
                                (this.aoMap = t.aoMap),
                                (this.aoMapIntensity = t.aoMapIntensity),
                                this.emissive.copy(t.emissive),
                                (this.emissiveMap = t.emissiveMap),
                                (this.emissiveIntensity = t.emissiveIntensity),
                                (this.specularMap = t.specularMap),
                                (this.alphaMap = t.alphaMap),
                                (this.envMap = t.envMap),
                                (this.combine = t.combine),
                                (this.reflectivity = t.reflectivity),
                                (this.refractionRatio = t.refractionRatio),
                                (this.wireframe = t.wireframe),
                                (this.wireframeLinewidth = t.wireframeLinewidth),
                                (this.wireframeLinecap = t.wireframeLinecap),
                                (this.wireframeLinejoin = t.wireframeLinejoin),
                                this
                        );
                    }
                }
                td.prototype.isMeshLambertMaterial = !0;
                class ed extends Ko {
                    constructor(t) {
                        super(),
                            (this.defines = { MATCAP: "" }),
                            (this.type = "MeshMatcapMaterial"),
                            (this.color = new aa(16777215)),
                            (this.matcap = null),
                            (this.map = null),
                            (this.bumpMap = null),
                            (this.bumpScale = 1),
                            (this.normalMap = null),
                            (this.normalMapType = 0),
                            (this.normalScale = new Ei(1, 1)),
                            (this.displacementMap = null),
                            (this.displacementScale = 1),
                            (this.displacementBias = 0),
                            (this.alphaMap = null),
                            (this.flatShading = !1),
                            this.setValues(t);
                    }
                    copy(t) {
                        return (
                            super.copy(t),
                                (this.defines = { MATCAP: "" }),
                                this.color.copy(t.color),
                                (this.matcap = t.matcap),
                                (this.map = t.map),
                                (this.bumpMap = t.bumpMap),
                                (this.bumpScale = t.bumpScale),
                                (this.normalMap = t.normalMap),
                                (this.normalMapType = t.normalMapType),
                                this.normalScale.copy(t.normalScale),
                                (this.displacementMap = t.displacementMap),
                                (this.displacementScale = t.displacementScale),
                                (this.displacementBias = t.displacementBias),
                                (this.alphaMap = t.alphaMap),
                                (this.flatShading = t.flatShading),
                                this
                        );
                    }
                }
                ed.prototype.isMeshMatcapMaterial = !0;
                class nd extends Pu {
                    constructor(t) {
                        super(), (this.type = "LineDashedMaterial"), (this.scale = 1), (this.dashSize = 3), (this.gapSize = 1), this.setValues(t);
                    }
                    copy(t) {
                        return super.copy(t), (this.scale = t.scale), (this.dashSize = t.dashSize), (this.gapSize = t.gapSize), this;
                    }
                }
                nd.prototype.isLineDashedMaterial = !0;
                const rd = {
                    arraySlice: function (t, e, n) {
                        return rd.isTypedArray(t) ? new t.constructor(t.subarray(e, void 0 !== n ? n : t.length)) : t.slice(e, n);
                    },
                    convertArray: function (t, e, n) {
                        return !t || (!n && t.constructor === e) ? t : "number" == typeof e.BYTES_PER_ELEMENT ? new e(t) : Array.prototype.slice.call(t);
                    },
                    isTypedArray: function (t) {
                        return ArrayBuffer.isView(t) && !(t instanceof DataView);
                    },
                    getKeyframeOrder: function (t) {
                        const e = t.length,
                            n = new Array(e);
                        for (let t = 0; t !== e; ++t) n[t] = t;
                        return (
                            n.sort(function (e, n) {
                                return t[e] - t[n];
                            }),
                                n
                        );
                    },
                    sortedArray: function (t, e, n) {
                        const r = t.length,
                            i = new t.constructor(r);
                        for (let o = 0, a = 0; a !== r; ++o) {
                            const r = n[o] * e;
                            for (let n = 0; n !== e; ++n) i[a++] = t[r + n];
                        }
                        return i;
                    },
                    flattenJSON: function (t, e, n, r) {
                        let i = 1,
                            o = t[0];
                        for (; void 0 !== o && void 0 === o[r]; ) o = t[i++];
                        if (void 0 === o) return;
                        let a = o[r];
                        if (void 0 !== a)
                            if (Array.isArray(a))
                                do {
                                    (a = o[r]), void 0 !== a && (e.push(o.time), n.push.apply(n, a)), (o = t[i++]);
                                } while (void 0 !== o);
                            else if (void 0 !== a.toArray)
                                do {
                                    (a = o[r]), void 0 !== a && (e.push(o.time), a.toArray(n, n.length)), (o = t[i++]);
                                } while (void 0 !== o);
                            else
                                do {
                                    (a = o[r]), void 0 !== a && (e.push(o.time), n.push(a)), (o = t[i++]);
                                } while (void 0 !== o);
                    },
                    subclip: function (t, e, n, r, i = 30) {
                        const o = t.clone();
                        o.name = e;
                        const a = [];
                        for (let t = 0; t < o.tracks.length; ++t) {
                            const e = o.tracks[t],
                                s = e.getValueSize(),
                                l = [],
                                c = [];
                            for (let t = 0; t < e.times.length; ++t) {
                                const o = e.times[t] * i;
                                if (!(o < n || o >= r)) {
                                    l.push(e.times[t]);
                                    for (let n = 0; n < s; ++n) c.push(e.values[t * s + n]);
                                }
                            }
                            0 !== l.length && ((e.times = rd.convertArray(l, e.times.constructor)), (e.values = rd.convertArray(c, e.values.constructor)), a.push(e));
                        }
                        o.tracks = a;
                        let s = 1 / 0;
                        for (let t = 0; t < o.tracks.length; ++t) s > o.tracks[t].times[0] && (s = o.tracks[t].times[0]);
                        for (let t = 0; t < o.tracks.length; ++t) o.tracks[t].shift(-1 * s);
                        return o.resetDuration(), o;
                    },
                    makeClipAdditive: function (t, e = 0, n = t, r = 30) {
                        r <= 0 && (r = 30);
                        const i = n.tracks.length,
                            o = e / r;
                        for (let e = 0; e < i; ++e) {
                            const r = n.tracks[e],
                                i = r.ValueTypeName;
                            if ("bool" === i || "string" === i) continue;
                            const a = t.tracks.find(function (t) {
                                return t.name === r.name && t.ValueTypeName === i;
                            });
                            if (void 0 === a) continue;
                            let s = 0;
                            const l = r.getValueSize();
                            r.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (s = l / 3);
                            let c = 0;
                            const u = a.getValueSize();
                            a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (c = u / 3);
                            const h = r.times.length - 1;
                            let d;
                            if (o <= r.times[0]) {
                                const t = s,
                                    e = l - s;
                                d = rd.arraySlice(r.values, t, e);
                            } else if (o >= r.times[h]) {
                                const t = h * l + s,
                                    e = t + l - s;
                                d = rd.arraySlice(r.values, t, e);
                            } else {
                                const t = r.createInterpolant(),
                                    e = s,
                                    n = l - s;
                                t.evaluate(o), (d = rd.arraySlice(t.resultBuffer, e, n));
                            }
                            if ("quaternion" === i) {
                                new Ui().fromArray(d).normalize().conjugate().toArray(d);
                            }
                            const f = a.times.length;
                            for (let t = 0; t < f; ++t) {
                                const e = t * u + c;
                                if ("quaternion" === i) Ui.multiplyQuaternionsFlat(a.values, e, d, 0, a.values, e);
                                else {
                                    const t = u - 2 * c;
                                    for (let n = 0; n < t; ++n) a.values[e + n] -= d[n];
                                }
                            }
                        }
                        return (t.blendMode = 2501), t;
                    },
                };
                class id {
                    constructor(t, e, n, r) {
                        (this.parameterPositions = t),
                            (this._cachedIndex = 0),
                            (this.resultBuffer = void 0 !== r ? r : new e.constructor(n)),
                            (this.sampleValues = e),
                            (this.valueSize = n),
                            (this.settings = null),
                            (this.DefaultSettings_ = {});
                    }
                    evaluate(t) {
                        const e = this.parameterPositions;
                        let n = this._cachedIndex,
                            r = e[n],
                            i = e[n - 1];
                        t: {
                            e: {
                                let o;
                                n: {
                                    r: if (!(t < r)) {
                                        for (let o = n + 2; ; ) {
                                            if (void 0 === r) {
                                                if (t < i) break r;
                                                return (n = e.length), (this._cachedIndex = n), this.afterEnd_(n - 1, t, i);
                                            }
                                            if (n === o) break;
                                            if (((i = r), (r = e[++n]), t < r)) break e;
                                        }
                                        o = e.length;
                                        break n;
                                    }
                                    if (t >= i) break t;
                                    {
                                        const a = e[1];
                                        t < a && ((n = 2), (i = a));
                                        for (let o = n - 2; ; ) {
                                            if (void 0 === i) return (this._cachedIndex = 0), this.beforeStart_(0, t, r);
                                            if (n === o) break;
                                            if (((r = i), (i = e[--n - 1]), t >= i)) break e;
                                        }
                                        (o = n), (n = 0);
                                    }
                                }
                                for (; n < o; ) {
                                    const r = (n + o) >>> 1;
                                    t < e[r] ? (o = r) : (n = r + 1);
                                }
                                if (((r = e[n]), (i = e[n - 1]), void 0 === i)) return (this._cachedIndex = 0), this.beforeStart_(0, t, r);
                                if (void 0 === r) return (n = e.length), (this._cachedIndex = n), this.afterEnd_(n - 1, i, t);
                            }
                            (this._cachedIndex = n), this.intervalChanged_(n, i, r);
                        }
                        return this.interpolate_(n, i, t, r);
                    }
                    getSettings_() {
                        return this.settings || this.DefaultSettings_;
                    }
                    copySampleValue_(t) {
                        const e = this.resultBuffer,
                            n = this.sampleValues,
                            r = this.valueSize,
                            i = t * r;
                        for (let t = 0; t !== r; ++t) e[t] = n[i + t];
                        return e;
                    }
                    interpolate_() {
                        throw new Error("call to abstract method");
                    }
                    intervalChanged_() {}
                }
                (id.prototype.beforeStart_ = id.prototype.copySampleValue_), (id.prototype.afterEnd_ = id.prototype.copySampleValue_);
                class od extends id {
                    constructor(t, e, n, r) {
                        super(t, e, n, r), (this._weightPrev = -0), (this._offsetPrev = -0), (this._weightNext = -0), (this._offsetNext = -0), (this.DefaultSettings_ = { endingStart: ei, endingEnd: ei });
                    }
                    intervalChanged_(t, e, n) {
                        const r = this.parameterPositions;
                        let i = t - 2,
                            o = t + 1,
                            a = r[i],
                            s = r[o];
                        if (void 0 === a)
                            switch (this.getSettings_().endingStart) {
                                case ni:
                                    (i = t), (a = 2 * e - n);
                                    break;
                                case ri:
                                    (i = r.length - 2), (a = e + r[i] - r[i + 1]);
                                    break;
                                default:
                                    (i = t), (a = n);
                            }
                        if (void 0 === s)
                            switch (this.getSettings_().endingEnd) {
                                case ni:
                                    (o = t), (s = 2 * n - e);
                                    break;
                                case ri:
                                    (o = 1), (s = n + r[1] - r[0]);
                                    break;
                                default:
                                    (o = t - 1), (s = e);
                            }
                        const l = 0.5 * (n - e),
                            c = this.valueSize;
                        (this._weightPrev = l / (e - a)), (this._weightNext = l / (s - n)), (this._offsetPrev = i * c), (this._offsetNext = o * c);
                    }
                    interpolate_(t, e, n, r) {
                        const i = this.resultBuffer,
                            o = this.sampleValues,
                            a = this.valueSize,
                            s = t * a,
                            l = s - a,
                            c = this._offsetPrev,
                            u = this._offsetNext,
                            h = this._weightPrev,
                            d = this._weightNext,
                            f = (n - e) / (r - e),
                            p = f * f,
                            m = p * f,
                            g = -h * m + 2 * h * p - h * f,
                            v = (1 + h) * m + (-1.5 - 2 * h) * p + (-0.5 + h) * f + 1,
                            y = (-1 - d) * m + (1.5 + d) * p + 0.5 * f,
                            x = d * m - d * p;
                        for (let t = 0; t !== a; ++t) i[t] = g * o[c + t] + v * o[l + t] + y * o[s + t] + x * o[u + t];
                        return i;
                    }
                }
                class ad extends id {
                    constructor(t, e, n, r) {
                        super(t, e, n, r);
                    }
                    interpolate_(t, e, n, r) {
                        const i = this.resultBuffer,
                            o = this.sampleValues,
                            a = this.valueSize,
                            s = t * a,
                            l = s - a,
                            c = (n - e) / (r - e),
                            u = 1 - c;
                        for (let t = 0; t !== a; ++t) i[t] = o[l + t] * u + o[s + t] * c;
                        return i;
                    }
                }
                class sd extends id {
                    constructor(t, e, n, r) {
                        super(t, e, n, r);
                    }
                    interpolate_(t) {
                        return this.copySampleValue_(t - 1);
                    }
                }
                class ld {
                    constructor(t, e, n, r) {
                        if (void 0 === t) throw new Error("THREE.KeyframeTrack: track name is undefined");
                        if (void 0 === e || 0 === e.length) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + t);
                        (this.name = t), (this.times = rd.convertArray(e, this.TimeBufferType)), (this.values = rd.convertArray(n, this.ValueBufferType)), this.setInterpolation(r || this.DefaultInterpolation);
                    }
                    static toJSON(t) {
                        const e = t.constructor;
                        let n;
                        if (e.toJSON !== this.toJSON) n = e.toJSON(t);
                        else {
                            n = { name: t.name, times: rd.convertArray(t.times, Array), values: rd.convertArray(t.values, Array) };
                            const e = t.getInterpolation();
                            e !== t.DefaultInterpolation && (n.interpolation = e);
                        }
                        return (n.type = t.ValueTypeName), n;
                    }
                    InterpolantFactoryMethodDiscrete(t) {
                        return new sd(this.times, this.values, this.getValueSize(), t);
                    }
                    InterpolantFactoryMethodLinear(t) {
                        return new ad(this.times, this.values, this.getValueSize(), t);
                    }
                    InterpolantFactoryMethodSmooth(t) {
                        return new od(this.times, this.values, this.getValueSize(), t);
                    }
                    setInterpolation(t) {
                        let e;
                        switch (t) {
                            case Qr:
                                e = this.InterpolantFactoryMethodDiscrete;
                                break;
                            case Kr:
                                e = this.InterpolantFactoryMethodLinear;
                                break;
                            case ti:
                                e = this.InterpolantFactoryMethodSmooth;
                        }
                        if (void 0 === e) {
                            const e = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
                            if (void 0 === this.createInterpolant) {
                                if (t === this.DefaultInterpolation) throw new Error(e);
                                this.setInterpolation(this.DefaultInterpolation);
                            }
                            return console.warn("THREE.KeyframeTrack:", e), this;
                        }
                        return (this.createInterpolant = e), this;
                    }
                    getInterpolation() {
                        switch (this.createInterpolant) {
                            case this.InterpolantFactoryMethodDiscrete:
                                return Qr;
                            case this.InterpolantFactoryMethodLinear:
                                return Kr;
                            case this.InterpolantFactoryMethodSmooth:
                                return ti;
                        }
                    }
                    getValueSize() {
                        return this.values.length / this.times.length;
                    }
                    shift(t) {
                        if (0 !== t) {
                            const e = this.times;
                            for (let n = 0, r = e.length; n !== r; ++n) e[n] += t;
                        }
                        return this;
                    }
                    scale(t) {
                        if (1 !== t) {
                            const e = this.times;
                            for (let n = 0, r = e.length; n !== r; ++n) e[n] *= t;
                        }
                        return this;
                    }
                    trim(t, e) {
                        const n = this.times,
                            r = n.length;
                        let i = 0,
                            o = r - 1;
                        for (; i !== r && n[i] < t; ) ++i;
                        for (; -1 !== o && n[o] > e; ) --o;
                        if ((++o, 0 !== i || o !== r)) {
                            i >= o && ((o = Math.max(o, 1)), (i = o - 1));
                            const t = this.getValueSize();
                            (this.times = rd.arraySlice(n, i, o)), (this.values = rd.arraySlice(this.values, i * t, o * t));
                        }
                        return this;
                    }
                    validate() {
                        let t = !0;
                        const e = this.getValueSize();
                        e - Math.floor(e) != 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), (t = !1));
                        const n = this.times,
                            r = this.values,
                            i = n.length;
                        0 === i && (console.error("THREE.KeyframeTrack: Track is empty.", this), (t = !1));
                        let o = null;
                        for (let e = 0; e !== i; e++) {
                            const r = n[e];
                            if ("number" == typeof r && isNaN(r)) {
                                console.error("THREE.KeyframeTrack: Time is not a valid number.", this, e, r), (t = !1);
                                break;
                            }
                            if (null !== o && o > r) {
                                console.error("THREE.KeyframeTrack: Out of order keys.", this, e, r, o), (t = !1);
                                break;
                            }
                            o = r;
                        }
                        if (void 0 !== r && rd.isTypedArray(r))
                            for (let e = 0, n = r.length; e !== n; ++e) {
                                const n = r[e];
                                if (isNaN(n)) {
                                    console.error("THREE.KeyframeTrack: Value is not a valid number.", this, e, n), (t = !1);
                                    break;
                                }
                            }
                        return t;
                    }
                    optimize() {
                        const t = rd.arraySlice(this.times),
                            e = rd.arraySlice(this.values),
                            n = this.getValueSize(),
                            r = this.getInterpolation() === ti,
                            i = t.length - 1;
                        let o = 1;
                        for (let a = 1; a < i; ++a) {
                            let i = !1;
                            const s = t[a];
                            if (s !== t[a + 1] && (1 !== a || s !== t[0]))
                                if (r) i = !0;
                                else {
                                    const t = a * n,
                                        r = t - n,
                                        o = t + n;
                                    for (let a = 0; a !== n; ++a) {
                                        const n = e[t + a];
                                        if (n !== e[r + a] || n !== e[o + a]) {
                                            i = !0;
                                            break;
                                        }
                                    }
                                }
                            if (i) {
                                if (a !== o) {
                                    t[o] = t[a];
                                    const r = a * n,
                                        i = o * n;
                                    for (let t = 0; t !== n; ++t) e[i + t] = e[r + t];
                                }
                                ++o;
                            }
                        }
                        if (i > 0) {
                            t[o] = t[i];
                            for (let t = i * n, r = o * n, a = 0; a !== n; ++a) e[r + a] = e[t + a];
                            ++o;
                        }
                        return o !== t.length ? ((this.times = rd.arraySlice(t, 0, o)), (this.values = rd.arraySlice(e, 0, o * n))) : ((this.times = t), (this.values = e)), this;
                    }
                    clone() {
                        const t = rd.arraySlice(this.times, 0),
                            e = rd.arraySlice(this.values, 0),
                            n = new (0, this.constructor)(this.name, t, e);
                        return (n.createInterpolant = this.createInterpolant), n;
                    }
                }
                (ld.prototype.TimeBufferType = Float32Array), (ld.prototype.ValueBufferType = Float32Array), (ld.prototype.DefaultInterpolation = Kr);
                class cd extends ld {}
                (cd.prototype.ValueTypeName = "bool"),
                    (cd.prototype.ValueBufferType = Array),
                    (cd.prototype.DefaultInterpolation = Qr),
                    (cd.prototype.InterpolantFactoryMethodLinear = void 0),
                    (cd.prototype.InterpolantFactoryMethodSmooth = void 0);
                class ud extends ld {}
                ud.prototype.ValueTypeName = "color";
                class hd extends ld {}
                hd.prototype.ValueTypeName = "number";
                class dd extends id {
                    constructor(t, e, n, r) {
                        super(t, e, n, r);
                    }
                    interpolate_(t, e, n, r) {
                        const i = this.resultBuffer,
                            o = this.sampleValues,
                            a = this.valueSize,
                            s = (n - e) / (r - e);
                        let l = t * a;
                        for (let t = l + a; l !== t; l += 4) Ui.slerpFlat(i, 0, o, l - a, o, l, s);
                        return i;
                    }
                }
                class fd extends ld {
                    InterpolantFactoryMethodLinear(t) {
                        return new dd(this.times, this.values, this.getValueSize(), t);
                    }
                }
                (fd.prototype.ValueTypeName = "quaternion"), (fd.prototype.DefaultInterpolation = Kr), (fd.prototype.InterpolantFactoryMethodSmooth = void 0);
                class pd extends ld {}
                (pd.prototype.ValueTypeName = "string"),
                    (pd.prototype.ValueBufferType = Array),
                    (pd.prototype.DefaultInterpolation = Qr),
                    (pd.prototype.InterpolantFactoryMethodLinear = void 0),
                    (pd.prototype.InterpolantFactoryMethodSmooth = void 0);
                class md extends ld {}
                md.prototype.ValueTypeName = "vector";
                class gd {
                    constructor(t, e = -1, n, r = 2500) {
                        (this.name = t), (this.tracks = n), (this.duration = e), (this.blendMode = r), (this.uuid = yi()), this.duration < 0 && this.resetDuration();
                    }
                    static parse(t) {
                        const e = [],
                            n = t.tracks,
                            r = 1 / (t.fps || 1);
                        for (let t = 0, i = n.length; t !== i; ++t) e.push(vd(n[t]).scale(r));
                        const i = new this(t.name, t.duration, e, t.blendMode);
                        return (i.uuid = t.uuid), i;
                    }
                    static toJSON(t) {
                        const e = [],
                            n = t.tracks,
                            r = { name: t.name, duration: t.duration, tracks: e, uuid: t.uuid, blendMode: t.blendMode };
                        for (let t = 0, r = n.length; t !== r; ++t) e.push(ld.toJSON(n[t]));
                        return r;
                    }
                    static CreateFromMorphTargetSequence(t, e, n, r) {
                        const i = e.length,
                            o = [];
                        for (let t = 0; t < i; t++) {
                            let a = [],
                                s = [];
                            a.push((t + i - 1) % i, t, (t + 1) % i), s.push(0, 1, 0);
                            const l = rd.getKeyframeOrder(a);
                            (a = rd.sortedArray(a, 1, l)), (s = rd.sortedArray(s, 1, l)), r || 0 !== a[0] || (a.push(i), s.push(s[0])), o.push(new hd(".morphTargetInfluences[" + e[t].name + "]", a, s).scale(1 / n));
                        }
                        return new this(t, -1, o);
                    }
                    static findByName(t, e) {
                        let n = t;
                        if (!Array.isArray(t)) {
                            const e = t;
                            n = (e.geometry && e.geometry.animations) || e.animations;
                        }
                        for (let t = 0; t < n.length; t++) if (n[t].name === e) return n[t];
                        return null;
                    }
                    static CreateClipsFromMorphTargetSequences(t, e, n) {
                        const r = {},
                            i = /^([\w-]*?)([\d]+)$/;
                        for (let e = 0, n = t.length; e < n; e++) {
                            const n = t[e],
                                o = n.name.match(i);
                            if (o && o.length > 1) {
                                const t = o[1];
                                let e = r[t];
                                e || (r[t] = e = []), e.push(n);
                            }
                        }
                        const o = [];
                        for (const t in r) o.push(this.CreateFromMorphTargetSequence(t, r[t], e, n));
                        return o;
                    }
                    static parseAnimation(t, e) {
                        if (!t) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
                        const n = function (t, e, n, r, i) {
                                if (0 !== n.length) {
                                    const o = [],
                                        a = [];
                                    rd.flattenJSON(n, o, a, r), 0 !== o.length && i.push(new t(e, o, a));
                                }
                            },
                            r = [],
                            i = t.name || "default",
                            o = t.fps || 30,
                            a = t.blendMode;
                        let s = t.length || -1;
                        const l = t.hierarchy || [];
                        for (let t = 0; t < l.length; t++) {
                            const i = l[t].keys;
                            if (i && 0 !== i.length)
                                if (i[0].morphTargets) {
                                    const t = {};
                                    let e;
                                    for (e = 0; e < i.length; e++) if (i[e].morphTargets) for (let n = 0; n < i[e].morphTargets.length; n++) t[i[e].morphTargets[n]] = -1;
                                    for (const n in t) {
                                        const t = [],
                                            o = [];
                                        for (let r = 0; r !== i[e].morphTargets.length; ++r) {
                                            const r = i[e];
                                            t.push(r.time), o.push(r.morphTarget === n ? 1 : 0);
                                        }
                                        r.push(new hd(".morphTargetInfluence[" + n + "]", t, o));
                                    }
                                    s = t.length * (o || 1);
                                } else {
                                    const o = ".bones[" + e[t].name + "]";
                                    n(md, o + ".position", i, "pos", r), n(fd, o + ".quaternion", i, "rot", r), n(md, o + ".scale", i, "scl", r);
                                }
                        }
                        if (0 === r.length) return null;
                        return new this(i, s, r, a);
                    }
                    resetDuration() {
                        let t = 0;
                        for (let e = 0, n = this.tracks.length; e !== n; ++e) {
                            const n = this.tracks[e];
                            t = Math.max(t, n.times[n.times.length - 1]);
                        }
                        return (this.duration = t), this;
                    }
                    trim() {
                        for (let t = 0; t < this.tracks.length; t++) this.tracks[t].trim(0, this.duration);
                        return this;
                    }
                    validate() {
                        let t = !0;
                        for (let e = 0; e < this.tracks.length; e++) t = t && this.tracks[e].validate();
                        return t;
                    }
                    optimize() {
                        for (let t = 0; t < this.tracks.length; t++) this.tracks[t].optimize();
                        return this;
                    }
                    clone() {
                        const t = [];
                        for (let e = 0; e < this.tracks.length; e++) t.push(this.tracks[e].clone());
                        return new this.constructor(this.name, this.duration, t, this.blendMode);
                    }
                    toJSON() {
                        return this.constructor.toJSON(this);
                    }
                }
                function vd(t) {
                    if (void 0 === t.type) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
                    const e = (function (t) {
                        switch (t.toLowerCase()) {
                            case "scalar":
                            case "double":
                            case "float":
                            case "number":
                            case "integer":
                                return hd;
                            case "vector":
                            case "vector2":
                            case "vector3":
                            case "vector4":
                                return md;
                            case "color":
                                return ud;
                            case "quaternion":
                                return fd;
                            case "bool":
                            case "boolean":
                                return cd;
                            case "string":
                                return pd;
                        }
                        throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + t);
                    })(t.type);
                    if (void 0 === t.times) {
                        const e = [],
                            n = [];
                        rd.flattenJSON(t.keys, e, n, "value"), (t.times = e), (t.values = n);
                    }
                    return void 0 !== e.parse ? e.parse(t) : new e(t.name, t.times, t.values, t.interpolation);
                }
                const yd = {
                    enabled: !1,
                    files: {},
                    add: function (t, e) {
                        !1 !== this.enabled && (this.files[t] = e);
                    },
                    get: function (t) {
                        if (!1 !== this.enabled) return this.files[t];
                    },
                    remove: function (t) {
                        delete this.files[t];
                    },
                    clear: function () {
                        this.files = {};
                    },
                };
                class xd {
                    constructor(t, e, n) {
                        const r = this;
                        let i,
                            o = !1,
                            a = 0,
                            s = 0;
                        const l = [];
                        (this.onStart = void 0),
                            (this.onLoad = t),
                            (this.onProgress = e),
                            (this.onError = n),
                            (this.itemStart = function (t) {
                                s++, !1 === o && void 0 !== r.onStart && r.onStart(t, a, s), (o = !0);
                            }),
                            (this.itemEnd = function (t) {
                                a++, void 0 !== r.onProgress && r.onProgress(t, a, s), a === s && ((o = !1), void 0 !== r.onLoad && r.onLoad());
                            }),
                            (this.itemError = function (t) {
                                void 0 !== r.onError && r.onError(t);
                            }),
                            (this.resolveURL = function (t) {
                                return i ? i(t) : t;
                            }),
                            (this.setURLModifier = function (t) {
                                return (i = t), this;
                            }),
                            (this.addHandler = function (t, e) {
                                return l.push(t, e), this;
                            }),
                            (this.removeHandler = function (t) {
                                const e = l.indexOf(t);
                                return -1 !== e && l.splice(e, 2), this;
                            }),
                            (this.getHandler = function (t) {
                                for (let e = 0, n = l.length; e < n; e += 2) {
                                    const n = l[e],
                                        r = l[e + 1];
                                    if ((n.global && (n.lastIndex = 0), n.test(t))) return r;
                                }
                                return null;
                            });
                    }
                }
                const _d = new xd();
                class bd {
                    constructor(t) {
                        (this.manager = void 0 !== t ? t : _d), (this.crossOrigin = "anonymous"), (this.withCredentials = !1), (this.path = ""), (this.resourcePath = ""), (this.requestHeader = {});
                    }
                    load() {}
                    loadAsync(t, e) {
                        const n = this;
                        return new Promise(function (r, i) {
                            n.load(t, r, e, i);
                        });
                    }
                    parse() {}
                    setCrossOrigin(t) {
                        return (this.crossOrigin = t), this;
                    }
                    setWithCredentials(t) {
                        return (this.withCredentials = t), this;
                    }
                    setPath(t) {
                        return (this.path = t), this;
                    }
                    setResourcePath(t) {
                        return (this.resourcePath = t), this;
                    }
                    setRequestHeader(t) {
                        return (this.requestHeader = t), this;
                    }
                }
                const wd = {};
                class Sd extends bd {
                    constructor(t) {
                        super(t);
                    }
                    load(t, e, n, r) {
                        void 0 === t && (t = ""), void 0 !== this.path && (t = this.path + t), (t = this.manager.resolveURL(t));
                        const i = this,
                            o = yd.get(t);
                        if (void 0 !== o)
                            return (
                                i.manager.itemStart(t),
                                    setTimeout(function () {
                                        e && e(o), i.manager.itemEnd(t);
                                    }, 0),
                                    o
                            );
                        if (void 0 !== wd[t]) return void wd[t].push({ onLoad: e, onProgress: n, onError: r });
                        const a = t.match(/^data:(.*?)(;base64)?,(.*)$/);
                        let s;
                        if (a) {
                            const n = a[1],
                                o = !!a[2];
                            let s = a[3];
                            (s = decodeURIComponent(s)), o && (s = atob(s));
                            try {
                                let r;
                                const o = (this.responseType || "").toLowerCase();
                                switch (o) {
                                    case "arraybuffer":
                                    case "blob":
                                        const t = new Uint8Array(s.length);
                                        for (let e = 0; e < s.length; e++) t[e] = s.charCodeAt(e);
                                        r = "blob" === o ? new Blob([t.buffer], { type: n }) : t.buffer;
                                        break;
                                    case "document":
                                        const e = new DOMParser();
                                        r = e.parseFromString(s, n);
                                        break;
                                    case "json":
                                        r = JSON.parse(s);
                                        break;
                                    default:
                                        r = s;
                                }
                                setTimeout(function () {
                                    e && e(r), i.manager.itemEnd(t);
                                }, 0);
                            } catch (e) {
                                setTimeout(function () {
                                    r && r(e), i.manager.itemError(t), i.manager.itemEnd(t);
                                }, 0);
                            }
                        } else {
                            (wd[t] = []),
                                wd[t].push({ onLoad: e, onProgress: n, onError: r }),
                                (s = new XMLHttpRequest()),
                                s.open("GET", t, !0),
                                s.addEventListener(
                                    "load",
                                    function (e) {
                                        const n = this.response,
                                            r = wd[t];
                                        if ((delete wd[t], 200 === this.status || 0 === this.status)) {
                                            0 === this.status && console.warn("THREE.FileLoader: HTTP Status 0 received."), yd.add(t, n);
                                            for (let t = 0, e = r.length; t < e; t++) {
                                                const e = r[t];
                                                e.onLoad && e.onLoad(n);
                                            }
                                            i.manager.itemEnd(t);
                                        } else {
                                            for (let t = 0, n = r.length; t < n; t++) {
                                                const n = r[t];
                                                n.onError && n.onError(e);
                                            }
                                            i.manager.itemError(t), i.manager.itemEnd(t);
                                        }
                                    },
                                    !1
                                ),
                                s.addEventListener(
                                    "progress",
                                    function (e) {
                                        const n = wd[t];
                                        for (let t = 0, r = n.length; t < r; t++) {
                                            const r = n[t];
                                            r.onProgress && r.onProgress(e);
                                        }
                                    },
                                    !1
                                ),
                                s.addEventListener(
                                    "error",
                                    function (e) {
                                        const n = wd[t];
                                        delete wd[t];
                                        for (let t = 0, r = n.length; t < r; t++) {
                                            const r = n[t];
                                            r.onError && r.onError(e);
                                        }
                                        i.manager.itemError(t), i.manager.itemEnd(t);
                                    },
                                    !1
                                ),
                                s.addEventListener(
                                    "abort",
                                    function (e) {
                                        const n = wd[t];
                                        delete wd[t];
                                        for (let t = 0, r = n.length; t < r; t++) {
                                            const r = n[t];
                                            r.onError && r.onError(e);
                                        }
                                        i.manager.itemError(t), i.manager.itemEnd(t);
                                    },
                                    !1
                                ),
                            void 0 !== this.responseType && (s.responseType = this.responseType),
                            void 0 !== this.withCredentials && (s.withCredentials = this.withCredentials),
                            s.overrideMimeType && s.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain");
                            for (const t in this.requestHeader) s.setRequestHeader(t, this.requestHeader[t]);
                            s.send(null);
                        }
                        return i.manager.itemStart(t), s;
                    }
                    setResponseType(t) {
                        return (this.responseType = t), this;
                    }
                    setMimeType(t) {
                        return (this.mimeType = t), this;
                    }
                }
                class Md extends bd {
                    constructor(t) {
                        super(t);
                    }
                    load(t, e, n, r) {
                        void 0 !== this.path && (t = this.path + t), (t = this.manager.resolveURL(t));
                        const i = this,
                            o = yd.get(t);
                        if (void 0 !== o)
                            return (
                                i.manager.itemStart(t),
                                    setTimeout(function () {
                                        e && e(o), i.manager.itemEnd(t);
                                    }, 0),
                                    o
                            );
                        const a = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
                        function s() {
                            a.removeEventListener("load", s, !1), a.removeEventListener("error", l, !1), yd.add(t, this), e && e(this), i.manager.itemEnd(t);
                        }
                        function l(e) {
                            a.removeEventListener("load", s, !1), a.removeEventListener("error", l, !1), r && r(e), i.manager.itemError(t), i.manager.itemEnd(t);
                        }
                        return a.addEventListener("load", s, !1), a.addEventListener("error", l, !1), "data:" !== t.substr(0, 5) && void 0 !== this.crossOrigin && (a.crossOrigin = this.crossOrigin), i.manager.itemStart(t), (a.src = t), a;
                    }
                }
                class Td extends bd {
                    constructor(t) {
                        super(t);
                    }
                    load(t, e, n, r) {
                        const i = new $a(),
                            o = new Md(this.manager);
                        o.setCrossOrigin(this.crossOrigin), o.setPath(this.path);
                        let a = 0;
                        function s(n) {
                            o.load(
                                t[n],
                                function (t) {
                                    (i.images[n] = t), a++, 6 === a && ((i.needsUpdate = !0), e && e(i));
                                },
                                void 0,
                                r
                            );
                        }
                        for (let e = 0; e < t.length; ++e) s(e);
                        return i;
                    }
                }
                class Ed extends bd {
                    constructor(t) {
                        super(t);
                    }
                    load(t, e, n, r) {
                        const i = new Pi(),
                            o = new Md(this.manager);
                        return (
                            o.setCrossOrigin(this.crossOrigin),
                                o.setPath(this.path),
                                o.load(
                                    t,
                                    function (n) {
                                        i.image = n;
                                        const r = t.search(/\.jpe?g($|\?)/i) > 0 || 0 === t.search(/^data\:image\/jpeg/);
                                        (i.format = r ? Yr : Zr), (i.needsUpdate = !0), void 0 !== e && e(i);
                                    },
                                    n,
                                    r
                                ),
                                i
                        );
                    }
                }
                class Ad extends Qu {
                    constructor() {
                        super(), (this.type = "CurvePath"), (this.curves = []), (this.autoClose = !1);
                    }
                    add(t) {
                        this.curves.push(t);
                    }
                    closePath() {
                        const t = this.curves[0].getPoint(0),
                            e = this.curves[this.curves.length - 1].getPoint(1);
                        t.equals(e) || this.curves.push(new dh(e, t));
                    }
                    getPoint(t) {
                        const e = t * this.getLength(),
                            n = this.getCurveLengths();
                        let r = 0;
                        for (; r < n.length; ) {
                            if (n[r] >= e) {
                                const t = n[r] - e,
                                    i = this.curves[r],
                                    o = i.getLength(),
                                    a = 0 === o ? 0 : 1 - t / o;
                                return i.getPointAt(a);
                            }
                            r++;
                        }
                        return null;
                    }
                    getLength() {
                        const t = this.getCurveLengths();
                        return t[t.length - 1];
                    }
                    updateArcLengths() {
                        (this.needsUpdate = !0), (this.cacheLengths = null), this.getCurveLengths();
                    }
                    getCurveLengths() {
                        if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
                        const t = [];
                        let e = 0;
                        for (let n = 0, r = this.curves.length; n < r; n++) (e += this.curves[n].getLength()), t.push(e);
                        return (this.cacheLengths = t), t;
                    }
                    getSpacedPoints(t = 40) {
                        const e = [];
                        for (let n = 0; n <= t; n++) e.push(this.getPoint(n / t));
                        return this.autoClose && e.push(e[0]), e;
                    }
                    getPoints(t = 12) {
                        const e = [];
                        let n;
                        for (let r = 0, i = this.curves; r < i.length; r++) {
                            const o = i[r],
                                a = o && o.isEllipseCurve ? 2 * t : o && (o.isLineCurve || o.isLineCurve3) ? 1 : o && o.isSplineCurve ? t * o.points.length : t,
                                s = o.getPoints(a);
                            for (let t = 0; t < s.length; t++) {
                                const r = s[t];
                                (n && n.equals(r)) || (e.push(r), (n = r));
                            }
                        }
                        return this.autoClose && e.length > 1 && !e[e.length - 1].equals(e[0]) && e.push(e[0]), e;
                    }
                    copy(t) {
                        super.copy(t), (this.curves = []);
                        for (let e = 0, n = t.curves.length; e < n; e++) {
                            const n = t.curves[e];
                            this.curves.push(n.clone());
                        }
                        return (this.autoClose = t.autoClose), this;
                    }
                    toJSON() {
                        const t = super.toJSON();
                        (t.autoClose = this.autoClose), (t.curves = []);
                        for (let e = 0, n = this.curves.length; e < n; e++) {
                            const n = this.curves[e];
                            t.curves.push(n.toJSON());
                        }
                        return t;
                    }
                    fromJSON(t) {
                        super.fromJSON(t), (this.autoClose = t.autoClose), (this.curves = []);
                        for (let e = 0, n = t.curves.length; e < n; e++) {
                            const n = t.curves[e];
                            this.curves.push(new gh[n.type]().fromJSON(n));
                        }
                        return this;
                    }
                }
                class Ld extends Ad {
                    constructor(t) {
                        super(), (this.type = "Path"), (this.currentPoint = new Ei()), t && this.setFromPoints(t);
                    }
                    setFromPoints(t) {
                        this.moveTo(t[0].x, t[0].y);
                        for (let e = 1, n = t.length; e < n; e++) this.lineTo(t[e].x, t[e].y);
                        return this;
                    }
                    moveTo(t, e) {
                        return this.currentPoint.set(t, e), this;
                    }
                    lineTo(t, e) {
                        const n = new dh(this.currentPoint.clone(), new Ei(t, e));
                        return this.curves.push(n), this.currentPoint.set(t, e), this;
                    }
                    quadraticCurveTo(t, e, n, r) {
                        const i = new fh(this.currentPoint.clone(), new Ei(t, e), new Ei(n, r));
                        return this.curves.push(i), this.currentPoint.set(n, r), this;
                    }
                    bezierCurveTo(t, e, n, r, i, o) {
                        const a = new uh(this.currentPoint.clone(), new Ei(t, e), new Ei(n, r), new Ei(i, o));
                        return this.curves.push(a), this.currentPoint.set(i, o), this;
                    }
                    splineThru(t) {
                        const e = [this.currentPoint.clone()].concat(t),
                            n = new mh(e);
                        return this.curves.push(n), this.currentPoint.copy(t[t.length - 1]), this;
                    }
                    arc(t, e, n, r, i, o) {
                        const a = this.currentPoint.x,
                            s = this.currentPoint.y;
                        return this.absarc(t + a, e + s, n, r, i, o), this;
                    }
                    absarc(t, e, n, r, i, o) {
                        return this.absellipse(t, e, n, n, r, i, o), this;
                    }
                    ellipse(t, e, n, r, i, o, a, s) {
                        const l = this.currentPoint.x,
                            c = this.currentPoint.y;
                        return this.absellipse(t + l, e + c, n, r, i, o, a, s), this;
                    }
                    absellipse(t, e, n, r, i, o, a, s) {
                        const l = new Ku(t, e, n, r, i, o, a, s);
                        if (this.curves.length > 0) {
                            const t = l.getPoint(0);
                            t.equals(this.currentPoint) || this.lineTo(t.x, t.y);
                        }
                        this.curves.push(l);
                        const c = l.getPoint(1);
                        return this.currentPoint.copy(c), this;
                    }
                    copy(t) {
                        return super.copy(t), this.currentPoint.copy(t.currentPoint), this;
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (t.currentPoint = this.currentPoint.toArray()), t;
                    }
                    fromJSON(t) {
                        return super.fromJSON(t), this.currentPoint.fromArray(t.currentPoint), this;
                    }
                }
                class Cd extends Ld {
                    constructor(t) {
                        super(t), (this.uuid = yi()), (this.type = "Shape"), (this.holes = []);
                    }
                    getPointsHoles(t) {
                        const e = [];
                        for (let n = 0, r = this.holes.length; n < r; n++) e[n] = this.holes[n].getPoints(t);
                        return e;
                    }
                    extractPoints(t) {
                        return { shape: this.getPoints(t), holes: this.getPointsHoles(t) };
                    }
                    copy(t) {
                        super.copy(t), (this.holes = []);
                        for (let e = 0, n = t.holes.length; e < n; e++) {
                            const n = t.holes[e];
                            this.holes.push(n.clone());
                        }
                        return this;
                    }
                    toJSON() {
                        const t = super.toJSON();
                        (t.uuid = this.uuid), (t.holes = []);
                        for (let e = 0, n = this.holes.length; e < n; e++) {
                            const n = this.holes[e];
                            t.holes.push(n.toJSON());
                        }
                        return t;
                    }
                    fromJSON(t) {
                        super.fromJSON(t), (this.uuid = t.uuid), (this.holes = []);
                        for (let e = 0, n = t.holes.length; e < n; e++) {
                            const n = t.holes[e];
                            this.holes.push(new Ld().fromJSON(n));
                        }
                        return this;
                    }
                }
                class Rd extends Bo {
                    constructor(t, e = 1) {
                        super(), (this.type = "Light"), (this.color = new aa(t)), (this.intensity = e);
                    }
                    dispose() {}
                    copy(t) {
                        return super.copy(t), this.color.copy(t.color), (this.intensity = t.intensity), this;
                    }
                    toJSON(t) {
                        const e = super.toJSON(t);
                        return (
                            (e.object.color = this.color.getHex()),
                                (e.object.intensity = this.intensity),
                            void 0 !== this.groundColor && (e.object.groundColor = this.groundColor.getHex()),
                            void 0 !== this.distance && (e.object.distance = this.distance),
                            void 0 !== this.angle && (e.object.angle = this.angle),
                            void 0 !== this.decay && (e.object.decay = this.decay),
                            void 0 !== this.penumbra && (e.object.penumbra = this.penumbra),
                            void 0 !== this.shadow && (e.object.shadow = this.shadow.toJSON()),
                                e
                        );
                    }
                }
                Rd.prototype.isLight = !0;
                class Pd extends Rd {
                    constructor(t, e, n) {
                        super(t, n), (this.type = "HemisphereLight"), this.position.copy(Bo.DefaultUp), this.updateMatrix(), (this.groundColor = new aa(e));
                    }
                    copy(t) {
                        return Rd.prototype.copy.call(this, t), this.groundColor.copy(t.groundColor), this;
                    }
                }
                Pd.prototype.isHemisphereLight = !0;
                const Id = new mo(),
                    Od = new Fi(),
                    Dd = new Fi();
                class kd {
                    constructor(t) {
                        (this.camera = t),
                            (this.bias = 0),
                            (this.normalBias = 0),
                            (this.radius = 1),
                            (this.mapSize = new Ei(512, 512)),
                            (this.map = null),
                            (this.mapPass = null),
                            (this.matrix = new mo()),
                            (this.autoUpdate = !0),
                            (this.needsUpdate = !1),
                            (this._frustum = new os()),
                            (this._frameExtents = new Ei(1, 1)),
                            (this._viewportCount = 1),
                            (this._viewports = [new Oi(0, 0, 1, 1)]);
                    }
                    getViewportCount() {
                        return this._viewportCount;
                    }
                    getFrustum() {
                        return this._frustum;
                    }
                    updateMatrices(t) {
                        const e = this.camera,
                            n = this.matrix;
                        Od.setFromMatrixPosition(t.matrixWorld),
                            e.position.copy(Od),
                            Dd.setFromMatrixPosition(t.target.matrixWorld),
                            e.lookAt(Dd),
                            e.updateMatrixWorld(),
                            Id.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
                            this._frustum.setFromProjectionMatrix(Id),
                            n.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1),
                            n.multiply(e.projectionMatrix),
                            n.multiply(e.matrixWorldInverse);
                    }
                    getViewport(t) {
                        return this._viewports[t];
                    }
                    getFrameExtents() {
                        return this._frameExtents;
                    }
                    dispose() {
                        this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
                    }
                    copy(t) {
                        return (this.camera = t.camera.clone()), (this.bias = t.bias), (this.radius = t.radius), this.mapSize.copy(t.mapSize), this;
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                    toJSON() {
                        const t = {};
                        return (
                            0 !== this.bias && (t.bias = this.bias),
                            0 !== this.normalBias && (t.normalBias = this.normalBias),
                            1 !== this.radius && (t.radius = this.radius),
                            (512 === this.mapSize.x && 512 === this.mapSize.y) || (t.mapSize = this.mapSize.toArray()),
                                (t.camera = this.camera.toJSON(!1).object),
                                delete t.camera.matrix,
                                t
                        );
                    }
                }
                class Ud extends kd {
                    constructor() {
                        super(new Ya(50, 1, 0.5, 500)), (this.focus = 1);
                    }
                    updateMatrices(t) {
                        const e = this.camera,
                            n = 2 * vi * t.angle * this.focus,
                            r = this.mapSize.width / this.mapSize.height,
                            i = t.distance || e.far;
                        (n === e.fov && r === e.aspect && i === e.far) || ((e.fov = n), (e.aspect = r), (e.far = i), e.updateProjectionMatrix()), super.updateMatrices(t);
                    }
                    copy(t) {
                        return super.copy(t), (this.focus = t.focus), this;
                    }
                }
                Ud.prototype.isSpotLightShadow = !0;
                class Fd extends Rd {
                    constructor(t, e, n = 0, r = Math.PI / 3, i = 0, o = 1) {
                        super(t, e),
                            (this.type = "SpotLight"),
                            this.position.copy(Bo.DefaultUp),
                            this.updateMatrix(),
                            (this.target = new Bo()),
                            (this.distance = n),
                            (this.angle = r),
                            (this.penumbra = i),
                            (this.decay = o),
                            (this.shadow = new Ud());
                    }
                    get power() {
                        return this.intensity * Math.PI;
                    }
                    set power(t) {
                        this.intensity = t / Math.PI;
                    }
                    dispose() {
                        this.shadow.dispose();
                    }
                    copy(t) {
                        return super.copy(t), (this.distance = t.distance), (this.angle = t.angle), (this.penumbra = t.penumbra), (this.decay = t.decay), (this.target = t.target.clone()), (this.shadow = t.shadow.clone()), this;
                    }
                }
                Fd.prototype.isSpotLight = !0;
                const Nd = new mo(),
                    zd = new Fi(),
                    Bd = new Fi();
                class Gd extends kd {
                    constructor() {
                        super(new Ya(90, 1, 0.5, 500)),
                            (this._frameExtents = new Ei(4, 2)),
                            (this._viewportCount = 6),
                            (this._viewports = [new Oi(2, 1, 1, 1), new Oi(0, 1, 1, 1), new Oi(3, 1, 1, 1), new Oi(1, 1, 1, 1), new Oi(3, 0, 1, 1), new Oi(1, 0, 1, 1)]),
                            (this._cubeDirections = [new Fi(1, 0, 0), new Fi(-1, 0, 0), new Fi(0, 0, 1), new Fi(0, 0, -1), new Fi(0, 1, 0), new Fi(0, -1, 0)]),
                            (this._cubeUps = [new Fi(0, 1, 0), new Fi(0, 1, 0), new Fi(0, 1, 0), new Fi(0, 1, 0), new Fi(0, 0, 1), new Fi(0, 0, -1)]);
                    }
                    updateMatrices(t, e = 0) {
                        const n = this.camera,
                            r = this.matrix,
                            i = t.distance || n.far;
                        i !== n.far && ((n.far = i), n.updateProjectionMatrix()),
                            zd.setFromMatrixPosition(t.matrixWorld),
                            n.position.copy(zd),
                            Bd.copy(n.position),
                            Bd.add(this._cubeDirections[e]),
                            n.up.copy(this._cubeUps[e]),
                            n.lookAt(Bd),
                            n.updateMatrixWorld(),
                            r.makeTranslation(-zd.x, -zd.y, -zd.z),
                            Nd.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse),
                            this._frustum.setFromProjectionMatrix(Nd);
                    }
                }
                Gd.prototype.isPointLightShadow = !0;
                class Hd extends Rd {
                    constructor(t, e, n = 0, r = 1) {
                        super(t, e), (this.type = "PointLight"), (this.distance = n), (this.decay = r), (this.shadow = new Gd());
                    }
                    get power() {
                        return 4 * this.intensity * Math.PI;
                    }
                    set power(t) {
                        this.intensity = t / (4 * Math.PI);
                    }
                    dispose() {
                        this.shadow.dispose();
                    }
                    copy(t) {
                        return super.copy(t), (this.distance = t.distance), (this.decay = t.decay), (this.shadow = t.shadow.clone()), this;
                    }
                }
                Hd.prototype.isPointLight = !0;
                class Vd extends kd {
                    constructor() {
                        super(new ys(-5, 5, 5, -5, 0.5, 500));
                    }
                }
                Vd.prototype.isDirectionalLightShadow = !0;
                class Wd extends Rd {
                    constructor(t, e) {
                        super(t, e), (this.type = "DirectionalLight"), this.position.copy(Bo.DefaultUp), this.updateMatrix(), (this.target = new Bo()), (this.shadow = new Vd());
                    }
                    dispose() {
                        this.shadow.dispose();
                    }
                    copy(t) {
                        return super.copy(t), (this.target = t.target.clone()), (this.shadow = t.shadow.clone()), this;
                    }
                }
                Wd.prototype.isDirectionalLight = !0;
                class jd extends Rd {
                    constructor(t, e) {
                        super(t, e), (this.type = "AmbientLight");
                    }
                }
                jd.prototype.isAmbientLight = !0;
                class qd extends Rd {
                    constructor(t, e, n = 10, r = 10) {
                        super(t, e), (this.type = "RectAreaLight"), (this.width = n), (this.height = r);
                    }
                    copy(t) {
                        return super.copy(t), (this.width = t.width), (this.height = t.height), this;
                    }
                    toJSON(t) {
                        const e = super.toJSON(t);
                        return (e.object.width = this.width), (e.object.height = this.height), e;
                    }
                }
                qd.prototype.isRectAreaLight = !0;
                class Xd {
                    constructor() {
                        this.coefficients = [];
                        for (let t = 0; t < 9; t++) this.coefficients.push(new Fi());
                    }
                    set(t) {
                        for (let e = 0; e < 9; e++) this.coefficients[e].copy(t[e]);
                        return this;
                    }
                    zero() {
                        for (let t = 0; t < 9; t++) this.coefficients[t].set(0, 0, 0);
                        return this;
                    }
                    getAt(t, e) {
                        const n = t.x,
                            r = t.y,
                            i = t.z,
                            o = this.coefficients;
                        return (
                            e.copy(o[0]).multiplyScalar(0.282095),
                                e.addScaledVector(o[1], 0.488603 * r),
                                e.addScaledVector(o[2], 0.488603 * i),
                                e.addScaledVector(o[3], 0.488603 * n),
                                e.addScaledVector(o[4], n * r * 1.092548),
                                e.addScaledVector(o[5], r * i * 1.092548),
                                e.addScaledVector(o[6], 0.315392 * (3 * i * i - 1)),
                                e.addScaledVector(o[7], n * i * 1.092548),
                                e.addScaledVector(o[8], 0.546274 * (n * n - r * r)),
                                e
                        );
                    }
                    getIrradianceAt(t, e) {
                        const n = t.x,
                            r = t.y,
                            i = t.z,
                            o = this.coefficients;
                        return (
                            e.copy(o[0]).multiplyScalar(0.886227),
                                e.addScaledVector(o[1], 1.023328 * r),
                                e.addScaledVector(o[2], 1.023328 * i),
                                e.addScaledVector(o[3], 1.023328 * n),
                                e.addScaledVector(o[4], 0.858086 * n * r),
                                e.addScaledVector(o[5], 0.858086 * r * i),
                                e.addScaledVector(o[6], 0.743125 * i * i - 0.247708),
                                e.addScaledVector(o[7], 0.858086 * n * i),
                                e.addScaledVector(o[8], 0.429043 * (n * n - r * r)),
                                e
                        );
                    }
                    add(t) {
                        for (let e = 0; e < 9; e++) this.coefficients[e].add(t.coefficients[e]);
                        return this;
                    }
                    addScaledSH(t, e) {
                        for (let n = 0; n < 9; n++) this.coefficients[n].addScaledVector(t.coefficients[n], e);
                        return this;
                    }
                    scale(t) {
                        for (let e = 0; e < 9; e++) this.coefficients[e].multiplyScalar(t);
                        return this;
                    }
                    lerp(t, e) {
                        for (let n = 0; n < 9; n++) this.coefficients[n].lerp(t.coefficients[n], e);
                        return this;
                    }
                    equals(t) {
                        for (let e = 0; e < 9; e++) if (!this.coefficients[e].equals(t.coefficients[e])) return !1;
                        return !0;
                    }
                    copy(t) {
                        return this.set(t.coefficients);
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                    fromArray(t, e = 0) {
                        const n = this.coefficients;
                        for (let r = 0; r < 9; r++) n[r].fromArray(t, e + 3 * r);
                        return this;
                    }
                    toArray(t = [], e = 0) {
                        const n = this.coefficients;
                        for (let r = 0; r < 9; r++) n[r].toArray(t, e + 3 * r);
                        return t;
                    }
                    static getBasisAt(t, e) {
                        const n = t.x,
                            r = t.y,
                            i = t.z;
                        (e[0] = 0.282095),
                            (e[1] = 0.488603 * r),
                            (e[2] = 0.488603 * i),
                            (e[3] = 0.488603 * n),
                            (e[4] = 1.092548 * n * r),
                            (e[5] = 1.092548 * r * i),
                            (e[6] = 0.315392 * (3 * i * i - 1)),
                            (e[7] = 1.092548 * n * i),
                            (e[8] = 0.546274 * (n * n - r * r));
                    }
                }
                Xd.prototype.isSphericalHarmonics3 = !0;
                class Yd extends Rd {
                    constructor(t = new Xd(), e = 1) {
                        super(void 0, e), (this.sh = t);
                    }
                    copy(t) {
                        return super.copy(t), this.sh.copy(t.sh), this;
                    }
                    fromJSON(t) {
                        return (this.intensity = t.intensity), this.sh.fromArray(t.sh), this;
                    }
                    toJSON(t) {
                        const e = super.toJSON(t);
                        return (e.object.sh = this.sh.toArray()), e;
                    }
                }
                Yd.prototype.isLightProbe = !0;
                class Zd {
                    static decodeText(t) {
                        if ("undefined" != typeof TextDecoder) return new TextDecoder().decode(t);
                        let e = "";
                        for (let n = 0, r = t.length; n < r; n++) e += String.fromCharCode(t[n]);
                        try {
                            return decodeURIComponent(escape(e));
                        } catch (t) {
                            return e;
                        }
                    }
                    static extractUrlBase(t) {
                        const e = t.lastIndexOf("/");
                        return -1 === e ? "./" : t.substr(0, e + 1);
                    }
                }
                class Jd extends wa {
                    constructor() {
                        super(), (this.type = "InstancedBufferGeometry"), (this.instanceCount = 1 / 0);
                    }
                    copy(t) {
                        return super.copy(t), (this.instanceCount = t.instanceCount), this;
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                    toJSON() {
                        const t = super.toJSON(this);
                        return (t.instanceCount = this.instanceCount), (t.isInstancedBufferGeometry = !0), t;
                    }
                }
                Jd.prototype.isInstancedBufferGeometry = !0;
                class $d extends ua {
                    constructor(t, e, n, r = 1) {
                        "number" == typeof n && ((r = n), (n = !1), console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")), super(t, e, n), (this.meshPerAttribute = r);
                    }
                    copy(t) {
                        return super.copy(t), (this.meshPerAttribute = t.meshPerAttribute), this;
                    }
                    toJSON() {
                        const t = super.toJSON();
                        return (t.meshPerAttribute = this.meshPerAttribute), (t.isInstancedBufferAttribute = !0), t;
                    }
                }
                $d.prototype.isInstancedBufferAttribute = !0;
                (class extends bd {
                    constructor(t) {
                        super(t),
                        "undefined" == typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),
                        "undefined" == typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported."),
                            (this.options = { premultiplyAlpha: "none" });
                    }
                    setOptions(t) {
                        return (this.options = t), this;
                    }
                    load(t, e, n, r) {
                        void 0 === t && (t = ""), void 0 !== this.path && (t = this.path + t), (t = this.manager.resolveURL(t));
                        const i = this,
                            o = yd.get(t);
                        if (void 0 !== o)
                            return (
                                i.manager.itemStart(t),
                                    setTimeout(function () {
                                        e && e(o), i.manager.itemEnd(t);
                                    }, 0),
                                    o
                            );
                        const a = {};
                        (a.credentials = "anonymous" === this.crossOrigin ? "same-origin" : "include"),
                            (a.headers = this.requestHeader),
                            fetch(t, a)
                                .then(function (t) {
                                    return t.blob();
                                })
                                .then(function (t) {
                                    return createImageBitmap(t, Object.assign(i.options, { colorSpaceConversion: "none" }));
                                })
                                .then(function (n) {
                                    yd.add(t, n), e && e(n), i.manager.itemEnd(t);
                                })
                                .catch(function (e) {
                                    r && r(e), i.manager.itemError(t), i.manager.itemEnd(t);
                                }),
                            i.manager.itemStart(t);
                    }
                }.prototype.isImageBitmapLoader = !0);
                class Qd {
                    constructor() {
                        (this.type = "ShapePath"), (this.color = new aa()), (this.subPaths = []), (this.currentPath = null);
                    }
                    moveTo(t, e) {
                        return (this.currentPath = new Ld()), this.subPaths.push(this.currentPath), this.currentPath.moveTo(t, e), this;
                    }
                    lineTo(t, e) {
                        return this.currentPath.lineTo(t, e), this;
                    }
                    quadraticCurveTo(t, e, n, r) {
                        return this.currentPath.quadraticCurveTo(t, e, n, r), this;
                    }
                    bezierCurveTo(t, e, n, r, i, o) {
                        return this.currentPath.bezierCurveTo(t, e, n, r, i, o), this;
                    }
                    splineThru(t) {
                        return this.currentPath.splineThru(t), this;
                    }
                    toShapes(t, e) {
                        function n(t) {
                            const e = [];
                            for (let n = 0, r = t.length; n < r; n++) {
                                const r = t[n],
                                    i = new Cd();
                                (i.curves = r.curves), e.push(i);
                            }
                            return e;
                        }
                        function r(t, e) {
                            const n = e.length;
                            let r = !1;
                            for (let i = n - 1, o = 0; o < n; i = o++) {
                                let n = e[i],
                                    a = e[o],
                                    s = a.x - n.x,
                                    l = a.y - n.y;
                                if (Math.abs(l) > Number.EPSILON) {
                                    if ((l < 0 && ((n = e[o]), (s = -s), (a = e[i]), (l = -l)), t.y < n.y || t.y > a.y)) continue;
                                    if (t.y === n.y) {
                                        if (t.x === n.x) return !0;
                                    } else {
                                        const e = l * (t.x - n.x) - s * (t.y - n.y);
                                        if (0 === e) return !0;
                                        if (e < 0) continue;
                                        r = !r;
                                    }
                                } else {
                                    if (t.y !== n.y) continue;
                                    if ((a.x <= t.x && t.x <= n.x) || (n.x <= t.x && t.x <= a.x)) return !0;
                                }
                            }
                            return r;
                        }
                        const i = Hh.isClockWise,
                            o = this.subPaths;
                        if (0 === o.length) return [];
                        if (!0 === e) return n(o);
                        let a, s, l;
                        const c = [];
                        if (1 === o.length) return (s = o[0]), (l = new Cd()), (l.curves = s.curves), c.push(l), c;
                        let u = !i(o[0].getPoints());
                        u = t ? !u : u;
                        const h = [],
                            d = [];
                        let f,
                            p,
                            m = [],
                            g = 0;
                        (d[g] = void 0), (m[g] = []);
                        for (let e = 0, n = o.length; e < n; e++)
                            (s = o[e]), (f = s.getPoints()), (a = i(f)), (a = t ? !a : a), a ? (!u && d[g] && g++, (d[g] = { s: new Cd(), p: f }), (d[g].s.curves = s.curves), u && g++, (m[g] = [])) : m[g].push({ h: s, p: f[0] });
                        if (!d[0]) return n(o);
                        if (d.length > 1) {
                            let t = !1;
                            const e = [];
                            for (let t = 0, e = d.length; t < e; t++) h[t] = [];
                            for (let n = 0, i = d.length; n < i; n++) {
                                const i = m[n];
                                for (let o = 0; o < i.length; o++) {
                                    const a = i[o];
                                    let s = !0;
                                    for (let i = 0; i < d.length; i++) r(a.p, d[i].p) && (n !== i && e.push({ froms: n, tos: i, hole: o }), s ? ((s = !1), h[i].push(a)) : (t = !0));
                                    s && h[n].push(a);
                                }
                            }
                            e.length > 0 && (t || (m = h));
                        }
                        for (let t = 0, e = d.length; t < e; t++) {
                            (l = d[t].s), c.push(l), (p = m[t]);
                            for (let t = 0, e = p.length; t < e; t++) l.holes.push(p[t].h);
                        }
                        return c;
                    }
                }
                class Kd {
                    constructor(t) {
                        (this.type = "Font"), (this.data = t);
                    }
                    generateShapes(t, e = 100) {
                        const n = [],
                            r = (function (t, e, n) {
                                const r = Array.from(t),
                                    i = e / n.resolution,
                                    o = (n.boundingBox.yMax - n.boundingBox.yMin + n.underlineThickness) * i,
                                    a = [];
                                let s = 0,
                                    l = 0;
                                for (let t = 0; t < r.length; t++) {
                                    const e = r[t];
                                    if ("\n" === e) (s = 0), (l -= o);
                                    else {
                                        const t = tf(e, i, s, l, n);
                                        (s += t.offsetX), a.push(t.path);
                                    }
                                }
                                return a;
                            })(t, e, this.data);
                        for (let t = 0, e = r.length; t < e; t++) Array.prototype.push.apply(n, r[t].toShapes());
                        return n;
                    }
                }
                function tf(t, e, n, r, i) {
                    const o = i.glyphs[t] || i.glyphs["?"];
                    if (!o) return void console.error('THREE.Font: character "' + t + '" does not exists in font family ' + i.familyName + ".");
                    const a = new Qd();
                    let s, l, c, u, h, d, f, p;
                    if (o.o) {
                        const t = o._cachedOutline || (o._cachedOutline = o.o.split(" "));
                        for (let i = 0, o = t.length; i < o; ) {
                            switch (t[i++]) {
                                case "m":
                                    (s = t[i++] * e + n), (l = t[i++] * e + r), a.moveTo(s, l);
                                    break;
                                case "l":
                                    (s = t[i++] * e + n), (l = t[i++] * e + r), a.lineTo(s, l);
                                    break;
                                case "q":
                                    (c = t[i++] * e + n), (u = t[i++] * e + r), (h = t[i++] * e + n), (d = t[i++] * e + r), a.quadraticCurveTo(h, d, c, u);
                                    break;
                                case "b":
                                    (c = t[i++] * e + n), (u = t[i++] * e + r), (h = t[i++] * e + n), (d = t[i++] * e + r), (f = t[i++] * e + n), (p = t[i++] * e + r), a.bezierCurveTo(h, d, f, p, c, u);
                            }
                        }
                    }
                    return { offsetX: o.ha * e, path: a };
                }
                Kd.prototype.isFont = !0;
                let ef;
                const nf = function () {
                    return void 0 === ef && (ef = new (window.AudioContext || window.webkitAudioContext)()), ef;
                };
                class rf extends bd {
                    constructor(t) {
                        super(t);
                    }
                    load(t, e, n, r) {
                        const i = this,
                            o = new Sd(this.manager);
                        o.setResponseType("arraybuffer"),
                            o.setPath(this.path),
                            o.setRequestHeader(this.requestHeader),
                            o.setWithCredentials(this.withCredentials),
                            o.load(
                                t,
                                function (n) {
                                    try {
                                        const t = n.slice(0);
                                        nf().decodeAudioData(t, function (t) {
                                            e(t);
                                        });
                                    } catch (e) {
                                        r ? r(e) : console.error(e), i.manager.itemError(t);
                                    }
                                },
                                n,
                                r
                            );
                    }
                }
                (class extends Yd {
                    constructor(t, e, n = 1) {
                        super(void 0, n);
                        const r = new aa().set(t),
                            i = new aa().set(e),
                            o = new Fi(r.r, r.g, r.b),
                            a = new Fi(i.r, i.g, i.b),
                            s = Math.sqrt(Math.PI),
                            l = s * Math.sqrt(0.75);
                        this.sh.coefficients[0].copy(o).add(a).multiplyScalar(s), this.sh.coefficients[1].copy(o).sub(a).multiplyScalar(l);
                    }
                }.prototype.isHemisphereLightProbe = !0);
                (class extends Yd {
                    constructor(t, e = 1) {
                        super(void 0, e);
                        const n = new aa().set(t);
                        this.sh.coefficients[0].set(n.r, n.g, n.b).multiplyScalar(2 * Math.sqrt(Math.PI));
                    }
                }.prototype.isAmbientLightProbe = !0);
                class of extends Bo {
                    constructor(t) {
                        super(),
                            (this.type = "Audio"),
                            (this.listener = t),
                            (this.context = t.context),
                            (this.gain = this.context.createGain()),
                            this.gain.connect(t.getInput()),
                            (this.autoplay = !1),
                            (this.buffer = null),
                            (this.detune = 0),
                            (this.loop = !1),
                            (this.loopStart = 0),
                            (this.loopEnd = 0),
                            (this.offset = 0),
                            (this.duration = void 0),
                            (this.playbackRate = 1),
                            (this.isPlaying = !1),
                            (this.hasPlaybackControl = !0),
                            (this.source = null),
                            (this.sourceType = "empty"),
                            (this._startedAt = 0),
                            (this._progress = 0),
                            (this._connected = !1),
                            (this.filters = []);
                    }
                    getOutput() {
                        return this.gain;
                    }
                    setNodeSource(t) {
                        return (this.hasPlaybackControl = !1), (this.sourceType = "audioNode"), (this.source = t), this.connect(), this;
                    }
                    setMediaElementSource(t) {
                        return (this.hasPlaybackControl = !1), (this.sourceType = "mediaNode"), (this.source = this.context.createMediaElementSource(t)), this.connect(), this;
                    }
                    setMediaStreamSource(t) {
                        return (this.hasPlaybackControl = !1), (this.sourceType = "mediaStreamNode"), (this.source = this.context.createMediaStreamSource(t)), this.connect(), this;
                    }
                    setBuffer(t) {
                        return (this.buffer = t), (this.sourceType = "buffer"), this.autoplay && this.play(), this;
                    }
                    play(t = 0) {
                        if (!0 === this.isPlaying) return void console.warn("THREE.Audio: Audio is already playing.");
                        if (!1 === this.hasPlaybackControl) return void console.warn("THREE.Audio: this Audio has no playback control.");
                        this._startedAt = this.context.currentTime + t;
                        const e = this.context.createBufferSource();
                        return (
                            (e.buffer = this.buffer),
                                (e.loop = this.loop),
                                (e.loopStart = this.loopStart),
                                (e.loopEnd = this.loopEnd),
                                (e.onended = this.onEnded.bind(this)),
                                e.start(this._startedAt, this._progress + this.offset, this.duration),
                                (this.isPlaying = !0),
                                (this.source = e),
                                this.setDetune(this.detune),
                                this.setPlaybackRate(this.playbackRate),
                                this.connect()
                        );
                    }
                    pause() {
                        if (!1 !== this.hasPlaybackControl)
                            return (
                                !0 === this.isPlaying &&
                                ((this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate),
                                !0 === this.loop && (this._progress = this._progress % (this.duration || this.buffer.duration)),
                                    this.source.stop(),
                                    (this.source.onended = null),
                                    (this.isPlaying = !1)),
                                    this
                            );
                        console.warn("THREE.Audio: this Audio has no playback control.");
                    }
                    stop() {
                        if (!1 !== this.hasPlaybackControl) return (this._progress = 0), this.source.stop(), (this.source.onended = null), (this.isPlaying = !1), this;
                        console.warn("THREE.Audio: this Audio has no playback control.");
                    }
                    connect() {
                        if (this.filters.length > 0) {
                            this.source.connect(this.filters[0]);
                            for (let t = 1, e = this.filters.length; t < e; t++) this.filters[t - 1].connect(this.filters[t]);
                            this.filters[this.filters.length - 1].connect(this.getOutput());
                        } else this.source.connect(this.getOutput());
                        return (this._connected = !0), this;
                    }
                    disconnect() {
                        if (this.filters.length > 0) {
                            this.source.disconnect(this.filters[0]);
                            for (let t = 1, e = this.filters.length; t < e; t++) this.filters[t - 1].disconnect(this.filters[t]);
                            this.filters[this.filters.length - 1].disconnect(this.getOutput());
                        } else this.source.disconnect(this.getOutput());
                        return (this._connected = !1), this;
                    }
                    getFilters() {
                        return this.filters;
                    }
                    setFilters(t) {
                        return t || (t = []), !0 === this._connected ? (this.disconnect(), (this.filters = t.slice()), this.connect()) : (this.filters = t.slice()), this;
                    }
                    setDetune(t) {
                        if (((this.detune = t), void 0 !== this.source.detune)) return !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
                    }
                    getDetune() {
                        return this.detune;
                    }
                    getFilter() {
                        return this.getFilters()[0];
                    }
                    setFilter(t) {
                        return this.setFilters(t ? [t] : []);
                    }
                    setPlaybackRate(t) {
                        if (!1 !== this.hasPlaybackControl) return (this.playbackRate = t), !0 === this.isPlaying && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
                        console.warn("THREE.Audio: this Audio has no playback control.");
                    }
                    getPlaybackRate() {
                        return this.playbackRate;
                    }
                    onEnded() {
                        this.isPlaying = !1;
                    }
                    getLoop() {
                        return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
                    }
                    setLoop(t) {
                        if (!1 !== this.hasPlaybackControl) return (this.loop = t), !0 === this.isPlaying && (this.source.loop = this.loop), this;
                        console.warn("THREE.Audio: this Audio has no playback control.");
                    }
                    setLoopStart(t) {
                        return (this.loopStart = t), this;
                    }
                    setLoopEnd(t) {
                        return (this.loopEnd = t), this;
                    }
                    getVolume() {
                        return this.gain.gain.value;
                    }
                    setVolume(t) {
                        return this.gain.gain.setTargetAtTime(t, this.context.currentTime, 0.01), this;
                    }
                }
                class af {
                    constructor(t, e, n) {
                        let r, i, o;
                        switch (((this.binding = t), (this.valueSize = n), e)) {
                            case "quaternion":
                                (r = this._slerp), (i = this._slerpAdditive), (o = this._setAdditiveIdentityQuaternion), (this.buffer = new Float64Array(6 * n)), (this._workIndex = 5);
                                break;
                            case "string":
                            case "bool":
                                (r = this._select), (i = this._select), (o = this._setAdditiveIdentityOther), (this.buffer = new Array(5 * n));
                                break;
                            default:
                                (r = this._lerp), (i = this._lerpAdditive), (o = this._setAdditiveIdentityNumeric), (this.buffer = new Float64Array(5 * n));
                        }
                        (this._mixBufferRegion = r),
                            (this._mixBufferRegionAdditive = i),
                            (this._setIdentity = o),
                            (this._origIndex = 3),
                            (this._addIndex = 4),
                            (this.cumulativeWeight = 0),
                            (this.cumulativeWeightAdditive = 0),
                            (this.useCount = 0),
                            (this.referenceCount = 0);
                    }
                    accumulate(t, e) {
                        const n = this.buffer,
                            r = this.valueSize,
                            i = t * r + r;
                        let o = this.cumulativeWeight;
                        if (0 === o) {
                            for (let t = 0; t !== r; ++t) n[i + t] = n[t];
                            o = e;
                        } else {
                            o += e;
                            const t = e / o;
                            this._mixBufferRegion(n, i, 0, t, r);
                        }
                        this.cumulativeWeight = o;
                    }
                    accumulateAdditive(t) {
                        const e = this.buffer,
                            n = this.valueSize,
                            r = n * this._addIndex;
                        0 === this.cumulativeWeightAdditive && this._setIdentity(), this._mixBufferRegionAdditive(e, r, 0, t, n), (this.cumulativeWeightAdditive += t);
                    }
                    apply(t) {
                        const e = this.valueSize,
                            n = this.buffer,
                            r = t * e + e,
                            i = this.cumulativeWeight,
                            o = this.cumulativeWeightAdditive,
                            a = this.binding;
                        if (((this.cumulativeWeight = 0), (this.cumulativeWeightAdditive = 0), i < 1)) {
                            const t = e * this._origIndex;
                            this._mixBufferRegion(n, r, t, 1 - i, e);
                        }
                        o > 0 && this._mixBufferRegionAdditive(n, r, this._addIndex * e, 1, e);
                        for (let t = e, i = e + e; t !== i; ++t)
                            if (n[t] !== n[t + e]) {
                                a.setValue(n, r);
                                break;
                            }
                    }
                    saveOriginalState() {
                        const t = this.binding,
                            e = this.buffer,
                            n = this.valueSize,
                            r = n * this._origIndex;
                        t.getValue(e, r);
                        for (let t = n, i = r; t !== i; ++t) e[t] = e[r + (t % n)];
                        this._setIdentity(), (this.cumulativeWeight = 0), (this.cumulativeWeightAdditive = 0);
                    }
                    restoreOriginalState() {
                        const t = 3 * this.valueSize;
                        this.binding.setValue(this.buffer, t);
                    }
                    _setAdditiveIdentityNumeric() {
                        const t = this._addIndex * this.valueSize,
                            e = t + this.valueSize;
                        for (let n = t; n < e; n++) this.buffer[n] = 0;
                    }
                    _setAdditiveIdentityQuaternion() {
                        this._setAdditiveIdentityNumeric(), (this.buffer[this._addIndex * this.valueSize + 3] = 1);
                    }
                    _setAdditiveIdentityOther() {
                        const t = this._origIndex * this.valueSize,
                            e = this._addIndex * this.valueSize;
                        for (let n = 0; n < this.valueSize; n++) this.buffer[e + n] = this.buffer[t + n];
                    }
                    _select(t, e, n, r, i) {
                        if (r >= 0.5) for (let r = 0; r !== i; ++r) t[e + r] = t[n + r];
                    }
                    _slerp(t, e, n, r) {
                        Ui.slerpFlat(t, e, t, e, t, n, r);
                    }
                    _slerpAdditive(t, e, n, r, i) {
                        const o = this._workIndex * i;
                        Ui.multiplyQuaternionsFlat(t, o, t, e, t, n), Ui.slerpFlat(t, e, t, e, t, o, r);
                    }
                    _lerp(t, e, n, r, i) {
                        const o = 1 - r;
                        for (let a = 0; a !== i; ++a) {
                            const i = e + a;
                            t[i] = t[i] * o + t[n + a] * r;
                        }
                    }
                    _lerpAdditive(t, e, n, r, i) {
                        for (let o = 0; o !== i; ++o) {
                            const i = e + o;
                            t[i] = t[i] + t[n + o] * r;
                        }
                    }
                }
                const sf = "\\[\\]\\.:\\/",
                    lf = new RegExp("[\\[\\]\\.:\\/]", "g"),
                    cf = "[^\\[\\]\\.:\\/]",
                    uf = "[^" + sf.replace("\\.", "") + "]",
                    hf = /((?:WC+[\/:])*)/.source.replace("WC", cf),
                    df = /(WCOD+)?/.source.replace("WCOD", uf),
                    ff = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", cf),
                    pf = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", cf),
                    mf = new RegExp("^" + hf + df + ff + pf + "$"),
                    gf = ["material", "materials", "bones"];
                class vf {
                    constructor(t, e, n) {
                        (this.path = e),
                            (this.parsedPath = n || vf.parseTrackName(e)),
                            (this.node = vf.findNode(t, this.parsedPath.nodeName) || t),
                            (this.rootNode = t),
                            (this.getValue = this._getValue_unbound),
                            (this.setValue = this._setValue_unbound);
                    }
                    static create(t, e, n) {
                        return t && t.isAnimationObjectGroup ? new vf.Composite(t, e, n) : new vf(t, e, n);
                    }
                    static sanitizeNodeName(t) {
                        return t.replace(/\s/g, "_").replace(lf, "");
                    }
                    static parseTrackName(t) {
                        const e = mf.exec(t);
                        if (!e) throw new Error("PropertyBinding: Cannot parse trackName: " + t);
                        const n = { nodeName: e[2], objectName: e[3], objectIndex: e[4], propertyName: e[5], propertyIndex: e[6] },
                            r = n.nodeName && n.nodeName.lastIndexOf(".");
                        if (void 0 !== r && -1 !== r) {
                            const t = n.nodeName.substring(r + 1);
                            -1 !== gf.indexOf(t) && ((n.nodeName = n.nodeName.substring(0, r)), (n.objectName = t));
                        }
                        if (null === n.propertyName || 0 === n.propertyName.length) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + t);
                        return n;
                    }
                    static findNode(t, e) {
                        if (!e || "" === e || "." === e || -1 === e || e === t.name || e === t.uuid) return t;
                        if (t.skeleton) {
                            const n = t.skeleton.getBoneByName(e);
                            if (void 0 !== n) return n;
                        }
                        if (t.children) {
                            const n = function (t) {
                                    for (let r = 0; r < t.length; r++) {
                                        const i = t[r];
                                        if (i.name === e || i.uuid === e) return i;
                                        const o = n(i.children);
                                        if (o) return o;
                                    }
                                    return null;
                                },
                                r = n(t.children);
                            if (r) return r;
                        }
                        return null;
                    }
                    _getValue_unavailable() {}
                    _setValue_unavailable() {}
                    _getValue_direct(t, e) {
                        t[e] = this.node[this.propertyName];
                    }
                    _getValue_array(t, e) {
                        const n = this.resolvedProperty;
                        for (let r = 0, i = n.length; r !== i; ++r) t[e++] = n[r];
                    }
                    _getValue_arrayElement(t, e) {
                        t[e] = this.resolvedProperty[this.propertyIndex];
                    }
                    _getValue_toArray(t, e) {
                        this.resolvedProperty.toArray(t, e);
                    }
                    _setValue_direct(t, e) {
                        this.targetObject[this.propertyName] = t[e];
                    }
                    _setValue_direct_setNeedsUpdate(t, e) {
                        (this.targetObject[this.propertyName] = t[e]), (this.targetObject.needsUpdate = !0);
                    }
                    _setValue_direct_setMatrixWorldNeedsUpdate(t, e) {
                        (this.targetObject[this.propertyName] = t[e]), (this.targetObject.matrixWorldNeedsUpdate = !0);
                    }
                    _setValue_array(t, e) {
                        const n = this.resolvedProperty;
                        for (let r = 0, i = n.length; r !== i; ++r) n[r] = t[e++];
                    }
                    _setValue_array_setNeedsUpdate(t, e) {
                        const n = this.resolvedProperty;
                        for (let r = 0, i = n.length; r !== i; ++r) n[r] = t[e++];
                        this.targetObject.needsUpdate = !0;
                    }
                    _setValue_array_setMatrixWorldNeedsUpdate(t, e) {
                        const n = this.resolvedProperty;
                        for (let r = 0, i = n.length; r !== i; ++r) n[r] = t[e++];
                        this.targetObject.matrixWorldNeedsUpdate = !0;
                    }
                    _setValue_arrayElement(t, e) {
                        this.resolvedProperty[this.propertyIndex] = t[e];
                    }
                    _setValue_arrayElement_setNeedsUpdate(t, e) {
                        (this.resolvedProperty[this.propertyIndex] = t[e]), (this.targetObject.needsUpdate = !0);
                    }
                    _setValue_arrayElement_setMatrixWorldNeedsUpdate(t, e) {
                        (this.resolvedProperty[this.propertyIndex] = t[e]), (this.targetObject.matrixWorldNeedsUpdate = !0);
                    }
                    _setValue_fromArray(t, e) {
                        this.resolvedProperty.fromArray(t, e);
                    }
                    _setValue_fromArray_setNeedsUpdate(t, e) {
                        this.resolvedProperty.fromArray(t, e), (this.targetObject.needsUpdate = !0);
                    }
                    _setValue_fromArray_setMatrixWorldNeedsUpdate(t, e) {
                        this.resolvedProperty.fromArray(t, e), (this.targetObject.matrixWorldNeedsUpdate = !0);
                    }
                    _getValue_unbound(t, e) {
                        this.bind(), this.getValue(t, e);
                    }
                    _setValue_unbound(t, e) {
                        this.bind(), this.setValue(t, e);
                    }
                    bind() {
                        let t = this.node;
                        const e = this.parsedPath,
                            n = e.objectName,
                            r = e.propertyName;
                        let i = e.propertyIndex;
                        if ((t || ((t = vf.findNode(this.rootNode, e.nodeName) || this.rootNode), (this.node = t)), (this.getValue = this._getValue_unavailable), (this.setValue = this._setValue_unavailable), !t))
                            return void console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
                        if (n) {
                            let r = e.objectIndex;
                            switch (n) {
                                case "materials":
                                    if (!t.material) return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                                    if (!t.material.materials) return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                                    t = t.material.materials;
                                    break;
                                case "bones":
                                    if (!t.skeleton) return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                                    t = t.skeleton.bones;
                                    for (let e = 0; e < t.length; e++)
                                        if (t[e].name === r) {
                                            r = e;
                                            break;
                                        }
                                    break;
                                default:
                                    if (void 0 === t[n]) return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                                    t = t[n];
                            }
                            if (void 0 !== r) {
                                if (void 0 === t[r]) return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, t);
                                t = t[r];
                            }
                        }
                        const o = t[r];
                        if (void 0 === o) {
                            const n = e.nodeName;
                            return void console.error("THREE.PropertyBinding: Trying to update property for track: " + n + "." + r + " but it wasn't found.", t);
                        }
                        let a = this.Versioning.None;
                        (this.targetObject = t), void 0 !== t.needsUpdate ? (a = this.Versioning.NeedsUpdate) : void 0 !== t.matrixWorldNeedsUpdate && (a = this.Versioning.MatrixWorldNeedsUpdate);
                        let s = this.BindingType.Direct;
                        if (void 0 !== i) {
                            if ("morphTargetInfluences" === r) {
                                if (!t.geometry) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                                if (!t.geometry.isBufferGeometry) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.", this);
                                if (!t.geometry.morphAttributes) return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                                void 0 !== t.morphTargetDictionary[i] && (i = t.morphTargetDictionary[i]);
                            }
                            (s = this.BindingType.ArrayElement), (this.resolvedProperty = o), (this.propertyIndex = i);
                        } else
                            void 0 !== o.fromArray && void 0 !== o.toArray
                                ? ((s = this.BindingType.HasFromToArray), (this.resolvedProperty = o))
                                : Array.isArray(o)
                                    ? ((s = this.BindingType.EntireArray), (this.resolvedProperty = o))
                                    : (this.propertyName = r);
                        (this.getValue = this.GetterByBindingType[s]), (this.setValue = this.SetterByBindingTypeAndVersioning[s][a]);
                    }
                    unbind() {
                        (this.node = null), (this.getValue = this._getValue_unbound), (this.setValue = this._setValue_unbound);
                    }
                }
                (vf.Composite = class {
                    constructor(t, e, n) {
                        const r = n || vf.parseTrackName(e);
                        (this._targetGroup = t), (this._bindings = t.subscribe_(e, r));
                    }
                    getValue(t, e) {
                        this.bind();
                        const n = this._targetGroup.nCachedObjects_,
                            r = this._bindings[n];
                        void 0 !== r && r.getValue(t, e);
                    }
                    setValue(t, e) {
                        const n = this._bindings;
                        for (let r = this._targetGroup.nCachedObjects_, i = n.length; r !== i; ++r) n[r].setValue(t, e);
                    }
                    bind() {
                        const t = this._bindings;
                        for (let e = this._targetGroup.nCachedObjects_, n = t.length; e !== n; ++e) t[e].bind();
                    }
                    unbind() {
                        const t = this._bindings;
                        for (let e = this._targetGroup.nCachedObjects_, n = t.length; e !== n; ++e) t[e].unbind();
                    }
                }),
                    (vf.prototype.BindingType = { Direct: 0, EntireArray: 1, ArrayElement: 2, HasFromToArray: 3 }),
                    (vf.prototype.Versioning = { None: 0, NeedsUpdate: 1, MatrixWorldNeedsUpdate: 2 }),
                    (vf.prototype.GetterByBindingType = [vf.prototype._getValue_direct, vf.prototype._getValue_array, vf.prototype._getValue_arrayElement, vf.prototype._getValue_toArray]),
                    (vf.prototype.SetterByBindingTypeAndVersioning = [
                        [vf.prototype._setValue_direct, vf.prototype._setValue_direct_setNeedsUpdate, vf.prototype._setValue_direct_setMatrixWorldNeedsUpdate],
                        [vf.prototype._setValue_array, vf.prototype._setValue_array_setNeedsUpdate, vf.prototype._setValue_array_setMatrixWorldNeedsUpdate],
                        [vf.prototype._setValue_arrayElement, vf.prototype._setValue_arrayElement_setNeedsUpdate, vf.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],
                        [vf.prototype._setValue_fromArray, vf.prototype._setValue_fromArray_setNeedsUpdate, vf.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate],
                    ]);
                class yf {
                    constructor(t, e, n = null, r = e.blendMode) {
                        (this._mixer = t), (this._clip = e), (this._localRoot = n), (this.blendMode = r);
                        const i = e.tracks,
                            o = i.length,
                            a = new Array(o),
                            s = { endingStart: ei, endingEnd: ei };
                        for (let t = 0; t !== o; ++t) {
                            const e = i[t].createInterpolant(null);
                            (a[t] = e), (e.settings = s);
                        }
                        (this._interpolantSettings = s),
                            (this._interpolants = a),
                            (this._propertyBindings = new Array(o)),
                            (this._cacheIndex = null),
                            (this._byClipCacheIndex = null),
                            (this._timeScaleInterpolant = null),
                            (this._weightInterpolant = null),
                            (this.loop = 2201),
                            (this._loopCount = -1),
                            (this._startTime = null),
                            (this.time = 0),
                            (this.timeScale = 1),
                            (this._effectiveTimeScale = 1),
                            (this.weight = 1),
                            (this._effectiveWeight = 1),
                            (this.repetitions = 1 / 0),
                            (this.paused = !1),
                            (this.enabled = !0),
                            (this.clampWhenFinished = !1),
                            (this.zeroSlopeAtStart = !0),
                            (this.zeroSlopeAtEnd = !0);
                    }
                    play() {
                        return this._mixer._activateAction(this), this;
                    }
                    stop() {
                        return this._mixer._deactivateAction(this), this.reset();
                    }
                    reset() {
                        return (this.paused = !1), (this.enabled = !0), (this.time = 0), (this._loopCount = -1), (this._startTime = null), this.stopFading().stopWarping();
                    }
                    isRunning() {
                        return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
                    }
                    isScheduled() {
                        return this._mixer._isActiveAction(this);
                    }
                    startAt(t) {
                        return (this._startTime = t), this;
                    }
                    setLoop(t, e) {
                        return (this.loop = t), (this.repetitions = e), this;
                    }
                    setEffectiveWeight(t) {
                        return (this.weight = t), (this._effectiveWeight = this.enabled ? t : 0), this.stopFading();
                    }
                    getEffectiveWeight() {
                        return this._effectiveWeight;
                    }
                    fadeIn(t) {
                        return this._scheduleFading(t, 0, 1);
                    }
                    fadeOut(t) {
                        return this._scheduleFading(t, 1, 0);
                    }
                    crossFadeFrom(t, e, n) {
                        if ((t.fadeOut(e), this.fadeIn(e), n)) {
                            const n = this._clip.duration,
                                r = t._clip.duration,
                                i = r / n,
                                o = n / r;
                            t.warp(1, i, e), this.warp(o, 1, e);
                        }
                        return this;
                    }
                    crossFadeTo(t, e, n) {
                        return t.crossFadeFrom(this, e, n);
                    }
                    stopFading() {
                        const t = this._weightInterpolant;
                        return null !== t && ((this._weightInterpolant = null), this._mixer._takeBackControlInterpolant(t)), this;
                    }
                    setEffectiveTimeScale(t) {
                        return (this.timeScale = t), (this._effectiveTimeScale = this.paused ? 0 : t), this.stopWarping();
                    }
                    getEffectiveTimeScale() {
                        return this._effectiveTimeScale;
                    }
                    setDuration(t) {
                        return (this.timeScale = this._clip.duration / t), this.stopWarping();
                    }
                    syncWith(t) {
                        return (this.time = t.time), (this.timeScale = t.timeScale), this.stopWarping();
                    }
                    halt(t) {
                        return this.warp(this._effectiveTimeScale, 0, t);
                    }
                    warp(t, e, n) {
                        const r = this._mixer,
                            i = r.time,
                            o = this.timeScale;
                        let a = this._timeScaleInterpolant;
                        null === a && ((a = r._lendControlInterpolant()), (this._timeScaleInterpolant = a));
                        const s = a.parameterPositions,
                            l = a.sampleValues;
                        return (s[0] = i), (s[1] = i + n), (l[0] = t / o), (l[1] = e / o), this;
                    }
                    stopWarping() {
                        const t = this._timeScaleInterpolant;
                        return null !== t && ((this._timeScaleInterpolant = null), this._mixer._takeBackControlInterpolant(t)), this;
                    }
                    getMixer() {
                        return this._mixer;
                    }
                    getClip() {
                        return this._clip;
                    }
                    getRoot() {
                        return this._localRoot || this._mixer._root;
                    }
                    _update(t, e, n, r) {
                        if (!this.enabled) return void this._updateWeight(t);
                        const i = this._startTime;
                        if (null !== i) {
                            const r = (t - i) * n;
                            if (r < 0 || 0 === n) return;
                            (this._startTime = null), (e = n * r);
                        }
                        e *= this._updateTimeScale(t);
                        const o = this._updateTime(e),
                            a = this._updateWeight(t);
                        if (a > 0) {
                            const t = this._interpolants,
                                e = this._propertyBindings;
                            switch (this.blendMode) {
                                case 2501:
                                    for (let n = 0, r = t.length; n !== r; ++n) t[n].evaluate(o), e[n].accumulateAdditive(a);
                                    break;
                                case ii:
                                default:
                                    for (let n = 0, i = t.length; n !== i; ++n) t[n].evaluate(o), e[n].accumulate(r, a);
                            }
                        }
                    }
                    _updateWeight(t) {
                        let e = 0;
                        if (this.enabled) {
                            e = this.weight;
                            const n = this._weightInterpolant;
                            if (null !== n) {
                                const r = n.evaluate(t)[0];
                                (e *= r), t > n.parameterPositions[1] && (this.stopFading(), 0 === r && (this.enabled = !1));
                            }
                        }
                        return (this._effectiveWeight = e), e;
                    }
                    _updateTimeScale(t) {
                        let e = 0;
                        if (!this.paused) {
                            e = this.timeScale;
                            const n = this._timeScaleInterpolant;
                            if (null !== n) {
                                (e *= n.evaluate(t)[0]), t > n.parameterPositions[1] && (this.stopWarping(), 0 === e ? (this.paused = !0) : (this.timeScale = e));
                            }
                        }
                        return (this._effectiveTimeScale = e), e;
                    }
                    _updateTime(t) {
                        const e = this._clip.duration,
                            n = this.loop;
                        let r = this.time + t,
                            i = this._loopCount;
                        const o = 2202 === n;
                        if (0 === t) return -1 === i ? r : o && 1 == (1 & i) ? e - r : r;
                        if (2200 === n) {
                            -1 === i && ((this._loopCount = 0), this._setEndings(!0, !0, !1));
                            t: {
                                if (r >= e) r = e;
                                else {
                                    if (!(r < 0)) {
                                        this.time = r;
                                        break t;
                                    }
                                    r = 0;
                                }
                                this.clampWhenFinished ? (this.paused = !0) : (this.enabled = !1), (this.time = r), this._mixer.dispatchEvent({ type: "finished", action: this, direction: t < 0 ? -1 : 1 });
                            }
                        } else {
                            if ((-1 === i && (t >= 0 ? ((i = 0), this._setEndings(!0, 0 === this.repetitions, o)) : this._setEndings(0 === this.repetitions, !0, o)), r >= e || r < 0)) {
                                const n = Math.floor(r / e);
                                (r -= e * n), (i += Math.abs(n));
                                const a = this.repetitions - i;
                                if (a <= 0) this.clampWhenFinished ? (this.paused = !0) : (this.enabled = !1), (r = t > 0 ? e : 0), (this.time = r), this._mixer.dispatchEvent({ type: "finished", action: this, direction: t > 0 ? 1 : -1 });
                                else {
                                    if (1 === a) {
                                        const e = t < 0;
                                        this._setEndings(e, !e, o);
                                    } else this._setEndings(!1, !1, o);
                                    (this._loopCount = i), (this.time = r), this._mixer.dispatchEvent({ type: "loop", action: this, loopDelta: n });
                                }
                            } else this.time = r;
                            if (o && 1 == (1 & i)) return e - r;
                        }
                        return r;
                    }
                    _setEndings(t, e, n) {
                        const r = this._interpolantSettings;
                        n ? ((r.endingStart = ni), (r.endingEnd = ni)) : ((r.endingStart = t ? (this.zeroSlopeAtStart ? ni : ei) : ri), (r.endingEnd = e ? (this.zeroSlopeAtEnd ? ni : ei) : ri));
                    }
                    _scheduleFading(t, e, n) {
                        const r = this._mixer,
                            i = r.time;
                        let o = this._weightInterpolant;
                        null === o && ((o = r._lendControlInterpolant()), (this._weightInterpolant = o));
                        const a = o.parameterPositions,
                            s = o.sampleValues;
                        return (a[0] = i), (s[0] = e), (a[1] = i + t), (s[1] = n), this;
                    }
                }
                (class extends fi {
                    constructor(t) {
                        super(), (this._root = t), this._initMemoryManager(), (this._accuIndex = 0), (this.time = 0), (this.timeScale = 1);
                    }
                    _bindAction(t, e) {
                        const n = t._localRoot || this._root,
                            r = t._clip.tracks,
                            i = r.length,
                            o = t._propertyBindings,
                            a = t._interpolants,
                            s = n.uuid,
                            l = this._bindingsByRootAndName;
                        let c = l[s];
                        void 0 === c && ((c = {}), (l[s] = c));
                        for (let t = 0; t !== i; ++t) {
                            const i = r[t],
                                l = i.name;
                            let u = c[l];
                            if (void 0 !== u) o[t] = u;
                            else {
                                if (((u = o[t]), void 0 !== u)) {
                                    null === u._cacheIndex && (++u.referenceCount, this._addInactiveBinding(u, s, l));
                                    continue;
                                }
                                const r = e && e._propertyBindings[t].binding.parsedPath;
                                (u = new af(vf.create(n, l, r), i.ValueTypeName, i.getValueSize())), ++u.referenceCount, this._addInactiveBinding(u, s, l), (o[t] = u);
                            }
                            a[t].resultBuffer = u.buffer;
                        }
                    }
                    _activateAction(t) {
                        if (!this._isActiveAction(t)) {
                            if (null === t._cacheIndex) {
                                const e = (t._localRoot || this._root).uuid,
                                    n = t._clip.uuid,
                                    r = this._actionsByClip[n];
                                this._bindAction(t, r && r.knownActions[0]), this._addInactiveAction(t, n, e);
                            }
                            const e = t._propertyBindings;
                            for (let t = 0, n = e.length; t !== n; ++t) {
                                const n = e[t];
                                0 == n.useCount++ && (this._lendBinding(n), n.saveOriginalState());
                            }
                            this._lendAction(t);
                        }
                    }
                    _deactivateAction(t) {
                        if (this._isActiveAction(t)) {
                            const e = t._propertyBindings;
                            for (let t = 0, n = e.length; t !== n; ++t) {
                                const n = e[t];
                                0 == --n.useCount && (n.restoreOriginalState(), this._takeBackBinding(n));
                            }
                            this._takeBackAction(t);
                        }
                    }
                    _initMemoryManager() {
                        (this._actions = []),
                            (this._nActiveActions = 0),
                            (this._actionsByClip = {}),
                            (this._bindings = []),
                            (this._nActiveBindings = 0),
                            (this._bindingsByRootAndName = {}),
                            (this._controlInterpolants = []),
                            (this._nActiveControlInterpolants = 0);
                        const t = this;
                        this.stats = {
                            actions: {
                                get total() {
                                    return t._actions.length;
                                },
                                get inUse() {
                                    return t._nActiveActions;
                                },
                            },
                            bindings: {
                                get total() {
                                    return t._bindings.length;
                                },
                                get inUse() {
                                    return t._nActiveBindings;
                                },
                            },
                            controlInterpolants: {
                                get total() {
                                    return t._controlInterpolants.length;
                                },
                                get inUse() {
                                    return t._nActiveControlInterpolants;
                                },
                            },
                        };
                    }
                    _isActiveAction(t) {
                        const e = t._cacheIndex;
                        return null !== e && e < this._nActiveActions;
                    }
                    _addInactiveAction(t, e, n) {
                        const r = this._actions,
                            i = this._actionsByClip;
                        let o = i[e];
                        if (void 0 === o) (o = { knownActions: [t], actionByRoot: {} }), (t._byClipCacheIndex = 0), (i[e] = o);
                        else {
                            const e = o.knownActions;
                            (t._byClipCacheIndex = e.length), e.push(t);
                        }
                        (t._cacheIndex = r.length), r.push(t), (o.actionByRoot[n] = t);
                    }
                    _removeInactiveAction(t) {
                        const e = this._actions,
                            n = e[e.length - 1],
                            r = t._cacheIndex;
                        (n._cacheIndex = r), (e[r] = n), e.pop(), (t._cacheIndex = null);
                        const i = t._clip.uuid,
                            o = this._actionsByClip,
                            a = o[i],
                            s = a.knownActions,
                            l = s[s.length - 1],
                            c = t._byClipCacheIndex;
                        (l._byClipCacheIndex = c), (s[c] = l), s.pop(), (t._byClipCacheIndex = null);
                        delete a.actionByRoot[(t._localRoot || this._root).uuid], 0 === s.length && delete o[i], this._removeInactiveBindingsForAction(t);
                    }
                    _removeInactiveBindingsForAction(t) {
                        const e = t._propertyBindings;
                        for (let t = 0, n = e.length; t !== n; ++t) {
                            const n = e[t];
                            0 == --n.referenceCount && this._removeInactiveBinding(n);
                        }
                    }
                    _lendAction(t) {
                        const e = this._actions,
                            n = t._cacheIndex,
                            r = this._nActiveActions++,
                            i = e[r];
                        (t._cacheIndex = r), (e[r] = t), (i._cacheIndex = n), (e[n] = i);
                    }
                    _takeBackAction(t) {
                        const e = this._actions,
                            n = t._cacheIndex,
                            r = --this._nActiveActions,
                            i = e[r];
                        (t._cacheIndex = r), (e[r] = t), (i._cacheIndex = n), (e[n] = i);
                    }
                    _addInactiveBinding(t, e, n) {
                        const r = this._bindingsByRootAndName,
                            i = this._bindings;
                        let o = r[e];
                        void 0 === o && ((o = {}), (r[e] = o)), (o[n] = t), (t._cacheIndex = i.length), i.push(t);
                    }
                    _removeInactiveBinding(t) {
                        const e = this._bindings,
                            n = t.binding,
                            r = n.rootNode.uuid,
                            i = n.path,
                            o = this._bindingsByRootAndName,
                            a = o[r],
                            s = e[e.length - 1],
                            l = t._cacheIndex;
                        (s._cacheIndex = l), (e[l] = s), e.pop(), delete a[i], 0 === Object.keys(a).length && delete o[r];
                    }
                    _lendBinding(t) {
                        const e = this._bindings,
                            n = t._cacheIndex,
                            r = this._nActiveBindings++,
                            i = e[r];
                        (t._cacheIndex = r), (e[r] = t), (i._cacheIndex = n), (e[n] = i);
                    }
                    _takeBackBinding(t) {
                        const e = this._bindings,
                            n = t._cacheIndex,
                            r = --this._nActiveBindings,
                            i = e[r];
                        (t._cacheIndex = r), (e[r] = t), (i._cacheIndex = n), (e[n] = i);
                    }
                    _lendControlInterpolant() {
                        const t = this._controlInterpolants,
                            e = this._nActiveControlInterpolants++;
                        let n = t[e];
                        return void 0 === n && ((n = new ad(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer)), (n.__cacheIndex = e), (t[e] = n)), n;
                    }
                    _takeBackControlInterpolant(t) {
                        const e = this._controlInterpolants,
                            n = t.__cacheIndex,
                            r = --this._nActiveControlInterpolants,
                            i = e[r];
                        (t.__cacheIndex = r), (e[r] = t), (i.__cacheIndex = n), (e[n] = i);
                    }
                    clipAction(t, e, n) {
                        const r = e || this._root,
                            i = r.uuid;
                        let o = "string" == typeof t ? gd.findByName(r, t) : t;
                        const a = null !== o ? o.uuid : t,
                            s = this._actionsByClip[a];
                        let l = null;
                        if ((void 0 === n && (n = null !== o ? o.blendMode : ii), void 0 !== s)) {
                            const t = s.actionByRoot[i];
                            if (void 0 !== t && t.blendMode === n) return t;
                            (l = s.knownActions[0]), null === o && (o = l._clip);
                        }
                        if (null === o) return null;
                        const c = new yf(this, o, e, n);
                        return this._bindAction(c, l), this._addInactiveAction(c, a, i), c;
                    }
                    existingAction(t, e) {
                        const n = e || this._root,
                            r = n.uuid,
                            i = "string" == typeof t ? gd.findByName(n, t) : t,
                            o = i ? i.uuid : t,
                            a = this._actionsByClip[o];
                        return (void 0 !== a && a.actionByRoot[r]) || null;
                    }
                    stopAllAction() {
                        const t = this._actions;
                        for (let e = this._nActiveActions - 1; e >= 0; --e) t[e].stop();
                        return this;
                    }
                    update(t) {
                        t *= this.timeScale;
                        const e = this._actions,
                            n = this._nActiveActions,
                            r = (this.time += t),
                            i = Math.sign(t),
                            o = (this._accuIndex ^= 1);
                        for (let a = 0; a !== n; ++a) {
                            e[a]._update(r, t, i, o);
                        }
                        const a = this._bindings,
                            s = this._nActiveBindings;
                        for (let t = 0; t !== s; ++t) a[t].apply(o);
                        return this;
                    }
                    setTime(t) {
                        this.time = 0;
                        for (let t = 0; t < this._actions.length; t++) this._actions[t].time = 0;
                        return this.update(t);
                    }
                    getRoot() {
                        return this._root;
                    }
                    uncacheClip(t) {
                        const e = this._actions,
                            n = t.uuid,
                            r = this._actionsByClip,
                            i = r[n];
                        if (void 0 !== i) {
                            const t = i.knownActions;
                            for (let n = 0, r = t.length; n !== r; ++n) {
                                const r = t[n];
                                this._deactivateAction(r);
                                const i = r._cacheIndex,
                                    o = e[e.length - 1];
                                (r._cacheIndex = null), (r._byClipCacheIndex = null), (o._cacheIndex = i), (e[i] = o), e.pop(), this._removeInactiveBindingsForAction(r);
                            }
                            delete r[n];
                        }
                    }
                    uncacheRoot(t) {
                        const e = t.uuid,
                            n = this._actionsByClip;
                        for (const t in n) {
                            const r = n[t].actionByRoot[e];
                            void 0 !== r && (this._deactivateAction(r), this._removeInactiveAction(r));
                        }
                        const r = this._bindingsByRootAndName[e];
                        if (void 0 !== r)
                            for (const t in r) {
                                const e = r[t];
                                e.restoreOriginalState(), this._removeInactiveBinding(e);
                            }
                    }
                    uncacheAction(t, e) {
                        const n = this.existingAction(t, e);
                        null !== n && (this._deactivateAction(n), this._removeInactiveAction(n));
                    }
                }.prototype._controlInterpolantsResultBuffer = new Float32Array(1));
                class xf {
                    constructor(t) {
                        "string" == typeof t && (console.warn("THREE.Uniform: Type parameter is no longer needed."), (t = arguments[1])), (this.value = t);
                    }
                    clone() {
                        return new xf(void 0 === this.value.clone ? this.value : this.value.clone());
                    }
                }
                (class extends Kc {
                    constructor(t, e, n = 1) {
                        super(t, e), (this.meshPerAttribute = n);
                    }
                    copy(t) {
                        return super.copy(t), (this.meshPerAttribute = t.meshPerAttribute), this;
                    }
                    clone(t) {
                        const e = super.clone(t);
                        return (e.meshPerAttribute = this.meshPerAttribute), e;
                    }
                    toJSON(t) {
                        const e = super.toJSON(t);
                        return (e.isInstancedInterleavedBuffer = !0), (e.meshPerAttribute = this.meshPerAttribute), e;
                    }
                }.prototype.isInstancedInterleavedBuffer = !0);
                const _f = new Ei();
                class bf {
                    constructor(t = new Ei(1 / 0, 1 / 0), e = new Ei(-1 / 0, -1 / 0)) {
                        (this.min = t), (this.max = e);
                    }
                    set(t, e) {
                        return this.min.copy(t), this.max.copy(e), this;
                    }
                    setFromPoints(t) {
                        this.makeEmpty();
                        for (let e = 0, n = t.length; e < n; e++) this.expandByPoint(t[e]);
                        return this;
                    }
                    setFromCenterAndSize(t, e) {
                        const n = _f.copy(e).multiplyScalar(0.5);
                        return this.min.copy(t).sub(n), this.max.copy(t).add(n), this;
                    }
                    clone() {
                        return new this.constructor().copy(this);
                    }
                    copy(t) {
                        return this.min.copy(t.min), this.max.copy(t.max), this;
                    }
                    makeEmpty() {
                        return (this.min.x = this.min.y = 1 / 0), (this.max.x = this.max.y = -1 / 0), this;
                    }
                    isEmpty() {
                        return this.max.x < this.min.x || this.max.y < this.min.y;
                    }
                    getCenter(t) {
                        return this.isEmpty() ? t.set(0, 0) : t.addVectors(this.min, this.max).multiplyScalar(0.5);
                    }
                    getSize(t) {
                        return this.isEmpty() ? t.set(0, 0) : t.subVectors(this.max, this.min);
                    }
                    expandByPoint(t) {
                        return this.min.min(t), this.max.max(t), this;
                    }
                    expandByVector(t) {
                        return this.min.sub(t), this.max.add(t), this;
                    }
                    expandByScalar(t) {
                        return this.min.addScalar(-t), this.max.addScalar(t), this;
                    }
                    containsPoint(t) {
                        return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y);
                    }
                    containsBox(t) {
                        return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y;
                    }
                    getParameter(t, e) {
                        return e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y));
                    }
                    intersectsBox(t) {
                        return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y);
                    }
                    clampPoint(t, e) {
                        return e.copy(t).clamp(this.min, this.max);
                    }
                    distanceToPoint(t) {
                        return _f.copy(t).clamp(this.min, this.max).sub(t).length();
                    }
                    intersect(t) {
                        return this.min.max(t.min), this.max.min(t.max), this;
                    }
                    union(t) {
                        return this.min.min(t.min), this.max.max(t.max), this;
                    }
                    translate(t) {
                        return this.min.add(t), this.max.add(t), this;
                    }
                    equals(t) {
                        return t.min.equals(this.min) && t.max.equals(this.max);
                    }
                }
                bf.prototype.isBox2 = !0;
                (class extends Bo {
                    constructor(t) {
                        super(),
                            (this.material = t),
                            (this.render = function () {}),
                            (this.hasPositions = !1),
                            (this.hasNormals = !1),
                            (this.hasColors = !1),
                            (this.hasUvs = !1),
                            (this.positionArray = null),
                            (this.normalArray = null),
                            (this.colorArray = null),
                            (this.uvArray = null),
                            (this.count = 0);
                    }
                }.prototype.isImmediateRenderObject = !0);
                const wf = new Fi(),
                    Sf = new mo(),
                    Mf = new mo();
                function Tf(t) {
                    const e = [];
                    t && t.isBone && e.push(t);
                    for (let n = 0; n < t.children.length; n++) e.push.apply(e, Tf(t.children[n]));
                    return e;
                }
                const Ef = new Float32Array(1);
                new Int32Array(Ef.buffer);
                (Qu.create = function (t, e) {
                    return console.log("THREE.Curve.create() has been deprecated"), (t.prototype = Object.create(Qu.prototype)), (t.prototype.constructor = t), (t.prototype.getPoint = e), t;
                }),
                    (Ld.prototype.fromPoints = function (t) {
                        return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."), this.setFromPoints(t);
                    }),
                    (class extends Bu {
                        constructor(t = 10, e = 10, n = 4473924, r = 8947848) {
                            (n = new aa(n)), (r = new aa(r));
                            const i = e / 2,
                                o = t / e,
                                a = t / 2,
                                s = [],
                                l = [];
                            for (let t = 0, c = 0, u = -a; t <= e; t++, u += o) {
                                s.push(-a, 0, u, a, 0, u), s.push(u, 0, -a, u, 0, a);
                                const e = t === i ? n : r;
                                e.toArray(l, c), (c += 3), e.toArray(l, c), (c += 3), e.toArray(l, c), (c += 3), e.toArray(l, c), (c += 3);
                            }
                            const c = new wa();
                            c.setAttribute("position", new fa(s, 3)), c.setAttribute("color", new fa(l, 3));
                            super(c, new Pu({ vertexColors: !0, toneMapped: !1 })), (this.type = "GridHelper");
                        }
                    }.prototype.setColors = function () {
                        console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
                    }),
                    (class extends Bu {
                        constructor(t) {
                            const e = Tf(t),
                                n = new wa(),
                                r = [],
                                i = [],
                                o = new aa(0, 0, 1),
                                a = new aa(0, 1, 0);
                            for (let t = 0; t < e.length; t++) {
                                const n = e[t];
                                n.parent && n.parent.isBone && (r.push(0, 0, 0), r.push(0, 0, 0), i.push(o.r, o.g, o.b), i.push(a.r, a.g, a.b));
                            }
                            n.setAttribute("position", new fa(r, 3)), n.setAttribute("color", new fa(i, 3));
                            super(n, new Pu({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 })),
                                (this.type = "SkeletonHelper"),
                                (this.isSkeletonHelper = !0),
                                (this.root = t),
                                (this.bones = e),
                                (this.matrix = t.matrixWorld),
                                (this.matrixAutoUpdate = !1);
                        }
                        updateMatrixWorld(t) {
                            const e = this.bones,
                                n = this.geometry,
                                r = n.getAttribute("position");
                            Mf.copy(this.root.matrixWorld).invert();
                            for (let t = 0, n = 0; t < e.length; t++) {
                                const i = e[t];
                                i.parent &&
                                i.parent.isBone &&
                                (Sf.multiplyMatrices(Mf, i.matrixWorld),
                                    wf.setFromMatrixPosition(Sf),
                                    r.setXYZ(n, wf.x, wf.y, wf.z),
                                    Sf.multiplyMatrices(Mf, i.parent.matrixWorld),
                                    wf.setFromMatrixPosition(Sf),
                                    r.setXYZ(n + 1, wf.x, wf.y, wf.z),
                                    (n += 2));
                            }
                            (n.getAttribute("position").needsUpdate = !0), super.updateMatrixWorld(t);
                        }
                    }.prototype.update = function () {
                        console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
                    }),
                    (bd.prototype.extractUrlBase = function (t) {
                        return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."), Zd.extractUrlBase(t);
                    }),
                    (bd.Handlers = {
                        add: function () {
                            console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
                        },
                        get: function () {
                            console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
                        },
                    }),
                    (bf.prototype.center = function (t) {
                        return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."), this.getCenter(t);
                    }),
                    (bf.prototype.empty = function () {
                        return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."), this.isEmpty();
                    }),
                    (bf.prototype.isIntersectionBox = function (t) {
                        return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t);
                    }),
                    (bf.prototype.size = function (t) {
                        return console.warn("THREE.Box2: .size() has been renamed to .getSize()."), this.getSize(t);
                    }),
                    (Bi.prototype.center = function (t) {
                        return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."), this.getCenter(t);
                    }),
                    (Bi.prototype.empty = function () {
                        return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."), this.isEmpty();
                    }),
                    (Bi.prototype.isIntersectionBox = function (t) {
                        return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t);
                    }),
                    (Bi.prototype.isIntersectionSphere = function (t) {
                        return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(t);
                    }),
                    (Bi.prototype.size = function (t) {
                        return console.warn("THREE.Box3: .size() has been renamed to .getSize()."), this.getSize(t);
                    }),
                    (oo.prototype.empty = function () {
                        return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."), this.isEmpty();
                    }),
                    (os.prototype.setFromMatrix = function (t) {
                        return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."), this.setFromProjectionMatrix(t);
                    }),
                    (Ai.prototype.flattenToArrayOffset = function (t, e) {
                        return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(t, e);
                    }),
                    (Ai.prototype.multiplyVector3 = function (t) {
                        return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."), t.applyMatrix3(this);
                    }),
                    (Ai.prototype.multiplyVector3Array = function () {
                        console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
                    }),
                    (Ai.prototype.applyToBufferAttribute = function (t) {
                        return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."), t.applyMatrix3(this);
                    }),
                    (Ai.prototype.applyToVector3Array = function () {
                        console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
                    }),
                    (Ai.prototype.getInverse = function (t) {
                        return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."), this.copy(t).invert();
                    }),
                    (mo.prototype.extractPosition = function (t) {
                        return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."), this.copyPosition(t);
                    }),
                    (mo.prototype.flattenToArrayOffset = function (t, e) {
                        return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(t, e);
                    }),
                    (mo.prototype.getPosition = function () {
                        return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."), new Fi().setFromMatrixColumn(this, 3);
                    }),
                    (mo.prototype.setRotationFromQuaternion = function (t) {
                        return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."), this.makeRotationFromQuaternion(t);
                    }),
                    (mo.prototype.multiplyToArray = function () {
                        console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
                    }),
                    (mo.prototype.multiplyVector3 = function (t) {
                        return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."), t.applyMatrix4(this);
                    }),
                    (mo.prototype.multiplyVector4 = function (t) {
                        return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."), t.applyMatrix4(this);
                    }),
                    (mo.prototype.multiplyVector3Array = function () {
                        console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
                    }),
                    (mo.prototype.rotateAxis = function (t) {
                        console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."), t.transformDirection(this);
                    }),
                    (mo.prototype.crossVector = function (t) {
                        return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."), t.applyMatrix4(this);
                    }),
                    (mo.prototype.translate = function () {
                        console.error("THREE.Matrix4: .translate() has been removed.");
                    }),
                    (mo.prototype.rotateX = function () {
                        console.error("THREE.Matrix4: .rotateX() has been removed.");
                    }),
                    (mo.prototype.rotateY = function () {
                        console.error("THREE.Matrix4: .rotateY() has been removed.");
                    }),
                    (mo.prototype.rotateZ = function () {
                        console.error("THREE.Matrix4: .rotateZ() has been removed.");
                    }),
                    (mo.prototype.rotateByAxis = function () {
                        console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
                    }),
                    (mo.prototype.applyToBufferAttribute = function (t) {
                        return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."), t.applyMatrix4(this);
                    }),
                    (mo.prototype.applyToVector3Array = function () {
                        console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
                    }),
                    (mo.prototype.makeFrustum = function (t, e, n, r, i, o) {
                        return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."), this.makePerspective(t, e, r, n, i, o);
                    }),
                    (mo.prototype.getInverse = function (t) {
                        return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."), this.copy(t).invert();
                    }),
                    (ns.prototype.isIntersectionLine = function (t) {
                        return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."), this.intersectsLine(t);
                    }),
                    (Ui.prototype.multiplyVector3 = function (t) {
                        return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."), t.applyQuaternion(this);
                    }),
                    (Ui.prototype.inverse = function () {
                        return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."), this.invert();
                    }),
                    (po.prototype.isIntersectionBox = function (t) {
                        return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(t);
                    }),
                    (po.prototype.isIntersectionPlane = function (t) {
                        return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."), this.intersectsPlane(t);
                    }),
                    (po.prototype.isIntersectionSphere = function (t) {
                        return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(t);
                    }),
                    ($o.prototype.area = function () {
                        return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."), this.getArea();
                    }),
                    ($o.prototype.barycoordFromPoint = function (t, e) {
                        return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), this.getBarycoord(t, e);
                    }),
                    ($o.prototype.midpoint = function (t) {
                        return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."), this.getMidpoint(t);
                    }),
                    ($o.prototypenormal = function (t) {
                        return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), this.getNormal(t);
                    }),
                    ($o.prototype.plane = function (t) {
                        return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."), this.getPlane(t);
                    }),
                    ($o.barycoordFromPoint = function (t, e, n, r, i) {
                        return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), $o.getBarycoord(t, e, n, r, i);
                    }),
                    ($o.normal = function (t, e, n, r) {
                        return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), $o.getNormal(t, e, n, r);
                    }),
                    (Cd.prototype.extractAllPoints = function (t) {
                        return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."), this.extractPoints(t);
                    }),
                    (Cd.prototype.extrude = function (t) {
                        return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."), new jh(this, t);
                    }),
                    (Cd.prototype.makeGeometry = function (t) {
                        return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."), new Xh(this, t);
                    }),
                    (Ei.prototype.fromAttribute = function (t, e, n) {
                        return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t, e, n);
                    }),
                    (Ei.prototype.distanceToManhattan = function (t) {
                        return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(t);
                    }),
                    (Ei.prototype.lengthManhattan = function () {
                        return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
                    }),
                    (Fi.prototype.setEulerFromRotationMatrix = function () {
                        console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
                    }),
                    (Fi.prototype.setEulerFromQuaternion = function () {
                        console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
                    }),
                    (Fi.prototype.getPositionFromMatrix = function (t) {
                        return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."), this.setFromMatrixPosition(t);
                    }),
                    (Fi.prototype.getScaleFromMatrix = function (t) {
                        return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."), this.setFromMatrixScale(t);
                    }),
                    (Fi.prototype.getColumnFromMatrix = function (t, e) {
                        return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."), this.setFromMatrixColumn(e, t);
                    }),
                    (Fi.prototype.applyProjection = function (t) {
                        return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."), this.applyMatrix4(t);
                    }),
                    (Fi.prototype.fromAttribute = function (t, e, n) {
                        return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t, e, n);
                    }),
                    (Fi.prototype.distanceToManhattan = function (t) {
                        return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(t);
                    }),
                    (Fi.prototype.lengthManhattan = function () {
                        return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
                    }),
                    (Oi.prototype.fromAttribute = function (t, e, n) {
                        return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(t, e, n);
                    }),
                    (Oi.prototype.lengthManhattan = function () {
                        return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
                    }),
                    (Bo.prototype.getChildByName = function (t) {
                        return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."), this.getObjectByName(t);
                    }),
                    (Bo.prototype.renderDepth = function () {
                        console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
                    }),
                    (Bo.prototype.translate = function (t, e) {
                        return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."), this.translateOnAxis(e, t);
                    }),
                    (Bo.prototype.getWorldRotation = function () {
                        console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
                    }),
                    (Bo.prototype.applyMatrix = function (t) {
                        return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(t);
                    }),
                    Object.defineProperties(Bo.prototype, {
                        eulerOrder: {
                            get: function () {
                                return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order;
                            },
                            set: function (t) {
                                console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), (this.rotation.order = t);
                            },
                        },
                        useQuaternion: {
                            get: function () {
                                console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
                            },
                            set: function () {
                                console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
                            },
                        },
                    }),
                    (Ba.prototype.setDrawMode = function () {
                        console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
                    }),
                    Object.defineProperties(Ba.prototype, {
                        drawMode: {
                            get: function () {
                                return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."), 0;
                            },
                            set: function () {
                                console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
                            },
                        },
                    }),
                    (Su.prototype.initBones = function () {
                        console.error("THREE.SkinnedMesh: initBones() has been removed.");
                    }),
                    (Ya.prototype.setLens = function (t, e) {
                        console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."), void 0 !== e && (this.filmGauge = e), this.setFocalLength(t);
                    }),
                    Object.defineProperties(Rd.prototype, {
                        onlyShadow: {
                            set: function () {
                                console.warn("THREE.Light: .onlyShadow has been removed.");
                            },
                        },
                        shadowCameraFov: {
                            set: function (t) {
                                console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."), (this.shadow.camera.fov = t);
                            },
                        },
                        shadowCameraLeft: {
                            set: function (t) {
                                console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."), (this.shadow.camera.left = t);
                            },
                        },
                        shadowCameraRight: {
                            set: function (t) {
                                console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."), (this.shadow.camera.right = t);
                            },
                        },
                        shadowCameraTop: {
                            set: function (t) {
                                console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."), (this.shadow.camera.top = t);
                            },
                        },
                        shadowCameraBottom: {
                            set: function (t) {
                                console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."), (this.shadow.camera.bottom = t);
                            },
                        },
                        shadowCameraNear: {
                            set: function (t) {
                                console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."), (this.shadow.camera.near = t);
                            },
                        },
                        shadowCameraFar: {
                            set: function (t) {
                                console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."), (this.shadow.camera.far = t);
                            },
                        },
                        shadowCameraVisible: {
                            set: function () {
                                console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
                            },
                        },
                        shadowBias: {
                            set: function (t) {
                                console.warn("THREE.Light: .shadowBias is now .shadow.bias."), (this.shadow.bias = t);
                            },
                        },
                        shadowDarkness: {
                            set: function () {
                                console.warn("THREE.Light: .shadowDarkness has been removed.");
                            },
                        },
                        shadowMapWidth: {
                            set: function (t) {
                                console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."), (this.shadow.mapSize.width = t);
                            },
                        },
                        shadowMapHeight: {
                            set: function (t) {
                                console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."), (this.shadow.mapSize.height = t);
                            },
                        },
                    }),
                    Object.defineProperties(ua.prototype, {
                        length: {
                            get: function () {
                                return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."), this.array.length;
                            },
                        },
                        dynamic: {
                            get: function () {
                                return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), this.usage === hi;
                            },
                            set: function () {
                                console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), this.setUsage(hi);
                            },
                        },
                    }),
                    (ua.prototype.setDynamic = function (t) {
                        return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(!0 === t ? hi : ui), this;
                    }),
                    (ua.prototype.copyIndicesArray = function () {
                        console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
                    }),
                    (ua.prototype.setArray = function () {
                        console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
                    }),
                    (wa.prototype.addIndex = function (t) {
                        console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."), this.setIndex(t);
                    }),
                    (wa.prototype.addAttribute = function (t, e) {
                        return (
                            console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),
                                (e && e.isBufferAttribute) || (e && e.isInterleavedBufferAttribute)
                                    ? "index" === t
                                        ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(e), this)
                                        : this.setAttribute(t, e)
                                    : (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.setAttribute(t, new ua(arguments[1], arguments[2])))
                        );
                    }),
                    (wa.prototype.addDrawCall = function (t, e, n) {
                        void 0 !== n && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."), console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."), this.addGroup(t, e);
                    }),
                    (wa.prototype.clearDrawCalls = function () {
                        console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."), this.clearGroups();
                    }),
                    (wa.prototype.computeOffsets = function () {
                        console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
                    }),
                    (wa.prototype.removeAttribute = function (t) {
                        return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."), this.deleteAttribute(t);
                    }),
                    (wa.prototype.applyMatrix = function (t) {
                        return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(t);
                    }),
                    Object.defineProperties(wa.prototype, {
                        drawcalls: {
                            get: function () {
                                return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."), this.groups;
                            },
                        },
                        offsets: {
                            get: function () {
                                return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."), this.groups;
                            },
                        },
                    }),
                    (Kc.prototype.setDynamic = function (t) {
                        return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(!0 === t ? hi : ui), this;
                    }),
                    (Kc.prototype.setArray = function () {
                        console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
                    }),
                    (jh.prototype.getArrays = function () {
                        console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.");
                    }),
                    (jh.prototype.addShapeList = function () {
                        console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.");
                    }),
                    (jh.prototype.addShape = function () {
                        console.error("THREE.ExtrudeGeometry: .addShape() has been removed.");
                    }),
                    (Qc.prototype.dispose = function () {
                        console.error("THREE.Scene: .dispose() has been removed.");
                    }),
                (xf.prototype.onUpdate = function () {
                    return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."), this;
                }),
                Object.defineProperties(Ko.prototype, {
                    wrapAround: {
                        get: function () {
                            console.warn("THREE.Material: .wrapAround has been removed.");
                        },
                        set: function () {
                            console.warn("THREE.Material: .wrapAround has been removed.");
                        },
                    },
                    overdraw: {
                        get: function () {
                            console.warn("THREE.Material: .overdraw has been removed.");
                        },
                        set: function () {
                            console.warn("THREE.Material: .overdraw has been removed.");
                        },
                    },
                    wrapRGB: {
                        get: function () {
                            return console.warn("THREE.Material: .wrapRGB has been removed."), new aa();
                        },
                    },
                    shading: {
                        get: function () {
                            console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
                        },
                        set: function (t) {
                            console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), (this.flatShading = 1 === t);
                        },
                    },
                    stencilMask: {
                        get: function () {
                            return console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), this.stencilFuncMask;
                        },
                        set: function (t) {
                            console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), (this.stencilFuncMask = t);
                        },
                    },
                    vertexTangents: {
                        get: function () {
                            console.warn("THREE." + this.type + ": .vertexTangents has been removed.");
                        },
                        set: function () {
                            console.warn("THREE." + this.type + ": .vertexTangents has been removed.");
                        },
                    },
                }),
                Object.defineProperties(qa.prototype, {
                    derivatives: {
                        get: function () {
                            return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives;
                        },
                        set: function (t) {
                            console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), (this.extensions.derivatives = t);
                        },
                    },
                }),
                (Zc.prototype.clearTarget = function (t, e, n, r) {
                    console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."), this.setRenderTarget(t), this.clear(e, n, r);
                }),
                (Zc.prototype.animate = function (t) {
                    console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."), this.setAnimationLoop(t);
                }),
                (Zc.prototype.getCurrentRenderTarget = function () {
                    return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."), this.getRenderTarget();
                }),
                (Zc.prototype.getMaxAnisotropy = function () {
                    return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."), this.capabilities.getMaxAnisotropy();
                }),
                (Zc.prototype.getPrecision = function () {
                    return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."), this.capabilities.precision;
                }),
                (Zc.prototype.resetGLState = function () {
                    return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."), this.state.reset();
                }),
                (Zc.prototype.supportsFloatTextures = function () {
                    return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."), this.extensions.get("OES_texture_float");
                }),
                (Zc.prototype.supportsHalfFloatTextures = function () {
                    return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."), this.extensions.get("OES_texture_half_float");
                }),
                (Zc.prototype.supportsStandardDerivatives = function () {
                    return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."), this.extensions.get("OES_standard_derivatives");
                }),
                (Zc.prototype.supportsCompressedTextureS3TC = function () {
                    return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."), this.extensions.get("WEBGL_compressed_texture_s3tc");
                }),
                (Zc.prototype.supportsCompressedTexturePVRTC = function () {
                    return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."), this.extensions.get("WEBGL_compressed_texture_pvrtc");
                }),
                (Zc.prototype.supportsBlendMinMax = function () {
                    return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."), this.extensions.get("EXT_blend_minmax");
                }),
                (Zc.prototype.supportsVertexTextures = function () {
                    return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."), this.capabilities.vertexTextures;
                }),
                (Zc.prototype.supportsInstancedArrays = function () {
                    return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."), this.extensions.get("ANGLE_instanced_arrays");
                }),
                (Zc.prototype.enableScissorTest = function (t) {
                    console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."), this.setScissorTest(t);
                }),
                (Zc.prototype.initMaterial = function () {
                    console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
                }),
                (Zc.prototype.addPrePlugin = function () {
                    console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
                }),
                (Zc.prototype.addPostPlugin = function () {
                    console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
                }),
                (Zc.prototype.updateShadowMap = function () {
                    console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
                }),
                (Zc.prototype.setFaceCulling = function () {
                    console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
                }),
                (Zc.prototype.allocTextureUnit = function () {
                    console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
                }),
                (Zc.prototype.setTexture = function () {
                    console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
                }),
                (Zc.prototype.setTexture2D = function () {
                    console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
                }),
                (Zc.prototype.setTextureCube = function () {
                    console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
                }),
                (Zc.prototype.getActiveMipMapLevel = function () {
                    return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."), this.getActiveMipmapLevel();
                }),
                Object.defineProperties(Zc.prototype, {
                    shadowMapEnabled: {
                        get: function () {
                            return this.shadowMap.enabled;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."), (this.shadowMap.enabled = t);
                        },
                    },
                    shadowMapType: {
                        get: function () {
                            return this.shadowMap.type;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."), (this.shadowMap.type = t);
                        },
                    },
                    shadowMapCullFace: {
                        get: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
                        },
                        set: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
                        },
                    },
                    context: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."), this.getContext();
                        },
                    },
                    vr: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"), this.xr;
                        },
                    },
                    gammaInput: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."), !1;
                        },
                        set: function () {
                            console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
                        },
                    },
                    gammaOutput: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), !1;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), (this.outputEncoding = !0 === t ? ai : oi);
                        },
                    },
                    toneMappingWhitePoint: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."), 1;
                        },
                        set: function () {
                            console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
                        },
                    },
                }),
                Object.defineProperties(zc.prototype, {
                    cullFace: {
                        get: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
                        },
                        set: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
                        },
                    },
                    renderReverseSided: {
                        get: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
                        },
                        set: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
                        },
                    },
                    renderSingleSided: {
                        get: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
                        },
                        set: function () {
                            console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
                        },
                    },
                }),
                Object.defineProperties(Di.prototype, {
                    wrapS: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), (this.texture.wrapS = t);
                        },
                    },
                    wrapT: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), (this.texture.wrapT = t);
                        },
                    },
                    magFilter: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), (this.texture.magFilter = t);
                        },
                    },
                    minFilter: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), (this.texture.minFilter = t);
                        },
                    },
                    anisotropy: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), (this.texture.anisotropy = t);
                        },
                    },
                    offset: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), (this.texture.offset = t);
                        },
                    },
                    repeat: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), (this.texture.repeat = t);
                        },
                    },
                    format: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), (this.texture.format = t);
                        },
                    },
                    type: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), (this.texture.type = t);
                        },
                    },
                    generateMipmaps: {
                        get: function () {
                            return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps;
                        },
                        set: function (t) {
                            console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), (this.texture.generateMipmaps = t);
                        },
                    },
                }),
                (of.prototype.load = function (t) {
                    console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
                    const e = this;
                    return (
                        new rf().load(t, function (t) {
                            e.setBuffer(t);
                        }),
                            this
                    );
                }),
                (Ja.prototype.updateCubeMap = function (t, e) {
                    return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."), this.update(t, e);
                }),
                (Ja.prototype.clear = function (t, e, n, r) {
                    return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."), this.renderTarget.clear(t, e, n, r);
                }),
                (Ci.crossOrigin = void 0),
                (Ci.loadTexture = function (t, e, n, r) {
                    console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
                    const i = new Ed();
                    i.setCrossOrigin(this.crossOrigin);
                    const o = i.load(t, n, void 0, r);
                    return e && (o.mapping = e), o;
                }),
                (Ci.loadTextureCube = function (t, e, n, r) {
                    console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
                    const i = new Td();
                    i.setCrossOrigin(this.crossOrigin);
                    const o = i.load(t, n, void 0, r);
                    return e && (o.mapping = e), o;
                }),
                (Ci.loadCompressedTexture = function () {
                    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
                }),
                (Ci.loadCompressedTextureCube = function () {
                    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
                });
                "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: { revision: "131" } })),
                "undefined" != typeof window && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : (window.__THREE__ = "131"));
                n(2222), n(3112), n(9714), n(8674);
                var Af,
                    Lf = "precision mediump float;\n#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main(){\n  vec3 pos = position;\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n",
                    Cf =
                        "precision highp float;\n#define GLSLIFY 1\nvarying vec2 vUv;\nuniform vec2 uResolution;\nuniform vec2 uResolutionTexture;\nuniform sampler2D uImage;\nuniform float uOpacity;\n\nvoid main() {\n  vec2 ratio = vec2(min((uResolution.x / uResolution.y) / (uResolutionTexture.x / uResolutionTexture.y), 1.0), min((uResolution.y / uResolution.x) / (uResolutionTexture.y / uResolutionTexture.x), 1.0));\n  vec2 uv = vec2(vUv.x * ratio.x + (1.0 - ratio.x) * 0.5, vUv.y * ratio.y + (1.0 - ratio.y) * 0.5);\n  vec4 color = texture2D(uImage, uv);\n  color.a *= uOpacity;\n  gl_FragColor = color;\n}\n";
                n(4916), n(4723);
                function Rf(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                var Pf,
                    If = (function () {
                        function t() {
                            var e,
                                n,
                                r,
                                i = this;
                            !(function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t),
                                (r = function () {
                                    (i.start = { scroll: i.offset + 0, scale: 1, y: 50 }), (i.end = { scroll: i.start.scroll + 0.5 * Dm, scale: 0.2, y: 160 });
                                    var t = i.logo.getBoundingClientRect().height;
                                    i.logoHeight = t * (1 / i.currentScale);
                                }),
                                (n = "setBounds") in (e = this) ? Object.defineProperty(e, n, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : (e[n] = r),
                                (this.logo = document.querySelector(".js-logo")),
                                (this.offset = 0),
                                (this.currentScale = 1),
                                (this.previousScale = 1),
                                (this.currentY = 0),
                                (this.previousY = 0),
                                this.setBounds(),
                                this.tween();
                        }
                        var e, n, r;
                        return (
                            (e = t),
                            (n = [
                                {
                                    key: "resize",
                                    value: function () {
                                        this.setBounds(),
                                            (this.logoPosition = 0.5 * Dm - (this.logoHeight / 2) * this.end.scale - (30 / 1440) * km),
                                            (this.logoPosition += this.logoHeight / 2),
                                            Er.set(this.logo, { x: "-50%", scale: this.end.scale, y: "-".concat(this.logoPosition) });
                                    },
                                },
                                {
                                    key: "tween",
                                    value: function () {
                                        var t = this;
                                        (this.logoPosition = 0.5 * Dm - (this.logoHeight / 2) * this.end.scale - (30 / 1440) * km),
                                            (this.logoPosition += this.logoHeight / 2),
                                            (this.currentScale = 0.2),
                                            (this.logo.style.willChange = "transform"),
                                            Er.to(this.logo, 1.5, {
                                                x: "-50%",
                                                scale: this.end.scale,
                                                y: "-".concat(this.logoPosition),
                                                ease: "expo.inOut",
                                                onComplete: function () {
                                                    t.logo.style.willChange = "unset";
                                                },
                                            });
                                    },
                                },
                            ]) && Rf(e.prototype, n),
                            r && Rf(e, r),
                                t
                        );
                    })(),
                    Of = n(9389),
                    Df = n.n(Of);
                function kf(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                var Uf = (function () {
                    function t() {
                        var e,
                            n,
                            r,
                            i = this;
                        !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        })(this, t),
                            (r = function () {
                                if (i.isDisabled) return !1;
                                (i.previousY += (i.currentY - i.previousY) * i.ease),
                                    (i.speed = parseFloat((i.previousY - i.currentY).toFixed(2))),
                                    0 === i.speed ? (i.wrapper.style.transform = "translate(0, ".concat(i.previousY.toFixed(0), "px)")) : (i.wrapper.style.transform = "translate3d(0, ".concat(i.previousY.toFixed(2), "px, 0)"));
                            }),
                            (n = "render") in (e = this) ? Object.defineProperty(e, n, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : (e[n] = r),
                            (this.container = document.querySelector("[data-scroll-container]")),
                            (this.ease = 0.1),
                            (this.wrapper = this.container.firstElementChild),
                            (this.scroller = new (Df())({ el: this.container, limitInertia: !1, mouseMultiplier: 0.33, touchMultiplier: 2, firefoxMultiplier: 30, preventTouch: !0, passive: !1 })),
                            (this.currentY = 0),
                            (this.previousY = 0),
                            this.setBounds(),
                            this.init();
                    }
                    var e, n, r;
                    return (
                        (e = t),
                        (n = [
                            {
                                key: "setBounds",
                                value: function () {
                                    this.maxScroll = -1 * (this.wrapper.getBoundingClientRect().height - Dm);
                                },
                            },
                            {
                                key: "resize",
                                value: function () {
                                    this.setBounds();
                                },
                            },
                            {
                                key: "bind",
                                value: function () {
                                    var t = this;
                                    this.scroller.on(function (e) {
                                        t.currentY = Er.utils.clamp(t.maxScroll, 0, (t.currentY += e.deltaY));
                                    });
                                },
                            },
                            {
                                key: "reset",
                                value: function () {
                                    (this.currentY = 0), (this.previousY = 0);
                                },
                            },
                            {
                                key: "enable",
                                value: function () {
                                    (this.isDisabled = !1), this.bind();
                                },
                            },
                            {
                                key: "disable",
                                value: function () {
                                    (this.isDisabled = !0), this.scroller.off();
                                },
                            },
                            {
                                key: "update",
                                value: function () {
                                    (this.container = document.querySelector("[data-scroll-container]")), (this.wrapper = this.container.querySelector("[data-router-view]")), this.setBounds();
                                },
                            },
                            {
                                key: "init",
                                value: function () {
                                    window.history.scrollRestoration && (window.history.scrollRestoration = "manual"), this.bind();
                                },
                            },
                        ]) && kf(e.prototype, n),
                        r && kf(e, r),
                            t
                    );
                })();
                function Ff(t) {
                    return (
                        (function (t) {
                            if (Array.isArray(t)) return Nf(t);
                        })(t) ||
                        (function (t) {
                            if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"]) return Array.from(t);
                        })(t) ||
                        (function (t, e) {
                            if (!t) return;
                            if ("string" == typeof t) return Nf(t, e);
                            var n = Object.prototype.toString.call(t).slice(8, -1);
                            "Object" === n && t.constructor && (n = t.constructor.name);
                            if ("Map" === n || "Set" === n) return Array.from(t);
                            if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Nf(t, e);
                        })(t) ||
                        (function () {
                            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        })()
                    );
                }
                function Nf(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
                    return r;
                }
                function zf(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                var Bf = (function () {
                        function t() {
                            var e = this;
                            !(function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t);
                            var n = Ff(document.querySelectorAll(".js-button"));
                            if (n.length <= 0) return (this.isDisabled = !0), !1;
                            (this.buttons = []),
                                n.forEach(function (t) {
                                    e.buttons.push({ element: t, sibling: t.previousElementSibling ? t.previousElementSibling : t.parentElement.previousElementSibling, parent: t.closest(".call-to-action") });
                                }),
                                this.setBounds();
                        }
                        var e, n, r;
                        return (
                            (e = t),
                            (n = [
                                {
                                    key: "setBounds",
                                    value: function (t) {
                                        this.buttons.forEach(function (e) {
                                            var n = e.sibling.getBoundingClientRect(),
                                                r = n.top + n.height - Pf.previousY;
                                            (e.top = r),
                                                (e.element.style.top = "".concat(r, "px")),
                                                (e.parent.style.paddingBottom = "".concat(e.element.getBoundingClientRect().height, "px")),
                                                (e.element.style.willChange = "transform"),
                                            "resize" !== t && ((e.element.style.left = "50%"), (e.element.style.position = "fixed"), document.body.appendChild(e.element));
                                        });
                                    },
                                },
                                {
                                    key: "remove",
                                    value: function (t) {
                                        if (this.isDisabled) return !1;
                                        (this.isDisabled = !0),
                                            0 === t
                                                ? this.buttons.forEach(function (t) {
                                                    t.element.remove();
                                                })
                                                : this.buttons.forEach(function (t) {
                                                    Er.to(t.element, 0.25, {
                                                        opacity: 0,
                                                        ease: "power2.out",
                                                        onComplete: function () {
                                                            t.element.remove();
                                                        },
                                                    });
                                                });
                                    },
                                },
                                {
                                    key: "resize",
                                    value: function () {
                                        if (this.isDisabled) return !1;
                                        this.setBounds("resize");
                                    },
                                },
                                {
                                    key: "render",
                                    value: function () {
                                        if (this.isDisabled) return !1;
                                        this.buttons.forEach(function (t) {
                                            0 === Pf.speed ? (t.element.style.transform = "translate(-50%, ".concat(Pf.previousY, "px)")) : (t.element.style.transform = "translate3d(-50%, ".concat(Pf.previousY, "px, 0)"));
                                        });
                                    },
                                },
                            ]) && zf(e.prototype, n),
                            r && zf(e, r),
                                t
                        );
                    })(),
                    Gf = n(9669),
                    Hf = n.n(Gf);
                function Vf(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                var Wf = (function () {
                        function t(e) {
                            !(function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t),
                                (this.form = e),
                                (this.input = this.form.querySelector(".js-input")),
                                (this.icon = this.form.querySelector(".js-icon")),
                                this.init();
                        }
                        var e, n, r;
                        return (
                            (e = t),
                            (n = [
                                {
                                    key: "submit",
                                    value: function () {
                                        var t = this;
                                        this.setLoadingState();
                                        var e = {
                                            Email__c: "".concat(this.input.value),
                                            LastName__c: "",
                                            Language__c: "NL",
                                            Location__c: "Registration",
                                            Type__c: "FCXV Subscription",
                                            Name: "Subscription FCXV",
                                            Subscriptions__c: "Wekelijkse Nieuwsbrief",
                                        };
                                        Hf()
                                            .post("https://harvest-sf-proxy.herokuapp.com", {
                                                headers: { "Content-Type": "application/json", Origin: "https://www.fabiennechapot.com" },
                                                url: "/services/data/v43.0/sobjects/WebActivity__c",
                                                method: "POST",
                                                data: JSON.stringify(e),
                                            })
                                            .then(function () {
                                                t.isAdded = !0;
                                            })
                                            .catch(function () {
                                                t.isAdded = !0;
                                            });
                                    },
                                },
                                {
                                    key: "setLoadingState",
                                    value: function () {
                                        this.form.style.pointerEvents = "none";
                                        var t = this.form.querySelector(".js-line");
                                        this.animateLine(t);
                                    },
                                },
                                {
                                    key: "animateLine",
                                    value: function (t) {
                                        var e = this;
                                        Er.set(t, { transformOrigin: "right" }),
                                            Er.to(t, 1, {
                                                scaleX: 0,
                                                ease: "expo.out",
                                                onComplete: function () {
                                                    Er.set(t, { transformOrigin: "left" }),
                                                        Er.to(t, 1, {
                                                            scaleX: 1,
                                                            ease: "expo.out",
                                                            onComplete: function () {
                                                                e.isAdded ? e.setAddedState() : e.animateLine(t);
                                                            },
                                                        });
                                                },
                                            });
                                    },
                                },
                                {
                                    key: "setAddedState",
                                    value: function () {
                                        var t = this;
                                        Er.to(this.icon, 0.5, {
                                            opacity: 0,
                                            ease: "power3.out",
                                            onComplete: function () {
                                                (t.icon.outerHTML =
                                                    '\n          <svg class="expo__icon js-icon" viewBox="0 0 48 48" style="opacity: 0;">\n            <polygon fill="#fff" points="40.6,12.1 17,35.7 7.4,26.1 4.6,29 17,41.3 43.4,14.9"/>\n          </svg>  \n        '),
                                                    (t.icon = t.form.querySelector(".js-icon")),
                                                    Er.to(t.icon, 0.5, { opacity: 1, ease: "power3.out" });
                                            },
                                        });
                                    },
                                },
                                {
                                    key: "init",
                                    value: function () {
                                        var t = this;
                                        this.form.addEventListener("submit", function (e) {
                                            e.preventDefault(), t.submit();
                                        });
                                    },
                                },
                            ]) && Vf(e.prototype, n),
                            r && Vf(e, r),
                                t
                        );
                    })(),
                    jf =
                        (n(7327),
                            n(86),
                            "#define GLSLIFY 1\nuniform float uProgress;\nuniform vec2 uMeshScale;\nuniform vec2 uMeshPosition;\nuniform vec2 uViewSize;\nvarying vec2 vUv;\nvarying float zColor;\n\nvoid main () {\n  vec3 pos = position.xyz;\n  \n  float activation = (+uv.x-uv.y+1.)/2.;\n  \n  float latestStart = 0.5;\n  float startAt = activation * latestStart;\n  float vertexProgress = smoothstep(startAt, 1.0, uProgress);\n    \n  float flippedX = -pos.x;\n  pos.x = mix(pos.x, flippedX, vertexProgress);\n\n  pos.y += -uMeshPosition.y * vertexProgress;\n  pos.x += -uMeshPosition.x * vertexProgress;\n      \n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n  zColor = pos.x;\n  vUv = uv;\n}\n"),
                    qf =
                        "precision highp float;\n#define GLSLIFY 1\nvarying vec2 vUv;\nuniform float uProgress;\nuniform float uTransition;\nuniform float uOpacity;\nuniform vec2 uResolution;\nuniform vec2 uResolutionTexture;\nuniform vec3 uColor;\nuniform sampler2D uImage;\nvarying float zColor;\n\nvoid main() {\n  vec2 temporaryUv = vUv;\n\n  if (uProgress >= 0.6) {\n    temporaryUv.x = 1.0 - vUv.x;\n  }\n\n  vec2 ratio = vec2(min((uResolution.x / uResolution.y) / (uResolutionTexture.x / uResolutionTexture.y), 1.0), min((uResolution.y / uResolution.x) / (uResolutionTexture.y / uResolutionTexture.x), 1.0));\n  vec2 uv = vec2(temporaryUv.x * ratio.x + (1.0 - ratio.x) * 0.5, temporaryUv.y * ratio.y + (1.0 - ratio.y) * 0.5);\n\n  vec4 color = texture2D(uImage, uv);\n  color.rgb += zColor * 0.125 * uTransition;\n  color.a *= uOpacity;\n   \n  gl_FragColor = color;\n}\n";
                n(4155);
                function Xf() {
                    var t,
                        e = 0,
                        n = [],
                        r = 0,
                        i = 0;
                    var o = d(function (t) {
                            i || s(1, t);
                        }),
                        a = d(function (t) {
                            i || s(-1, t);
                        });
                    function s(n, r) {
                        i++;
                        var o = 0;
                        try {
                            r === m && f();
                            var a = n > 0 && h(r);
                            a
                                ? a.call(
                                    r,
                                    d(function (t) {
                                        o++, s(1, t);
                                    }),
                                    d(function (t) {
                                        o++, s(-1, t);
                                    })
                                )
                                : ((e = n), (t = r), l());
                        } catch (t) {
                            e || o || s(-1, t);
                        }
                    }
                    function l() {
                        r || (setTimeout(c, 0), (r = 1));
                    }
                    function c() {
                        var t = n;
                        (r = 0), (n = []), t.forEach(u);
                    }
                    function u(t) {
                        t();
                    }
                    function h(t) {
                        var e = t && (p(t) || "object" == typeof t) && t.then;
                        return p(e) && e;
                    }
                    function d(t) {
                        var e = 0;
                        return function () {
                            for (var n = [], r = arguments.length; r--; ) n[r] = arguments[r];
                            e++ || t.apply(this, n);
                        };
                    }
                    function f() {
                        throw new TypeError("Chaining cycle detected");
                    }
                    var p = function (t) {
                            return "function" == typeof t;
                        },
                        m = {
                            then: function (r, i) {
                                var o = Xf();
                                return (
                                    n.push(function () {
                                        var n = e > 0 ? r : i;
                                        if (p(n))
                                            try {
                                                var a = n(t);
                                                a === o && f();
                                                var s = h(a);
                                                s ? s.call(a, o.resolve, o.reject) : o.resolve(a);
                                            } catch (t) {
                                                o.reject(t);
                                            }
                                        else o[e > 0 ? "resolve" : "reject"](t);
                                    }),
                                    e && l(),
                                        o
                                );
                            },
                            resolve: o,
                            reject: a,
                        };
                    return m;
                }
                function Yf() {
                    var t,
                        e,
                        n = new Promise(function (n, r) {
                            (t = n), (e = r);
                        });
                    return { then: n.then.bind(n), resolve: t, reject: e };
                }
                Xf.all = Yf.all = function (t) {
                    var e = 0,
                        n = [],
                        r = Zf();
                    return (
                        0 === t.length
                            ? r.resolve([])
                            : t.forEach(function (i, o) {
                                var a = Zf();
                                a.resolve(i),
                                    a.then(function (i) {
                                        e++, (n[o] = i), e === t.length && r.resolve(n);
                                    }, r.reject);
                            }),
                            r
                    );
                };
                var Zf = "function" == typeof Promise ? Yf : Xf;
                function Jf() {
                    var t = Object.create(null);
                    function e(r, i) {
                        var o = r.id,
                            a = r.name,
                            s = r.dependencies;
                        void 0 === s && (s = []);
                        var l = r.init;
                        void 0 === l && (l = function () {});
                        var c = r.getTransferables;
                        if ((void 0 === c && (c = null), !t[o]))
                            try {
                                (s = s.map(function (n) {
                                    return (
                                        n &&
                                        n.isWorkerModule &&
                                        (e(n, function (t) {
                                            if (t instanceof Error) throw t;
                                        }),
                                            (n = t[n.id].value)),
                                            n
                                    );
                                })),
                                    (l = n("<" + a + ">.init", l)),
                                c && (c = n("<" + a + ">.getTransferables", c));
                                var u = null;
                                "function" == typeof l ? (u = l.apply(void 0, s)) : console.error("worker module init function failed to rehydrate"), (t[o] = { id: o, value: u, getTransferables: c }), i(u);
                            } catch (t) {
                                (t && t.noLog) || console.error(t), i(t);
                            }
                    }
                    function n(t, e) {
                        var n = void 0;
                        self.troikaDefine = function (t) {
                            return (n = t);
                        };
                        var r = URL.createObjectURL(new Blob(["/** " + t.replace(/\*/g, "") + " **/\n\ntroikaDefine(\n" + e + "\n)"], { type: "application/javascript" }));
                        try {
                            importScripts(r);
                        } catch (t) {
                            console.error(t);
                        }
                        return URL.revokeObjectURL(r), delete self.troikaDefine, n;
                    }
                    self.addEventListener("message", function (n) {
                        var r = n.data,
                            i = r.messageId,
                            o = r.action,
                            a = r.data;
                        try {
                            "registerModule" === o &&
                            e(a, function (t) {
                                t instanceof Error ? postMessage({ messageId: i, success: !1, error: t.message }) : postMessage({ messageId: i, success: !0, result: { isCallable: "function" == typeof t } });
                            }),
                            "callModule" === o &&
                            (function (e, n) {
                                var r,
                                    i = e.id,
                                    o = e.args;
                                (t[i] && "function" == typeof t[i].value) || n(new Error("Worker module " + i + ": not found or its 'init' did not return a function"));
                                try {
                                    var a = (r = t[i]).value.apply(r, o);
                                    a && "function" == typeof a.then
                                        ? a.then(s, function (t) {
                                            return n(t instanceof Error ? t : new Error("" + t));
                                        })
                                        : s(a);
                                } catch (t) {
                                    n(t);
                                }
                                function s(e) {
                                    try {
                                        var r = t[i].getTransferables && t[i].getTransferables(e);
                                        (r && Array.isArray(r) && r.length) || (r = void 0), n(e, r);
                                    } catch (t) {
                                        console.error(t), n(t);
                                    }
                                }
                            })(a, function (t, e) {
                                t instanceof Error ? postMessage({ messageId: i, success: !1, error: t.message }) : postMessage({ messageId: i, success: !0, result: t }, e || void 0);
                            });
                        } catch (t) {
                            postMessage({ messageId: i, success: !1, error: t.stack });
                        }
                    });
                }
                var $f = function () {
                        var t = !1;
                        if ("undefined" != typeof window && void 0 !== window.document)
                            try {
                                new Worker(URL.createObjectURL(new Blob([""], { type: "application/javascript" }))).terminate(), (t = !0);
                            } catch (t) {
                                console.log("Troika createWorkerModule: web workers not allowed; falling back to main thread execution. Cause: [" + t.message + "]");
                            }
                        return (
                            ($f = function () {
                                return t;
                            }),
                                t
                        );
                    },
                    Qf = 0,
                    Kf = 0,
                    tp = !1,
                    ep = Object.create(null),
                    np = (function () {
                        var t = Object.create(null);
                        return (t._count = 0), t;
                    })();
                function rp(t) {
                    if (!((t && "function" == typeof t.init) || tp)) throw new Error("requires `options.init` function");
                    var e = t.dependencies,
                        n = t.init,
                        r = t.getTransferables,
                        i = t.workerId;
                    if (!$f())
                        return (function (t) {
                            var e = function () {
                                for (var t = [], n = arguments.length; n--; ) t[n] = arguments[n];
                                return e._getInitResult().then(function (e) {
                                    if ("function" == typeof e) return e.apply(void 0, t);
                                    throw new Error("Worker module function was called but `init` did not return a callable function");
                                });
                            };
                            return (
                                (e._getInitResult = function () {
                                    var n = t.dependencies,
                                        r = t.init;
                                    n = Array.isArray(n)
                                        ? n.map(function (t) {
                                            return t && t._getInitResult ? t._getInitResult() : t;
                                        })
                                        : [];
                                    var i = Zf.all(n).then(function (t) {
                                        return r.apply(null, t);
                                    });
                                    return (
                                        (e._getInitResult = function () {
                                            return i;
                                        }),
                                            i
                                    );
                                }),
                                    e
                            );
                        })(t);
                    null == i && (i = "#default");
                    var o = "workerModule" + ++Qf,
                        a = t.name || o,
                        s = null;
                    function l() {
                        for (var t = [], e = arguments.length; e--; ) t[e] = arguments[e];
                        return (
                            s || (s = op(i, "registerModule", l.workerModuleData)),
                                s.then(function (e) {
                                    if (e.isCallable) return op(i, "callModule", { id: o, args: t });
                                    throw new Error("Worker module function was called but `init` did not return a callable function");
                                })
                        );
                    }
                    return (
                        (e =
                            e &&
                            e.map(function (t) {
                                return (
                                    "function" != typeof t || t.workerModuleData || ((tp = !0), (t = rp({ workerId: i, name: "<" + a + "> function dependency: " + t.name, init: "function(){return (\n" + ip(t) + "\n)}" })), (tp = !1)),
                                    t && t.workerModuleData && (t = t.workerModuleData),
                                        t
                                );
                            })),
                            (l.workerModuleData = { isWorkerModule: !0, id: o, name: a, dependencies: e, init: ip(n), getTransferables: r && ip(r) }),
                            l
                    );
                }
                function ip(t) {
                    var e = t.toString();
                    return !/^function/.test(e) && /^\w+\s*\(/.test(e) && (e = "function " + e), e;
                }
                function op(t, e, n) {
                    var r = Zf(),
                        i = ++Kf;
                    return (
                        (np[i] = function (t) {
                            t.success ? r.resolve(t.result) : r.reject(new Error("Error in worker " + e + " call: " + t.error));
                        }),
                            np._count++,
                        np._count > 1e3 && console.warn("Large number of open WorkerModule requests, some may not be returning"),
                            (function (t) {
                                var e = ep[t];
                                if (!e) {
                                    var n = ip(Jf);
                                    (e = ep[t] = new Worker(URL.createObjectURL(new Blob(["/** Worker Module Bootstrap: " + t.replace(/\*/g, "") + " **/\n\n;(" + n + ")()"], { type: "application/javascript" })))).onmessage = function (t) {
                                        var e = t.data,
                                            n = e.messageId,
                                            r = np[n];
                                        if (!r) throw new Error("WorkerModule response with empty or unknown messageId");
                                        delete np[n], np._count--, r(e);
                                    };
                                }
                                return e;
                            })(t).postMessage({ messageId: i, action: e, data: n }),
                            r
                    );
                }
                var ap = rp({
                    name: "Thenable",
                    dependencies: [Zf],
                    init: function (t) {
                        return t;
                    },
                });
                var sp = function () {
                    return (function (t) {
                        var e = {
                                R: "13k,1a,2,3,3,2+1j,ch+16,a+1,5+2,2+n,5,a,4,6+16,4+3,h+1b,4mo,179q,2+9,2+11,2i9+7y,2+68,4,3+4,5+13,4+3,2+4k,3+29,8+cf,1t+7z,w+17,3+3m,1t+3z,16o1+5r,8+30,8+mc,29+1r,29+4v,75+73",
                                EN: "1c+9,3d+1,6,187+9,513,4+5,7+9,sf+j,175h+9,qw+q,161f+1d,4xt+a,25i+9",
                                ES: "17,2,6dp+1,f+1,av,16vr,mx+1,4o,2",
                                ET: "z+2,3h+3,b+1,ym,3e+1,2o,p4+1,8,6u,7c,g6,1wc,1n9+4,30+1b,2n,6d,qhx+1,h0m,a+1,49+2,63+1,4+1,6bb+3,12jj",
                                AN: "16o+5,2j+9,2+1,35,ed,1ff2+9,87+u",
                                CS: "18,2+1,b,2u,12k,55v,l,17v0,2,3,53,2+1,b",
                                B: "a,3,f+2,2v,690",
                                S: "9,2,k",
                                WS: "c,k,4f4,1vk+a,u,1j,335",
                                ON:
                                    "x+1,4+4,h+5,r+5,r+3,z,5+3,2+1,2+1,5,2+2,3+4,o,w,ci+1,8+d,3+d,6+8,2+g,39+1,9,6+1,2,33,b8,3+1,3c+1,7+1,5r,b,7h+3,sa+5,2,3i+6,jg+3,ur+9,2v,ij+1,9g+9,7+a,8m,4+1,49+x,14u,2+2,c+2,e+2,e+2,e+1,i+n,e+e,2+p,u+2,e+2,36+1,2+3,2+1,b,2+2,6+5,2,2,2,h+1,5+4,6+3,3+f,16+2,5+3l,3+81,1y+p,2+40,q+a,m+13,2r+ch,2+9e,75+hf,3+v,2+2w,6e+5,f+6,75+2a,1a+p,2+2g,d+5x,r+b,6+3,4+o,g,6+1,6+2,2k+1,4,2j,5h+z,1m+1,1e+f,t+2,1f+e,d+3,4o+3,2s+1,w,535+1r,h3l+1i,93+2,2s,b+1,3l+x,2v,4g+3,21+3,kz+1,g5v+1,5a,j+9,n+v,2,3,2+8,2+1,3+2,2,3,46+1,4+4,h+5,r+5,r+a,3h+2,4+6,b+4,78,1r+24,4+c,4,1hb,ey+6,103+j,16j+c,1ux+7,5+g,fsh,jdq+1t,4,57+2e,p1,1m,1m,1m,1m,4kt+1,7j+17,5+2r,d+e,3+e,2+e,2+10,m+4,w,1n+5,1q,4z+5,4b+rb,9+c,4+c,4+37,d+2g,8+b,l+b,5+1j,9+9,7+13,9+t,3+1,27+3c,2+29,2+3q,d+d,3+4,4+2,6+6,a+o,8+6,a+2,e+6,16+42,2+1i",
                                BN: "0+8,6+d,2s+5,2+p,e,4m9,1kt+2,2b+5,5+5,17q9+v,7k,6p+8,6+1,119d+3,440+7,96s+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+75,6p+2rz,1ben+1,1ekf+1,1ekf+1",
                                NSM:
                                    "lc+33,7o+6,7c+18,2,2+1,2+1,2,21+a,1d+k,h,2u+6,3+5,3+1,2+3,10,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,g+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+g,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,k1+w,2db+2,3y,2p+v,ff+3,30+1,n9x+3,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,r2,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+5,3+1,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2d+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,f0c+4,1o+6,t5,1s+3,2a,f5l+1,43t+2,i+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,gzhy+6n",
                                AL: "16w,3,2,e+1b,z+2,2+2s,g+1,8+1,b+m,2+t,s+2i,c+e,4h+f,1d+1e,1bwe+dp,3+3z,x+c,2+1,35+3y,2rm+z,5+7,b+5,dt+l,c+u,17nl+27,1t+27,4x+6n,3+d",
                                LRO: "6ct",
                                RLO: "6cu",
                                LRE: "6cq",
                                RLE: "6cr",
                                PDF: "6cs",
                                LRI: "6ee",
                                RLI: "6ef",
                                FSI: "6eg",
                                PDI: "6eh",
                            },
                            n = {},
                            r = {};
                        (n.L = 1),
                            (r[1] = "L"),
                            Object.keys(e).forEach(function (t, e) {
                                (n[t] = 1 << (e + 1)), (r[n[t]] = t);
                            }),
                            Object.freeze(n);
                        var i = n.LRI | n.RLI | n.FSI,
                            o = n.L | n.R | n.AL,
                            a = n.B | n.S | n.WS | n.ON | n.FSI | n.LRI | n.RLI | n.PDI,
                            s = n.BN | n.RLE | n.LRE | n.RLO | n.LRO | n.PDF,
                            l = n.S | n.WS | n.B | i | n.PDI | s,
                            c = null;
                        function u(t) {
                            return (
                                (function () {
                                    if (!c) {
                                        c = new Map();
                                        var t = function (t) {
                                            if (e.hasOwnProperty(t)) {
                                                var r = 0;
                                                e[t].split(",").forEach(function (e) {
                                                    var i = e.split("+"),
                                                        o = i[0],
                                                        a = i[1];
                                                    (o = parseInt(o, 36)), (a = a ? parseInt(a, 36) : 0), c.set((r += o), n[t]);
                                                    for (var s = 0; s < a; s++) c.set(++r, n[t]);
                                                });
                                            }
                                        };
                                        for (var r in e) t(r);
                                    }
                                })(),
                                c.get(t.codePointAt(0)) || n.L
                            );
                        }
                        var h,
                            d,
                            f,
                            p = "14>1,1e>2,u>2,2wt>1,1>1,1ge>1,1wp>1,1j>1,f>1,hm>1,1>1,u>1,u6>1,1>1,+5,28>1,w>1,1>1,+3,b8>1,1>1,+3,1>3,-1>-1,3>1,1>1,+2,1s>1,1>1,x>1,th>1,1>1,+2,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,4q>1,1e>2,u>2,2>1,+1",
                            m =
                                "6f1>-6dx,6dy>-6dx,6ec>-6ed,6ee>-6ed,6ww>2jj,-2ji>2jj,14r4>-1e7l,1e7m>-1e7l,1e7m>-1e5c,1e5d>-1e5b,1e5c>-14qx,14qy>-14qx,14vn>-1ecg,1ech>-1ecg,1edu>-1ecg,1eci>-1ecg,1eda>-1ecg,1eci>-1ecg,1eci>-168q,168r>-168q,168s>-14ye,14yf>-14ye";
                        function g(t, e) {
                            var n,
                                r = 0,
                                i = new Map(),
                                o = e && new Map();
                            return (
                                t.split(",").forEach(function t(a) {
                                    if (-1 !== a.indexOf("+")) for (var s = +a; s--; ) t(n);
                                    else {
                                        n = a;
                                        var l = a.split(">"),
                                            c = l[0],
                                            u = l[1];
                                        (c = String.fromCodePoint((r += parseInt(c, 36)))), (u = String.fromCodePoint((r += parseInt(u, 36)))), i.set(c, u), e && o.set(u, c);
                                    }
                                }),
                                    { map: i, reverseMap: o }
                            );
                        }
                        function v() {
                            if (!h) {
                                var t = g(p, !0),
                                    e = t.map,
                                    n = t.reverseMap;
                                (h = e), (d = n), (f = g(m, !1).map);
                            }
                        }
                        function y(t) {
                            return v(), h.get(t) || null;
                        }
                        function x(t) {
                            return v(), d.get(t) || null;
                        }
                        function _(t) {
                            return v(), f.get(t) || null;
                        }
                        var b = n.L,
                            w = n.R,
                            S = n.EN,
                            M = n.ES,
                            T = n.ET,
                            E = n.AN,
                            A = n.CS,
                            L = n.B,
                            C = n.S,
                            R = n.ON,
                            P = n.BN,
                            I = n.NSM,
                            O = n.AL,
                            D = n.LRO,
                            k = n.RLO,
                            U = n.LRE,
                            F = n.RLE,
                            N = n.PDF,
                            z = n.LRI,
                            B = n.RLI,
                            G = n.FSI,
                            H = n.PDI;
                        var V;
                        function W(t) {
                            return (
                                (function () {
                                    if (!V) {
                                        var t = g(
                                                "14>1,j>2,t>2,u>2,1a>g,2v3>1,1>1,1ge>1,1wd>1,b>1,1j>1,f>1,ai>3,-2>3,+1,8>1k0,-1jq>1y7,-1y6>1hf,-1he>1h6,-1h5>1ha,-1h8>1qi,-1pu>1,6>3u,-3s>7,6>1,1>1,f>1,1>1,+2,3>1,1>1,+13,4>1,1>1,6>1eo,-1ee>1,3>1mg,-1me>1mk,-1mj>1mi,-1mg>1mi,-1md>1,1>1,+2,1>10k,-103>1,1>1,4>1,5>1,1>1,+10,3>1,1>8,-7>8,+1,-6>7,+1,a>1,1>1,u>1,u6>1,1>1,+5,26>1,1>1,2>1,2>2,8>1,7>1,4>1,1>1,+5,b8>1,1>1,+3,1>3,-2>1,2>1,1>1,+2,c>1,3>1,1>1,+2,h>1,3>1,a>1,1>1,2>1,3>1,1>1,d>1,f>1,3>1,1a>1,1>1,6>1,7>1,13>1,k>1,1>1,+19,4>1,1>1,+2,2>1,1>1,+18,m>1,a>1,1>1,lk>1,1>1,4>1,2>1,f>1,3>1,1>1,+3,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,6>1,4j>1,j>2,t>2,u>2,2>1,+1",
                                                !0
                                            ),
                                            e = t.map;
                                        t.reverseMap.forEach(function (t, n) {
                                            e.set(n, t);
                                        }),
                                            (V = e);
                                    }
                                })(),
                                V.get(t) || null
                            );
                        }
                        function j(t, e, n, r) {
                            var i = t.length;
                            (n = Math.max(0, null == n ? 0 : +n)), (r = Math.min(i - 1, null == r ? i - 1 : +r));
                            var o = [];
                            return (
                                e.paragraphs.forEach(function (i) {
                                    var a = Math.max(n, i.start),
                                        s = Math.min(r, i.end);
                                    if (a < s) {
                                        for (var c = e.levels.slice(a, s + 1), h = s; h >= a && u(t[h]) & l; h--) c[h] = i.level;
                                        for (var d = i.level, f = 1 / 0, p = 0; p < c.length; p++) {
                                            var m = c[p];
                                            m > d && (d = m), m < f && (f = 1 | m);
                                        }
                                        for (var g = d; g >= f; g--)
                                            for (var v = 0; v < c.length; v++)
                                                if (c[v] >= g) {
                                                    for (var y = v; v + 1 < c.length && c[v + 1] >= g; ) v++;
                                                    v > y && o.push([y + n, v + n]);
                                                }
                                    }
                                }),
                                    o
                            );
                        }
                        function q(t, e, n, r) {
                            for (var i = j(t, e, n, r), o = [], a = 0; a < t.length; a++) o[a] = a;
                            return (
                                i.forEach(function (t) {
                                    for (var e = t[0], n = t[1], r = o.slice(e, n + 1), i = r.length; i--; ) o[n - i] = r[i];
                                }),
                                    o
                            );
                        }
                        return (
                            (t.closingToOpeningBracket = x),
                                (t.getBidiCharType = u),
                                (t.getBidiCharTypeName = function (t) {
                                    return r[u(t)];
                                }),
                                (t.getCanonicalBracket = _),
                                (t.getEmbeddingLevels = function (t, e) {
                                    for (var n = new Uint32Array(t.length), r = 0; r < t.length; r++) n[r] = u(t[r]);
                                    var c = new Map();
                                    function h(t, e) {
                                        var r = n[t];
                                        (n[t] = e), c.set(r, c.get(r) - 1), r & a && c.set(a, c.get(a) - 1), c.set(e, (c.get(e) || 0) + 1), e & a && c.set(a, (c.get(a) || 0) + 1);
                                    }
                                    for (var d = new Uint8Array(t.length), f = new Map(), p = [], m = null, g = 0; g < t.length; g++)
                                        m || p.push((m = { start: g, end: t.length - 1, level: "rtl" === e ? 1 : "ltr" === e ? 0 : Ge(g, !1) })), n[g] & L && ((m.end = g), (m = null));
                                    for (
                                        var v = F | U | k | D | i | H | N | L,
                                            V = function (t) {
                                                return t + (1 & t ? 1 : 2);
                                            },
                                            W = function (t) {
                                                return t + (1 & t ? 2 : 1);
                                            },
                                            j = 0;
                                        j < p.length;
                                        j++
                                    ) {
                                        var q = [{ _level: (m = p[j]).level, _override: 0, _isolate: 0 }],
                                            X = void 0,
                                            Y = 0,
                                            Z = 0,
                                            J = 0;
                                        c.clear();
                                        for (var $ = m.start; $ <= m.end; $++) {
                                            var Q = n[$];
                                            if (((X = q[q.length - 1]), c.set(Q, (c.get(Q) || 0) + 1), Q & a && c.set(a, (c.get(a) || 0) + 1), Q & v))
                                                if (Q & (F | U)) {
                                                    d[$] = X._level;
                                                    var K = (Q === F ? W : V)(X._level);
                                                    K <= 125 && !Y && !Z ? q.push({ _level: K, _override: 0, _isolate: 0 }) : Y || Z++;
                                                } else if (Q & (k | D)) {
                                                    d[$] = X._level;
                                                    var tt = (Q === k ? W : V)(X._level);
                                                    tt <= 125 && !Y && !Z ? q.push({ _level: tt, _override: Q & k ? w : b, _isolate: 0 }) : Y || Z++;
                                                } else if (Q & i) {
                                                    Q & G && (Q = 1 === Ge($ + 1, !0) ? B : z), (d[$] = X._level), X._override && h($, X._override);
                                                    var et = (Q === B ? W : V)(X._level);
                                                    et <= 125 && 0 === Y && 0 === Z ? (J++, q.push({ _level: et, _override: 0, _isolate: 1, _isolInitIndex: $ })) : Y++;
                                                } else if (Q & H) {
                                                    if (Y > 0) Y--;
                                                    else if (J > 0) {
                                                        for (Z = 0; !q[q.length - 1]._isolate; ) q.pop();
                                                        var nt = q[q.length - 1]._isolInitIndex;
                                                        null != nt && (f.set(nt, $), f.set($, nt)), q.pop(), J--;
                                                    }
                                                    (X = q[q.length - 1]), (d[$] = X._level), X._override && h($, X._override);
                                                } else Q & N ? (0 === Y && (Z > 0 ? Z-- : !X._isolate && q.length > 1 && (q.pop(), (X = q[q.length - 1]))), (d[$] = X._level)) : Q & L && (d[$] = m.level);
                                            else (d[$] = X._level), X._override && Q !== P && h($, X._override);
                                        }
                                        for (var rt = [], it = null, ot = m.start; ot <= m.end; ot++) {
                                            var at = n[ot];
                                            if (!(at & s)) {
                                                var st = d[ot],
                                                    lt = at & i,
                                                    ct = at === H;
                                                it && st === it._level ? ((it._end = ot), (it._endsWithIsolInit = lt)) : rt.push((it = { _start: ot, _end: ot, _level: st, _startsWithPDI: ct, _endsWithIsolInit: lt }));
                                            }
                                        }
                                        for (var ut = [], ht = 0; ht < rt.length; ht++) {
                                            var dt = rt[ht];
                                            if (!dt._startsWithPDI || (dt._startsWithPDI && !f.has(dt._start))) {
                                                for (var ft = [(it = dt)], pt = void 0; it && it._endsWithIsolInit && null != (pt = f.get(it._end)); )
                                                    for (var mt = ht + 1; mt < rt.length; mt++)
                                                        if (rt[mt]._start === pt) {
                                                            ft.push((it = rt[mt]));
                                                            break;
                                                        }
                                                for (var gt = [], vt = 0; vt < ft.length; vt++) for (var yt = ft[vt], xt = yt._start; xt <= yt._end; xt++) gt.push(xt);
                                                for (var _t = d[gt[0]], bt = m.level, wt = gt[0] - 1; wt >= 0; wt--)
                                                    if (!(n[wt] & s)) {
                                                        bt = d[wt];
                                                        break;
                                                    }
                                                var St = gt[gt.length - 1],
                                                    Mt = d[St],
                                                    Tt = m.level;
                                                if (!(n[St] & i))
                                                    for (var Et = St + 1; Et <= m.end; Et++)
                                                        if (!(n[Et] & s)) {
                                                            Tt = d[Et];
                                                            break;
                                                        }
                                                ut.push({ _seqIndices: gt, _sosType: Math.max(bt, _t) % 2 ? w : b, _eosType: Math.max(Tt, Mt) % 2 ? w : b });
                                            }
                                        }
                                        for (var At = 0; At < ut.length; At++) {
                                            var Lt = ut[At],
                                                Ct = Lt._seqIndices,
                                                Rt = Lt._sosType,
                                                Pt = Lt._eosType;
                                            if (c.get(I))
                                                for (var It = 0; It < Ct.length; It++) {
                                                    var Ot = Ct[It];
                                                    if (n[Ot] & I) {
                                                        for (var Dt = Rt, kt = It - 1; kt >= 0; kt--)
                                                            if (!(n[Ct[kt]] & s)) {
                                                                Dt = n[Ct[kt]];
                                                                break;
                                                            }
                                                        h(Ot, Dt & (i | H) ? R : Dt);
                                                    }
                                                }
                                            if (c.get(S))
                                                for (var Ut = 0; Ut < Ct.length; Ut++) {
                                                    var Ft = Ct[Ut];
                                                    if (n[Ft] & S)
                                                        for (var Nt = Ut - 1; Nt >= -1; Nt--) {
                                                            var zt = -1 === Nt ? Rt : n[Ct[Nt]];
                                                            if (zt & o) {
                                                                zt === O && h(Ft, E);
                                                                break;
                                                            }
                                                        }
                                                }
                                            if (c.get(O))
                                                for (var Bt = 0; Bt < Ct.length; Bt++) {
                                                    var Gt = Ct[Bt];
                                                    n[Gt] & O && h(Gt, w);
                                                }
                                            if (c.get(M) || c.get(A))
                                                for (var Ht = 1; Ht < Ct.length - 1; Ht++) {
                                                    var Vt = Ct[Ht];
                                                    if (n[Vt] & (M | A)) {
                                                        for (var Wt = 0, jt = 0, qt = Ht - 1; qt >= 0 && (Wt = n[Ct[qt]]) & s; qt--);
                                                        for (var Xt = Ht + 1; Xt < Ct.length && (jt = n[Ct[Xt]]) & s; Xt++);
                                                        Wt === jt && (n[Vt] === M ? Wt === S : Wt & (S | E)) && h(Vt, Wt);
                                                    }
                                                }
                                            if (c.get(S))
                                                for (var Yt = 0; Yt < Ct.length; Yt++) {
                                                    var Zt = Ct[Yt];
                                                    if (n[Zt] & S) {
                                                        for (var Jt = Yt - 1; Jt >= 0 && n[Ct[Jt]] & (T | s); Jt--) h(Ct[Jt], S);
                                                        for (var $t = Yt + 1; $t < Ct.length && n[Ct[$t]] & (T | s); $t++) h(Ct[$t], S);
                                                    }
                                                }
                                            if (c.get(T) || c.get(M) || c.get(A))
                                                for (var Qt = 0; Qt < Ct.length; Qt++) {
                                                    var Kt = Ct[Qt];
                                                    if (n[Kt] & (T | M | A)) {
                                                        h(Kt, R);
                                                        for (var te = Qt - 1; te >= 0 && n[Ct[te]] & s; te--) h(Ct[te], R);
                                                        for (var ee = Qt + 1; ee < Ct.length && n[Ct[ee]] & s; ee++) h(Ct[ee], R);
                                                    }
                                                }
                                            if (c.get(S))
                                                for (var ne = 0, re = Rt; ne < Ct.length; ne++) {
                                                    var ie = Ct[ne],
                                                        oe = n[ie];
                                                    oe & S ? re === b && h(ie, b) : oe & o && (re = oe);
                                                }
                                            if (c.get(a)) {
                                                for (var ae = w | S | E, se = ae | b, le = [], ce = [], ue = 0; ue < Ct.length; ue++)
                                                    if (n[Ct[ue]] & a) {
                                                        var he = t[Ct[ue]],
                                                            de = void 0;
                                                        if (null !== y(he)) {
                                                            if (!(ce.length < 63)) break;
                                                            ce.push({ char: he, seqIndex: ue });
                                                        } else if (null !== (de = x(he)))
                                                            for (var fe = ce.length - 1; fe >= 0; fe--) {
                                                                var pe = ce[fe].char;
                                                                if (pe === de || pe === x(_(he)) || y(_(pe)) === he) {
                                                                    le.push([ce[fe].seqIndex, ue]), (ce.length = fe);
                                                                    break;
                                                                }
                                                            }
                                                    }
                                                le.sort(function (t, e) {
                                                    return t[0] - e[0];
                                                });
                                                for (var me = 0; me < le.length; me++) {
                                                    for (var ge = le[me], ve = ge[0], ye = ge[1], xe = !1, _e = 0, be = ve + 1; be < ye; be++) {
                                                        var we = Ct[be];
                                                        if (n[we] & se) {
                                                            xe = !0;
                                                            var Se = n[we] & ae ? w : b;
                                                            if (Se === Ve(we)) {
                                                                _e = Se;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    if (xe && !_e) {
                                                        _e = Rt;
                                                        for (var Me = ve - 1; Me >= 0; Me--) {
                                                            var Te = Ct[Me];
                                                            if (n[Te] & se) {
                                                                var Ee = n[Te] & ae ? w : b;
                                                                _e = Ee !== Ve(Te) ? Ee : Ve(Te);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    if (_e) {
                                                        if (((n[Ct[ve]] = n[Ct[ye]] = _e), _e !== Ve(Ct[ve])))
                                                            for (var Ae = ve + 1; Ae < Ct.length; Ae++)
                                                                if (!(n[Ct[Ae]] & s)) {
                                                                    u(t[Ct[Ae]]) & I && (n[Ct[Ae]] = _e);
                                                                    break;
                                                                }
                                                        if (_e !== Ve(Ct[ye]))
                                                            for (var Le = ye + 1; Le < Ct.length; Le++)
                                                                if (!(n[Ct[Le]] & s)) {
                                                                    u(t[Ct[Le]]) & I && (n[Ct[Le]] = _e);
                                                                    break;
                                                                }
                                                    }
                                                }
                                                for (var Ce = 0; Ce < Ct.length; Ce++)
                                                    if (n[Ct[Ce]] & a) {
                                                        for (var Re = Ce, Pe = Ce, Ie = Rt, Oe = Ce - 1; Oe >= 0; Oe--) {
                                                            if (!(n[Ct[Oe]] & s)) {
                                                                Ie = n[Ct[Oe]] & ae ? w : b;
                                                                break;
                                                            }
                                                            Re = Oe;
                                                        }
                                                        for (var De = Pt, ke = Ce + 1; ke < Ct.length; ke++) {
                                                            if (!(n[Ct[ke]] & (a | s))) {
                                                                De = n[Ct[ke]] & ae ? w : b;
                                                                break;
                                                            }
                                                            Pe = ke;
                                                        }
                                                        for (var Ue = Re; Ue <= Pe; Ue++) n[Ct[Ue]] = Ie === De ? Ie : Ve(Ct[Ue]);
                                                        Ce = Pe;
                                                    }
                                            }
                                        }
                                        for (var Fe = m.start; Fe <= m.end; Fe++) {
                                            var Ne = d[Fe],
                                                ze = n[Fe];
                                            if ((1 & Ne ? ze & (b | S | E) && d[Fe]++ : ze & w ? d[Fe]++ : ze & (E | S) && (d[Fe] += 2), ze & s && (d[Fe] = 0 === Fe ? m.level : d[Fe - 1]), Fe === m.end || u(t[Fe]) & (C | L)))
                                                for (var Be = Fe; Be >= 0 && u(t[Be]) & l; Be--) d[Be] = m.level;
                                        }
                                    }
                                    return { levels: d, paragraphs: p };
                                    function Ge(e, r) {
                                        for (var o = e; o < t.length; o++) {
                                            var a = n[o];
                                            if (a & (w | O)) return 1;
                                            if (a & (L | b) || (r && a === H)) return 0;
                                            if (a & i) {
                                                var s = He(o);
                                                o = -1 === s ? t.length : s;
                                            }
                                        }
                                        return 0;
                                    }
                                    function He(e) {
                                        for (var r = 1, o = e + 1; o < t.length; o++) {
                                            var a = n[o];
                                            if (a & L) break;
                                            if (a & H) {
                                                if (0 == --r) return o;
                                            } else a & i && r++;
                                        }
                                        return -1;
                                    }
                                    function Ve(t) {
                                        return 1 & d[t] ? w : b;
                                    }
                                }),
                                (t.getMirroredCharacter = W),
                                (t.getMirroredCharactersMap = function (t, e, n, r) {
                                    var i = t.length;
                                    (n = Math.max(0, null == n ? 0 : +n)), (r = Math.min(i - 1, null == r ? i - 1 : +r));
                                    for (var o = new Map(), a = n; a <= r; a++)
                                        if (1 & e[a]) {
                                            var s = W(t[a]);
                                            null !== s && o.set(a, s);
                                        }
                                    return o;
                                }),
                                (t.getReorderSegments = j),
                                (t.getReorderedIndices = q),
                                (t.getReorderedString = function (t, e, n, r) {
                                    var i = q(t, e, n, r),
                                        o = [].concat(t);
                                    return (
                                        i.forEach(function (n, r) {
                                            o[r] = (1 & e.levels[n] ? W(t[n]) : null) || t[n];
                                        }),
                                            o.join("")
                                    );
                                }),
                                (t.openingToClosingBracket = y),
                                Object.defineProperty(t, "__esModule", { value: !0 }),
                                t
                        );
                    })({});
                };
                const lp = /\bvoid\s+main\s*\(\s*\)\s*{/g;
                function cp(t) {
                    return t.replace(/^[ \t]*#include +<([\w\d./]+)>/gm, function (t, e) {
                        let n = cs[e];
                        return n ? cp(n) : t;
                    });
                }
                const up = [];
                for (let t = 0; t < 256; t++) up[t] = (t < 16 ? "0" : "") + t.toString(16);
                const hp =
                        Object.assign ||
                        function () {
                            let t = arguments[0];
                            for (let e = 1, n = arguments.length; e < n; e++) {
                                let n = arguments[e];
                                if (n) for (let e in n) n.hasOwnProperty(e) && (t[e] = n[e]);
                            }
                            return t;
                        },
                    dp = Date.now(),
                    fp = new WeakMap(),
                    pp = new Map();
                let mp = 1e10;
                function gp(t, e) {
                    const n = (function (t) {
                        const e = JSON.stringify(t, yp);
                        let n = _p.get(e);
                        null == n && _p.set(e, (n = ++xp));
                        return n;
                    })(e);
                    let r = fp.get(t);
                    if ((r || fp.set(t, (r = Object.create(null))), r[n])) return new r[n]();
                    const i = `_onBeforeCompile${n}`,
                        o = function (r) {
                            t.onBeforeCompile.call(this, r);
                            const o = n + "|||" + r.vertexShader + "|||" + r.fragmentShader;
                            let a = pp[o];
                            if (!a) {
                                const t = (function ({ vertexShader: t, fragmentShader: e }, n, r) {
                                    let {
                                        vertexDefs: i,
                                        vertexMainIntro: o,
                                        vertexMainOutro: a,
                                        vertexTransform: s,
                                        fragmentDefs: l,
                                        fragmentMainIntro: c,
                                        fragmentMainOutro: u,
                                        fragmentColorTransform: h,
                                        customRewriter: d,
                                        timeUniform: f,
                                    } = n;
                                    (i = i || ""), (o = o || ""), (a = a || ""), (l = l || ""), (c = c || ""), (u = u || ""), (s || d) && (t = cp(t));
                                    (h || d) && (e = cp((e = e.replace(/^[ \t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm, "\n//!BEGIN_POST_CHUNK $1\n$&\n//!END_POST_CHUNK\n"))));
                                    if (d) {
                                        let n = d({ vertexShader: t, fragmentShader: e });
                                        (t = n.vertexShader), (e = n.fragmentShader);
                                    }
                                    if (h) {
                                        let t = [];
                                        (e = e.replace(/^\/\/!BEGIN_POST_CHUNK[^]+?^\/\/!END_POST_CHUNK/gm, (e) => (t.push(e), ""))), (u = `${h}\n${t.join("\n")}\n${u}`);
                                    }
                                    if (f) {
                                        const t = `\nuniform float ${f};\n`;
                                        (i = t + i), (l = t + l);
                                    }
                                    s &&
                                    ((i = `${i}\nvoid troikaVertexTransform${r}(inout vec3 position, inout vec3 normal, inout vec2 uv) {\n  ${s}\n}\n`),
                                        (o = `\ntroika_position_${r} = vec3(position);\ntroika_normal_${r} = vec3(normal);\ntroika_uv_${r} = vec2(uv);\ntroikaVertexTransform${r}(troika_position_${r}, troika_normal_${r}, troika_uv_${r});\n${o}\n`),
                                        (t = (t = `vec3 troika_position_${r};\nvec3 troika_normal_${r};\nvec2 troika_uv_${r};\n${t}\n`).replace(/\b(position|normal|uv)\b/g, (t, e, n, i) =>
                                            /\battribute\s+vec[23]\s+$/.test(i.substr(0, n)) ? e : `troika_${e}_${r}`
                                        )));
                                    return (t = vp(t, r, i, o, a)), (e = vp(e, r, l, c, u)), { vertexShader: t, fragmentShader: e };
                                })(r, e, n);
                                a = pp[o] = t;
                            }
                            (r.vertexShader = a.vertexShader),
                                (r.fragmentShader = a.fragmentShader),
                                hp(r.uniforms, this.uniforms),
                            e.timeUniform &&
                            (r.uniforms[e.timeUniform] = {
                                get value() {
                                    return Date.now() - dp;
                                },
                            }),
                            this[i] && this[i](r);
                        },
                        a = function () {
                            return s(e.chained ? t : t.clone());
                        },
                        s = function (r) {
                            const i = Object.create(r, l);
                            return (
                                Object.defineProperty(i, "baseMaterial", { value: t }),
                                    Object.defineProperty(i, "id", { value: mp++ }),
                                    (i.uuid = (function () {
                                        const t = (4294967295 * Math.random()) | 0,
                                            e = (4294967295 * Math.random()) | 0,
                                            n = (4294967295 * Math.random()) | 0,
                                            r = (4294967295 * Math.random()) | 0;
                                        return (
                                            up[255 & t] +
                                            up[(t >> 8) & 255] +
                                            up[(t >> 16) & 255] +
                                            up[(t >> 24) & 255] +
                                            "-" +
                                            up[255 & e] +
                                            up[(e >> 8) & 255] +
                                            "-" +
                                            up[((e >> 16) & 15) | 64] +
                                            up[(e >> 24) & 255] +
                                            "-" +
                                            up[(63 & n) | 128] +
                                            up[(n >> 8) & 255] +
                                            "-" +
                                            up[(n >> 16) & 255] +
                                            up[(n >> 24) & 255] +
                                            up[255 & r] +
                                            up[(r >> 8) & 255] +
                                            up[(r >> 16) & 255] +
                                            up[(r >> 24) & 255]
                                        ).toUpperCase();
                                    })()),
                                    (i.uniforms = hp({}, r.uniforms, e.uniforms)),
                                    (i.defines = hp({}, r.defines, e.defines)),
                                    (i.defines[`TROIKA_DERIVED_MATERIAL_${n}`] = ""),
                                    (i.extensions = hp({}, r.extensions, e.extensions)),
                                    (i._listeners = void 0),
                                    i
                            );
                        },
                        l = {
                            constructor: { value: a },
                            isDerivedMaterial: { value: !0 },
                            customProgramCacheKey: {
                                writable: !0,
                                configurable: !0,
                                value: function () {
                                    return n;
                                },
                            },
                            onBeforeCompile: {
                                get: () => o,
                                set(t) {
                                    this[i] = t;
                                },
                            },
                            copy: {
                                writable: !0,
                                configurable: !0,
                                value: function (e) {
                                    return t.copy.call(this, e), t.isShaderMaterial || t.isDerivedMaterial || (hp(this.extensions, e.extensions), hp(this.defines, e.defines), hp(this.uniforms, ja.clone(e.uniforms))), this;
                                },
                            },
                            clone: {
                                writable: !0,
                                configurable: !0,
                                value: function () {
                                    const e = new t.constructor();
                                    return s(e).copy(this);
                                },
                            },
                            getDepthMaterial: {
                                writable: !0,
                                configurable: !0,
                                value: function () {
                                    let n = this._depthMaterial;
                                    return n || ((n = this._depthMaterial = gp(t.isDerivedMaterial ? t.getDepthMaterial() : new Fc({ depthPacking: 3201 }), e)), (n.defines.IS_DEPTH_MATERIAL = ""), (n.uniforms = this.uniforms)), n;
                                },
                            },
                            getDistanceMaterial: {
                                writable: !0,
                                configurable: !0,
                                value: function () {
                                    let n = this._distanceMaterial;
                                    return n || ((n = this._distanceMaterial = gp(t.isDerivedMaterial ? t.getDistanceMaterial() : new Nc(), e)), (n.defines.IS_DISTANCE_MATERIAL = ""), (n.uniforms = this.uniforms)), n;
                                },
                            },
                            dispose: {
                                writable: !0,
                                configurable: !0,
                                value() {
                                    const { _depthMaterial: e, _distanceMaterial: n } = this;
                                    e && e.dispose(), n && n.dispose(), t.dispose.call(this);
                                },
                            },
                        };
                    return (r[n] = a), new a();
                }
                function vp(t, e, n, r, i) {
                    return (r || i || n) && ((t = t.replace(lp, `\n${n}\nvoid troikaOrigMain${e}() {`)), (t += `\nvoid main() {\n  ${r}\n  troikaOrigMain${e}();\n  ${i}\n}`)), t;
                }
                function yp(t, e) {
                    return "uniforms" === t ? void 0 : "function" == typeof e ? e.toString() : e;
                }
                let xp = 0;
                const _p = new Map();
                const bp = rp({
                        name: "Typr Font Parser",
                        dependencies: [
                            function () {
                                return (
                                    "undefined" == typeof window && (self.window = self),
                                        (function (t) {
                                            var e = {
                                                parse: function (t) {
                                                    var n = e._bin,
                                                        r = new Uint8Array(t);
                                                    if ("ttcf" == n.readASCII(r, 0, 4)) {
                                                        var i = 4;
                                                        n.readUshort(r, i), (i += 2), n.readUshort(r, i), (i += 2);
                                                        var o = n.readUint(r, i);
                                                        i += 4;
                                                        for (var a = [], s = 0; s < o; s++) {
                                                            var l = n.readUint(r, i);
                                                            (i += 4), a.push(e._readFont(r, l));
                                                        }
                                                        return a;
                                                    }
                                                    return [e._readFont(r, 0)];
                                                },
                                                _readFont: function (t, n) {
                                                    var r = e._bin,
                                                        i = n;
                                                    r.readFixed(t, n), (n += 4);
                                                    var o = r.readUshort(t, n);
                                                    (n += 2), r.readUshort(t, n), (n += 2), r.readUshort(t, n), (n += 2), r.readUshort(t, n), (n += 2);
                                                    for (
                                                        var a = ["cmap", "head", "hhea", "maxp", "hmtx", "name", "OS/2", "post", "loca", "glyf", "kern", "CFF ", "GPOS", "GSUB", "SVG "], s = { _data: t, _offset: i }, l = {}, c = 0;
                                                        c < o;
                                                        c++
                                                    ) {
                                                        var u = r.readASCII(t, n, 4);
                                                        (n += 4), r.readUint(t, n), (n += 4);
                                                        var h = r.readUint(t, n);
                                                        n += 4;
                                                        var d = r.readUint(t, n);
                                                        (n += 4), (l[u] = { offset: h, length: d });
                                                    }
                                                    for (c = 0; c < a.length; c++) {
                                                        var f = a[c];
                                                        l[f] && (s[f.trim()] = e[f.trim()].parse(t, l[f].offset, l[f].length, s));
                                                    }
                                                    return s;
                                                },
                                                _tabOffset: function (t, n, r) {
                                                    for (var i = e._bin, o = i.readUshort(t, r + 4), a = r + 12, s = 0; s < o; s++) {
                                                        var l = i.readASCII(t, a, 4);
                                                        (a += 4), i.readUint(t, a), (a += 4);
                                                        var c = i.readUint(t, a);
                                                        if (((a += 4), i.readUint(t, a), (a += 4), l == n)) return c;
                                                    }
                                                    return 0;
                                                },
                                            };
                                            (e._bin = {
                                                readFixed: function (t, e) {
                                                    return ((t[e] << 8) | t[e + 1]) + ((t[e + 2] << 8) | t[e + 3]) / 65540;
                                                },
                                                readF2dot14: function (t, n) {
                                                    return e._bin.readShort(t, n) / 16384;
                                                },
                                                readInt: function (t, n) {
                                                    var r = e._bin.t.uint8;
                                                    return (r[0] = t[n + 3]), (r[1] = t[n + 2]), (r[2] = t[n + 1]), (r[3] = t[n]), e._bin.t.int32[0];
                                                },
                                                readInt8: function (t, n) {
                                                    return (e._bin.t.uint8[0] = t[n]), e._bin.t.int8[0];
                                                },
                                                readShort: function (t, n) {
                                                    var r = e._bin.t.uint8;
                                                    return (r[1] = t[n]), (r[0] = t[n + 1]), e._bin.t.int16[0];
                                                },
                                                readUshort: function (t, e) {
                                                    return (t[e] << 8) | t[e + 1];
                                                },
                                                readUshorts: function (t, n, r) {
                                                    for (var i = [], o = 0; o < r; o++) i.push(e._bin.readUshort(t, n + 2 * o));
                                                    return i;
                                                },
                                                readUint: function (t, n) {
                                                    var r = e._bin.t.uint8;
                                                    return (r[3] = t[n]), (r[2] = t[n + 1]), (r[1] = t[n + 2]), (r[0] = t[n + 3]), e._bin.t.uint32[0];
                                                },
                                                readUint64: function (t, n) {
                                                    return 4294967296 * e._bin.readUint(t, n) + e._bin.readUint(t, n + 4);
                                                },
                                                readASCII: function (t, e, n) {
                                                    for (var r = "", i = 0; i < n; i++) r += String.fromCharCode(t[e + i]);
                                                    return r;
                                                },
                                                readUnicode: function (t, e, n) {
                                                    for (var r = "", i = 0; i < n; i++) {
                                                        var o = (t[e++] << 8) | t[e++];
                                                        r += String.fromCharCode(o);
                                                    }
                                                    return r;
                                                },
                                                _tdec: "undefined" != typeof window && window.TextDecoder ? new window.TextDecoder() : null,
                                                readUTF8: function (t, n, r) {
                                                    var i = e._bin._tdec;
                                                    return i && 0 == n && r == t.length ? i.decode(t) : e._bin.readASCII(t, n, r);
                                                },
                                                readBytes: function (t, e, n) {
                                                    for (var r = [], i = 0; i < n; i++) r.push(t[e + i]);
                                                    return r;
                                                },
                                                readASCIIArray: function (t, e, n) {
                                                    for (var r = [], i = 0; i < n; i++) r.push(String.fromCharCode(t[e + i]));
                                                    return r;
                                                },
                                            }),
                                                (e._bin.t = { buff: new ArrayBuffer(8) }),
                                                (e._bin.t.int8 = new Int8Array(e._bin.t.buff)),
                                                (e._bin.t.uint8 = new Uint8Array(e._bin.t.buff)),
                                                (e._bin.t.int16 = new Int16Array(e._bin.t.buff)),
                                                (e._bin.t.uint16 = new Uint16Array(e._bin.t.buff)),
                                                (e._bin.t.int32 = new Int32Array(e._bin.t.buff)),
                                                (e._bin.t.uint32 = new Uint32Array(e._bin.t.buff)),
                                                (e._lctf = {}),
                                                (e._lctf.parse = function (t, n, r, i, o) {
                                                    var a = e._bin,
                                                        s = {},
                                                        l = n;
                                                    a.readFixed(t, n), (n += 4);
                                                    var c = a.readUshort(t, n);
                                                    n += 2;
                                                    var u = a.readUshort(t, n);
                                                    n += 2;
                                                    var h = a.readUshort(t, n);
                                                    return (n += 2), (s.scriptList = e._lctf.readScriptList(t, l + c)), (s.featureList = e._lctf.readFeatureList(t, l + u)), (s.lookupList = e._lctf.readLookupList(t, l + h, o)), s;
                                                }),
                                                (e._lctf.readLookupList = function (t, n, r) {
                                                    var i = e._bin,
                                                        o = n,
                                                        a = [],
                                                        s = i.readUshort(t, n);
                                                    n += 2;
                                                    for (var l = 0; l < s; l++) {
                                                        var c = i.readUshort(t, n);
                                                        n += 2;
                                                        var u = e._lctf.readLookupTable(t, o + c, r);
                                                        a.push(u);
                                                    }
                                                    return a;
                                                }),
                                                (e._lctf.readLookupTable = function (t, n, r) {
                                                    var i = e._bin,
                                                        o = n,
                                                        a = { tabs: [] };
                                                    (a.ltype = i.readUshort(t, n)), (n += 2), (a.flag = i.readUshort(t, n)), (n += 2);
                                                    var s = i.readUshort(t, n);
                                                    n += 2;
                                                    for (var l = a.ltype, c = 0; c < s; c++) {
                                                        var u = i.readUshort(t, n);
                                                        n += 2;
                                                        var h = r(t, l, o + u, a);
                                                        a.tabs.push(h);
                                                    }
                                                    return a;
                                                }),
                                                (e._lctf.numOfOnes = function (t) {
                                                    for (var e = 0, n = 0; n < 32; n++) 0 != ((t >>> n) & 1) && e++;
                                                    return e;
                                                }),
                                                (e._lctf.readClassDef = function (t, n) {
                                                    var r = e._bin,
                                                        i = [],
                                                        o = r.readUshort(t, n);
                                                    if (((n += 2), 1 == o)) {
                                                        var a = r.readUshort(t, n);
                                                        n += 2;
                                                        var s = r.readUshort(t, n);
                                                        n += 2;
                                                        for (var l = 0; l < s; l++) i.push(a + l), i.push(a + l), i.push(r.readUshort(t, n)), (n += 2);
                                                    }
                                                    if (2 == o) {
                                                        var c = r.readUshort(t, n);
                                                        for (n += 2, l = 0; l < c; l++) i.push(r.readUshort(t, n)), (n += 2), i.push(r.readUshort(t, n)), (n += 2), i.push(r.readUshort(t, n)), (n += 2);
                                                    }
                                                    return i;
                                                }),
                                                (e._lctf.getInterval = function (t, e) {
                                                    for (var n = 0; n < t.length; n += 3) {
                                                        var r = t[n],
                                                            i = t[n + 1];
                                                        if ((t[n + 2], r <= e && e <= i)) return n;
                                                    }
                                                    return -1;
                                                }),
                                                (e._lctf.readCoverage = function (t, n) {
                                                    var r = e._bin,
                                                        i = {};
                                                    (i.fmt = r.readUshort(t, n)), (n += 2);
                                                    var o = r.readUshort(t, n);
                                                    return (n += 2), 1 == i.fmt && (i.tab = r.readUshorts(t, n, o)), 2 == i.fmt && (i.tab = r.readUshorts(t, n, 3 * o)), i;
                                                }),
                                                (e._lctf.coverageIndex = function (t, n) {
                                                    var r = t.tab;
                                                    if (1 == t.fmt) return r.indexOf(n);
                                                    if (2 == t.fmt) {
                                                        var i = e._lctf.getInterval(r, n);
                                                        if (-1 != i) return r[i + 2] + (n - r[i]);
                                                    }
                                                    return -1;
                                                }),
                                                (e._lctf.readFeatureList = function (t, n) {
                                                    var r = e._bin,
                                                        i = n,
                                                        o = [],
                                                        a = r.readUshort(t, n);
                                                    n += 2;
                                                    for (var s = 0; s < a; s++) {
                                                        var l = r.readASCII(t, n, 4);
                                                        n += 4;
                                                        var c = r.readUshort(t, n);
                                                        n += 2;
                                                        var u = e._lctf.readFeatureTable(t, i + c);
                                                        (u.tag = l.trim()), o.push(u);
                                                    }
                                                    return o;
                                                }),
                                                (e._lctf.readFeatureTable = function (t, n) {
                                                    var r = e._bin,
                                                        i = n,
                                                        o = {},
                                                        a = r.readUshort(t, n);
                                                    (n += 2), a > 0 && (o.featureParams = i + a);
                                                    var s = r.readUshort(t, n);
                                                    (n += 2), (o.tab = []);
                                                    for (var l = 0; l < s; l++) o.tab.push(r.readUshort(t, n + 2 * l));
                                                    return o;
                                                }),
                                                (e._lctf.readScriptList = function (t, n) {
                                                    var r = e._bin,
                                                        i = n,
                                                        o = {},
                                                        a = r.readUshort(t, n);
                                                    n += 2;
                                                    for (var s = 0; s < a; s++) {
                                                        var l = r.readASCII(t, n, 4);
                                                        n += 4;
                                                        var c = r.readUshort(t, n);
                                                        (n += 2), (o[l.trim()] = e._lctf.readScriptTable(t, i + c));
                                                    }
                                                    return o;
                                                }),
                                                (e._lctf.readScriptTable = function (t, n) {
                                                    var r = e._bin,
                                                        i = n,
                                                        o = {},
                                                        a = r.readUshort(t, n);
                                                    (n += 2), (o.default = e._lctf.readLangSysTable(t, i + a));
                                                    var s = r.readUshort(t, n);
                                                    n += 2;
                                                    for (var l = 0; l < s; l++) {
                                                        var c = r.readASCII(t, n, 4);
                                                        n += 4;
                                                        var u = r.readUshort(t, n);
                                                        (n += 2), (o[c.trim()] = e._lctf.readLangSysTable(t, i + u));
                                                    }
                                                    return o;
                                                }),
                                                (e._lctf.readLangSysTable = function (t, n) {
                                                    var r = e._bin,
                                                        i = {};
                                                    r.readUshort(t, n), (n += 2), (i.reqFeature = r.readUshort(t, n)), (n += 2);
                                                    var o = r.readUshort(t, n);
                                                    return (n += 2), (i.features = r.readUshorts(t, n, o)), i;
                                                }),
                                                (e.CFF = {}),
                                                (e.CFF.parse = function (t, n, r) {
                                                    var i = e._bin;
                                                    (t = new Uint8Array(t.buffer, n, r))[(n = 0)], t[++n], t[++n], t[++n], n++;
                                                    var o = [];
                                                    n = e.CFF.readIndex(t, n, o);
                                                    for (var a = [], s = 0; s < o.length - 1; s++) a.push(i.readASCII(t, n + o[s], o[s + 1] - o[s]));
                                                    n += o[o.length - 1];
                                                    var l = [];
                                                    n = e.CFF.readIndex(t, n, l);
                                                    var c = [];
                                                    for (s = 0; s < l.length - 1; s++) c.push(e.CFF.readDict(t, n + l[s], n + l[s + 1]));
                                                    n += l[l.length - 1];
                                                    var u = c[0],
                                                        h = [];
                                                    n = e.CFF.readIndex(t, n, h);
                                                    var d = [];
                                                    for (s = 0; s < h.length - 1; s++) d.push(i.readASCII(t, n + h[s], h[s + 1] - h[s]));
                                                    if (((n += h[h.length - 1]), e.CFF.readSubrs(t, n, u), u.CharStrings)) {
                                                        (n = u.CharStrings), (h = []), (n = e.CFF.readIndex(t, n, h));
                                                        var f = [];
                                                        for (s = 0; s < h.length - 1; s++) f.push(i.readBytes(t, n + h[s], h[s + 1] - h[s]));
                                                        u.CharStrings = f;
                                                    }
                                                    if (u.ROS) {
                                                        n = u.FDArray;
                                                        var p = [];
                                                        for (n = e.CFF.readIndex(t, n, p), u.FDArray = [], s = 0; s < p.length - 1; s++) {
                                                            var m = e.CFF.readDict(t, n + p[s], n + p[s + 1]);
                                                            e.CFF._readFDict(t, m, d), u.FDArray.push(m);
                                                        }
                                                        (n += p[p.length - 1]), (n = u.FDSelect), (u.FDSelect = []);
                                                        var g = t[n];
                                                        if ((n++, 3 != g)) throw g;
                                                        var v = i.readUshort(t, n);
                                                        for (n += 2, s = 0; s < v + 1; s++) u.FDSelect.push(i.readUshort(t, n), t[n + 2]), (n += 3);
                                                    }
                                                    return (
                                                        u.Encoding && (u.Encoding = e.CFF.readEncoding(t, u.Encoding, u.CharStrings.length)),
                                                        u.charset && (u.charset = e.CFF.readCharset(t, u.charset, u.CharStrings.length)),
                                                            e.CFF._readFDict(t, u, d),
                                                            u
                                                    );
                                                }),
                                                (e.CFF._readFDict = function (t, n, r) {
                                                    var i;
                                                    for (var o in (n.Private && ((i = n.Private[1]), (n.Private = e.CFF.readDict(t, i, i + n.Private[0])), n.Private.Subrs && e.CFF.readSubrs(t, i + n.Private.Subrs, n.Private)), n))
                                                        -1 != ["FamilyName", "FontName", "FullName", "Notice", "version", "Copyright"].indexOf(o) && (n[o] = r[n[o] - 426 + 35]);
                                                }),
                                                (e.CFF.readSubrs = function (t, n, r) {
                                                    var i = e._bin,
                                                        o = [];
                                                    n = e.CFF.readIndex(t, n, o);
                                                    var a,
                                                        s = o.length;
                                                    (a = s < 1240 ? 107 : s < 33900 ? 1131 : 32768), (r.Bias = a), (r.Subrs = []);
                                                    for (var l = 0; l < o.length - 1; l++) r.Subrs.push(i.readBytes(t, n + o[l], o[l + 1] - o[l]));
                                                }),
                                                (e.CFF.tableSE = [
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    1,
                                                    2,
                                                    3,
                                                    4,
                                                    5,
                                                    6,
                                                    7,
                                                    8,
                                                    9,
                                                    10,
                                                    11,
                                                    12,
                                                    13,
                                                    14,
                                                    15,
                                                    16,
                                                    17,
                                                    18,
                                                    19,
                                                    20,
                                                    21,
                                                    22,
                                                    23,
                                                    24,
                                                    25,
                                                    26,
                                                    27,
                                                    28,
                                                    29,
                                                    30,
                                                    31,
                                                    32,
                                                    33,
                                                    34,
                                                    35,
                                                    36,
                                                    37,
                                                    38,
                                                    39,
                                                    40,
                                                    41,
                                                    42,
                                                    43,
                                                    44,
                                                    45,
                                                    46,
                                                    47,
                                                    48,
                                                    49,
                                                    50,
                                                    51,
                                                    52,
                                                    53,
                                                    54,
                                                    55,
                                                    56,
                                                    57,
                                                    58,
                                                    59,
                                                    60,
                                                    61,
                                                    62,
                                                    63,
                                                    64,
                                                    65,
                                                    66,
                                                    67,
                                                    68,
                                                    69,
                                                    70,
                                                    71,
                                                    72,
                                                    73,
                                                    74,
                                                    75,
                                                    76,
                                                    77,
                                                    78,
                                                    79,
                                                    80,
                                                    81,
                                                    82,
                                                    83,
                                                    84,
                                                    85,
                                                    86,
                                                    87,
                                                    88,
                                                    89,
                                                    90,
                                                    91,
                                                    92,
                                                    93,
                                                    94,
                                                    95,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    96,
                                                    97,
                                                    98,
                                                    99,
                                                    100,
                                                    101,
                                                    102,
                                                    103,
                                                    104,
                                                    105,
                                                    106,
                                                    107,
                                                    108,
                                                    109,
                                                    110,
                                                    0,
                                                    111,
                                                    112,
                                                    113,
                                                    114,
                                                    0,
                                                    115,
                                                    116,
                                                    117,
                                                    118,
                                                    119,
                                                    120,
                                                    121,
                                                    122,
                                                    0,
                                                    123,
                                                    0,
                                                    124,
                                                    125,
                                                    126,
                                                    127,
                                                    128,
                                                    129,
                                                    130,
                                                    131,
                                                    0,
                                                    132,
                                                    133,
                                                    0,
                                                    134,
                                                    135,
                                                    136,
                                                    137,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    138,
                                                    0,
                                                    139,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    140,
                                                    141,
                                                    142,
                                                    143,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                    144,
                                                    0,
                                                    0,
                                                    0,
                                                    145,
                                                    0,
                                                    0,
                                                    146,
                                                    147,
                                                    148,
                                                    149,
                                                    0,
                                                    0,
                                                    0,
                                                    0,
                                                ]),
                                                (e.CFF.glyphByUnicode = function (t, e) {
                                                    for (var n = 0; n < t.charset.length; n++) if (t.charset[n] == e) return n;
                                                    return -1;
                                                }),
                                                (e.CFF.glyphBySE = function (t, n) {
                                                    return n < 0 || n > 255 ? -1 : e.CFF.glyphByUnicode(t, e.CFF.tableSE[n]);
                                                }),
                                                (e.CFF.readEncoding = function (t, n, r) {
                                                    e._bin;
                                                    var i = [".notdef"],
                                                        o = t[n];
                                                    if ((n++, 0 != o)) throw "error: unknown encoding format: " + o;
                                                    var a = t[n];
                                                    n++;
                                                    for (var s = 0; s < a; s++) i.push(t[n + s]);
                                                    return i;
                                                }),
                                                (e.CFF.readCharset = function (t, n, r) {
                                                    var i = e._bin,
                                                        o = [".notdef"],
                                                        a = t[n];
                                                    if ((n++, 0 == a))
                                                        for (var s = 0; s < r; s++) {
                                                            var l = i.readUshort(t, n);
                                                            (n += 2), o.push(l);
                                                        }
                                                    else {
                                                        if (1 != a && 2 != a) throw "error: format: " + a;
                                                        for (; o.length < r; ) {
                                                            (l = i.readUshort(t, n)), (n += 2);
                                                            var c = 0;
                                                            for (1 == a ? ((c = t[n]), n++) : ((c = i.readUshort(t, n)), (n += 2)), s = 0; s <= c; s++) o.push(l), l++;
                                                        }
                                                    }
                                                    return o;
                                                }),
                                                (e.CFF.readIndex = function (t, n, r) {
                                                    var i = e._bin,
                                                        o = i.readUshort(t, n) + 1,
                                                        a = t[(n += 2)];
                                                    if ((n++, 1 == a)) for (var s = 0; s < o; s++) r.push(t[n + s]);
                                                    else if (2 == a) for (s = 0; s < o; s++) r.push(i.readUshort(t, n + 2 * s));
                                                    else if (3 == a) for (s = 0; s < o; s++) r.push(16777215 & i.readUint(t, n + 3 * s - 1));
                                                    else if (1 != o) throw "unsupported offset size: " + a + ", count: " + o;
                                                    return (n += o * a) - 1;
                                                }),
                                                (e.CFF.getCharString = function (t, n, r) {
                                                    var i = e._bin,
                                                        o = t[n],
                                                        a = t[n + 1];
                                                    t[n + 2], t[n + 3], t[n + 4];
                                                    var s = 1,
                                                        l = null,
                                                        c = null;
                                                    o <= 20 && ((l = o), (s = 1)),
                                                    12 == o && ((l = 100 * o + a), (s = 2)),
                                                    21 <= o && o <= 27 && ((l = o), (s = 1)),
                                                    28 == o && ((c = i.readShort(t, n + 1)), (s = 3)),
                                                    29 <= o && o <= 31 && ((l = o), (s = 1)),
                                                    32 <= o && o <= 246 && ((c = o - 139), (s = 1)),
                                                    247 <= o && o <= 250 && ((c = 256 * (o - 247) + a + 108), (s = 2)),
                                                    251 <= o && o <= 254 && ((c = 256 * -(o - 251) - a - 108), (s = 2)),
                                                    255 == o && ((c = i.readInt(t, n + 1) / 65535), (s = 5)),
                                                        (r.val = null != c ? c : "o" + l),
                                                        (r.size = s);
                                                }),
                                                (e.CFF.readCharString = function (t, n, r) {
                                                    for (var i = n + r, o = e._bin, a = []; n < i; ) {
                                                        var s = t[n],
                                                            l = t[n + 1];
                                                        t[n + 2], t[n + 3], t[n + 4];
                                                        var c = 1,
                                                            u = null,
                                                            h = null;
                                                        s <= 20 && ((u = s), (c = 1)),
                                                        12 == s && ((u = 100 * s + l), (c = 2)),
                                                        (19 != s && 20 != s) || ((u = s), (c = 2)),
                                                        21 <= s && s <= 27 && ((u = s), (c = 1)),
                                                        28 == s && ((h = o.readShort(t, n + 1)), (c = 3)),
                                                        29 <= s && s <= 31 && ((u = s), (c = 1)),
                                                        32 <= s && s <= 246 && ((h = s - 139), (c = 1)),
                                                        247 <= s && s <= 250 && ((h = 256 * (s - 247) + l + 108), (c = 2)),
                                                        251 <= s && s <= 254 && ((h = 256 * -(s - 251) - l - 108), (c = 2)),
                                                        255 == s && ((h = o.readInt(t, n + 1) / 65535), (c = 5)),
                                                            a.push(null != h ? h : "o" + u),
                                                            (n += c);
                                                    }
                                                    return a;
                                                }),
                                                (e.CFF.readDict = function (t, n, r) {
                                                    for (var i = e._bin, o = {}, a = []; n < r; ) {
                                                        var s = t[n],
                                                            l = t[n + 1];
                                                        t[n + 2], t[n + 3], t[n + 4];
                                                        var c = 1,
                                                            u = null,
                                                            h = null;
                                                        if (
                                                            (28 == s && ((h = i.readShort(t, n + 1)), (c = 3)),
                                                            29 == s && ((h = i.readInt(t, n + 1)), (c = 5)),
                                                            32 <= s && s <= 246 && ((h = s - 139), (c = 1)),
                                                            247 <= s && s <= 250 && ((h = 256 * (s - 247) + l + 108), (c = 2)),
                                                            251 <= s && s <= 254 && ((h = 256 * -(s - 251) - l - 108), (c = 2)),
                                                            255 == s)
                                                        )
                                                            throw ((h = i.readInt(t, n + 1) / 65535), (c = 5), "unknown number");
                                                        if (30 == s) {
                                                            var d = [];
                                                            for (c = 1; ; ) {
                                                                var f = t[n + c];
                                                                c++;
                                                                var p = f >> 4,
                                                                    m = 15 & f;
                                                                if ((15 != p && d.push(p), 15 != m && d.push(m), 15 == m)) break;
                                                            }
                                                            for (var g = "", v = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ".", "e", "e-", "reserved", "-", "endOfNumber"], y = 0; y < d.length; y++) g += v[d[y]];
                                                            h = parseFloat(g);
                                                        }
                                                        s <= 21 &&
                                                        ((u = [
                                                            "version",
                                                            "Notice",
                                                            "FullName",
                                                            "FamilyName",
                                                            "Weight",
                                                            "FontBBox",
                                                            "BlueValues",
                                                            "OtherBlues",
                                                            "FamilyBlues",
                                                            "FamilyOtherBlues",
                                                            "StdHW",
                                                            "StdVW",
                                                            "escape",
                                                            "UniqueID",
                                                            "XUID",
                                                            "charset",
                                                            "Encoding",
                                                            "CharStrings",
                                                            "Private",
                                                            "Subrs",
                                                            "defaultWidthX",
                                                            "nominalWidthX",
                                                        ][s]),
                                                            (c = 1),
                                                        12 == s &&
                                                        ((u = [
                                                            "Copyright",
                                                            "isFixedPitch",
                                                            "ItalicAngle",
                                                            "UnderlinePosition",
                                                            "UnderlineThickness",
                                                            "PaintType",
                                                            "CharstringType",
                                                            "FontMatrix",
                                                            "StrokeWidth",
                                                            "BlueScale",
                                                            "BlueShift",
                                                            "BlueFuzz",
                                                            "StemSnapH",
                                                            "StemSnapV",
                                                            "ForceBold",
                                                            0,
                                                            0,
                                                            "LanguageGroup",
                                                            "ExpansionFactor",
                                                            "initialRandomSeed",
                                                            "SyntheticBase",
                                                            "PostScript",
                                                            "BaseFontName",
                                                            "BaseFontBlend",
                                                            0,
                                                            0,
                                                            0,
                                                            0,
                                                            0,
                                                            0,
                                                            "ROS",
                                                            "CIDFontVersion",
                                                            "CIDFontRevision",
                                                            "CIDFontType",
                                                            "CIDCount",
                                                            "UIDBase",
                                                            "FDArray",
                                                            "FDSelect",
                                                            "FontName",
                                                        ][l]),
                                                            (c = 2))),
                                                            null != u ? ((o[u] = 1 == a.length ? a[0] : a), (a = [])) : a.push(h),
                                                            (n += c);
                                                    }
                                                    return o;
                                                }),
                                                (e.cmap = {}),
                                                (e.cmap.parse = function (t, n, r) {
                                                    (t = new Uint8Array(t.buffer, n, r)), (n = 0);
                                                    var i = e._bin,
                                                        o = {};
                                                    i.readUshort(t, n), (n += 2);
                                                    var a = i.readUshort(t, n);
                                                    n += 2;
                                                    var s = [];
                                                    o.tables = [];
                                                    for (var l = 0; l < a; l++) {
                                                        var c = i.readUshort(t, n);
                                                        n += 2;
                                                        var u = i.readUshort(t, n);
                                                        n += 2;
                                                        var h = i.readUint(t, n);
                                                        n += 4;
                                                        var d = "p" + c + "e" + u,
                                                            f = s.indexOf(h);
                                                        if (-1 == f) {
                                                            var p;
                                                            (f = o.tables.length), s.push(h);
                                                            var m = i.readUshort(t, h);
                                                            0 == m
                                                                ? (p = e.cmap.parse0(t, h))
                                                                : 4 == m
                                                                    ? (p = e.cmap.parse4(t, h))
                                                                    : 6 == m
                                                                        ? (p = e.cmap.parse6(t, h))
                                                                        : 12 == m
                                                                            ? (p = e.cmap.parse12(t, h))
                                                                            : console.debug("unknown format: " + m, c, u, h),
                                                                o.tables.push(p);
                                                        }
                                                        if (null != o[d]) throw "multiple tables for one platform+encoding";
                                                        o[d] = f;
                                                    }
                                                    return o;
                                                }),
                                                (e.cmap.parse0 = function (t, n) {
                                                    var r = e._bin,
                                                        i = {};
                                                    (i.format = r.readUshort(t, n)), (n += 2);
                                                    var o = r.readUshort(t, n);
                                                    (n += 2), r.readUshort(t, n), (n += 2), (i.map = []);
                                                    for (var a = 0; a < o - 6; a++) i.map.push(t[n + a]);
                                                    return i;
                                                }),
                                                (e.cmap.parse4 = function (t, n) {
                                                    var r = e._bin,
                                                        i = n,
                                                        o = {};
                                                    (o.format = r.readUshort(t, n)), (n += 2);
                                                    var a = r.readUshort(t, n);
                                                    (n += 2), r.readUshort(t, n), (n += 2);
                                                    var s = r.readUshort(t, n);
                                                    n += 2;
                                                    var l = s / 2;
                                                    (o.searchRange = r.readUshort(t, n)),
                                                        (n += 2),
                                                        (o.entrySelector = r.readUshort(t, n)),
                                                        (n += 2),
                                                        (o.rangeShift = r.readUshort(t, n)),
                                                        (n += 2),
                                                        (o.endCount = r.readUshorts(t, n, l)),
                                                        (n += 2 * l),
                                                        (n += 2),
                                                        (o.startCount = r.readUshorts(t, n, l)),
                                                        (n += 2 * l),
                                                        (o.idDelta = []);
                                                    for (var c = 0; c < l; c++) o.idDelta.push(r.readShort(t, n)), (n += 2);
                                                    for (o.idRangeOffset = r.readUshorts(t, n, l), n += 2 * l, o.glyphIdArray = []; n < i + a; ) o.glyphIdArray.push(r.readUshort(t, n)), (n += 2);
                                                    return o;
                                                }),
                                                (e.cmap.parse6 = function (t, n) {
                                                    var r = e._bin,
                                                        i = {};
                                                    (i.format = r.readUshort(t, n)), (n += 2), r.readUshort(t, n), (n += 2), r.readUshort(t, n), (n += 2), (i.firstCode = r.readUshort(t, n)), (n += 2);
                                                    var o = r.readUshort(t, n);
                                                    (n += 2), (i.glyphIdArray = []);
                                                    for (var a = 0; a < o; a++) i.glyphIdArray.push(r.readUshort(t, n)), (n += 2);
                                                    return i;
                                                }),
                                                (e.cmap.parse12 = function (t, n) {
                                                    var r = e._bin,
                                                        i = {};
                                                    (i.format = r.readUshort(t, n)), (n += 2), (n += 2), r.readUint(t, n), (n += 4), r.readUint(t, n), (n += 4);
                                                    var o = r.readUint(t, n);
                                                    (n += 4), (i.groups = []);
                                                    for (var a = 0; a < o; a++) {
                                                        var s = n + 12 * a,
                                                            l = r.readUint(t, s + 0),
                                                            c = r.readUint(t, s + 4),
                                                            u = r.readUint(t, s + 8);
                                                        i.groups.push([l, c, u]);
                                                    }
                                                    return i;
                                                }),
                                                (e.glyf = {}),
                                                (e.glyf.parse = function (t, e, n, r) {
                                                    for (var i = [], o = 0; o < r.maxp.numGlyphs; o++) i.push(null);
                                                    return i;
                                                }),
                                                (e.glyf._parseGlyf = function (t, n) {
                                                    var r = e._bin,
                                                        i = t._data,
                                                        o = e._tabOffset(i, "glyf", t._offset) + t.loca[n];
                                                    if (t.loca[n] == t.loca[n + 1]) return null;
                                                    var a = {};
                                                    if (
                                                        ((a.noc = r.readShort(i, o)),
                                                            (o += 2),
                                                            (a.xMin = r.readShort(i, o)),
                                                            (o += 2),
                                                            (a.yMin = r.readShort(i, o)),
                                                            (o += 2),
                                                            (a.xMax = r.readShort(i, o)),
                                                            (o += 2),
                                                            (a.yMax = r.readShort(i, o)),
                                                            (o += 2),
                                                        a.xMin >= a.xMax || a.yMin >= a.yMax)
                                                    )
                                                        return null;
                                                    if (a.noc > 0) {
                                                        a.endPts = [];
                                                        for (var s = 0; s < a.noc; s++) a.endPts.push(r.readUshort(i, o)), (o += 2);
                                                        var l = r.readUshort(i, o);
                                                        if (((o += 2), i.length - o < l)) return null;
                                                        (a.instructions = r.readBytes(i, o, l)), (o += l);
                                                        var c = a.endPts[a.noc - 1] + 1;
                                                        for (a.flags = [], s = 0; s < c; s++) {
                                                            var u = i[o];
                                                            if ((o++, a.flags.push(u), 0 != (8 & u))) {
                                                                var h = i[o];
                                                                o++;
                                                                for (var d = 0; d < h; d++) a.flags.push(u), s++;
                                                            }
                                                        }
                                                        for (a.xs = [], s = 0; s < c; s++) {
                                                            var f = 0 != (2 & a.flags[s]),
                                                                p = 0 != (16 & a.flags[s]);
                                                            f ? (a.xs.push(p ? i[o] : -i[o]), o++) : p ? a.xs.push(0) : (a.xs.push(r.readShort(i, o)), (o += 2));
                                                        }
                                                        for (a.ys = [], s = 0; s < c; s++)
                                                            (f = 0 != (4 & a.flags[s])), (p = 0 != (32 & a.flags[s])), f ? (a.ys.push(p ? i[o] : -i[o]), o++) : p ? a.ys.push(0) : (a.ys.push(r.readShort(i, o)), (o += 2));
                                                        var m = 0,
                                                            g = 0;
                                                        for (s = 0; s < c; s++) (m += a.xs[s]), (g += a.ys[s]), (a.xs[s] = m), (a.ys[s] = g);
                                                    } else {
                                                        var v;
                                                        a.parts = [];
                                                        do {
                                                            (v = r.readUshort(i, o)), (o += 2);
                                                            var y = { m: { a: 1, b: 0, c: 0, d: 1, tx: 0, ty: 0 }, p1: -1, p2: -1 };
                                                            if ((a.parts.push(y), (y.glyphIndex = r.readUshort(i, o)), (o += 2), 1 & v)) {
                                                                var x = r.readShort(i, o);
                                                                o += 2;
                                                                var _ = r.readShort(i, o);
                                                                o += 2;
                                                            } else (x = r.readInt8(i, o)), o++, (_ = r.readInt8(i, o)), o++;
                                                            2 & v ? ((y.m.tx = x), (y.m.ty = _)) : ((y.p1 = x), (y.p2 = _)),
                                                                8 & v
                                                                    ? ((y.m.a = y.m.d = r.readF2dot14(i, o)), (o += 2))
                                                                    : 64 & v
                                                                        ? ((y.m.a = r.readF2dot14(i, o)), (o += 2), (y.m.d = r.readF2dot14(i, o)), (o += 2))
                                                                        : 128 & v &&
                                                                        ((y.m.a = r.readF2dot14(i, o)), (o += 2), (y.m.b = r.readF2dot14(i, o)), (o += 2), (y.m.c = r.readF2dot14(i, o)), (o += 2), (y.m.d = r.readF2dot14(i, o)), (o += 2));
                                                        } while (32 & v);
                                                        if (256 & v) {
                                                            var b = r.readUshort(i, o);
                                                            for (o += 2, a.instr = [], s = 0; s < b; s++) a.instr.push(i[o]), o++;
                                                        }
                                                    }
                                                    return a;
                                                }),
                                                (e.GPOS = {}),
                                                (e.GPOS.parse = function (t, n, r, i) {
                                                    return e._lctf.parse(t, n, r, i, e.GPOS.subt);
                                                }),
                                                (e.GPOS.subt = function (t, n, r, i) {
                                                    var o = e._bin,
                                                        a = r,
                                                        s = {};
                                                    if (((s.fmt = o.readUshort(t, r)), (r += 2), 1 == n || 2 == n || 3 == n || 7 == n || (8 == n && s.fmt <= 2))) {
                                                        var l = o.readUshort(t, r);
                                                        (r += 2), (s.coverage = e._lctf.readCoverage(t, l + a));
                                                    }
                                                    if (1 == n && 1 == s.fmt) {
                                                        var c = o.readUshort(t, r);
                                                        r += 2;
                                                        var u = e._lctf.numOfOnes(c);
                                                        0 != c && (s.pos = e.GPOS.readValueRecord(t, r, c));
                                                    } else if (2 == n && s.fmt >= 1 && s.fmt <= 2) {
                                                        (c = o.readUshort(t, r)), (r += 2);
                                                        var h = o.readUshort(t, r);
                                                        (r += 2), (u = e._lctf.numOfOnes(c));
                                                        var d = e._lctf.numOfOnes(h);
                                                        if (1 == s.fmt) {
                                                            s.pairsets = [];
                                                            var f = o.readUshort(t, r);
                                                            r += 2;
                                                            for (var p = 0; p < f; p++) {
                                                                var m = a + o.readUshort(t, r);
                                                                r += 2;
                                                                var g = o.readUshort(t, m);
                                                                m += 2;
                                                                for (var v = [], y = 0; y < g; y++) {
                                                                    var x = o.readUshort(t, m);
                                                                    (m += 2),
                                                                    0 != c && ((T = e.GPOS.readValueRecord(t, m, c)), (m += 2 * u)),
                                                                    0 != h && ((E = e.GPOS.readValueRecord(t, m, h)), (m += 2 * d)),
                                                                        v.push({ gid2: x, val1: T, val2: E });
                                                                }
                                                                s.pairsets.push(v);
                                                            }
                                                        }
                                                        if (2 == s.fmt) {
                                                            var _ = o.readUshort(t, r);
                                                            r += 2;
                                                            var b = o.readUshort(t, r);
                                                            r += 2;
                                                            var w = o.readUshort(t, r);
                                                            r += 2;
                                                            var S = o.readUshort(t, r);
                                                            for (r += 2, s.classDef1 = e._lctf.readClassDef(t, a + _), s.classDef2 = e._lctf.readClassDef(t, a + b), s.matrix = [], p = 0; p < w; p++) {
                                                                var M = [];
                                                                for (y = 0; y < S; y++) {
                                                                    var T = null,
                                                                        E = null;
                                                                    0 != c && ((T = e.GPOS.readValueRecord(t, r, c)), (r += 2 * u)), 0 != h && ((E = e.GPOS.readValueRecord(t, r, h)), (r += 2 * d)), M.push({ val1: T, val2: E });
                                                                }
                                                                s.matrix.push(M);
                                                            }
                                                        }
                                                    } else {
                                                        if (9 == n && 1 == s.fmt) {
                                                            var A = o.readUshort(t, r);
                                                            r += 2;
                                                            var L = o.readUint(t, r);
                                                            if (((r += 4), 9 == i.ltype)) i.ltype = A;
                                                            else if (i.ltype != A) throw "invalid extension substitution";
                                                            return e.GPOS.subt(t, i.ltype, a + L);
                                                        }
                                                        console.debug("unsupported GPOS table LookupType", n, "format", s.fmt);
                                                    }
                                                    return s;
                                                }),
                                                (e.GPOS.readValueRecord = function (t, n, r) {
                                                    var i = e._bin,
                                                        o = [];
                                                    return (
                                                        o.push(1 & r ? i.readShort(t, n) : 0),
                                                            (n += 1 & r ? 2 : 0),
                                                            o.push(2 & r ? i.readShort(t, n) : 0),
                                                            (n += 2 & r ? 2 : 0),
                                                            o.push(4 & r ? i.readShort(t, n) : 0),
                                                            (n += 4 & r ? 2 : 0),
                                                            o.push(8 & r ? i.readShort(t, n) : 0),
                                                            (n += 8 & r ? 2 : 0),
                                                            o
                                                    );
                                                }),
                                                (e.GSUB = {}),
                                                (e.GSUB.parse = function (t, n, r, i) {
                                                    return e._lctf.parse(t, n, r, i, e.GSUB.subt);
                                                }),
                                                (e.GSUB.subt = function (t, n, r, i) {
                                                    var o = e._bin,
                                                        a = r,
                                                        s = {};
                                                    if (((s.fmt = o.readUshort(t, r)), (r += 2), 1 != n && 4 != n && 5 != n && 6 != n)) return null;
                                                    if (1 == n || 4 == n || (5 == n && s.fmt <= 2) || (6 == n && s.fmt <= 2)) {
                                                        var l = o.readUshort(t, r);
                                                        (r += 2), (s.coverage = e._lctf.readCoverage(t, a + l));
                                                    }
                                                    if (1 == n && s.fmt >= 1 && s.fmt <= 2) {
                                                        if (1 == s.fmt) (s.delta = o.readShort(t, r)), (r += 2);
                                                        else if (2 == s.fmt) {
                                                            var c = o.readUshort(t, r);
                                                            (r += 2), (s.newg = o.readUshorts(t, r, c)), (r += 2 * s.newg.length);
                                                        }
                                                    } else if (4 == n) {
                                                        (s.vals = []), (c = o.readUshort(t, r)), (r += 2);
                                                        for (var u = 0; u < c; u++) {
                                                            var h = o.readUshort(t, r);
                                                            (r += 2), s.vals.push(e.GSUB.readLigatureSet(t, a + h));
                                                        }
                                                    } else if (5 == n && 2 == s.fmt) {
                                                        if (2 == s.fmt) {
                                                            var d = o.readUshort(t, r);
                                                            (r += 2), (s.cDef = e._lctf.readClassDef(t, a + d)), (s.scset = []);
                                                            var f = o.readUshort(t, r);
                                                            for (r += 2, u = 0; u < f; u++) {
                                                                var p = o.readUshort(t, r);
                                                                (r += 2), s.scset.push(0 == p ? null : e.GSUB.readSubClassSet(t, a + p));
                                                            }
                                                        }
                                                    } else if (6 == n && 3 == s.fmt) {
                                                        if (3 == s.fmt) {
                                                            for (u = 0; u < 3; u++) {
                                                                (c = o.readUshort(t, r)), (r += 2);
                                                                for (var m = [], g = 0; g < c; g++) m.push(e._lctf.readCoverage(t, a + o.readUshort(t, r + 2 * g)));
                                                                (r += 2 * c), 0 == u && (s.backCvg = m), 1 == u && (s.inptCvg = m), 2 == u && (s.ahedCvg = m);
                                                            }
                                                            (c = o.readUshort(t, r)), (r += 2), (s.lookupRec = e.GSUB.readSubstLookupRecords(t, r, c));
                                                        }
                                                    } else {
                                                        if (7 == n && 1 == s.fmt) {
                                                            var v = o.readUshort(t, r);
                                                            r += 2;
                                                            var y = o.readUint(t, r);
                                                            if (((r += 4), 9 == i.ltype)) i.ltype = v;
                                                            else if (i.ltype != v) throw "invalid extension substitution";
                                                            return e.GSUB.subt(t, i.ltype, a + y);
                                                        }
                                                        console.debug("unsupported GSUB table LookupType", n, "format", s.fmt);
                                                    }
                                                    return s;
                                                }),
                                                (e.GSUB.readSubClassSet = function (t, n) {
                                                    var r = e._bin.readUshort,
                                                        i = n,
                                                        o = [],
                                                        a = r(t, n);
                                                    n += 2;
                                                    for (var s = 0; s < a; s++) {
                                                        var l = r(t, n);
                                                        (n += 2), o.push(e.GSUB.readSubClassRule(t, i + l));
                                                    }
                                                    return o;
                                                }),
                                                (e.GSUB.readSubClassRule = function (t, n) {
                                                    var r = e._bin.readUshort,
                                                        i = {},
                                                        o = r(t, n),
                                                        a = r(t, (n += 2));
                                                    (n += 2), (i.input = []);
                                                    for (var s = 0; s < o - 1; s++) i.input.push(r(t, n)), (n += 2);
                                                    return (i.substLookupRecords = e.GSUB.readSubstLookupRecords(t, n, a)), i;
                                                }),
                                                (e.GSUB.readSubstLookupRecords = function (t, n, r) {
                                                    for (var i = e._bin.readUshort, o = [], a = 0; a < r; a++) o.push(i(t, n), i(t, n + 2)), (n += 4);
                                                    return o;
                                                }),
                                                (e.GSUB.readChainSubClassSet = function (t, n) {
                                                    var r = e._bin,
                                                        i = n,
                                                        o = [],
                                                        a = r.readUshort(t, n);
                                                    n += 2;
                                                    for (var s = 0; s < a; s++) {
                                                        var l = r.readUshort(t, n);
                                                        (n += 2), o.push(e.GSUB.readChainSubClassRule(t, i + l));
                                                    }
                                                    return o;
                                                }),
                                                (e.GSUB.readChainSubClassRule = function (t, n) {
                                                    for (var r = e._bin, i = {}, o = ["backtrack", "input", "lookahead"], a = 0; a < o.length; a++) {
                                                        var s = r.readUshort(t, n);
                                                        (n += 2), 1 == a && s--, (i[o[a]] = r.readUshorts(t, n, s)), (n += 2 * i[o[a]].length);
                                                    }
                                                    return (s = r.readUshort(t, n)), (n += 2), (i.subst = r.readUshorts(t, n, 2 * s)), (n += 2 * i.subst.length), i;
                                                }),
                                                (e.GSUB.readLigatureSet = function (t, n) {
                                                    var r = e._bin,
                                                        i = n,
                                                        o = [],
                                                        a = r.readUshort(t, n);
                                                    n += 2;
                                                    for (var s = 0; s < a; s++) {
                                                        var l = r.readUshort(t, n);
                                                        (n += 2), o.push(e.GSUB.readLigature(t, i + l));
                                                    }
                                                    return o;
                                                }),
                                                (e.GSUB.readLigature = function (t, n) {
                                                    var r = e._bin,
                                                        i = { chain: [] };
                                                    (i.nglyph = r.readUshort(t, n)), (n += 2);
                                                    var o = r.readUshort(t, n);
                                                    n += 2;
                                                    for (var a = 0; a < o - 1; a++) i.chain.push(r.readUshort(t, n)), (n += 2);
                                                    return i;
                                                }),
                                                (e.head = {}),
                                                (e.head.parse = function (t, n, r) {
                                                    var i = e._bin,
                                                        o = {};
                                                    return (
                                                        i.readFixed(t, n),
                                                            (n += 4),
                                                            (o.fontRevision = i.readFixed(t, n)),
                                                            (n += 4),
                                                            i.readUint(t, n),
                                                            (n += 4),
                                                            i.readUint(t, n),
                                                            (n += 4),
                                                            (o.flags = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.unitsPerEm = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.created = i.readUint64(t, n)),
                                                            (n += 8),
                                                            (o.modified = i.readUint64(t, n)),
                                                            (n += 8),
                                                            (o.xMin = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.yMin = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.xMax = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.yMax = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.macStyle = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.lowestRecPPEM = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.fontDirectionHint = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.indexToLocFormat = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.glyphDataFormat = i.readShort(t, n)),
                                                            (n += 2),
                                                            o
                                                    );
                                                }),
                                                (e.hhea = {}),
                                                (e.hhea.parse = function (t, n, r) {
                                                    var i = e._bin,
                                                        o = {};
                                                    return (
                                                        i.readFixed(t, n),
                                                            (n += 4),
                                                            (o.ascender = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.descender = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.lineGap = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.advanceWidthMax = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.minLeftSideBearing = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.minRightSideBearing = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.xMaxExtent = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.caretSlopeRise = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.caretSlopeRun = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.caretOffset = i.readShort(t, n)),
                                                            (n += 2),
                                                            (n += 8),
                                                            (o.metricDataFormat = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.numberOfHMetrics = i.readUshort(t, n)),
                                                            (n += 2),
                                                            o
                                                    );
                                                }),
                                                (e.hmtx = {}),
                                                (e.hmtx.parse = function (t, n, r, i) {
                                                    for (var o = e._bin, a = { aWidth: [], lsBearing: [] }, s = 0, l = 0, c = 0; c < i.maxp.numGlyphs; c++)
                                                        c < i.hhea.numberOfHMetrics && ((s = o.readUshort(t, n)), (n += 2), (l = o.readShort(t, n)), (n += 2)), a.aWidth.push(s), a.lsBearing.push(l);
                                                    return a;
                                                }),
                                                (e.kern = {}),
                                                (e.kern.parse = function (t, n, r, i) {
                                                    var o = e._bin,
                                                        a = o.readUshort(t, n);
                                                    if (((n += 2), 1 == a)) return e.kern.parseV1(t, n - 2, r, i);
                                                    var s = o.readUshort(t, n);
                                                    n += 2;
                                                    for (var l = { glyph1: [], rval: [] }, c = 0; c < s; c++) {
                                                        (n += 2), (r = o.readUshort(t, n)), (n += 2);
                                                        var u = o.readUshort(t, n);
                                                        n += 2;
                                                        var h = u >>> 8;
                                                        if (0 != (h &= 15)) throw "unknown kern table format: " + h;
                                                        n = e.kern.readFormat0(t, n, l);
                                                    }
                                                    return l;
                                                }),
                                                (e.kern.parseV1 = function (t, n, r, i) {
                                                    var o = e._bin;
                                                    o.readFixed(t, n), (n += 4);
                                                    var a = o.readUint(t, n);
                                                    n += 4;
                                                    for (var s = { glyph1: [], rval: [] }, l = 0; l < a; l++) {
                                                        o.readUint(t, n), (n += 4);
                                                        var c = o.readUshort(t, n);
                                                        (n += 2), o.readUshort(t, n), (n += 2);
                                                        var u = c >>> 8;
                                                        if (0 != (u &= 15)) throw "unknown kern table format: " + u;
                                                        n = e.kern.readFormat0(t, n, s);
                                                    }
                                                    return s;
                                                }),
                                                (e.kern.readFormat0 = function (t, n, r) {
                                                    var i = e._bin,
                                                        o = -1,
                                                        a = i.readUshort(t, n);
                                                    (n += 2), i.readUshort(t, n), (n += 2), i.readUshort(t, n), (n += 2), i.readUshort(t, n), (n += 2);
                                                    for (var s = 0; s < a; s++) {
                                                        var l = i.readUshort(t, n);
                                                        n += 2;
                                                        var c = i.readUshort(t, n);
                                                        n += 2;
                                                        var u = i.readShort(t, n);
                                                        (n += 2), l != o && (r.glyph1.push(l), r.rval.push({ glyph2: [], vals: [] }));
                                                        var h = r.rval[r.rval.length - 1];
                                                        h.glyph2.push(c), h.vals.push(u), (o = l);
                                                    }
                                                    return n;
                                                }),
                                                (e.loca = {}),
                                                (e.loca.parse = function (t, n, r, i) {
                                                    var o = e._bin,
                                                        a = [],
                                                        s = i.head.indexToLocFormat,
                                                        l = i.maxp.numGlyphs + 1;
                                                    if (0 == s) for (var c = 0; c < l; c++) a.push(o.readUshort(t, n + (c << 1)) << 1);
                                                    if (1 == s) for (c = 0; c < l; c++) a.push(o.readUint(t, n + (c << 2)));
                                                    return a;
                                                }),
                                                (e.maxp = {}),
                                                (e.maxp.parse = function (t, n, r) {
                                                    var i = e._bin,
                                                        o = {},
                                                        a = i.readUint(t, n);
                                                    return (
                                                        (n += 4),
                                                            (o.numGlyphs = i.readUshort(t, n)),
                                                            (n += 2),
                                                        65536 == a &&
                                                        ((o.maxPoints = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.maxContours = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.maxCompositePoints = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.maxCompositeContours = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.maxZones = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.maxTwilightPoints = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.maxStorage = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.maxFunctionDefs = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.maxInstructionDefs = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.maxStackElements = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.maxSizeOfInstructions = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.maxComponentElements = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (o.maxComponentDepth = i.readUshort(t, n)),
                                                            (n += 2)),
                                                            o
                                                    );
                                                }),
                                                (e.name = {}),
                                                (e.name.parse = function (t, n, r) {
                                                    var i = e._bin,
                                                        o = {};
                                                    i.readUshort(t, n), (n += 2);
                                                    var a = i.readUshort(t, n);
                                                    (n += 2), i.readUshort(t, n);
                                                    for (
                                                        var s,
                                                            l = [
                                                                "copyright",
                                                                "fontFamily",
                                                                "fontSubfamily",
                                                                "ID",
                                                                "fullName",
                                                                "version",
                                                                "postScriptName",
                                                                "trademark",
                                                                "manufacturer",
                                                                "designer",
                                                                "description",
                                                                "urlVendor",
                                                                "urlDesigner",
                                                                "licence",
                                                                "licenceURL",
                                                                "---",
                                                                "typoFamilyName",
                                                                "typoSubfamilyName",
                                                                "compatibleFull",
                                                                "sampleText",
                                                                "postScriptCID",
                                                                "wwsFamilyName",
                                                                "wwsSubfamilyName",
                                                                "lightPalette",
                                                                "darkPalette",
                                                            ],
                                                            c = (n += 2),
                                                            u = 0;
                                                        u < a;
                                                        u++
                                                    ) {
                                                        var h = i.readUshort(t, n);
                                                        n += 2;
                                                        var d = i.readUshort(t, n);
                                                        n += 2;
                                                        var f = i.readUshort(t, n);
                                                        n += 2;
                                                        var p = i.readUshort(t, n);
                                                        n += 2;
                                                        var m = i.readUshort(t, n);
                                                        n += 2;
                                                        var g = i.readUshort(t, n);
                                                        n += 2;
                                                        var v,
                                                            y = l[p],
                                                            x = c + 12 * a + g;
                                                        if (0 == h) v = i.readUnicode(t, x, m / 2);
                                                        else if (3 == h && 0 == d) v = i.readUnicode(t, x, m / 2);
                                                        else if (0 == d) v = i.readASCII(t, x, m);
                                                        else if (1 == d) v = i.readUnicode(t, x, m / 2);
                                                        else if (3 == d) v = i.readUnicode(t, x, m / 2);
                                                        else {
                                                            if (1 != h) throw "unknown encoding " + d + ", platformID: " + h;
                                                            (v = i.readASCII(t, x, m)), console.debug("reading unknown MAC encoding " + d + " as ASCII");
                                                        }
                                                        var _ = "p" + h + "," + f.toString(16);
                                                        null == o[_] && (o[_] = {}), (o[_][void 0 !== y ? y : p] = v), (o[_]._lang = f);
                                                    }
                                                    for (var b in o) if (null != o[b].postScriptName && 1033 == o[b]._lang) return o[b];
                                                    for (var b in o) if (null != o[b].postScriptName && 0 == o[b]._lang) return o[b];
                                                    for (var b in o) if (null != o[b].postScriptName && 3084 == o[b]._lang) return o[b];
                                                    for (var b in o) if (null != o[b].postScriptName) return o[b];
                                                    for (var b in o) {
                                                        s = b;
                                                        break;
                                                    }
                                                    return console.debug("returning name table with languageID " + o[s]._lang), o[s];
                                                }),
                                                (e["OS/2"] = {}),
                                                (e["OS/2"].parse = function (t, n, r) {
                                                    var i = e._bin.readUshort(t, n);
                                                    n += 2;
                                                    var o = {};
                                                    if (0 == i) e["OS/2"].version0(t, n, o);
                                                    else if (1 == i) e["OS/2"].version1(t, n, o);
                                                    else if (2 == i || 3 == i || 4 == i) e["OS/2"].version2(t, n, o);
                                                    else {
                                                        if (5 != i) throw "unknown OS/2 table version: " + i;
                                                        e["OS/2"].version5(t, n, o);
                                                    }
                                                    return o;
                                                }),
                                                (e["OS/2"].version0 = function (t, n, r) {
                                                    var i = e._bin;
                                                    return (
                                                        (r.xAvgCharWidth = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.usWeightClass = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (r.usWidthClass = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (r.fsType = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (r.ySubscriptXSize = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.ySubscriptYSize = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.ySubscriptXOffset = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.ySubscriptYOffset = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.ySuperscriptXSize = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.ySuperscriptYSize = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.ySuperscriptXOffset = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.ySuperscriptYOffset = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.yStrikeoutSize = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.yStrikeoutPosition = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.sFamilyClass = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.panose = i.readBytes(t, n, 10)),
                                                            (n += 10),
                                                            (r.ulUnicodeRange1 = i.readUint(t, n)),
                                                            (n += 4),
                                                            (r.ulUnicodeRange2 = i.readUint(t, n)),
                                                            (n += 4),
                                                            (r.ulUnicodeRange3 = i.readUint(t, n)),
                                                            (n += 4),
                                                            (r.ulUnicodeRange4 = i.readUint(t, n)),
                                                            (n += 4),
                                                            (r.achVendID = [i.readInt8(t, n), i.readInt8(t, n + 1), i.readInt8(t, n + 2), i.readInt8(t, n + 3)]),
                                                            (n += 4),
                                                            (r.fsSelection = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (r.usFirstCharIndex = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (r.usLastCharIndex = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (r.sTypoAscender = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.sTypoDescender = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.sTypoLineGap = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.usWinAscent = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (r.usWinDescent = i.readUshort(t, n)),
                                                        n + 2
                                                    );
                                                }),
                                                (e["OS/2"].version1 = function (t, n, r) {
                                                    var i = e._bin;
                                                    return (n = e["OS/2"].version0(t, n, r)), (r.ulCodePageRange1 = i.readUint(t, n)), (n += 4), (r.ulCodePageRange2 = i.readUint(t, n)), n + 4;
                                                }),
                                                (e["OS/2"].version2 = function (t, n, r) {
                                                    var i = e._bin;
                                                    return (
                                                        (n = e["OS/2"].version1(t, n, r)),
                                                            (r.sxHeight = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.sCapHeight = i.readShort(t, n)),
                                                            (n += 2),
                                                            (r.usDefault = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (r.usBreak = i.readUshort(t, n)),
                                                            (n += 2),
                                                            (r.usMaxContext = i.readUshort(t, n)),
                                                        n + 2
                                                    );
                                                }),
                                                (e["OS/2"].version5 = function (t, n, r) {
                                                    var i = e._bin;
                                                    return (n = e["OS/2"].version2(t, n, r)), (r.usLowerOpticalPointSize = i.readUshort(t, n)), (n += 2), (r.usUpperOpticalPointSize = i.readUshort(t, n)), n + 2;
                                                }),
                                                (e.post = {}),
                                                (e.post.parse = function (t, n, r) {
                                                    var i = e._bin,
                                                        o = {};
                                                    return (
                                                        (o.version = i.readFixed(t, n)),
                                                            (n += 4),
                                                            (o.italicAngle = i.readFixed(t, n)),
                                                            (n += 4),
                                                            (o.underlinePosition = i.readShort(t, n)),
                                                            (n += 2),
                                                            (o.underlineThickness = i.readShort(t, n)),
                                                            (n += 2),
                                                            o
                                                    );
                                                }),
                                            null == e && (e = {}),
                                            null == e.U && (e.U = {}),
                                                (e.U.codeToGlyph = function (t, e) {
                                                    var n = t.cmap,
                                                        r = -1;
                                                    if ((null != n.p0e4 ? (r = n.p0e4) : null != n.p3e1 ? (r = n.p3e1) : null != n.p1e0 ? (r = n.p1e0) : null != n.p0e3 && (r = n.p0e3), -1 == r)) throw "no familiar platform and encoding!";
                                                    var i = n.tables[r];
                                                    if (0 == i.format) return e >= i.map.length ? 0 : i.map[e];
                                                    if (4 == i.format) {
                                                        for (var o = -1, a = 0; a < i.endCount.length; a++)
                                                            if (e <= i.endCount[a]) {
                                                                o = a;
                                                                break;
                                                            }
                                                        return -1 == o || i.startCount[o] > e
                                                            ? 0
                                                            : 65535 & (0 != i.idRangeOffset[o] ? i.glyphIdArray[e - i.startCount[o] + (i.idRangeOffset[o] >> 1) - (i.idRangeOffset.length - o)] : e + i.idDelta[o]);
                                                    }
                                                    if (12 == i.format) {
                                                        if (e > i.groups[i.groups.length - 1][1]) return 0;
                                                        for (a = 0; a < i.groups.length; a++) {
                                                            var s = i.groups[a];
                                                            if (s[0] <= e && e <= s[1]) return s[2] + (e - s[0]);
                                                        }
                                                        return 0;
                                                    }
                                                    throw "unknown cmap table format " + i.format;
                                                }),
                                                (e.U.glyphToPath = function (t, n) {
                                                    var r = { cmds: [], crds: [] };
                                                    if (t.SVG && t.SVG.entries[n]) {
                                                        var i = t.SVG.entries[n];
                                                        return null == i ? r : ("string" == typeof i && ((i = e.SVG.toPath(i)), (t.SVG.entries[n] = i)), i);
                                                    }
                                                    if (t.CFF) {
                                                        var o = { x: 0, y: 0, stack: [], nStems: 0, haveWidth: !1, width: t.CFF.Private ? t.CFF.Private.defaultWidthX : 0, open: !1 },
                                                            a = t.CFF,
                                                            s = t.CFF.Private;
                                                        if (a.ROS) {
                                                            for (var l = 0; a.FDSelect[l + 2] <= n; ) l += 2;
                                                            s = a.FDArray[a.FDSelect[l + 1]].Private;
                                                        }
                                                        e.U._drawCFF(t.CFF.CharStrings[n], o, a, s, r);
                                                    } else t.glyf && e.U._drawGlyf(n, t, r);
                                                    return r;
                                                }),
                                                (e.U._drawGlyf = function (t, n, r) {
                                                    var i = n.glyf[t];
                                                    null == i && (i = n.glyf[t] = e.glyf._parseGlyf(n, t)), null != i && (i.noc > -1 ? e.U._simpleGlyph(i, r) : e.U._compoGlyph(i, n, r));
                                                }),
                                                (e.U._simpleGlyph = function (t, n) {
                                                    for (var r = 0; r < t.noc; r++) {
                                                        for (var i = 0 == r ? 0 : t.endPts[r - 1] + 1, o = t.endPts[r], a = i; a <= o; a++) {
                                                            var s = a == i ? o : a - 1,
                                                                l = a == o ? i : a + 1,
                                                                c = 1 & t.flags[a],
                                                                u = 1 & t.flags[s],
                                                                h = 1 & t.flags[l],
                                                                d = t.xs[a],
                                                                f = t.ys[a];
                                                            if (a == i)
                                                                if (c) {
                                                                    if (!u) {
                                                                        e.U.P.moveTo(n, d, f);
                                                                        continue;
                                                                    }
                                                                    e.U.P.moveTo(n, t.xs[s], t.ys[s]);
                                                                } else u ? e.U.P.moveTo(n, t.xs[s], t.ys[s]) : e.U.P.moveTo(n, (t.xs[s] + d) / 2, (t.ys[s] + f) / 2);
                                                            c ? u && e.U.P.lineTo(n, d, f) : h ? e.U.P.qcurveTo(n, d, f, t.xs[l], t.ys[l]) : e.U.P.qcurveTo(n, d, f, (d + t.xs[l]) / 2, (f + t.ys[l]) / 2);
                                                        }
                                                        e.U.P.closePath(n);
                                                    }
                                                }),
                                                (e.U._compoGlyph = function (t, n, r) {
                                                    for (var i = 0; i < t.parts.length; i++) {
                                                        var o = { cmds: [], crds: [] },
                                                            a = t.parts[i];
                                                        e.U._drawGlyf(a.glyphIndex, n, o);
                                                        for (var s = a.m, l = 0; l < o.crds.length; l += 2) {
                                                            var c = o.crds[l],
                                                                u = o.crds[l + 1];
                                                            r.crds.push(c * s.a + u * s.b + s.tx), r.crds.push(c * s.c + u * s.d + s.ty);
                                                        }
                                                        for (l = 0; l < o.cmds.length; l++) r.cmds.push(o.cmds[l]);
                                                    }
                                                }),
                                                (e.U._getGlyphClass = function (t, n) {
                                                    var r = e._lctf.getInterval(n, t);
                                                    return -1 == r ? 0 : n[r + 2];
                                                }),
                                                (e.U.getPairAdjustment = function (t, n, r) {
                                                    var i = 0;
                                                    if (t.GPOS)
                                                        for (var o = t.GPOS, a = o.lookupList, s = o.featureList, l = [], c = 0; c < s.length; c++) {
                                                            var u = s[c];
                                                            if ("kern" == u.tag)
                                                                for (var h = 0; h < u.tab.length; h++)
                                                                    if (!l[u.tab[h]]) {
                                                                        l[u.tab[h]] = !0;
                                                                        for (var d = a[u.tab[h]], f = 0; f < d.tabs.length; f++)
                                                                            if (null != d.tabs[f]) {
                                                                                var p,
                                                                                    m = d.tabs[f];
                                                                                if (!m.coverage || -1 != (p = e._lctf.coverageIndex(m.coverage, n)))
                                                                                    if (1 == d.ltype);
                                                                                    else if (2 == d.ltype) {
                                                                                        var g;
                                                                                        if (1 == m.fmt) {
                                                                                            var v = m.pairsets[p];
                                                                                            for (c = 0; c < v.length; c++) v[c].gid2 == r && (g = v[c]);
                                                                                        } else if (2 == m.fmt) {
                                                                                            var y = e.U._getGlyphClass(n, m.classDef1),
                                                                                                x = e.U._getGlyphClass(r, m.classDef2);
                                                                                            g = m.matrix[y][x];
                                                                                        }
                                                                                        g && g.val1 && g.val1[2] && (i += g.val1[2]), g && g.val2 && g.val2[0] && (i += g.val2[0]);
                                                                                    }
                                                                            }
                                                                    }
                                                        }
                                                    if (t.kern) {
                                                        var _ = t.kern.glyph1.indexOf(n);
                                                        if (-1 != _) {
                                                            var b = t.kern.rval[_].glyph2.indexOf(r);
                                                            -1 != b && (i += t.kern.rval[_].vals[b]);
                                                        }
                                                    }
                                                    return i;
                                                }),
                                                (e.U._applySubs = function (t, n, r, i) {
                                                    for (var o = t.length - n - 1, a = 0; a < r.tabs.length; a++)
                                                        if (null != r.tabs[a]) {
                                                            var s,
                                                                l = r.tabs[a];
                                                            if (!l.coverage || -1 != (s = e._lctf.coverageIndex(l.coverage, t[n])))
                                                                if (1 == r.ltype) t[n], 1 == l.fmt ? (t[n] = t[n] + l.delta) : (t[n] = l.newg[s]);
                                                                else if (4 == r.ltype)
                                                                    for (var c = l.vals[s], u = 0; u < c.length; u++) {
                                                                        var h = c[u],
                                                                            d = h.chain.length;
                                                                        if (!(d > o)) {
                                                                            for (var f = !0, p = 0, m = 0; m < d; m++) {
                                                                                for (; -1 == t[n + p + (1 + m)]; ) p++;
                                                                                h.chain[m] != t[n + p + (1 + m)] && (f = !1);
                                                                            }
                                                                            if (f) {
                                                                                for (t[n] = h.nglyph, m = 0; m < d + p; m++) t[n + m + 1] = -1;
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                else if (5 == r.ltype && 2 == l.fmt)
                                                                    for (var g = e._lctf.getInterval(l.cDef, t[n]), v = l.cDef[g + 2], y = l.scset[v], x = 0; x < y.length; x++) {
                                                                        var _ = y[x],
                                                                            b = _.input;
                                                                        if (!(b.length > o)) {
                                                                            for (f = !0, m = 0; m < b.length; m++) {
                                                                                var w = e._lctf.getInterval(l.cDef, t[n + 1 + m]);
                                                                                if (-1 == g && l.cDef[w + 2] != b[m]) {
                                                                                    f = !1;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            if (f) {
                                                                                var S = _.substLookupRecords;
                                                                                for (u = 0; u < S.length; u += 2) S[u], S[u + 1];
                                                                            }
                                                                        }
                                                                    }
                                                                else if (6 == r.ltype && 3 == l.fmt) {
                                                                    if (!e.U._glsCovered(t, l.backCvg, n - l.backCvg.length)) continue;
                                                                    if (!e.U._glsCovered(t, l.inptCvg, n)) continue;
                                                                    if (!e.U._glsCovered(t, l.ahedCvg, n + l.inptCvg.length)) continue;
                                                                    var M = l.lookupRec;
                                                                    for (x = 0; x < M.length; x += 2) {
                                                                        g = M[x];
                                                                        var T = i[M[x + 1]];
                                                                        e.U._applySubs(t, n + g, T, i);
                                                                    }
                                                                }
                                                        }
                                                }),
                                                (e.U._glsCovered = function (t, n, r) {
                                                    for (var i = 0; i < n.length; i++) if (-1 == e._lctf.coverageIndex(n[i], t[r + i])) return !1;
                                                    return !0;
                                                }),
                                                (e.U.glyphsToPath = function (t, n, r) {
                                                    for (var i = { cmds: [], crds: [] }, o = 0, a = 0; a < n.length; a++) {
                                                        var s = n[a];
                                                        if (-1 != s) {
                                                            for (var l = a < n.length - 1 && -1 != n[a + 1] ? n[a + 1] : 0, c = e.U.glyphToPath(t, s), u = 0; u < c.crds.length; u += 2) i.crds.push(c.crds[u] + o), i.crds.push(c.crds[u + 1]);
                                                            for (r && i.cmds.push(r), u = 0; u < c.cmds.length; u++) i.cmds.push(c.cmds[u]);
                                                            r && i.cmds.push("X"), (o += t.hmtx.aWidth[s]), a < n.length - 1 && (o += e.U.getPairAdjustment(t, s, l));
                                                        }
                                                    }
                                                    return i;
                                                }),
                                                (e.U.P = {}),
                                                (e.U.P.moveTo = function (t, e, n) {
                                                    t.cmds.push("M"), t.crds.push(e, n);
                                                }),
                                                (e.U.P.lineTo = function (t, e, n) {
                                                    t.cmds.push("L"), t.crds.push(e, n);
                                                }),
                                                (e.U.P.curveTo = function (t, e, n, r, i, o, a) {
                                                    t.cmds.push("C"), t.crds.push(e, n, r, i, o, a);
                                                }),
                                                (e.U.P.qcurveTo = function (t, e, n, r, i) {
                                                    t.cmds.push("Q"), t.crds.push(e, n, r, i);
                                                }),
                                                (e.U.P.closePath = function (t) {
                                                    t.cmds.push("Z");
                                                }),
                                                (e.U._drawCFF = function (t, n, r, i, o) {
                                                    for (
                                                        var a = n.stack,
                                                            s = n.nStems,
                                                            l = n.haveWidth,
                                                            c = n.width,
                                                            u = n.open,
                                                            h = 0,
                                                            d = n.x,
                                                            f = n.y,
                                                            p = 0,
                                                            m = 0,
                                                            g = 0,
                                                            v = 0,
                                                            y = 0,
                                                            x = 0,
                                                            _ = 0,
                                                            b = 0,
                                                            w = 0,
                                                            S = 0,
                                                            M = { val: 0, size: 0 };
                                                        h < t.length;

                                                    ) {
                                                        e.CFF.getCharString(t, h, M);
                                                        var T = M.val;
                                                        if (((h += M.size), "o1" == T || "o18" == T)) a.length % 2 != 0 && !l && (c = a.shift() + i.nominalWidthX), (s += a.length >> 1), (a.length = 0), (l = !0);
                                                        else if ("o3" == T || "o23" == T) a.length % 2 != 0 && !l && (c = a.shift() + i.nominalWidthX), (s += a.length >> 1), (a.length = 0), (l = !0);
                                                        else if ("o4" == T) a.length > 1 && !l && ((c = a.shift() + i.nominalWidthX), (l = !0)), u && e.U.P.closePath(o), (f += a.pop()), e.U.P.moveTo(o, d, f), (u = !0);
                                                        else if ("o5" == T) for (; a.length > 0; ) (d += a.shift()), (f += a.shift()), e.U.P.lineTo(o, d, f);
                                                        else if ("o6" == T || "o7" == T)
                                                            for (var E = a.length, A = "o6" == T, L = 0; L < E; L++) {
                                                                var C = a.shift();
                                                                A ? (d += C) : (f += C), (A = !A), e.U.P.lineTo(o, d, f);
                                                            }
                                                        else if ("o8" == T || "o24" == T) {
                                                            E = a.length;
                                                            for (var R = 0; R + 6 <= E; )
                                                                (p = d + a.shift()), (m = f + a.shift()), (g = p + a.shift()), (v = m + a.shift()), (d = g + a.shift()), (f = v + a.shift()), e.U.P.curveTo(o, p, m, g, v, d, f), (R += 6);
                                                            "o24" == T && ((d += a.shift()), (f += a.shift()), e.U.P.lineTo(o, d, f));
                                                        } else {
                                                            if ("o11" == T) break;
                                                            if ("o1234" == T || "o1235" == T || "o1236" == T || "o1237" == T)
                                                                "o1234" == T &&
                                                                ((m = f),
                                                                    (g = (p = d + a.shift()) + a.shift()),
                                                                    (S = v = m + a.shift()),
                                                                    (x = v),
                                                                    (b = f),
                                                                    (d = (_ = (y = (w = g + a.shift()) + a.shift()) + a.shift()) + a.shift()),
                                                                    e.U.P.curveTo(o, p, m, g, v, w, S),
                                                                    e.U.P.curveTo(o, y, x, _, b, d, f)),
                                                                "o1235" == T &&
                                                                ((p = d + a.shift()),
                                                                    (m = f + a.shift()),
                                                                    (g = p + a.shift()),
                                                                    (v = m + a.shift()),
                                                                    (w = g + a.shift()),
                                                                    (S = v + a.shift()),
                                                                    (y = w + a.shift()),
                                                                    (x = S + a.shift()),
                                                                    (_ = y + a.shift()),
                                                                    (b = x + a.shift()),
                                                                    (d = _ + a.shift()),
                                                                    (f = b + a.shift()),
                                                                    a.shift(),
                                                                    e.U.P.curveTo(o, p, m, g, v, w, S),
                                                                    e.U.P.curveTo(o, y, x, _, b, d, f)),
                                                                "o1236" == T &&
                                                                ((p = d + a.shift()),
                                                                    (m = f + a.shift()),
                                                                    (g = p + a.shift()),
                                                                    (S = v = m + a.shift()),
                                                                    (x = v),
                                                                    (_ = (y = (w = g + a.shift()) + a.shift()) + a.shift()),
                                                                    (b = x + a.shift()),
                                                                    (d = _ + a.shift()),
                                                                    e.U.P.curveTo(o, p, m, g, v, w, S),
                                                                    e.U.P.curveTo(o, y, x, _, b, d, f)),
                                                                "o1237" == T &&
                                                                ((p = d + a.shift()),
                                                                    (m = f + a.shift()),
                                                                    (g = p + a.shift()),
                                                                    (v = m + a.shift()),
                                                                    (w = g + a.shift()),
                                                                    (S = v + a.shift()),
                                                                    (y = w + a.shift()),
                                                                    (x = S + a.shift()),
                                                                    (_ = y + a.shift()),
                                                                    (b = x + a.shift()),
                                                                    Math.abs(_ - d) > Math.abs(b - f) ? (d = _ + a.shift()) : (f = b + a.shift()),
                                                                    e.U.P.curveTo(o, p, m, g, v, w, S),
                                                                    e.U.P.curveTo(o, y, x, _, b, d, f));
                                                            else if ("o14" == T) {
                                                                if ((a.length > 0 && !l && ((c = a.shift() + r.nominalWidthX), (l = !0)), 4 == a.length)) {
                                                                    var P = a.shift(),
                                                                        I = a.shift(),
                                                                        O = a.shift(),
                                                                        D = a.shift(),
                                                                        k = e.CFF.glyphBySE(r, O),
                                                                        U = e.CFF.glyphBySE(r, D);
                                                                    e.U._drawCFF(r.CharStrings[k], n, r, i, o), (n.x = P), (n.y = I), e.U._drawCFF(r.CharStrings[U], n, r, i, o);
                                                                }
                                                                u && (e.U.P.closePath(o), (u = !1));
                                                            } else if ("o19" == T || "o20" == T) a.length % 2 != 0 && !l && (c = a.shift() + i.nominalWidthX), (s += a.length >> 1), (a.length = 0), (l = !0), (h += (s + 7) >> 3);
                                                            else if ("o21" == T) a.length > 2 && !l && ((c = a.shift() + i.nominalWidthX), (l = !0)), (f += a.pop()), (d += a.pop()), u && e.U.P.closePath(o), e.U.P.moveTo(o, d, f), (u = !0);
                                                            else if ("o22" == T) a.length > 1 && !l && ((c = a.shift() + i.nominalWidthX), (l = !0)), (d += a.pop()), u && e.U.P.closePath(o), e.U.P.moveTo(o, d, f), (u = !0);
                                                            else if ("o25" == T) {
                                                                for (; a.length > 6; ) (d += a.shift()), (f += a.shift()), e.U.P.lineTo(o, d, f);
                                                                (p = d + a.shift()), (m = f + a.shift()), (g = p + a.shift()), (v = m + a.shift()), (d = g + a.shift()), (f = v + a.shift()), e.U.P.curveTo(o, p, m, g, v, d, f);
                                                            } else if ("o26" == T)
                                                                for (a.length % 2 && (d += a.shift()); a.length > 0; )
                                                                    (p = d), (m = f + a.shift()), (d = g = p + a.shift()), (f = (v = m + a.shift()) + a.shift()), e.U.P.curveTo(o, p, m, g, v, d, f);
                                                            else if ("o27" == T)
                                                                for (a.length % 2 && (f += a.shift()); a.length > 0; )
                                                                    (m = f), (g = (p = d + a.shift()) + a.shift()), (v = m + a.shift()), (d = g + a.shift()), (f = v), e.U.P.curveTo(o, p, m, g, v, d, f);
                                                            else if ("o10" == T || "o29" == T) {
                                                                var F = "o10" == T ? i : r;
                                                                if (0 == a.length) console.debug("error: empty stack");
                                                                else {
                                                                    var N = a.pop(),
                                                                        z = F.Subrs[N + F.Bias];
                                                                    (n.x = d),
                                                                        (n.y = f),
                                                                        (n.nStems = s),
                                                                        (n.haveWidth = l),
                                                                        (n.width = c),
                                                                        (n.open = u),
                                                                        e.U._drawCFF(z, n, r, i, o),
                                                                        (d = n.x),
                                                                        (f = n.y),
                                                                        (s = n.nStems),
                                                                        (l = n.haveWidth),
                                                                        (c = n.width),
                                                                        (u = n.open);
                                                                }
                                                            } else if ("o30" == T || "o31" == T) {
                                                                var B = a.length,
                                                                    G = ((R = 0), "o31" == T);
                                                                for (R += B - (E = -3 & B); R < E; )
                                                                    G
                                                                        ? ((m = f), (g = (p = d + a.shift()) + a.shift()), (f = (v = m + a.shift()) + a.shift()), E - R == 5 ? ((d = g + a.shift()), R++) : (d = g), (G = !1))
                                                                        : ((p = d), (m = f + a.shift()), (g = p + a.shift()), (v = m + a.shift()), (d = g + a.shift()), E - R == 5 ? ((f = v + a.shift()), R++) : (f = v), (G = !0)),
                                                                        e.U.P.curveTo(o, p, m, g, v, d, f),
                                                                        (R += 4);
                                                            } else {
                                                                if ("o" == (T + "").charAt(0)) throw (console.debug("Unknown operation: " + T, t), T);
                                                                a.push(T);
                                                            }
                                                        }
                                                    }
                                                    (n.x = d), (n.y = f), (n.nStems = s), (n.haveWidth = l), (n.width = c), (n.open = u);
                                                });
                                            var n = e,
                                                r = { Typr: n };
                                            return (t.Typr = n), (t.default = r), Object.defineProperty(t, "__esModule", { value: !0 }), t;
                                        })({}).Typr
                                );
                            },
                            function () {
                                return (function (t) {
                                    var e = Uint8Array,
                                        n = Uint16Array,
                                        r = Uint32Array,
                                        i = new e([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]),
                                        o = new e([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]),
                                        a = new e([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]),
                                        s = function (t, e) {
                                            for (var i = new n(31), o = 0; o < 31; ++o) i[o] = e += 1 << t[o - 1];
                                            var a = new r(i[30]);
                                            for (o = 1; o < 30; ++o) for (var s = i[o]; s < i[o + 1]; ++s) a[s] = ((s - i[o]) << 5) | o;
                                            return [i, a];
                                        },
                                        l = s(i, 2),
                                        c = l[0],
                                        u = l[1];
                                    (c[28] = 258), (u[258] = 28);
                                    for (var h = s(o, 0)[0], d = new n(32768), f = 0; f < 32768; ++f) {
                                        var p = ((43690 & f) >>> 1) | ((21845 & f) << 1);
                                        (p = ((61680 & (p = ((52428 & p) >>> 2) | ((13107 & p) << 2))) >>> 4) | ((3855 & p) << 4)), (d[f] = (((65280 & p) >>> 8) | ((255 & p) << 8)) >>> 1);
                                    }
                                    var m = function (t, e, r) {
                                            for (var i = t.length, o = 0, a = new n(e); o < i; ++o) ++a[t[o] - 1];
                                            var s,
                                                l = new n(e);
                                            for (o = 0; o < e; ++o) l[o] = (l[o - 1] + a[o - 1]) << 1;
                                            if (r) {
                                                s = new n(1 << e);
                                                var c = 15 - e;
                                                for (o = 0; o < i; ++o) if (t[o]) for (var u = (o << 4) | t[o], h = e - t[o], f = l[t[o] - 1]++ << h, p = f | ((1 << h) - 1); f <= p; ++f) s[d[f] >>> c] = u;
                                            } else for (s = new n(i), o = 0; o < i; ++o) s[o] = d[l[t[o] - 1]++] >>> (15 - t[o]);
                                            return s;
                                        },
                                        g = new e(288);
                                    for (f = 0; f < 144; ++f) g[f] = 8;
                                    for (f = 144; f < 256; ++f) g[f] = 9;
                                    for (f = 256; f < 280; ++f) g[f] = 7;
                                    for (f = 280; f < 288; ++f) g[f] = 8;
                                    var v = new e(32);
                                    for (f = 0; f < 32; ++f) v[f] = 5;
                                    var y = m(g, 9, 1),
                                        x = m(v, 5, 1),
                                        _ = function (t) {
                                            for (var e = t[0], n = 1; n < t.length; ++n) t[n] > e && (e = t[n]);
                                            return e;
                                        },
                                        b = function (t, e, n) {
                                            var r = (e / 8) >> 0;
                                            return ((t[r] | (t[r + 1] << 8)) >>> (7 & e)) & n;
                                        },
                                        w = function (t, e) {
                                            var n = (e / 8) >> 0;
                                            return (t[n] | (t[n + 1] << 8) | (t[n + 2] << 16)) >>> (7 & e);
                                        },
                                        S = function (t, s, l) {
                                            var u = t.length,
                                                d = !s || l,
                                                f = !l || l.i;
                                            l || (l = {}), s || (s = new e(3 * u));
                                            var p,
                                                g = function (t) {
                                                    var n = s.length;
                                                    if (t > n) {
                                                        var r = new e(Math.max(2 * n, t));
                                                        r.set(s), (s = r);
                                                    }
                                                },
                                                v = l.f || 0,
                                                S = l.p || 0,
                                                M = l.b || 0,
                                                T = l.l,
                                                E = l.d,
                                                A = l.m,
                                                L = l.n,
                                                C = 8 * u;
                                            do {
                                                if (!T) {
                                                    l.f = v = b(t, S, 1);
                                                    var R = b(t, S + 1, 3);
                                                    if (((S += 3), !R)) {
                                                        var P = t[(H = (((p = S) / 8) >> 0) + (7 & p && 1) + 4) - 4] | (t[H - 3] << 8),
                                                            I = H + P;
                                                        if (I > u) {
                                                            if (f) throw "unexpected EOF";
                                                            break;
                                                        }
                                                        d && g(M + P), s.set(t.subarray(H, I), M), (l.b = M += P), (l.p = S = 8 * I);
                                                        continue;
                                                    }
                                                    if (1 == R) (T = y), (E = x), (A = 9), (L = 5);
                                                    else {
                                                        if (2 != R) throw "invalid block type";
                                                        var O = b(t, S, 31) + 257,
                                                            D = b(t, S + 10, 15) + 4,
                                                            k = O + b(t, S + 5, 31) + 1;
                                                        S += 14;
                                                        for (var U = new e(k), F = new e(19), N = 0; N < D; ++N) F[a[N]] = b(t, S + 3 * N, 7);
                                                        S += 3 * D;
                                                        var z = _(F),
                                                            B = (1 << z) - 1;
                                                        if (!f && S + k * (z + 7) > C) break;
                                                        var G = m(F, z, 1);
                                                        for (N = 0; N < k; ) {
                                                            var H,
                                                                V = G[b(t, S, B)];
                                                            if (((S += 15 & V), (H = V >>> 4) < 16)) U[N++] = H;
                                                            else {
                                                                var W = 0,
                                                                    j = 0;
                                                                for (16 == H ? ((j = 3 + b(t, S, 3)), (S += 2), (W = U[N - 1])) : 17 == H ? ((j = 3 + b(t, S, 7)), (S += 3)) : 18 == H && ((j = 11 + b(t, S, 127)), (S += 7)); j--; )
                                                                    U[N++] = W;
                                                            }
                                                        }
                                                        var q = U.subarray(0, O),
                                                            X = U.subarray(O);
                                                        (A = _(q)), (L = _(X)), (T = m(q, A, 1)), (E = m(X, L, 1));
                                                    }
                                                    if (S > C) throw "unexpected EOF";
                                                }
                                                d && g(M + 131072);
                                                for (var Y = (1 << A) - 1, Z = (1 << L) - 1, J = A + L + 18; f || S + J < C; ) {
                                                    var $ = (W = T[w(t, S) & Y]) >>> 4;
                                                    if ((S += 15 & W) > C) throw "unexpected EOF";
                                                    if (!W) throw "invalid length/literal";
                                                    if ($ < 256) s[M++] = $;
                                                    else {
                                                        if (256 == $) {
                                                            T = null;
                                                            break;
                                                        }
                                                        var Q = $ - 254;
                                                        if ($ > 264) {
                                                            var K = i[(N = $ - 257)];
                                                            (Q = b(t, S, (1 << K) - 1) + c[N]), (S += K);
                                                        }
                                                        var tt = E[w(t, S) & Z],
                                                            et = tt >>> 4;
                                                        if (!tt) throw "invalid distance";
                                                        if (((S += 15 & tt), (X = h[et]), et > 3 && ((K = o[et]), (X += w(t, S) & ((1 << K) - 1)), (S += K)), S > C)) throw "unexpected EOF";
                                                        d && g(M + 131072);
                                                        for (var nt = M + Q; M < nt; M += 4) (s[M] = s[M - X]), (s[M + 1] = s[M + 1 - X]), (s[M + 2] = s[M + 2 - X]), (s[M + 3] = s[M + 3 - X]);
                                                        M = nt;
                                                    }
                                                }
                                                (l.l = T), (l.p = S), (l.b = M), T && ((v = 1), (l.m = A), (l.d = E), (l.n = L));
                                            } while (!v);
                                            return M == s.length
                                                ? s
                                                : (function (t, i, o) {
                                                    (null == i || i < 0) && (i = 0), (null == o || o > t.length) && (o = t.length);
                                                    var a = new (t instanceof n ? n : t instanceof r ? r : e)(o - i);
                                                    return a.set(t.subarray(i, o)), a;
                                                })(s, 0, M);
                                        };
                                    return (
                                        (t.convert_streams = function (t) {
                                            var e = new DataView(t),
                                                n = 0;
                                            function r() {
                                                var t = e.getUint16(n);
                                                return (n += 2), t;
                                            }
                                            function i() {
                                                var t = e.getUint32(n);
                                                return (n += 4), t;
                                            }
                                            function o(t) {
                                                v.setUint16(y, t), (y += 2);
                                            }
                                            function a(t) {
                                                v.setUint32(y, t), (y += 4);
                                            }
                                            for (
                                                var s = {
                                                        signature: i(),
                                                        flavor: i(),
                                                        length: i(),
                                                        numTables: r(),
                                                        reserved: r(),
                                                        totalSfntSize: i(),
                                                        majorVersion: r(),
                                                        minorVersion: r(),
                                                        metaOffset: i(),
                                                        metaLength: i(),
                                                        metaOrigLength: i(),
                                                        privOffset: i(),
                                                        privLength: i(),
                                                    },
                                                    l = 0;
                                                Math.pow(2, l) <= s.numTables;

                                            )
                                                l++;
                                            l--;
                                            for (var c = 16 * Math.pow(2, l), u = 16 * s.numTables - c, h = 12, d = [], f = 0; f < s.numTables; f++)
                                                d.push({ tag: i(), offset: i(), compLength: i(), origLength: i(), origChecksum: i() }), (h += 16);
                                            var p,
                                                m = new Uint8Array(
                                                    12 +
                                                    16 * d.length +
                                                    d.reduce(function (t, e) {
                                                        return t + e.origLength + 4;
                                                    }, 0)
                                                ),
                                                g = m.buffer,
                                                v = new DataView(g),
                                                y = 0;
                                            return (
                                                a(s.flavor),
                                                    o(s.numTables),
                                                    o(c),
                                                    o(l),
                                                    o(u),
                                                    d.forEach(function (t) {
                                                        a(t.tag), a(t.origChecksum), a(h), a(t.origLength), (t.outOffset = h), (h += t.origLength) % 4 != 0 && (h += 4 - (h % 4));
                                                    }),
                                                    d.forEach(function (e) {
                                                        var n,
                                                            r = t.slice(e.offset, e.offset + e.compLength);
                                                        if (e.compLength != e.origLength) {
                                                            var i = new Uint8Array(e.origLength);
                                                            (n = new Uint8Array(r, 2)), S(n, i);
                                                        } else i = new Uint8Array(r);
                                                        m.set(i, e.outOffset);
                                                        var o = 0;
                                                        (h = e.outOffset + e.origLength) % 4 != 0 && (o = 4 - (h % 4)), m.set(new Uint8Array(o).buffer, e.outOffset + e.origLength), (p = h + o);
                                                    }),
                                                    g.slice(0, p)
                                            );
                                        }),
                                            t
                                    );
                                })({}).convert_streams;
                            },
                            function (t, e) {
                                const n = { M: 2, L: 2, Q: 4, C: 6, Z: 0 },
                                    r = {
                                        C: "18g,ca,368,1kz",
                                        D:
                                            "17k,6,2,2+4,5+c,2+6,2+1,10+1,9+f,j+11,2+1,a,2,2+1,15+2,3,j+2,6+3,2+8,2,2,2+1,w+a,4+e,3+3,2,3+2,3+5,23+w,2f+4,3,2+9,2,b,2+3,3,1k+9,6+1,3+1,2+2,2+d,30g,p+y,1,1+1g,f+x,2,sd2+1d,jf3+4,f+3,2+4,2+2,b+3,42,2,4+2,2+1,2,3,t+1,9f+w,2,el+2,2+g,d+2,2l,2+1,5,3+1,2+1,2,3,6,16wm+1v",
                                        R: "17m+3,2,2,6+3,m,15+2,2+2,h+h,13,3+8,2,2,3+1,2,p+1,x,5+4,5,a,2,2,3,u,c+2,g+1,5,2+1,4+1,5j,6+1,2,b,2+2,f,2+1,1s+2,2,3+1,7,1ez0,2,2+1,4+4,b,4,3,b,42,2+2,4,3,2+1,2,o+3,ae,ep,x,2o+2,3+1,3,5+1,6",
                                        L: "x9u,jff,a,fd,jv",
                                        T:
                                            "4t,gj+33,7o+4,1+1,7c+18,2,2+1,2+1,2,21+a,2,1b+k,h,2u+6,3+5,3+1,2+3,y,2,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,3,7,6+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+d,1,1+1,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,ek,3+1,r+4,1e+4,6+5,2p+c,1+3,1,1+2,1+b,2db+2,3y,2p+v,ff+3,30+1,n9x,1+2,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,5s,6y+2,ea,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+9,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2,2b+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,470+8,at4+4,1o+6,t5,1s+3,2a,f5l+1,2+3,43o+2,a+7,1+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,1,gzau,v+2n,3l+6n",
                                    };
                                let i;
                                function o(t) {
                                    if (!i) {
                                        const t = { R: 2, L: 1, D: 4, C: 16, U: 32, T: 8 };
                                        i = new Map();
                                        for (let e in r) {
                                            let n = 0;
                                            r[e].split(",").forEach((r) => {
                                                let [o, a] = r.split("+");
                                                (o = parseInt(o, 36)), (a = a ? parseInt(a, 36) : 0), i.set((n += o), t[e]);
                                                for (let r = a; r--; ) i.set(++n, t[e]);
                                            });
                                        }
                                    }
                                    return i.get(t) || 32;
                                }
                                const a = [null, "isol", "init", "fina", "medi"];
                                function s(t) {
                                    const e = new Uint8Array(t.length);
                                    let n = 32,
                                        r = 1,
                                        i = -1;
                                    for (let a = 0; a < t.length; a++) {
                                        const s = t.codePointAt(a);
                                        let l = 0 | o(s),
                                            c = 1;
                                        8 & l ||
                                        (21 & n ? (22 & l ? ((c = 3), (1 !== r && 3 !== r) || e[i]++) : 33 & l && ((2 !== r && 4 !== r) || e[i]--)) : 34 & n && ((2 !== r && 4 !== r) || e[i]--),
                                            (r = e[a] = c),
                                            (n = l),
                                            (i = a),
                                        s > 65535 && a++);
                                    }
                                    return e;
                                }
                                function l(e) {
                                    const r = Object.create(null),
                                        i = {
                                            unitsPerEm: e.head.unitsPerEm,
                                            ascender: e.hhea.ascender,
                                            descender: e.hhea.descender,
                                            forEachGlyph(o, l, c, u) {
                                                let h = 0;
                                                const d = (1 / i.unitsPerEm) * l,
                                                    f = (function (e, n) {
                                                        const r = [];
                                                        for (let i = 0; i < n.length; i++) {
                                                            const o = n.codePointAt(i);
                                                            o > 65535 && i++, r.push(t.U.codeToGlyph(e, o));
                                                        }
                                                        const i = e.GSUB;
                                                        if (i) {
                                                            const { lookupList: e, featureList: o } = i;
                                                            let l;
                                                            const c = /^(rlig|liga|mset|isol|init|fina|medi|half|pres|blws)$/,
                                                                u = [];
                                                            o.forEach((i) => {
                                                                if (c.test(i.tag))
                                                                    for (let o = 0; o < i.tab.length; o++) {
                                                                        if (u[i.tab[o]]) continue;
                                                                        u[i.tab[o]] = !0;
                                                                        const c = e[i.tab[o]],
                                                                            h = /^(isol|init|fina|medi)$/.test(i.tag);
                                                                        h && !l && (l = s(n));
                                                                        for (let n = 0; n < r.length; n++) (l && h && a[l[n]] !== i.tag) || t.U._applySubs(r, n, c, e);
                                                                    }
                                                            });
                                                        }
                                                        return r;
                                                    })(e, o);
                                                let p = 0,
                                                    m = -1;
                                                return (
                                                    f.forEach((i, a) => {
                                                        if (-1 !== i) {
                                                            let o = r[i];
                                                            if (!o) {
                                                                const { cmds: a, crds: s } = t.U.glyphToPath(e, i);
                                                                let l, c, u, h;
                                                                if (s.length) {
                                                                    (l = c = 1 / 0), (u = h = -1 / 0);
                                                                    for (let t = 0, e = s.length; t < e; t += 2) {
                                                                        let e = s[t],
                                                                            n = s[t + 1];
                                                                        e < l && (l = e), n < c && (c = n), e > u && (u = e), n > h && (h = n);
                                                                    }
                                                                } else l = u = c = h = 0;
                                                                o = r[i] = {
                                                                    index: i,
                                                                    advanceWidth: e.hmtx.aWidth[i],
                                                                    xMin: l,
                                                                    yMin: c,
                                                                    xMax: u,
                                                                    yMax: h,
                                                                    pathCommandCount: a.length,
                                                                    forEachPathCommand(t) {
                                                                        let e = 0;
                                                                        const r = [];
                                                                        for (let i = 0, o = a.length; i < o; i++) {
                                                                            const o = n[a[i]];
                                                                            (r.length = 1 + o), (r[0] = a[i]);
                                                                            for (let t = 1; t <= o; t++) r[t] = s[e++];
                                                                            t.apply(null, r);
                                                                        }
                                                                    },
                                                                };
                                                            }
                                                            -1 !== m && (h += t.U.getPairAdjustment(e, m, i) * d), u.call(null, o, h, p), o.advanceWidth && (h += o.advanceWidth * d), c && (h += c * l), (m = i);
                                                        }
                                                        p += o.codePointAt(p) > 65535 ? 2 : 1;
                                                    }),
                                                        h
                                                );
                                            },
                                        };
                                    return i;
                                }
                                return function (n) {
                                    const r = new Uint8Array(n, 0, 4),
                                        i = t._bin.readASCII(r, 0, 4);
                                    if ("wOFF" === i) n = e(n);
                                    else if ("wOF2" === i) throw new Error("woff2 fonts not supported");
                                    return l(t.parse(n)[0]);
                                };
                            },
                        ],
                        init: (t, e, n) => n(t(), e()),
                    }),
                    wp = { defaultFontURL: "https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxM.woff", sdfGlyphSize: 64, sdfMargin: 1 / 16, sdfExponent: 9, textureWidth: 2048 },
                    Sp = new aa();
                let Mp = !1;
                const Tp = Object.create(null);
                function Ep(t, e) {
                    if (
                        ((Mp = !0),
                            ((t = Ap({}, t)).font = (function (t) {
                                Lp || (Lp = "undefined" == typeof document ? {} : document.createElement("a"));
                                return (Lp.href = t), Lp.href;
                            })(t.font || wp.defaultFontURL)),
                            (t.text = "" + t.text),
                            (t.sdfGlyphSize = t.sdfGlyphSize || wp.sdfGlyphSize),
                        null != t.colorRanges)
                    ) {
                        let e = {};
                        for (let n in t.colorRanges)
                            if (t.colorRanges.hasOwnProperty(n)) {
                                let r = t.colorRanges[n];
                                "number" != typeof r && (r = Sp.set(r).getHex()), (e[n] = r);
                            }
                        t.colorRanges = e;
                    }
                    Object.freeze(t);
                    const { textureWidth: n, sdfExponent: r } = wp,
                        { sdfGlyphSize: i } = t;
                    let o = `${t.font}@${i}`,
                        a = Tp[o];
                    a || ((a = Tp[o] = { sdfTexture: new Tu(new Uint8Array(i * n * 4), n, i, Zr, void 0, void 0, void 0, void 0, Br, Br) }), (a.sdfTexture.font = t.font)),
                        Cp(t).then((n) => {
                            n.newGlyphSDFs &&
                            (n.newGlyphSDFs.forEach(({ textureData: t, atlasIndex: e }) => {
                                const n = a.sdfTexture.image;
                                for (; n.data.length < (e + 1) * i * i; ) {
                                    const t = new Uint8Array(2 * n.data.length);
                                    t.set(n.data), (n.data = t), (n.height *= 2);
                                }
                                const r = Math.floor(e / 4),
                                    o = n.width / i,
                                    s = Math.floor(r / o) * n.width * i * 4 + (r % o) * i * 4 + (e % 4);
                                for (let e = 0; e < i; e++) {
                                    const r = e * i,
                                        o = s + e * n.width * 4;
                                    for (let e = 0; e < i; e++) n.data[o + 4 * e] = t[r + e];
                                }
                            }),
                                (a.sdfTexture.needsUpdate = !0)),
                                e(
                                    Object.freeze({
                                        parameters: t,
                                        sdfTexture: a.sdfTexture,
                                        sdfGlyphSize: i,
                                        sdfExponent: r,
                                        glyphBounds: n.glyphBounds,
                                        glyphAtlasIndices: n.glyphAtlasIndices,
                                        glyphColors: n.glyphColors,
                                        caretPositions: n.caretPositions,
                                        caretHeight: n.caretHeight,
                                        chunkedBounds: n.chunkedBounds,
                                        ascender: n.ascender,
                                        descender: n.descender,
                                        lineHeight: n.lineHeight,
                                        topBaseline: n.topBaseline,
                                        blockBounds: n.blockBounds,
                                        visibleBounds: n.visibleBounds,
                                        timings: n.timings,
                                        get totalBounds() {
                                            return console.log("totalBounds deprecated, use blockBounds instead"), n.blockBounds;
                                        },
                                        get totalBlockSize() {
                                            console.log("totalBlockSize deprecated, use blockBounds instead");
                                            const [t, e, r, i] = n.blockBounds;
                                            return [r - t, i - e];
                                        },
                                    })
                                );
                        });
                }
                function Ap(t, e) {
                    for (let n in e) e.hasOwnProperty(n) && (t[n] = e[n]);
                    return t;
                }
                let Lp;
                const Cp = rp({
                    name: "TextBuilder",
                    dependencies: [
                        rp({
                            name: "FontProcessor",
                            dependencies: [
                                wp,
                                bp,
                                function () {
                                    let t = !1;
                                    const e = [];
                                    function n() {
                                        t &&
                                        (e.sort(function (t, e) {
                                            return t.maxX - e.maxX;
                                        }),
                                            (t = !1));
                                    }
                                    function r(t, e, n, r, i, o) {
                                        const a = i - n,
                                            s = o - r,
                                            l = a * a + s * s,
                                            c = l ? Math.max(0, Math.min(1, ((t - n) * a + (e - r) * s) / l)) : 0,
                                            u = t - (n + c * a),
                                            h = e - (r + c * s);
                                        return u * u + h * h;
                                    }
                                    return {
                                        addLineSegment: function (n, r, i, o) {
                                            const a = { x0: n, y0: r, x1: i, y1: o, minX: Math.min(n, i), minY: Math.min(r, o), maxX: Math.max(n, i), maxY: Math.max(r, o) };
                                            e.push(a), (t = !0);
                                        },
                                        findNearestSignedDistance: function (t, i) {
                                            n();
                                            let o = 1 / 0,
                                                a = 1 / 0;
                                            for (let n = e.length; n--; ) {
                                                const s = e[n];
                                                if (s.maxX + a <= t) break;
                                                if (t + a > s.minX && i - a < s.maxY && i + a > s.minY) {
                                                    const e = r(t, i, s.x0, s.y0, s.x1, s.y1);
                                                    e < o && ((o = e), (a = Math.sqrt(o)));
                                                }
                                            }
                                            return (
                                                (function (t, r) {
                                                    n();
                                                    let i = !1;
                                                    for (let n = e.length; n--; ) {
                                                        const o = e[n];
                                                        if (o.maxX <= t) break;
                                                        if (o.minY < r && o.maxY > r) {
                                                            o.y0 > r != o.y1 > r && t < ((o.x1 - o.x0) * (r - o.y0)) / (o.y1 - o.y0) + o.x0 && (i = !i);
                                                        }
                                                    }
                                                    return i;
                                                })(t, i) && (a = -a),
                                                    a
                                            );
                                        },
                                    };
                                },
                                function (t, e) {
                                    const { sdfExponent: n, sdfMargin: r } = e;
                                    function i(t, e, n, r, i, o, a) {
                                        const s = 1 - a;
                                        return { x: s * s * t + 2 * s * a * n + a * a * i, y: s * s * e + 2 * s * a * r + a * a * o };
                                    }
                                    function o(t, e, n, r, i, o, a, s, l) {
                                        const c = 1 - l;
                                        return { x: c * c * c * t + 3 * c * c * l * n + 3 * c * l * l * i + l * l * l * a, y: c * c * c * e + 3 * c * c * l * r + 3 * c * l * l * o + l * l * l * s };
                                    }
                                    return function (e, a) {
                                        const s = new Uint8Array(a * a),
                                            l = e.xMax - e.xMin,
                                            c = e.yMax - e.yMin,
                                            u = Math.max(l, c),
                                            h = (Math.max(l, c) / a) * (r * a + 0.5),
                                            d = e.xMin - h,
                                            f = e.yMin - h,
                                            p = e.xMax + h,
                                            m = e.yMax + h,
                                            g = p - d,
                                            v = m - f,
                                            y = Math.max(g, v);
                                        if (e.pathCommandCount) {
                                            const r = t(e);
                                            let l, c, h, p;
                                            e.forEachPathCommand((t, e, n, a, s, u, d) => {
                                                switch (t) {
                                                    case "M":
                                                        (h = l = e), (p = c = n);
                                                        break;
                                                    case "L":
                                                        (e === h && n === p) || r.addLineSegment(h, p, (h = e), (p = n));
                                                        break;
                                                    case "Q": {
                                                        let t = { x: h, y: p };
                                                        for (let o = 1; o < 16; o++) {
                                                            let l = i(h, p, e, n, a, s, o / 15);
                                                            r.addLineSegment(t.x, t.y, l.x, l.y), (t = l);
                                                        }
                                                        (h = a), (p = s);
                                                        break;
                                                    }
                                                    case "C": {
                                                        let t = { x: h, y: p };
                                                        for (let i = 1; i < 16; i++) {
                                                            let l = o(h, p, e, n, a, s, u, d, i / 15);
                                                            r.addLineSegment(t.x, t.y, l.x, l.y), (t = l);
                                                        }
                                                        (h = u), (p = d);
                                                        break;
                                                    }
                                                    case "Z":
                                                        (h === l && p === c) || r.addLineSegment(h, p, l, c);
                                                }
                                            });
                                            for (let t = 0; t < a; t++)
                                                for (let e = 0; e < a; e++) {
                                                    const i = r.findNearestSignedDistance(d + (g * (t + 0.5)) / a, f + (v * (e + 0.5)) / a, u);
                                                    let o = Math.pow(1 - Math.abs(i) / y, n) / 2;
                                                    i < 0 && (o = 1 - o), (o = Math.max(0, Math.min(255, Math.round(255 * o)))), (s[e * a + t] = o);
                                                }
                                        }
                                        return { textureData: s, renderingBounds: [d, f, p, m] };
                                    };
                                },
                                function (t, e, n, r) {
                                    const { defaultFontURL: i } = r,
                                        o = Object.create(null),
                                        a = Object.create(null),
                                        s = 1 / 0,
                                        l = /[\u00AD\u034F\u061C\u115F-\u1160\u17B4-\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8]/;
                                    function c(e, n) {
                                        e || (e = i);
                                        let r = a[e];
                                        r
                                            ? r.pending
                                                ? r.pending.push(n)
                                                : n(r)
                                            : ((a[e] = { pending: [n] }),
                                                (function (e, n) {
                                                    !(function r() {
                                                        const o = (t) => {
                                                            console.error(`Failure loading font ${e}${e === i ? "" : "; trying fallback"}`, t), e !== i && ((e = i), r());
                                                        };
                                                        try {
                                                            const r = new XMLHttpRequest();
                                                            r.open("get", e, !0),
                                                                (r.responseType = "arraybuffer"),
                                                                (r.onload = function () {
                                                                    if (r.status >= 400) o(new Error(r.statusText));
                                                                    else if (r.status > 0)
                                                                        try {
                                                                            const e = t(r.response);
                                                                            n(e);
                                                                        } catch (t) {
                                                                            o(t);
                                                                        }
                                                                }),
                                                                (r.onerror = o),
                                                                r.send();
                                                        } catch (t) {
                                                            o(t);
                                                        }
                                                    })();
                                                })(e, (t) => {
                                                    let n = a[e].pending;
                                                    (a[e] = t), n.forEach((e) => e(t));
                                                }));
                                    }
                                    function u(
                                        {
                                            text: t = "",
                                            font: r = i,
                                            sdfGlyphSize: a = 64,
                                            fontSize: u = 1,
                                            letterSpacing: p = 0,
                                            lineHeight: m = "normal",
                                            maxWidth: g = s,
                                            direction: v,
                                            textAlign: y = "left",
                                            textIndent: x = 0,
                                            whiteSpace: _ = "normal",
                                            overflowWrap: b = "normal",
                                            anchorX: w = 0,
                                            anchorY: S = 0,
                                            includeCaretPositions: M = !1,
                                            chunkedBoundsSize: T = 8192,
                                            colorRanges: E = null,
                                        },
                                        A,
                                        L = !1
                                    ) {
                                        const C = d(),
                                            R = { total: 0, fontLoad: 0, layout: 0, sdf: {}, sdfTotal: 0 };
                                        t.indexOf("\r") > -1 && (console.warn("FontProcessor.process: got text with \\r chars; normalizing to \\n"), (t = t.replace(/\r\n/g, "\n").replace(/\r/g, "\n"))),
                                            (u = +u),
                                            (p = +p),
                                            (g = +g),
                                            (m = m || "normal"),
                                            (x = +x),
                                            (function (t, e, n) {
                                                t || (t = i);
                                                let r = `${t}@${e}`,
                                                    a = o[r];
                                                a
                                                    ? n(a)
                                                    : c(t, (t) => {
                                                        (a = o[r] || (o[r] = { fontObj: t, glyphs: {}, glyphCount: 0 })), n(a);
                                                    });
                                            })(r, a, (r) => {
                                                const i = r.fontObj,
                                                    o = isFinite(g);
                                                let c = null,
                                                    P = null,
                                                    I = null,
                                                    O = null,
                                                    D = null,
                                                    k = null,
                                                    U = null,
                                                    F = 0,
                                                    N = 0,
                                                    z = "nowrap" !== _;
                                                const { ascender: B, descender: G, unitsPerEm: H } = i;
                                                R.fontLoad = d() - C;
                                                const V = d(),
                                                    W = u / H;
                                                "normal" === m && (m = (B - G) / H);
                                                const j = ((m *= u) - (B - G) * W) / 2,
                                                    q = -(B * W + j),
                                                    X = Math.min(m, (B - G) * W),
                                                    Y = ((B + G) / 2) * W - X / 2;
                                                let Z = x,
                                                    J = new f();
                                                const $ = [J];
                                                i.forEachGlyph(t, u, p, (e, n, r) => {
                                                    const i = t.charAt(r),
                                                        a = e.advanceWidth * W,
                                                        s = J.count;
                                                    let c;
                                                    if (
                                                        ("isEmpty" in e || ((e.isWhitespace = !!i && /\s/.test(i)), (e.isEmpty = e.xMin === e.xMax || e.yMin === e.yMax || l.test(i))),
                                                        e.isWhitespace || e.isEmpty || N++,
                                                        z && o && !e.isWhitespace && n + a + Z > g && s)
                                                    ) {
                                                        if (J.glyphAt(s - 1).glyphObj.isWhitespace) (c = new f()), (Z = -n);
                                                        else
                                                            for (let t = s; t--; ) {
                                                                if (0 === t && "break-word" === b) {
                                                                    (c = new f()), (Z = -n);
                                                                    break;
                                                                }
                                                                if (J.glyphAt(t).glyphObj.isWhitespace) {
                                                                    c = J.splitAt(t + 1);
                                                                    const e = c.glyphAt(0).x;
                                                                    Z -= e;
                                                                    for (let t = c.count; t--; ) c.glyphAt(t).x -= e;
                                                                    break;
                                                                }
                                                            }
                                                        c && ((J.isSoftWrapped = !0), (J = c), $.push(J), (F = g));
                                                    }
                                                    let h = J.glyphAt(J.count);
                                                    (h.glyphObj = e), (h.x = n + Z), (h.width = a), (h.charIndex = r), "\n" === i && ((J = new f()), $.push(J), (Z = -(n + a + p * u) + x));
                                                }),
                                                    $.forEach((t) => {
                                                        for (let e = t.count; e--; ) {
                                                            let { glyphObj: n, x: r, width: i } = t.glyphAt(e);
                                                            if (!n.isWhitespace) return (t.width = r + i), void (t.width > F && (F = t.width));
                                                        }
                                                    });
                                                let Q = 0,
                                                    K = 0;
                                                if ((w && ("number" == typeof w ? (Q = -w) : "string" == typeof w && (Q = -F * ("left" === w ? 0 : "center" === w ? 0.5 : "right" === w ? 1 : h(w)))), S))
                                                    if ("number" == typeof S) K = -S;
                                                    else if ("string" == typeof S) {
                                                        let t = $.length * m;
                                                        K = "top" === S ? 0 : "top-baseline" === S ? -q : "middle" === S ? t / 2 : "bottom" === S ? t : "bottom-baseline" === S ? t - j + G * W : h(S) * t;
                                                    }
                                                if (!L) {
                                                    const o = n.getEmbeddingLevels(t, v);
                                                    (P = new Float32Array(4 * N)), (I = new Float32Array(N)), (k = [s, s, -1 / 0, -1 / 0]), (U = []);
                                                    let l = q;
                                                    M && (D = new Float32Array(3 * t.length)), E && (O = new Uint8Array(3 * N));
                                                    let u,
                                                        h,
                                                        f = 0,
                                                        p = -1,
                                                        g = -1;
                                                    $.forEach((v, x) => {
                                                        let { count: _, width: b } = v;
                                                        if (_ > 0) {
                                                            let m = 0;
                                                            for (let t = _; t-- && v.glyphAt(t).glyphObj.isWhitespace; ) m++;
                                                            let x = 0,
                                                                w = 0;
                                                            if ("center" === y) x = (F - b) / 2;
                                                            else if ("right" === y) x = F - b;
                                                            else if ("justify" === y && v.isSoftWrapped) {
                                                                let t = 0;
                                                                for (let e = _ - m; e--; ) v.glyphAt(e).glyphObj.isWhitespace && t++;
                                                                w = (F - b) / t;
                                                            }
                                                            if (w || x) {
                                                                let t = 0;
                                                                for (let e = 0; e < _; e++) {
                                                                    let n = v.glyphAt(e);
                                                                    const r = n.glyphObj;
                                                                    (n.x += x + t), 0 !== w && r.isWhitespace && e < _ - m && ((t += w), (n.width += w));
                                                                }
                                                            }
                                                            const S = n.getReorderSegments(t, o, v.glyphAt(0).charIndex, v.glyphAt(v.count - 1).charIndex);
                                                            for (let t = 0; t < S.length; t++) {
                                                                const [e, n] = S[t];
                                                                let r = 1 / 0,
                                                                    i = -1 / 0;
                                                                for (let t = 0; t < _; t++)
                                                                    if (v.glyphAt(t).charIndex >= e) {
                                                                        let e = t,
                                                                            o = t;
                                                                        for (; o < _; o++) {
                                                                            let t = v.glyphAt(o);
                                                                            if (t.charIndex > n) break;
                                                                            o < _ - m && ((r = Math.min(r, t.x)), (i = Math.max(i, t.x + t.width)));
                                                                        }
                                                                        for (let t = e; t < o; t++) {
                                                                            const e = v.glyphAt(t);
                                                                            e.x = i - (e.x + e.width - r);
                                                                        }
                                                                        break;
                                                                    }
                                                            }
                                                            let A;
                                                            const L = (t) => (A = t);
                                                            for (let m = 0; m < _; m++) {
                                                                let y = v.glyphAt(m);
                                                                A = y.glyphObj;
                                                                const x = 1 & o.levels[y.charIndex];
                                                                if (x) {
                                                                    const e = n.getMirroredCharacter(t[y.charIndex]);
                                                                    e && i.forEachGlyph(e, 0, 0, L);
                                                                }
                                                                if (M) {
                                                                    const { charIndex: t } = y,
                                                                        e = y.x + Q,
                                                                        n = y.x + y.width + Q;
                                                                    for (D[3 * t] = x ? n : e, D[3 * t + 1] = x ? e : n, D[3 * t + 2] = l + Y + K; t - p > 1; )
                                                                        (D[3 * (p + 1)] = D[3 * p]), (D[3 * (p + 1) + 1] = D[3 * p + 1]), (D[3 * (p + 1) + 2] = D[3 * p + 2]), p++;
                                                                    p = t;
                                                                }
                                                                if (E) {
                                                                    const { charIndex: t } = y;
                                                                    for (; t > g; ) g++, E.hasOwnProperty(g) && (h = E[g]);
                                                                }
                                                                if (!A.isWhitespace && !A.isEmpty) {
                                                                    const n = f++;
                                                                    let i = r.glyphs[A.index];
                                                                    if (!i) {
                                                                        const n = d(),
                                                                            o = e(A, a);
                                                                        (R.sdf[t.charAt(y.charIndex)] = d() - n),
                                                                            (o.atlasIndex = r.glyphCount++),
                                                                        c || (c = []),
                                                                            c.push(o),
                                                                            (i = r.glyphs[A.index] = { atlasIndex: o.atlasIndex, glyphObj: A, renderingBounds: o.renderingBounds });
                                                                    }
                                                                    const o = i.renderingBounds,
                                                                        p = 4 * n,
                                                                        m = y.x + Q,
                                                                        g = l + K;
                                                                    (P[p] = m + o[0] * W), (P[p + 1] = g + o[1] * W), (P[p + 2] = m + o[2] * W), (P[p + 3] = g + o[3] * W);
                                                                    const v = m + A.xMin * W,
                                                                        x = g + A.yMin * W,
                                                                        _ = m + A.xMax * W,
                                                                        b = g + A.yMax * W;
                                                                    v < k[0] && (k[0] = v),
                                                                    x < k[1] && (k[1] = x),
                                                                    _ > k[2] && (k[2] = _),
                                                                    b > k[3] && (k[3] = b),
                                                                    n % T == 0 && ((u = { start: n, end: n, rect: [s, s, -1 / 0, -1 / 0] }), U.push(u)),
                                                                        u.end++;
                                                                    const w = u.rect;
                                                                    if ((v < w[0] && (w[0] = v), x < w[1] && (w[1] = x), _ > w[2] && (w[2] = _), b > w[3] && (w[3] = b), (I[n] = i.atlasIndex), E)) {
                                                                        const t = 3 * n;
                                                                        (O[t] = (h >> 16) & 255), (O[t + 1] = (h >> 8) & 255), (O[t + 2] = 255 & h);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        l -= m;
                                                    });
                                                }
                                                for (let t in R.sdf) R.sdfTotal += R.sdf[t];
                                                (R.layout = d() - V - R.sdfTotal),
                                                    (R.total = d() - C),
                                                    A({
                                                        glyphBounds: P,
                                                        glyphAtlasIndices: I,
                                                        caretPositions: D,
                                                        caretHeight: X,
                                                        glyphColors: O,
                                                        chunkedBounds: U,
                                                        ascender: B * W,
                                                        descender: G * W,
                                                        lineHeight: m,
                                                        topBaseline: q,
                                                        blockBounds: [Q, K - $.length * m, Q + F, K],
                                                        visibleBounds: k,
                                                        newGlyphSDFs: c,
                                                        timings: R,
                                                    });
                                            });
                                    }
                                    function h(t) {
                                        let e = t.match(/^([\d.]+)%$/),
                                            n = e ? parseFloat(e[1]) : NaN;
                                        return isNaN(n) ? 0 : n / 100;
                                    }
                                    function d() {
                                        return (self.performance || Date).now();
                                    }
                                    function f() {
                                        this.data = [];
                                    }
                                    const p = ["glyphObj", "x", "width", "charIndex"];
                                    return (
                                        (f.prototype = {
                                            width: 0,
                                            isSoftWrapped: !1,
                                            get count() {
                                                return Math.ceil(this.data.length / p.length);
                                            },
                                            glyphAt(t) {
                                                let e = f.flyweight;
                                                return (e.data = this.data), (e.index = t), e;
                                            },
                                            splitAt(t) {
                                                let e = new f();
                                                return (e.data = this.data.splice(t * p.length)), e;
                                            },
                                        }),
                                            (f.flyweight = p.reduce(
                                                (t, e, n, r) => (
                                                    Object.defineProperty(t, e, {
                                                        get() {
                                                            return this.data[this.index * p.length + n];
                                                        },
                                                        set(t) {
                                                            this.data[this.index * p.length + n] = t;
                                                        },
                                                    }),
                                                        t
                                                ),
                                                { data: null, index: 0 }
                                            )),
                                            {
                                                process: u,
                                                measure: function (t, e) {
                                                    u(
                                                        t,
                                                        (t) => {
                                                            const [n, r, i, o] = t.blockBounds;
                                                            e({ width: i - n, height: o - r });
                                                        },
                                                        { metricsOnly: !0 }
                                                    );
                                                },
                                                loadFont: c,
                                            }
                                    );
                                },
                                sp,
                            ],
                            init(t, e, n, r, i, o) {
                                const { sdfExponent: a, sdfMargin: s, defaultFontURL: l } = t;
                                return i(e, r(n, { sdfExponent: a, sdfMargin: s }), o(), { defaultFontURL: l });
                            },
                        }),
                        ap,
                    ],
                    init: (t, e) =>
                        function (n) {
                            const r = new e();
                            return t.process(n, r.resolve), r;
                        },
                    getTransferables(t) {
                        const e = [t.glyphBounds.buffer, t.glyphAtlasIndices.buffer];
                        return (
                            t.caretPositions && e.push(t.caretPositions.buffer),
                            t.newGlyphSDFs &&
                            t.newGlyphSDFs.forEach((t) => {
                                e.push(t.textureData.buffer);
                            }),
                                e
                        );
                    },
                });
                const Rp = (() => {
                    const t = {};
                    new Fi();
                    const e = "aTroikaGlyphIndex";
                    class n extends Jd {
                        constructor() {
                            super(),
                                (this.detail = 1),
                                (this.curveRadius = 0),
                                (this.groups = [
                                    { start: 0, count: 1 / 0, materialIndex: 0 },
                                    { start: 0, count: 1 / 0, materialIndex: 1 },
                                ]),
                                (this.boundingSphere = new oo()),
                                (this.boundingBox = new Bi());
                        }
                        computeBoundingSphere() {}
                        computeBoundingBox() {}
                        set detail(e) {
                            if (e !== this._detail) {
                                (this._detail = e), ("number" != typeof e || e < 1) && (e = 1);
                                let n = (function (e) {
                                    let n = t[e];
                                    return n || (n = t[e] = new ls(1, 1, e, e).translate(0.5, 0.5, 0)), n;
                                })(e);
                                ["position", "normal", "uv"].forEach((t) => {
                                    this.attributes[t] = n.attributes[t].clone();
                                }),
                                    this.setIndex(n.getIndex().clone());
                            }
                        }
                        get detail() {
                            return this._detail;
                        }
                        set curveRadius(t) {
                            t !== this._curveRadius && ((this._curveRadius = t), this._updateBounds());
                        }
                        get curveRadius() {
                            return this._curveRadius;
                        }
                        updateGlyphs(t, n, o, a, s) {
                            r(this, "aTroikaGlyphBounds", t, 4), r(this, e, n, 1), r(this, "aTroikaGlyphColor", s, 3), (this._blockBounds = o), (this._chunkedBounds = a), i(this, n.length), this._updateBounds();
                        }
                        _updateBounds() {
                            const t = this._blockBounds;
                            if (t) {
                                const { curveRadius: e, boundingBox: n } = this;
                                if (e) {
                                    const { PI: r, floor: i, min: o, max: a, sin: s, cos: l } = Math,
                                        c = r / 2,
                                        u = 2 * r,
                                        h = Math.abs(e),
                                        d = t[0] / h,
                                        f = t[2] / h,
                                        p = i((d + c) / u) !== i((f + c) / u) ? -h : o(s(d) * h, s(f) * h),
                                        m = i((d - c) / u) !== i((f - c) / u) ? h : a(s(d) * h, s(f) * h),
                                        g = i((d + r) / u) !== i((f + r) / u) ? 2 * h : a(h - l(d) * h, h - l(f) * h);
                                    n.min.set(p, t[1], e < 0 ? -g : 0), n.max.set(m, t[3], e < 0 ? 0 : g);
                                } else n.min.set(t[0], t[1], 0), n.max.set(t[2], t[3], 0);
                                n.getBoundingSphere(this.boundingSphere);
                            }
                        }
                        applyClipRect(t) {
                            let n = this.getAttribute(e).count,
                                r = this._chunkedBounds;
                            if (r)
                                for (let e = r.length; e--; ) {
                                    n = r[e].end;
                                    let i = r[e].rect;
                                    if (i[1] < t.w && i[3] > t.y && i[0] < t.z && i[2] > t.x) break;
                                }
                            i(this, n);
                        }
                    }
                    function r(t, e, n, r) {
                        const i = t.getAttribute(e);
                        n ? (i && i.array.length === n.length ? (i.array.set(n), (i.needsUpdate = !0)) : (t.setAttribute(e, new $d(n, r)), delete t._maxInstanceCount, t.dispose())) : i && t.deleteAttribute(e);
                    }
                    function i(t, e) {
                        t[t.hasOwnProperty("instanceCount") ? "instanceCount" : "maxInstancedCount"] = e;
                    }
                    return (
                        n.prototype.setAttribute ||
                        (n.prototype.setAttribute = function (t, e) {
                            return (this.attributes[t] = e), this;
                        }),
                            n
                    );
                })();
                const Pp = (() => {
                    const t = new sa({ color: 16777215, side: 2, transparent: !0 }),
                        e = 8421504,
                        n = new mo(),
                        r = new Fi(),
                        i = new Fi(),
                        o = [],
                        a = new Fi(),
                        s = "+x+y";
                    function l(t) {
                        return Array.isArray(t) ? t[0] : t;
                    }
                    let c = () => {
                            const e = new Ba(new ls(1, 1), t);
                            return (c = () => e), e;
                        },
                        u = () => {
                            const e = new Ba(new ls(1, 1, 32, 1), t);
                            return (u = () => e), e;
                        };
                    const h = { type: "syncstart" },
                        d = { type: "synccomplete" },
                        f = ["font", "fontSize", "letterSpacing", "lineHeight", "maxWidth", "overflowWrap", "text", "direction", "textAlign", "textIndent", "whiteSpace", "anchorX", "anchorY", "colorRanges", "sdfGlyphSize"],
                        p = f.concat("material", "color", "depthOffset", "clipRect", "curveRadius", "orientation", "glyphGeometryDetail");
                    class m extends Ba {
                        constructor() {
                            super(new Rp(), null),
                                (this.text = ""),
                                (this.anchorX = 0),
                                (this.anchorY = 0),
                                (this.curveRadius = 0),
                                (this.direction = "auto"),
                                (this.font = null),
                                (this.fontSize = 0.1),
                                (this.letterSpacing = 0),
                                (this.lineHeight = "normal"),
                                (this.maxWidth = 1 / 0),
                                (this.overflowWrap = "normal"),
                                (this.textAlign = "left"),
                                (this.textIndent = 0),
                                (this.whiteSpace = "normal"),
                                (this.material = null),
                                (this.color = null),
                                (this.colorRanges = null),
                                (this.outlineWidth = 0),
                                (this.outlineColor = 0),
                                (this.outlineOpacity = 1),
                                (this.outlineBlur = 0),
                                (this.outlineOffsetX = 0),
                                (this.outlineOffsetY = 0),
                                (this.strokeWidth = 0),
                                (this.strokeColor = e),
                                (this.strokeOpacity = 1),
                                (this.fillOpacity = 1),
                                (this.depthOffset = 0),
                                (this.clipRect = null),
                                (this.orientation = s),
                                (this.glyphGeometryDetail = 1),
                                (this.sdfGlyphSize = null),
                                (this.debugSDF = !1);
                        }
                        sync(t) {
                            this._needsSync &&
                            ((this._needsSync = !1),
                                this._isSyncing
                                    ? (this._queuedSyncs || (this._queuedSyncs = [])).push(t)
                                    : ((this._isSyncing = !0),
                                        this.dispatchEvent(h),
                                        Ep(
                                            {
                                                text: this.text,
                                                font: this.font,
                                                fontSize: this.fontSize || 0.1,
                                                letterSpacing: this.letterSpacing || 0,
                                                lineHeight: this.lineHeight || "normal",
                                                maxWidth: this.maxWidth,
                                                direction: this.direction || "auto",
                                                textAlign: this.textAlign,
                                                textIndent: this.textIndent,
                                                whiteSpace: this.whiteSpace,
                                                overflowWrap: this.overflowWrap,
                                                anchorX: this.anchorX,
                                                anchorY: this.anchorY,
                                                colorRanges: this.colorRanges,
                                                includeCaretPositions: !0,
                                                sdfGlyphSize: this.sdfGlyphSize,
                                            },
                                            (e) => {
                                                (this._isSyncing = !1), (this._textRenderInfo = e), this.geometry.updateGlyphs(e.glyphBounds, e.glyphAtlasIndices, e.blockBounds, e.chunkedBounds, e.glyphColors);
                                                const n = this._queuedSyncs;
                                                n &&
                                                ((this._queuedSyncs = null),
                                                    (this._needsSync = !0),
                                                    this.sync(() => {
                                                        n.forEach((t) => t && t());
                                                    })),
                                                    this.dispatchEvent(d),
                                                t && t();
                                            }
                                        )));
                        }
                        onBeforeRender(t, e, n, r, i, o) {
                            this.sync(), i.isTroikaTextMaterial && this._prepareForRender(i);
                        }
                        dispose() {
                            this.geometry.dispose();
                        }
                        get textRenderInfo() {
                            return this._textRenderInfo || null;
                        }
                        get material() {
                            let e = this._derivedMaterial;
                            const n = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = t.clone());
                            if (
                                ((e && e.baseMaterial === n) ||
                                ((e = this._derivedMaterial = (function (t) {
                                    const e = gp(t, {
                                        chained: !0,
                                        extensions: { derivatives: !0 },
                                        uniforms: {
                                            uTroikaSDFTexture: { value: null },
                                            uTroikaSDFTextureSize: { value: new Ei() },
                                            uTroikaSDFGlyphSize: { value: 0 },
                                            uTroikaSDFExponent: { value: 0 },
                                            uTroikaTotalBounds: { value: new Oi(0, 0, 0, 0) },
                                            uTroikaClipRect: { value: new Oi(0, 0, 0, 0) },
                                            uTroikaDistanceOffset: { value: 0 },
                                            uTroikaOutlineOpacity: { value: 0 },
                                            uTroikaFillOpacity: { value: 1 },
                                            uTroikaPositionOffset: { value: new Ei() },
                                            uTroikaCurveRadius: { value: 0 },
                                            uTroikaBlurRadius: { value: 0 },
                                            uTroikaStrokeWidth: { value: 0 },
                                            uTroikaStrokeColor: { value: new aa() },
                                            uTroikaStrokeOpacity: { value: 1 },
                                            uTroikaOrient: { value: new Ai() },
                                            uTroikaUseGlyphColors: { value: !0 },
                                            uTroikaSDFDebug: { value: !1 },
                                        },
                                        vertexDefs:
                                            "\nuniform vec2 uTroikaSDFTextureSize;\nuniform float uTroikaSDFGlyphSize;\nuniform vec4 uTroikaTotalBounds;\nuniform vec4 uTroikaClipRect;\nuniform mat3 uTroikaOrient;\nuniform bool uTroikaUseGlyphColors;\nuniform float uTroikaDistanceOffset;\nuniform float uTroikaBlurRadius;\nuniform vec2 uTroikaPositionOffset;\nuniform float uTroikaCurveRadius;\nattribute vec4 aTroikaGlyphBounds;\nattribute float aTroikaGlyphIndex;\nattribute vec3 aTroikaGlyphColor;\nvarying vec2 vTroikaGlyphUV;\nvarying vec4 vTroikaTextureUVBounds;\nvarying float vTroikaTextureChannel;\nvarying vec3 vTroikaGlyphColor;\nvarying vec2 vTroikaGlyphDimensions;\n",
                                        vertexTransform:
                                            "\nvec4 bounds = aTroikaGlyphBounds;\nbounds.xz += uTroikaPositionOffset.x;\nbounds.yw -= uTroikaPositionOffset.y;\n\nvec4 outlineBounds = vec4(\n  bounds.xy - uTroikaDistanceOffset - uTroikaBlurRadius,\n  bounds.zw + uTroikaDistanceOffset + uTroikaBlurRadius\n);\nvec4 clippedBounds = vec4(\n  clamp(outlineBounds.xy, uTroikaClipRect.xy, uTroikaClipRect.zw),\n  clamp(outlineBounds.zw, uTroikaClipRect.xy, uTroikaClipRect.zw)\n);\n\nvec2 clippedXY = (mix(clippedBounds.xy, clippedBounds.zw, position.xy) - bounds.xy) / (bounds.zw - bounds.xy);\n\nposition.xy = mix(bounds.xy, bounds.zw, clippedXY);\n\nuv = (position.xy - uTroikaTotalBounds.xy) / (uTroikaTotalBounds.zw - uTroikaTotalBounds.xy);\n\nfloat rad = uTroikaCurveRadius;\nif (rad != 0.0) {\n  float angle = position.x / rad;\n  position.xz = vec2(sin(angle) * rad, rad - cos(angle) * rad);\n  normal.xz = vec2(sin(angle), cos(angle));\n}\n  \nposition = uTroikaOrient * position;\nnormal = uTroikaOrient * normal;\n\nvTroikaGlyphUV = clippedXY.xy;\nvTroikaGlyphDimensions = vec2(bounds[2] - bounds[0], bounds[3] - bounds[1]);\n\n\nfloat txCols = uTroikaSDFTextureSize.x / uTroikaSDFGlyphSize;\nvec2 txUvPerSquare = uTroikaSDFGlyphSize / uTroikaSDFTextureSize;\nvec2 txStartUV = txUvPerSquare * vec2(\n  mod(floor(aTroikaGlyphIndex / 4.0), txCols),\n  floor(floor(aTroikaGlyphIndex / 4.0) / txCols)\n);\nvTroikaTextureUVBounds = vec4(txStartUV, vec2(txStartUV) + txUvPerSquare);\nvTroikaTextureChannel = mod(aTroikaGlyphIndex, 4.0);\n",
                                        fragmentDefs:
                                            "\nuniform sampler2D uTroikaSDFTexture;\nuniform vec2 uTroikaSDFTextureSize;\nuniform float uTroikaSDFGlyphSize;\nuniform float uTroikaSDFExponent;\nuniform float uTroikaDistanceOffset;\nuniform float uTroikaFillOpacity;\nuniform float uTroikaOutlineOpacity;\nuniform float uTroikaBlurRadius;\nuniform vec3 uTroikaStrokeColor;\nuniform float uTroikaStrokeWidth;\nuniform float uTroikaStrokeOpacity;\nuniform bool uTroikaSDFDebug;\nvarying vec2 vTroikaGlyphUV;\nvarying vec4 vTroikaTextureUVBounds;\nvarying float vTroikaTextureChannel;\nvarying vec2 vTroikaGlyphDimensions;\n\nfloat troikaSdfValueToSignedDistance(float alpha) {\n  // Inverse of encoding in SDFGenerator.js\n  \n  float maxDimension = max(vTroikaGlyphDimensions.x, vTroikaGlyphDimensions.y);\n  float absDist = (1.0 - pow(2.0 * (alpha > 0.5 ? 1.0 - alpha : alpha), 1.0 / uTroikaSDFExponent)) * maxDimension;\n  float signedDist = absDist * (alpha > 0.5 ? -1.0 : 1.0);\n  return signedDist;\n}\n\nfloat troikaGlyphUvToSdfValue(vec2 glyphUV) {\n  vec2 textureUV = mix(vTroikaTextureUVBounds.xy, vTroikaTextureUVBounds.zw, glyphUV);\n  vec4 rgba = texture2D(uTroikaSDFTexture, textureUV);\n  float ch = floor(vTroikaTextureChannel + 0.5); //NOTE: can't use round() in WebGL1\n  return ch == 0.0 ? rgba.r : ch == 1.0 ? rgba.g : ch == 2.0 ? rgba.b : rgba.a;\n}\n\nfloat troikaGlyphUvToDistance(vec2 uv) {\n  return troikaSdfValueToSignedDistance(troikaGlyphUvToSdfValue(uv));\n}\n\nfloat troikaGetAADist() {\n  \n  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300\n  return length(fwidth(vTroikaGlyphUV * vTroikaGlyphDimensions)) * 0.5;\n  #else\n  return vTroikaGlyphDimensions.x / 64.0;\n  #endif\n}\n\nfloat troikaGetFragDistValue() {\n  vec2 clampedGlyphUV = clamp(vTroikaGlyphUV, 0.5 / uTroikaSDFGlyphSize, 1.0 - 0.5 / uTroikaSDFGlyphSize);\n  float distance = troikaGlyphUvToDistance(clampedGlyphUV);\n \n  // Extrapolate distance when outside bounds:\n  distance += clampedGlyphUV == vTroikaGlyphUV ? 0.0 : \n    length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);\n\n  \n\n  return distance;\n}\n\nfloat troikaGetEdgeAlpha(float distance, float distanceOffset, float aaDist) {\n  #if defined(IS_DEPTH_MATERIAL) || defined(IS_DISTANCE_MATERIAL)\n  float alpha = step(-distanceOffset, -distance);\n  #else\n\n  float alpha = smoothstep(\n    distanceOffset + aaDist,\n    distanceOffset - aaDist,\n    distance\n  );\n  #endif\n\n  return alpha;\n}\n",
                                        fragmentColorTransform:
                                            "\nfloat aaDist = troikaGetAADist();\nfloat distance = troikaGetFragDistValue();\nfloat edgeAlpha = uTroikaSDFDebug ?\n  troikaGlyphUvToSdfValue(vTroikaGlyphUV) :\n  troikaGetEdgeAlpha(distance, uTroikaDistanceOffset, max(aaDist, uTroikaBlurRadius));\n\n#if !defined(IS_DEPTH_MATERIAL) && !defined(IS_DISTANCE_MATERIAL)\nvec4 fillRGBA = gl_FragColor;\nfillRGBA.a *= uTroikaFillOpacity;\nvec4 strokeRGBA = uTroikaStrokeWidth == 0.0 ? fillRGBA : vec4(uTroikaStrokeColor, uTroikaStrokeOpacity);\nif (fillRGBA.a == 0.0) fillRGBA.rgb = strokeRGBA.rgb;\ngl_FragColor = mix(fillRGBA, strokeRGBA, smoothstep(\n  -uTroikaStrokeWidth - aaDist,\n  -uTroikaStrokeWidth + aaDist,\n  distance\n));\ngl_FragColor.a *= edgeAlpha;\n#endif\n\nif (edgeAlpha == 0.0) {\n  discard;\n}\n",
                                        customRewriter({ vertexShader: t, fragmentShader: e }) {
                                            let n = /\buniform\s+vec3\s+diffuse\b/;
                                            return (
                                                n.test(e) &&
                                                ((e = e.replace(n, "varying vec3 vTroikaGlyphColor").replace(/\bdiffuse\b/g, "vTroikaGlyphColor")),
                                                n.test(t) || (t = t.replace(lp, "uniform vec3 diffuse;\n$&\nvTroikaGlyphColor = uTroikaUseGlyphColors ? aTroikaGlyphColor / 255.0 : diffuse;\n"))),
                                                    { vertexShader: t, fragmentShader: e }
                                            );
                                        },
                                    });
                                    return (
                                        (e.transparent = !0),
                                            Object.defineProperties(e, {
                                                isTroikaTextMaterial: { value: !0 },
                                                shadowSide: {
                                                    get() {
                                                        return this.side;
                                                    },
                                                    set() {},
                                                },
                                            }),
                                            e
                                    );
                                })(n)),
                                    n.addEventListener("dispose", function t() {
                                        n.removeEventListener("dispose", t), e.dispose();
                                    })),
                                this.outlineWidth || this.outlineBlur || this.outlineOffsetX || this.outlineOffsetY)
                            ) {
                                let t = e._outlineMtl;
                                return (
                                    t ||
                                    ((t = e._outlineMtl = Object.create(e, { id: { value: e.id + 0.1 } })),
                                        (t.isTextOutlineMaterial = !0),
                                        (t.depthWrite = !1),
                                        (t.map = null),
                                        e.addEventListener("dispose", function n() {
                                            e.removeEventListener("dispose", n), t.dispose();
                                        })),
                                        [t, e]
                                );
                            }
                            return e;
                        }
                        set material(t) {
                            t && t.isTroikaTextMaterial ? ((this._derivedMaterial = t), (this._baseMaterial = t.baseMaterial)) : (this._baseMaterial = t);
                        }
                        get glyphGeometryDetail() {
                            return this.geometry.detail;
                        }
                        set glyphGeometryDetail(t) {
                            this.geometry.detail = t;
                        }
                        get curveRadius() {
                            return this.geometry.curveRadius;
                        }
                        set curveRadius(t) {
                            this.geometry.curveRadius = t;
                        }
                        get customDepthMaterial() {
                            return l(this.material).getDepthMaterial();
                        }
                        get customDistanceMaterial() {
                            return l(this.material).getDistanceMaterial();
                        }
                        _prepareForRender(t) {
                            const o = t.isTextOutlineMaterial,
                                l = t.uniforms,
                                c = this.textRenderInfo;
                            if (c) {
                                const { sdfTexture: t, blockBounds: n } = c;
                                (l.uTroikaSDFTexture.value = t),
                                    l.uTroikaSDFTextureSize.value.set(t.image.width, t.image.height),
                                    (l.uTroikaSDFGlyphSize.value = c.sdfGlyphSize),
                                    (l.uTroikaSDFExponent.value = c.sdfExponent),
                                    l.uTroikaTotalBounds.value.fromArray(n),
                                    (l.uTroikaUseGlyphColors.value = !o && !!c.glyphColors);
                                let r,
                                    i,
                                    a,
                                    s = 0,
                                    u = 0,
                                    h = 0,
                                    d = 0,
                                    f = 0;
                                if (o) {
                                    let { outlineWidth: t, outlineOffsetX: e, outlineOffsetY: n, outlineBlur: i, outlineOpacity: o } = this;
                                    (s = this._parsePercent(t) || 0), (u = Math.max(0, this._parsePercent(i) || 0)), (r = o), (d = this._parsePercent(e) || 0), (f = this._parsePercent(n) || 0);
                                } else
                                    (h = Math.max(0, this._parsePercent(this.strokeWidth) || 0)),
                                    h && ((a = this.strokeColor), l.uTroikaStrokeColor.value.set(null == a ? e : a), (i = this.strokeOpacity), null == i && (i = 1)),
                                        (r = this.fillOpacity);
                                (l.uTroikaDistanceOffset.value = s),
                                    l.uTroikaPositionOffset.value.set(d, f),
                                    (l.uTroikaBlurRadius.value = u),
                                    (l.uTroikaStrokeWidth.value = h),
                                    (l.uTroikaStrokeOpacity.value = i),
                                    (l.uTroikaFillOpacity.value = null == r ? 1 : r),
                                    (l.uTroikaCurveRadius.value = this.curveRadius || 0);
                                let p = this.clipRect;
                                if (p && Array.isArray(p) && 4 === p.length) l.uTroikaClipRect.value.fromArray(p);
                                else {
                                    const t = 100 * (this.fontSize || 0.1);
                                    l.uTroikaClipRect.value.set(n[0] - t, n[1] - t, n[2] + t, n[3] + t);
                                }
                                this.geometry.applyClipRect(l.uTroikaClipRect.value);
                            }
                            (l.uTroikaSDFDebug.value = !!this.debugSDF), (t.polygonOffset = !!this.depthOffset), (t.polygonOffsetFactor = t.polygonOffsetUnits = this.depthOffset || 0);
                            const u = o ? this.outlineColor || 0 : this.color;
                            if (null == u) delete t.color;
                            else {
                                const e = t.hasOwnProperty("color") ? t.color : (t.color = new aa());
                                (u === e._input && "object" != typeof u) || e.set((e._input = u));
                            }
                            let h = this.orientation || s;
                            if (h !== t._orientation) {
                                let e = l.uTroikaOrient.value;
                                h = h.replace(/[^-+xyz]/g, "");
                                let o = h !== s && h.match(/^([-+])([xyz])([-+])([xyz])$/);
                                if (o) {
                                    let [, t, s, l, c] = o;
                                    (r.set(0, 0, 0)[s] = "-" === t ? 1 : -1), (i.set(0, 0, 0)[c] = "-" === l ? -1 : 1), n.lookAt(a, r.cross(i), i), e.setFromMatrix4(n);
                                } else e.identity();
                                t._orientation = h;
                            }
                        }
                        _parsePercent(t) {
                            if ("string" == typeof t) {
                                let e = t.match(/^(-?[\d.]+)%$/),
                                    n = e ? parseFloat(e[1]) : NaN;
                                t = (isNaN(n) ? 0 : n / 100) * this.fontSize;
                            }
                            return t;
                        }
                        localPositionToTextCoords(t, e = new Ei()) {
                            e.copy(t);
                            const n = this.curveRadius;
                            return n && (e.x = Math.atan2(t.x, Math.abs(n) - Math.abs(t.z)) * Math.abs(n)), e;
                        }
                        worldPositionToTextCoords(t, e = new Ei()) {
                            return r.copy(t), this.localPositionToTextCoords(this.worldToLocal(r), e);
                        }
                        raycast(t, e) {
                            const { textRenderInfo: n, curveRadius: r } = this;
                            if (n) {
                                const i = n.blockBounds,
                                    a = r ? u() : c(),
                                    s = a.geometry,
                                    { position: l, uv: h } = s.attributes;
                                for (let t = 0; t < h.count; t++) {
                                    let e = i[0] + h.getX(t) * (i[2] - i[0]);
                                    const n = i[1] + h.getY(t) * (i[3] - i[1]);
                                    let o = 0;
                                    r && ((o = r - Math.cos(e / r) * r), (e = Math.sin(e / r) * r)), l.setXYZ(t, e, n, o);
                                }
                                (s.boundingSphere = this.geometry.boundingSphere), (s.boundingBox = this.geometry.boundingBox), (a.matrixWorld = this.matrixWorld), (a.material.side = this.material.side), (o.length = 0), a.raycast(t, o);
                                for (let t = 0; t < o.length; t++) (o[t].object = this), e.push(o[t]);
                            }
                        }
                        copy(t) {
                            const e = this.geometry;
                            return (
                                super.copy(t),
                                    (this.geometry = e),
                                    p.forEach((e) => {
                                        this[e] = t[e];
                                    }),
                                    this
                            );
                        }
                        clone() {
                            return new this.constructor().copy(this);
                        }
                    }
                    f.forEach((t) => {
                        const e = "_private_" + t;
                        Object.defineProperty(m.prototype, t, {
                            get() {
                                return this[e];
                            },
                            set(t) {
                                t !== this[e] && ((this[e] = t), (this._needsSync = !0));
                            },
                        });
                    });
                    let g = !1;
                    return (
                        Object.defineProperty(m.prototype, "anchor", {
                            get() {
                                return this._deprecated_anchor;
                            },
                            set(t) {
                                (this._deprecated_anchor = t),
                                g || (console.warn("TextMesh: `anchor` has been deprecated; use `anchorX` and `anchorY` instead."), (g = !0)),
                                    Array.isArray(t) ? ((this.anchorX = 100 * (+t[0] || 0) + "%"), (this.anchorY = 100 * (+t[1] || 0) + "%")) : (this.anchorX = this.anchorY = 0);
                            },
                        }),
                            m
                    );
                })();
                new WeakMap();
                new WeakMap();
                n(9826);
                function Ip(t) {
                    return (Ip =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                return typeof t;
                            }
                            : function (t) {
                                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                            })(t);
                }
                function Op(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function Dp(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                function kp(t, e) {
                    return (kp =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function Up(t) {
                    var e = (function () {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                        if (Reflect.construct.sham) return !1;
                        if ("function" == typeof Proxy) return !0;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                        } catch (t) {
                            return !1;
                        }
                    })();
                    return function () {
                        var n,
                            r = Np(t);
                        if (e) {
                            var i = Np(this).constructor;
                            n = Reflect.construct(r, arguments, i);
                        } else n = r.apply(this, arguments);
                        return Fp(this, n);
                    };
                }
                function Fp(t, e) {
                    if (e && ("object" === Ip(e) || "function" == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                    return (function (t) {
                        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return t;
                    })(t);
                }
                function Np(t) {
                    return (Np = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                            return t.__proto__ || Object.getPrototypeOf(t);
                        })(t);
                }
                var zp = (function (t) {
                        !(function (t, e) {
                            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                            (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && kp(t, e);
                        })(o, t);
                        var e,
                            n,
                            r,
                            i = Up(o);
                        function o() {
                            return Op(this, o), i.apply(this, arguments);
                        }
                        return (
                            (e = o),
                            (n = [
                                {
                                    key: "in",
                                    value: function (t) {
                                        var e = t.from,
                                            n = t.done,
                                            r = t.trigger,
                                            i = Sm.cards.find(function (t) {
                                                return t.element === r;
                                            });
                                        Sm.startTransition(i, Sm.cards.indexOf(i)), e.remove(), yg.removeScarf(0), Tm.remove(0), n();
                                    },
                                },
                                {
                                    key: "out",
                                    value: function (t) {
                                        var e = t.from,
                                            n = t.done;
                                        yg.backgroundTile.disable("hold"), Pf.disable(), Er.to(e, 0.25, { opacity: 0, ease: "power2.out", onComplete: n });
                                    },
                                },
                            ]) && Dp(e.prototype, n),
                            r && Dp(e, r),
                                o
                        );
                    })(u.Transition),
                    Bp = zp;
                function Gp(t) {
                    return (Gp =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                return typeof t;
                            }
                            : function (t) {
                                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                            })(t);
                }
                function Hp(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function Vp(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                function Wp(t, e) {
                    return (Wp =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function jp(t) {
                    var e = (function () {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                        if (Reflect.construct.sham) return !1;
                        if ("function" == typeof Proxy) return !0;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                        } catch (t) {
                            return !1;
                        }
                    })();
                    return function () {
                        var n,
                            r = Xp(t);
                        if (e) {
                            var i = Xp(this).constructor;
                            n = Reflect.construct(r, arguments, i);
                        } else n = r.apply(this, arguments);
                        return qp(this, n);
                    };
                }
                function qp(t, e) {
                    if (e && ("object" === Gp(e) || "function" == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                    return (function (t) {
                        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return t;
                    })(t);
                }
                function Xp(t) {
                    return (Xp = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                            return t.__proto__ || Object.getPrototypeOf(t);
                        })(t);
                }
                var Yp = new Ed(),
                    Zp = (function (t) {
                        !(function (t, e) {
                            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                            (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && Wp(t, e);
                        })(o, t);
                        var e,
                            n,
                            r,
                            i = jp(o);
                        function o() {
                            return Hp(this, o), i.apply(this, arguments);
                        }
                        return (
                            (e = o),
                            (n = [
                                {
                                    key: "init",
                                    value: function (t, e, n, r) {
                                        return (
                                            (this.gl = e),
                                                (this.el = t),
                                                (this.text = r),
                                                (this.type = "card"),
                                                (this.state = n),
                                                (this.srcType = Um ? "webp" : "jpg"),
                                                this.setBounds(),
                                                this.updatePosition(),
                                                this.checkSequences(),
                                                (this.material = new qa({
                                                    vertexShader: jf,
                                                    fragmentShader: qf,
                                                    transparent: !0,
                                                    side: 2,
                                                    uniforms: {
                                                        uProgress: { value: 0 },
                                                        uMeshScale: new xf(new Ei(1, 1)),
                                                        uMeshPosition: new xf(new Ei(0, 0)),
                                                        uViewSize: { value: new Ei(km, Dm) },
                                                        uResolution: { value: new Ei(this.bounds.width, this.bounds.height) },
                                                        uResolutionTexture: { value: new Ei(1920, 1080) },
                                                        uImage: { value: !1 },
                                                        uOpacity: { value: 1 },
                                                        uTransition: { value: 0.25 },
                                                        precision: "lowp",
                                                    },
                                                })),
                                                (this.geometry = new ls(1, 1, 128, 128)),
                                                this.createShadow(),
                                                this.createMesh(),
                                                this.createHeadingText(),
                                                this.createSubText(),
                                                this
                                        );
                                    },
                                },
                                {
                                    key: "setBounds",
                                    value: function (t, e) {
                                        var n = t || 0,
                                            r = e ? ((e.y + 50) * e.tile.bounds.height) / 100 : 0;
                                        (this.rect = this.el.getBoundingClientRect()),
                                            (this.bounds = { top: this.rect.top - Pf.previousY - n + -1 * r, width: this.rect.width, left: km / 2 - this.rect.width / 2, height: this.rect.height }),
                                            this.updateSize();
                                    },
                                },
                                {
                                    key: "calculateUnitSize",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.position.z,
                                            e = (this.gl.camera.fov * Math.PI) / 180,
                                            n = 2 * Math.tan(e / 2) * t,
                                            r = n * this.gl.camera.aspect;
                                        return { width: r, height: n };
                                    },
                                },
                                {
                                    key: "updateSize",
                                    value: function () {
                                        this.camUnit = this.calculateUnitSize(this.gl.camera.position.z - this.position.z);
                                        var t = this.bounds.width / km,
                                            e = this.bounds.height / Dm;
                                        t && e && ((this.scale.x = this.camUnit.width * t), (this.scale.y = this.camUnit.height * e));
                                    },
                                },
                                {
                                    key: "updateY",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                            e = this.bounds.top;
                                        (this.position.y = this.camUnit.height / 2 - this.scale.y / 2), (this.position.y -= ((e - t) / Dm) * this.camUnit.height);
                                    },
                                },
                                {
                                    key: "updateX",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                            e = this.bounds.left;
                                        (this.position.x = -this.camUnit.width / 2 + this.scale.x / 2), (this.position.x += ((e + t) / km) * this.camUnit.width);
                                    },
                                },
                                {
                                    key: "updatePosition",
                                    value: function (t, e) {
                                        this.updateY(t), this.updateX(e);
                                    },
                                },
                                {
                                    key: "createShadow",
                                    value: function () {
                                        var t = this;
                                        (this.shadowMaterial = new qa({
                                            vertexShader: jf,
                                            fragmentShader: qf,
                                            transparent: !0,
                                            side: 2,
                                            uniforms: {
                                                uProgress: { value: 0 },
                                                uMeshScale: new xf(new Ei(1, 1)),
                                                uMeshPosition: new xf(new Ei(0, 0)),
                                                uViewSize: { value: new Ei(km, Dm) },
                                                uResolution: { value: new Ei(this.bounds.width, this.bounds.height) },
                                                uResolutionTexture: { value: new Ei(this.bounds.width, this.bounds.height) },
                                                uImage: { value: !1 },
                                                uOpacity: { value: 0.5 },
                                                precision: "lowp",
                                            },
                                        })),
                                            Yp.load("".concat(window.location.origin, "/wp-content/themes/fabiennechapot/public/images/shadow.png"), function (e) {
                                                (e.minFilter = Br), (t.shadowMaterial.uniforms.uImage.value = e);
                                            }),
                                            (this.shadowMesh = new Ba(this.geometry, this.shadowMaterial)),
                                            this.shadowMesh.scale.set(1.2, 1.16, 1.16),
                                            this.add(this.shadowMesh);
                                    },
                                },
                                {
                                    key: "createMesh",
                                    value: function () {
                                        (this.mesh = new Ba(this.geometry, this.material)), this.add(this.mesh);
                                    },
                                },
                                {
                                    key: "createHeadingText",
                                    value: function () {
                                        (this.headingText = new Pp()),
                                            this.add(this.headingText),
                                            (this.headingText.font = "".concat(window.location.origin, "/wp-content/themes/fabiennechapot/Riposte-Bold.otf")),
                                            (this.headingText.text = this.text.heading),
                                            (this.headingText.fontSize = 0.1125),
                                            (this.headingText.lineHeight = 1),
                                            (this.headingText.color = 0),
                                            (this.headingText.position.x -= 0.455),
                                            (this.headingText.position.y -= 0.25),
                                            this.headingText.scale.set(1, this.scale.x / this.scale.y, 1),
                                            this.headingText.sync();
                                    },
                                },
                                {
                                    key: "createSubText",
                                    value: function () {
                                        (this.subText = new Pp()),
                                            this.add(this.subText),
                                            (this.subText.font = "".concat(window.location.origin, "/wp-content/themes/fabiennechapot/Riposte-Bold.otf")),
                                            (this.subText.text = this.text.sub),
                                            (this.subText.fontSize = 0.04),
                                            (this.subText.color = 0),
                                            (this.subText.position.x -= 0.455),
                                            (this.subText.position.y -= 0.43),
                                            this.subText.scale.set(1, this.scale.x / this.scale.y, 1),
                                            this.subText.sync();
                                    },
                                },
                                {
                                    key: "checkSequences",
                                    value: function (t, e) {
                                        var n = this;
                                        if (((this.start = 0), (this.end = -1 * Pf.maxScroll), (this.sequences = []), this.state.isFixed)) return this.setFixedSequene(), !1;
                                        for (var r = 0; r <= this.state.length; r++)
                                            this.sequences.push({
                                                src: ""
                                                    .concat(window.location.origin, "/wp-content/themes/fabiennechapot/render/")
                                                    .concat(this.state.router, "/BG_")
                                                    .concat(this.state.baseName, "_00")
                                                    .concat(r.toString().padStart(3, "0"), ".")
                                                    .concat(this.srcType),
                                                isLoaded: !1,
                                            });
                                        this.sequences.forEach(function (t, e) {
                                            Yp.load(t.src, function (r) {
                                                (r.minFilter = Br), (t.texture = r), (t.isLoaded = !0), 0 === e && (n.material.uniforms.uImage.value = n.sequences[0].texture);
                                            });
                                        });
                                    },
                                },
                                {
                                    key: "setFixedSequene",
                                    value: function () {
                                        var t = this;
                                        Yp.load(
                                            ""
                                                .concat(window.location.origin, "/wp-content/themes/fabiennechapot/render/")
                                                .concat(this.state.router, "/BG_")
                                                .concat(this.state.baseName, "_00")
                                                .concat(this.state.length.toString().padStart(3, "0"), ".")
                                                .concat(this.srcType),
                                            function (e) {
                                                (e.minFilter = Br), (t.material.uniforms.uImage.value = e);
                                            }
                                        );
                                    },
                                },
                                {
                                    key: "checkSequence",
                                    value: function (t) {
                                        if (this.isDisabled) return !1;
                                        var e = parseInt(this.state.length * t);
                                        (e = Er.utils.clamp(0, this.state.length - 1, e)) !== this.storeIndex &&
                                        ((this.storeIndex = e),
                                        this.sequences[e].isLoaded &&
                                        (this.material.uniforms.uImage && (this.material.uniforms.uImage.value instanceof $u || this.material.uniforms.uImage.value instanceof Pi) && this.material.uniforms.uImage.value.dispose(),
                                            (this.material.uniforms.uImage.value = this.sequences[e].texture)));
                                    },
                                },
                                {
                                    key: "expand",
                                    value: function (t) {
                                        var e = this,
                                            n = km / this.bounds.width,
                                            r = Dm / this.bounds.height,
                                            i = "direct" === t ? 0 : 0.4;
                                        Er.to(this.rotation, 2, {
                                            z: 0,
                                            ease: "expo.inOut",
                                            delay: i,
                                            onStart: function () {
                                                (e.shadowMesh.renderOrder = 10), (e.mesh.renderOrder = 10), (e.headingText.renderOrder = 11), (e.subText.renderOrder = 12), e.fadeOutText();
                                            },
                                        }),
                                            Er.to(this.material.uniforms.uResolution.value, 2, { x: km, y: Dm, ease: "expo.inOut", delay: i }),
                                            Er.to(this.shadowMaterial.uniforms.uResolution.value, 2, { x: km, y: Dm, ease: "expo.inOut", delay: i }),
                                            Er.to(this.position, 2, { x: 0, y: 0, ease: "expo.inOut", delay: i }),
                                            Er.to(this.scale, 2, {
                                                x: this.scale.x * n,
                                                y: this.scale.y * r,
                                                ease: "expo.inOut",
                                                delay: i,
                                                onComplete: function () {
                                                    !(function (t) {
                                                        sv.switch(0), Pf.reset(), Pf.update(), yg.backgroundTile.enable("skip"), yg.reset(), (yg.backgroundTile.isPaused = !1);
                                                        var e = setInterval(function () {
                                                            yg.backgroundTile.sequences[0].isLoaded &&
                                                            ((yg.backgroundTile.material.uniforms.uImage.value = yg.backgroundTile.sequences[0].texture), Sm.remove(0), Pf.enable(), Cm(), clearInterval(e));
                                                        }, 10);
                                                    })();
                                                },
                                            }),
                                            Er.to(this.material.uniforms.uProgress, 3, { value: 1, ease: "expo.out", delay: i }),
                                            Er.to(this.shadowMaterial.uniforms.uOpacity, 2, { value: 0, ease: "power3.out", delay: i }),
                                            Er.to(this.material.uniforms.uTransition, 2, { value: 0, ease: "power3.out", delay: 1 });
                                    },
                                },
                                {
                                    key: "fadeOutText",
                                    value: function () {
                                        Er.to(this.headingText, 0.25, { fillOpacity: 0, ease: "power2.out" }), Er.to(this.subText, 0.25, { fillOpacity: 0, ease: "power2.out" });
                                    },
                                },
                                {
                                    key: "disable",
                                    value: function () {
                                        this.isDisabled = !0;
                                    },
                                },
                                {
                                    key: "fadeOutMesh",
                                    value: function () {
                                        var t = this;
                                        Er.to(this.material.uniforms.uOpacity, 0.25, {
                                            value: 0,
                                            ease: "power2.out",
                                            onComplete: function () {
                                                t.dispose();
                                            },
                                        });
                                    },
                                },
                                {
                                    key: "remove",
                                    value: function (t) {
                                        0 === t ? this.dispose() : (this.fadeOutText(), this.fadeOutMesh());
                                    },
                                },
                                {
                                    key: "dispose",
                                    value: function () {
                                        this.gl.disposeAll(this);
                                    },
                                },
                            ]) && Vp(e.prototype, n),
                            r && Vp(e, r),
                                o
                        );
                    })(Bo);
                function Jp(t) {
                    return (
                        (function (t) {
                            if (Array.isArray(t)) return $p(t);
                        })(t) ||
                        (function (t) {
                            if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"]) return Array.from(t);
                        })(t) ||
                        (function (t, e) {
                            if (!t) return;
                            if ("string" == typeof t) return $p(t, e);
                            var n = Object.prototype.toString.call(t).slice(8, -1);
                            "Object" === n && t.constructor && (n = t.constructor.name);
                            if ("Map" === n || "Set" === n) return Array.from(t);
                            if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return $p(t, e);
                        })(t) ||
                        (function () {
                            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        })()
                    );
                }
                function $p(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
                    return r;
                }
                function Qp(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                function Kp(t, e, n) {
                    return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = n), t;
                }
                var tm,
                    em = (function () {
                        function t() {
                            var e = this;
                            if (
                                ((function (t, e) {
                                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                                })(this, t),
                                    Kp(this, "setBounds", function () {
                                        if (e.isDisabled) return !1;
                                        (e.offset = e.section.getBoundingClientRect().top - Pf.previousY),
                                            (e.length = km > 900 ? 3 : 2),
                                            (e.start = { scroll: e.offset, sequence: e.offset, cards: e.offset }),
                                            (e.end = { scroll: e.start.scroll + Dm * e.length, sequence: e.start.sequence + Dm * (e.length - 1), cards: e.start.cards + Dm * e.length });
                                    }),
                                    Kp(this, "render", function () {
                                        if (e.isExpanding || e.isDisabled) return !1;
                                        (e.sectionProgress = 1 - (e.end.scroll - Math.abs(Pf.previousY)) / (e.end.scroll - e.start.scroll)),
                                            (e.sectionProgress = Er.utils.clamp(0, 1, e.sectionProgress)),
                                            (e.pinScroll = Dm * e.length * e.sectionProgress),
                                            (e.sequenceProgress = 1 - (e.end.sequence - Math.abs(Pf.previousY)) / (e.end.sequence - e.start.sequence)),
                                            (e.sequenceProgress = Er.utils.clamp(0, 1, e.sequenceProgress)),
                                            (e.cardsProgress = 1 - (e.end.cards - Math.abs(Pf.previousY)) / (e.end.cards - e.start.cards)),
                                            (e.cardsProgress = Er.utils.clamp(0, 1, e.cardsProgress)),
                                            e.cards.forEach(function (t, n) {
                                                e.cardsProgress > 0.75 ? (t.element.style.pointerEvents = "all") : (t.element.style.pointerEvents = "none"),
                                                    (t.x = e.cardsProgress * t.end.x + (1 - e.cardsProgress) * t.start.x),
                                                    (t.rotate = e.cardsProgress * t.end.rotate + (1 - e.cardsProgress) * t.start.rotate),
                                                    (t.y = e.cardsProgress * t.end.y + (1 - e.cardsProgress) * t.start.y + t.hover),
                                                    0 === Pf.speed
                                                        ? (t.element.style.transform = "translate(".concat(t.x.toFixed(2), "%, calc(").concat(t.y.toFixed(2), "% + ").concat(e.pinScroll, "px)) rotate(").concat(t.rotate.toFixed(2), "deg)"))
                                                        : (t.element.style.transform = "translate3d(".concat(t.x.toFixed(2), "%, calc(").concat(t.y.toFixed(2), "% + ").concat(e.pinScroll, "px), 0) rotate(").concat(t.rotate.toFixed(2), "deg)"));
                                                var r = ((t.x + 50) * t.tile.bounds.width) / 100,
                                                    i = Math.abs(Pf.previousY) - e.pinScroll - ((t.y + 50) * t.tile.bounds.height) / 100;
                                                t.tile.updatePosition(i, r), 0 !== Pf.speed && ((t.tile.rotation.z = Ti.degToRad(-1 * t.rotate)), 3 === n && t.tile.checkSequence(e.sequenceProgress));
                                            });
                                    }),
                                    (this.section = document.querySelector(".js-cards")),
                                    !this.section)
                            )
                                return (this.isDisabled = !0), (this.cards = []), !1;
                            (this.wrapper = document.querySelector(".js-wrapper")), (this.pinScroll = 0), this.getCards(), this.setBounds();
                        }
                        var e, n, r;
                        return (
                            (e = t),
                            (n = [
                                {
                                    key: "getCards",
                                    value: function () {
                                        var t = Jp(this.section.querySelectorAll(".js-card"));
                                        (this.cards = [
                                            {
                                                tile: new Zp().init(t[3], yg, { baseName: "Expo", router: "the-expo", length: 32, isFixed: !0 }, { heading: "THE\nEXPO", sub: "COME VISIT OUR POP-UP IN AMSTERDAM" }),
                                                element: t[3],
                                                start: { x: -50, y: -50, rotate: 2.5 },
                                                end: { x: km < 900 ? 0 : 96.5, y: km < 900 ? 0.1 : -48.5, rotate: km < 900 ? -0.5 : 1.5 },
                                                hover: 0,
                                            },
                                            {
                                                tile: new Zp().init(t[2], yg, { baseName: "Masterpieces", router: "the-masterpieces", length: 33, isFixed: !0 }, { heading: "THE\nMASTERPIECES", sub: "DISCOVER THE FCXV DREAM COLLECTION" }),
                                                element: t[2],
                                                start: { x: -50, y: -50, rotate: 3.75 },
                                                end: { x: km < 900 ? 0.125 : 0.25, y: km < 900 ? -99.5 : -50.5, rotate: 1.5 },
                                                hover: 0,
                                            },
                                            {
                                                tile: new Zp().init(t[1], yg, { baseName: "Atelier", router: "in-the-atelier", length: 21, isFixed: !0 }, { heading: "IN THE\nATELIER", sub: "TAKE A LOOK IN OUR ATELIER" }),
                                                element: t[1],
                                                start: { x: -50, y: -50, rotate: 1.25 },
                                                end: { x: -95, y: km < 900 ? 0 : -49.5, rotate: -0.5 },
                                                hover: 0,
                                            },
                                            {
                                                tile: new Zp().init(t[0], yg, { baseName: "Retrospect", router: "in-retrospect", length: 35, isFixed: !1 }, { heading: "IN\nRETROSPECT", sub: "PEEK INTO THE ARCHIVES" }),
                                                element: t[0],
                                                start: { x: -50, y: -50, rotate: 0 },
                                                end: { x: km < 900 ? -98 : -193.5, y: km < 900 ? -99 : -48.5, rotate: km < 900 ? -1 : -2 },
                                                hover: 0,
                                            },
                                        ]),
                                            this.setRenderOrder(),
                                            this.cards.forEach(function (t) {
                                                (t.tile.rotation.z = Ti.degToRad(t.start.rotate)), yg.addTile(t.tile);
                                            }),
                                            this.bindCards();
                                    },
                                },
                                {
                                    key: "setRenderOrder",
                                    value: function () {
                                        (this.cards[3].tile.mesh.renderOrder = 3),
                                            (this.cards[3].tile.headingText.renderOrder = 3),
                                            (this.cards[3].tile.subText.renderOrder = 3),
                                            (this.cards[2].tile.mesh.renderOrder = 0),
                                            (this.cards[2].tile.headingText.renderOrder = 0),
                                            (this.cards[2].tile.subText.renderOrder = 0),
                                            (this.cards[1].tile.mesh.renderOrder = 2),
                                            (this.cards[1].tile.headingText.renderOrder = 2),
                                            (this.cards[1].tile.subText.renderOrder = 2),
                                            (this.cards[0].tile.mesh.renderOrder = 1),
                                            (this.cards[0].tile.headingText.renderOrder = 1),
                                            (this.cards[0].tile.subText.renderOrder = 1);
                                    },
                                },
                                {
                                    key: "bindCards",
                                    value: function () {
                                        var t = this;
                                        this.cards.forEach(function (e, n) {
                                            e.tile.el.addEventListener("mouseenter", function () {
                                                if (t.isExpanding) return !1;
                                                t.checkTween(e), (e.tween = Er.to(e, 1, { hover: -2.5, ease: "expo.out" }));
                                            }),
                                                e.tile.el.addEventListener("mouseleave", function () {
                                                    if (t.isExpanding) return !1;
                                                    t.checkTween(e), (e.tween = Er.to(e, 1, { hover: 0, ease: "expo.out" }));
                                                });
                                        });
                                    },
                                },
                                {
                                    key: "checkTween",
                                    value: function (t) {
                                        t.tween && (t.tween.kill(), (t.tween = !1));
                                    },
                                },
                                {
                                    key: "startTransition",
                                    value: function (t, e) {
                                        var n = this.cards.filter(function (e) {
                                            return t !== e;
                                        });
                                        (this.isExpanding = !0), this.transition(n, e, t);
                                    },
                                },
                                {
                                    key: "resize",
                                    value: function () {
                                        var t = this;
                                        this.setBounds(),
                                            this.cards.forEach(function (e) {
                                                e.tile.setBounds(t.pinScroll, e);
                                            });
                                    },
                                },
                                {
                                    key: "remove",
                                    value: function (t) {
                                        if (this.isDisabled) return !1;
                                        this.cards.forEach(function (e) {
                                            e.tile.disable(), e.tile.remove(t);
                                        });
                                    },
                                },
                                {
                                    key: "transition",
                                    value: function (t, e, n) {
                                        var r = this;
                                        if (
                                            (this.cards.forEach(function (t) {
                                                t.tile.isDisabled = !0;
                                            }),
                                            km < 900)
                                        )
                                            return n.tile.expand("direct"), !1;
                                        1 === e || 3 === e
                                            ? n.tile.expand("direct")
                                            : t.forEach(function (t, i) {
                                                Er.to(t, 1, {
                                                    x: t.x < 0 || 0 === e ? t.x - 25 : t.x + 25,
                                                    ease: "expo.out",
                                                    onStart: function () {
                                                        0 === i && n.tile.expand();
                                                    },
                                                    onUpdate: function () {
                                                        var e = ((t.x + 50) * t.tile.bounds.width) / 100;
                                                        (t.element.style.transform = "translate3d("
                                                            .concat(t.x.toFixed(2), "%, calc(")
                                                            .concat(t.y.toFixed(2), "% + ")
                                                            .concat(r.pinScroll, "px), 0) rotate(")
                                                            .concat(t.rotate.toFixed(2), "deg)")),
                                                            t.tile.updateX(e);
                                                    },
                                                });
                                            });
                                    },
                                },
                            ]) && Qp(e.prototype, n),
                            r && Qp(e, r),
                                t
                        );
                    })();
                function nm(t) {
                    return (
                        (function (t) {
                            if (Array.isArray(t)) return rm(t);
                        })(t) ||
                        (function (t) {
                            if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"]) return Array.from(t);
                        })(t) ||
                        (function (t, e) {
                            if (!t) return;
                            if ("string" == typeof t) return rm(t, e);
                            var n = Object.prototype.toString.call(t).slice(8, -1);
                            "Object" === n && t.constructor && (n = t.constructor.name);
                            if ("Map" === n || "Set" === n) return Array.from(t);
                            if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return rm(t, e);
                        })(t) ||
                        (function () {
                            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        })()
                    );
                }
                function rm(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
                    return r;
                }
                function im(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                var om,
                    am = !1,
                    sm = (function () {
                        function t() {
                            var e,
                                n,
                                r,
                                i = this;
                            !(function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t),
                                (r = function (t) {
                                    t.forEach(function (t) {
                                        var e = t.target.getAttribute("data-type");
                                        if (
                                            (t.intersectionRatio > 0 && ("script" === e ? i.revealScript(t.target) : "lines" === e ? i.revealLines(t.target) : "form" === e ? i.revealForm(t.target) : "fade" === e && i.revealFade(t.target)),
                                                t.isIntersecting)
                                        ) {
                                            if (("VIDEO" !== t.target.tagName || t.target.classList.contains("js-click-to-play") || t.target.play(), t.target.classList.contains("js-glsl-image"))) {
                                                var n = yg.images.find(function (e) {
                                                    return e.el === t.target;
                                                });
                                                n && (n.inView = !0);
                                            } else if (t.target.classList.contains("js-card")) {
                                                var r = Sm.cards.find(function (e) {
                                                    return e.element === t.target;
                                                });
                                                r.tile && (r.tile.inView = !0);
                                            }
                                        } else if (("VIDEO" === t.target.tagName && t.target.pause(), t.target.classList.contains("js-glsl-image"))) {
                                            var o = yg.images.find(function (e) {
                                                return e.el === t.target;
                                            });
                                            o && (o.inView = !1);
                                        } else if (t.target.classList.contains("js-card")) {
                                            var a = Sm.cards.find(function (e) {
                                                return e.element === t.target;
                                            });
                                            a.tile && (a.tile.inView = !1);
                                        }
                                    });
                                }),
                                (n = "callback") in (e = this) ? Object.defineProperty(e, n, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : (e[n] = r),
                                (this.observer = new window.IntersectionObserver(function (t) {
                                    i.callback(t);
                                }));
                        }
                        var e, n, r;
                        return (
                            (e = t),
                            (n = [
                                {
                                    key: "detach",
                                    value: function () {
                                        var t = this;
                                        return (
                                            !!this.entries &&
                                            !(this.entries.length <= 0) &&
                                            void this.entries.forEach(function (e) {
                                                t.observer.unobserve(e);
                                            })
                                        );
                                    },
                                },
                                {
                                    key: "attach",
                                    value: function () {
                                        var t = this;
                                        this.detach();
                                        var e = nm(document.querySelectorAll(".js-observe, .js-glsl-image, .js-card"));
                                        if (e.length <= 0) return !1;
                                        (this.entries = []),
                                            e.forEach(function (e) {
                                                t.entries.push(e), t.observer.observe(e);
                                            });
                                    },
                                },
                                {
                                    key: "revealScript",
                                    value: function (t) {
                                        this.observer.unobserve(t), Nm ? this.blurScript(t) : this.opacityScript(t);
                                    },
                                },
                                {
                                    key: "opacityScript",
                                    value: function (t) {
                                        (t.querySelector("g").style.filter = "none"),
                                            Er.to(t, 0.75, {
                                                opacity: 1,
                                                delay: 0.25,
                                                ease: "power3.out",
                                                onComplete: function () {
                                                    t.closest(".js-intro-section") && (am = !0);
                                                },
                                            });
                                    },
                                },
                                {
                                    key: "blurScript",
                                    value: function (t) {
                                        var e = t.querySelector("feGaussianBlur"),
                                            n = { blur: 7 };
                                        Er.set(t, { opacity: 1 }),
                                            Er.to(n, 0.75, {
                                                blur: 0,
                                                ease: "none",
                                                onUpdate: function () {
                                                    e.setAttribute("stdDeviation", n.blur);
                                                },
                                                onComplete: function () {
                                                    t.closest(".js-intro-section") ? (am = !0) : (t.querySelector("g").style.filter = "none");
                                                },
                                            });
                                    },
                                },
                                {
                                    key: "revealLines",
                                    value: function (t) {
                                        this.observer.unobserve(t);
                                        var e = nm(t.querySelectorAll(".js-transform"));
                                        Er.set(t, { opacity: 1 }), Er.to(e, 0.75, { y: 0, delay: 0.2, stagger: 0.05, ease: "expo.out" }), Er.to(e, 0.75, { delay: 0.2, opacity: 1, stagger: 0.05, ease: "power3.out" });
                                    },
                                },
                                {
                                    key: "revealForm",
                                    value: function (t) {
                                        this.observer.unobserve(t);
                                        var e = nm(t.querySelectorAll(".js-transform")),
                                            n = t.querySelector(".js-line"),
                                            r = t.querySelector(".js-fade");
                                        Er.set(t, { opacity: 1 }),
                                            Er.to(e, 0.5, { y: 0, delay: 1, stagger: 0.1, ease: "expo.out" }),
                                            Er.to(n, 0.5, { scaleX: 1, delay: 0.5, ease: "expo.out" }),
                                            Er.to(r, 0.5, { opacity: 1, delay: 0.75, ease: "power3.out" });
                                    },
                                },
                                {
                                    key: "revealFade",
                                    value: function (t) {
                                        this.observer.unobserve(t);
                                        var e = t.hasAttribute("data-delay") ? parseFloat(t.getAttribute("data-delay")) : 0,
                                            n = nm(t.querySelectorAll(".js-fade"));
                                        Er.set(t, { opacity: 1 }), Er.to(n, 1, { delay: e, opacity: 1, stagger: 0.1, ease: "power2.out" });
                                    },
                                },
                            ]) && im(e.prototype, n),
                            r && im(e, r),
                                t
                        );
                    })();
                function lm(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                var cm = function () {
                        (am = !1), (om = new um());
                    },
                    um = (function () {
                        function t() {
                            var e = this;
                            if (
                                ((function (t, e) {
                                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                                })(this, t),
                                    (this.section = document.querySelector(".js-intro-section")),
                                    !this.section)
                            )
                                return (this.isDisabled = !0), !1;
                            (this.wrapper = this.section.querySelector(".js-wrapper")),
                                (this.svgs = []),
                                Array.from(this.section.querySelectorAll("svg.intro__script")).forEach(function (t) {
                                    e.svgs.push({ element: t, blur: t.querySelector("feGaussianBlur") });
                                }),
                                (this.fade = this.section.querySelector(".js-fade")),
                                this.setBounds();
                        }
                        var e, n, r;
                        return (
                            (e = t),
                            (n = [
                                {
                                    key: "setBounds",
                                    value: function () {
                                        this.scroll = { start: 0, end: Dm };
                                    },
                                },
                                {
                                    key: "resize",
                                    value: function () {
                                        if (this.isDisabled) return !1;
                                        this.setBounds();
                                    },
                                },
                                {
                                    key: "render",
                                    value: function () {
                                        return (
                                            !this.isDisabled &&
                                            ((this.progress = Math.abs(Pf.previousY) / this.scroll.end),
                                                this.progress > 1.5 ? ((this.wrapper.style.transform = "translate(0, ".concat(this.scroll.end, "px)")), !1) : ((this.progress = Er.utils.clamp(0, 1, this.progress)), void this.transform()))
                                        );
                                    },
                                },
                                {
                                    key: "transform",
                                    value: function () {
                                        var t = this;
                                        if (!av.isLoaded || !Pf) return !1;
                                        var e = (this.scroll.end * this.progress).toFixed(2);
                                        if ((0 === Pf.speed ? (this.wrapper.style.transform = "translate(0, ".concat(e, "px)")) : (this.wrapper.style.transform = "translate3d(0, ".concat(e, "px, 0)")), !am)) return !1;
                                        Nm
                                            ? (this.svgs.forEach(function (e) {
                                                e.blur.setAttribute("stdDeviation", "".concat(7 * t.progress));
                                            }),
                                                (this.fade.style.opacity = 1 - 1 * this.progress * 2))
                                            : (this.svgs.forEach(function (e) {
                                                e.element.style.opacity = 1 - 1 * t.progress * 2;
                                            }),
                                                (this.fade.style.opacity = 1 - 1 * this.progress * 2));
                                    },
                                },
                            ]) && lm(e.prototype, n),
                            r && lm(e, r),
                                t
                        );
                    })();
                function hm(t) {
                    return (
                        (function (t) {
                            if (Array.isArray(t)) return dm(t);
                        })(t) ||
                        (function (t) {
                            if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"]) return Array.from(t);
                        })(t) ||
                        (function (t, e) {
                            if (!t) return;
                            if ("string" == typeof t) return dm(t, e);
                            var n = Object.prototype.toString.call(t).slice(8, -1);
                            "Object" === n && t.constructor && (n = t.constructor.name);
                            if ("Map" === n || "Set" === n) return Array.from(t);
                            if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dm(t, e);
                        })(t) ||
                        (function () {
                            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        })()
                    );
                }
                function dm(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
                    return r;
                }
                function fm(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function pm(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                function mm(t, e, n) {
                    return e && pm(t.prototype, e), n && pm(t, n), t;
                }
                var gm = (function () {
                        function t() {
                            var e,
                                n,
                                r,
                                i = this;
                            if (
                                (fm(this, t),
                                    (r = function () {
                                        if (i.isDisabled) return !1;
                                        var t = Math.abs(Pf.previousY) + Dm;
                                        i.instances.forEach(function (e) {
                                            (e.progress = Er.utils.clamp(0, 1, (t - e.top) / e.maxScroll)), e.render();
                                        });
                                    }),
                                    (n = "render") in (e = this) ? Object.defineProperty(e, n, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : (e[n] = r),
                                    (this.items = hm(document.querySelectorAll(".js-parallax"))),
                                this.items.length <= 0)
                            )
                                return (this.isDisabled = !0), !1;
                            (this.instances = []),
                                this.items.forEach(function (t) {
                                    i.instances.push(new vm(t));
                                });
                        }
                        return (
                            mm(t, [
                                {
                                    key: "resize",
                                    value: function () {
                                        if (this.isDisabled) return !1;
                                        this.instances.forEach(function (t) {
                                            t.setBounds();
                                        });
                                    },
                                },
                            ]),
                                t
                        );
                    })(),
                    vm = (function () {
                        function t(e) {
                            var n = this;
                            fm(this, t),
                                (this.item = e),
                                (this.tile = yg.images.find(function (t) {
                                    return n.item === t.el;
                                })),
                                (this.y = 0),
                                this.setBounds(),
                                (this.type = this.item.closest(".text") ? "absolute" : "relative"),
                                (this.item.style.willChange = "transform"),
                                (this.progress = 0);
                        }
                        return (
                            mm(t, [
                                {
                                    key: "setBounds",
                                    value: function () {
                                        (this.distance = this.item.hasAttribute("data-distance") ? this.item.getAttribute("data-distance") : 0), km < 900 && (this.distance /= 2);
                                        var t = this.item.getBoundingClientRect();
                                        (this.maxScroll = Dm + t.height), (this.top = t.top + this.y + Math.abs(Pf.previousY));
                                    },
                                },
                                {
                                    key: "render",
                                    value: function () {
                                        (this.y = this.progress * this.distance * -1 + this.distance / 2),
                                        this.tile && (this.tile.offsetY = this.y),
                                            0 === Pf.speed
                                                ? "relative" === this.type
                                                    ? (this.item.style.transform = "translate(0, ".concat(this.y, "px)"))
                                                    : (this.item.style.transform = "translate(-50%, calc(-50% + ".concat(this.y, "px))"))
                                                : "relative" === this.type
                                                    ? (this.item.style.transform = "translate3d(0, ".concat(this.y, "px, 0)"))
                                                    : (this.item.style.transform = "translate3d(-50%, calc(-50% + ".concat(this.y, "px), 0)"));
                                    },
                                },
                            ]),
                                t
                        );
                    })();
                function ym(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                function xm(t) {
                    return (
                        (function (t) {
                            if (Array.isArray(t)) return _m(t);
                        })(t) ||
                        (function (t) {
                            if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"]) return Array.from(t);
                        })(t) ||
                        (function (t, e) {
                            if (!t) return;
                            if ("string" == typeof t) return _m(t, e);
                            var n = Object.prototype.toString.call(t).slice(8, -1);
                            "Object" === n && t.constructor && (n = t.constructor.name);
                            if ("Map" === n || "Set" === n) return Array.from(t);
                            if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _m(t, e);
                        })(t) ||
                        (function () {
                            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        })()
                    );
                }
                function _m(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
                    return r;
                }
                function bm(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function wm(t, e, n) {
                    return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = n), t;
                }
                var Sm,
                    Mm,
                    Tm,
                    Em,
                    Am = function t() {
                        var e = this;
                        bm(this, t),
                            wm(this, "resize", function () {
                                if (e.isDisabled) return !1;
                                e.pins.forEach(function (t) {
                                    t.resize();
                                });
                            }),
                            wm(this, "render", function () {
                                if (e.isDisabled) return !1;
                                e.pins.forEach(function (t) {
                                    t.render();
                                });
                            }),
                            (this.pins = []);
                        var n = xm(document.querySelectorAll(".js-pin"));
                        if (n.length <= 0) return (this.isDisabled = !0), !1;
                        n.forEach(function (t) {
                            var n = new Lm(t);
                            e.pins.push(n);
                        });
                    },
                    Lm = (function () {
                        function t(e) {
                            var n = this;
                            bm(this, t),
                                (this.section = e),
                                (this.wrapper = e.querySelector(".js-wrapper")),
                                (this.overlay = e.querySelector(".js-overlay")),
                                (this.wrapper.style.willChange = "transform"),
                                (this.moveXCheck = !1),
                            this.overlay && ((this.overlay.style.willChange = "transform"), (this.moveXCheck = this.overlay.classList.contains("js-move-x"))),
                                (this.tiles = []),
                                xm(this.section.querySelectorAll(".js-glsl-image")).forEach(function (t) {
                                    var e = yg.images.find(function (e) {
                                        return e.el === t;
                                    });
                                    e && n.tiles.push(e);
                                }),
                                this.setBounds();
                        }
                        var e, n, r;
                        return (
                            (e = t),
                            (n = [
                                {
                                    key: "setBounds",
                                    value: function () {
                                        var t = this,
                                            e = this.section.getBoundingClientRect();
                                        (this.start = { scroll: e.top - Pf.previousY }), (this.end = { scroll: this.start.scroll + e.height - Dm }), (this.verticalScroll = e.height - Dm), (this.horizontalScroll = 1 * km);
                                        var n = xm(this.wrapper.children);
                                        n.forEach(function (e, r) {
                                            if (r < n.length) {
                                                var i = km < 900 ? 20 : 10;
                                                t.horizontalScroll += (i / 1440) * km;
                                            }
                                            t.horizontalScroll += e.getBoundingClientRect().width;
                                        });
                                    },
                                },
                                {
                                    key: "resize",
                                    value: function () {
                                        this.setBounds();
                                    },
                                },
                                {
                                    key: "render",
                                    value: function () {
                                        var t = 1 - (this.end.scroll - -1 * Pf.previousY) / (this.end.scroll - this.start.scroll);
                                        t = Er.utils.clamp(0, 1, t);
                                        var e = this.horizontalScroll * t * -1 + km,
                                            n = this.verticalScroll * t;
                                        0 === Pf.speed ? (this.wrapper.style.transform = "translate(".concat(e, "px, ").concat(n, "px)")) : (this.wrapper.style.transform = "translate3d(".concat(e, "px, ").concat(n, "px, 0)")),
                                        this.overlay &&
                                        (0 === Pf.speed
                                            ? (this.overlay.style.transform = "translate(".concat(this.moveXCheck ? this.horizontalScroll * t * -1 * 0.75 : 0, "px, ").concat(n, "px)"))
                                            : (this.overlay.style.transform = "translate3d(".concat(this.moveXCheck ? this.horizontalScroll * t * -1 * 0.75 : 0, "px, ").concat(n, "px, 0)"))),
                                            this.tiles.forEach(function (t) {
                                                (t.overwriteY = Math.abs(Pf.previousY.toFixed(2)) - n), (t.overwriteX = e - km);
                                            });
                                    },
                                },
                            ]) && ym(e.prototype, n),
                            r && ym(e, r),
                                t
                        );
                    })(),
                    Cm = function () {
                        (document.body.style.pointerEvents = "none"),
                        ov || Fm(),
                            tm.attach(),
                            yg.addImages(),
                            yg.addScarf(),
                            (Sm = new em()),
                            (Mm = new gm()),
                            (Em = new Am()),
                            (Tm = new Bf()),
                            cm(),
                            (function () {
                                var t = document.querySelector(".js-form");
                                if (!t) return !1;
                                new Wf(t);
                            })(),
                            setTimeout(function () {
                                document.body.style.pointerEvents = "all";
                            }, 1e3);
                    },
                    Rm = n(6285);
                function Pm(t) {
                    return (
                        (function (t) {
                            if (Array.isArray(t)) return Im(t);
                        })(t) ||
                        (function (t) {
                            if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"]) return Array.from(t);
                        })(t) ||
                        (function (t, e) {
                            if (!t) return;
                            if ("string" == typeof t) return Im(t, e);
                            var n = Object.prototype.toString.call(t).slice(8, -1);
                            "Object" === n && t.constructor && (n = t.constructor.name);
                            if ("Map" === n || "Set" === n) return Array.from(t);
                            if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Im(t, e);
                        })(t) ||
                        (function () {
                            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        })()
                    );
                }
                function Im(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
                    return r;
                }
                navigator.userAgent.match(/Android/i) ||
                navigator.userAgent.match(/webOS/i) ||
                navigator.userAgent.match(/iPhone/i) ||
                navigator.userAgent.match(/iPad/i) ||
                navigator.userAgent.match(/iPod/i) ||
                navigator.userAgent.match(/BlackBerry/i) ||
                navigator.userAgent.match(/Windows Phone/i);
                var Om = function (t, e, n) {
                        return (1 - n) * t + n * e;
                    },
                    Dm = window.innerHeight,
                    km = window.innerWidth;
                document.documentElement.style.setProperty("--app-height", "".concat(Dm, "px"));
                window.addEventListener("resize", function () {
                    (Dm = window.innerHeight),
                        (km = window.innerWidth),
                        document.documentElement.style.setProperty("--app-height", "".concat(Dm, "px")),
                    Pf && (Pf.resize(), Af && Af.resize()),
                    Em && Em.resize(),
                    yg && yg.resize(),
                    Sm && Sm.resize(),
                    Mm && Mm.resize(),
                    Tm && Tm.resize(),
                    om && om.resize();
                });
                var Um = !!(0, Rm.d)(),
                    Fm = function () {
                        Um &&
                        Pm(document.querySelectorAll("img")).forEach(function (t) {
                            t.classList.contains("js-disable") ||
                            t.closest("#StayFocusd-infobar") ||
                            ((t.src = t.src.replaceAll("jpg", "webp")),
                                (t.src = t.src.replaceAll("png", "webp")),
                                t.setAttribute("data-big", "".concat(t.getAttribute("data-big").replaceAll("jpg", "webp"))),
                                t.setAttribute("data-big", "".concat(t.getAttribute("data-big").replaceAll("png", "webp"))),
                                t.setAttribute("data-small", "".concat(t.getAttribute("data-small").replaceAll("jpg", "webp"))),
                                t.setAttribute("data-small", "".concat(t.getAttribute("data-small").replaceAll("png", "webp"))));
                        });
                    };
                Fm();
                var Nm = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                function zm(t) {
                    return (zm =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                return typeof t;
                            }
                            : function (t) {
                                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                            })(t);
                }
                function Bm(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function Gm(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                function Hm(t, e) {
                    return (Hm =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function Vm(t) {
                    var e = (function () {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                        if (Reflect.construct.sham) return !1;
                        if ("function" == typeof Proxy) return !0;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                        } catch (t) {
                            return !1;
                        }
                    })();
                    return function () {
                        var n,
                            r = jm(t);
                        if (e) {
                            var i = jm(this).constructor;
                            n = Reflect.construct(r, arguments, i);
                        } else n = r.apply(this, arguments);
                        return Wm(this, n);
                    };
                }
                function Wm(t, e) {
                    if (e && ("object" === zm(e) || "function" == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                    return (function (t) {
                        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return t;
                    })(t);
                }
                function jm(t) {
                    return (jm = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                            return t.__proto__ || Object.getPrototypeOf(t);
                        })(t);
                }
                var qm = (function (t) {
                    !(function (t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && Hm(t, e);
                    })(o, t);
                    var e,
                        n,
                        r,
                        i = Vm(o);
                    function o() {
                        return Bm(this, o), i.apply(this, arguments);
                    }
                    return (
                        (e = o),
                        (n = [
                            {
                                key: "init",
                                value: function (t, e) {
                                    return (
                                        (this.loader = new Ed()),
                                            (this.gl = e),
                                            (this.el = t),
                                            (this.type = "background"),
                                            (this.isLoaded = !1),
                                            (this.srcType = Um ? "webp" : "jpg"),
                                            this.setBounds(),
                                            this.setupTypes(),
                                            (this.geometry = new ls(1, 1, 2, 2)),
                                            (this.material = new qa({
                                                vertexShader: Lf,
                                                fragmentShader: Cf,
                                                transparent: !0,
                                                uniforms: { uResolution: { value: new Ei(km, Dm) }, uResolutionTexture: { value: new Ei(1920, 1080) }, uImage: { value: !1 }, uOpacity: { value: 1 }, precision: "lowp" },
                                            })),
                                            this.createMesh(),
                                            this
                                    );
                                },
                            },
                            {
                                key: "setBounds",
                                value: function () {
                                    (this.rect = this.el.getBoundingClientRect()),
                                        (this.bounds = { left: this.rect.left, top: this.rect.top, width: this.rect.width, height: this.rect.height }),
                                        this.updateSize(),
                                        this.updatePosition(),
                                    this.material && ((this.material.uniforms.uResolution.value = new Ei(km, Dm)), (this.end = Math.abs(Pf.maxScroll)));
                                },
                            },
                            {
                                key: "calculateUnitSize",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.position.z,
                                        e = (this.gl.camera.fov * Math.PI) / 180,
                                        n = 2 * Math.tan(e / 2) * t,
                                        r = n * this.gl.camera.aspect;
                                    return { width: r, height: n };
                                },
                            },
                            {
                                key: "updateSize",
                                value: function () {
                                    this.camUnit = this.calculateUnitSize(this.gl.camera.position.z - this.position.z);
                                    var t = this.bounds.width / km,
                                        e = this.bounds.height / Dm;
                                    t && e && ((this.scale.x = this.camUnit.width * t), (this.scale.y = this.camUnit.height * e));
                                },
                            },
                            {
                                key: "updateY",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                        e = this.bounds.top;
                                    (this.position.y = this.camUnit.height / 2 - this.scale.y / 2), (this.position.y -= ((e - t) / Dm) * this.camUnit.height);
                                },
                            },
                            {
                                key: "updateX",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                        e = this.bounds.left;
                                    (this.position.x = -this.camUnit.width / 2 + this.scale.x / 2), (this.position.x += ((e + t) / km) * this.camUnit.width);
                                },
                            },
                            {
                                key: "updatePosition",
                                value: function (t, e) {
                                    this.updateY(t), this.updateX(e);
                                },
                            },
                            {
                                key: "createMesh",
                                value: function () {
                                    var t = new Ba(this.geometry, this.material);
                                    this.add(t);
                                },
                            },
                            {
                                key: "setupTypes",
                                value: function () {
                                    this.getRouter(), this.loadCriticSequences();
                                },
                            },
                            {
                                key: "getRouter",
                                value: function () {
                                    (this.router = document.querySelector("[data-router-view]").getAttribute("data-router-view")),
                                        (this.baseName = "Home"),
                                        "home" === this.router || "coming-soon" === this.router
                                            ? ((this.router = "home"), (this.baseName = "Home"), (this.criticSequencesLength = 26), (this.deferSequencesLength = 191))
                                            : "in-retrospect" === this.router
                                                ? ((this.baseName = "Retrospect"), (this.criticSequencesLength = 35), (this.deferSequencesLength = 359))
                                                : "in-the-atelier" === this.router
                                                    ? ((this.baseName = "Atelier"), (this.criticSequencesLength = 22), (this.deferSequencesLength = 311))
                                                    : "the-masterpieces" === this.router
                                                        ? ((this.baseName = "Masterpieces"), (this.criticSequencesLength = 34), (this.deferSequencesLength = 311))
                                                        : "the-expo" === this.router && ((this.baseName = "Expo"), (this.criticSequencesLength = 33), (this.deferSequencesLength = 191));
                                },
                            },
                            {
                                key: "loadCriticSequences",
                                value: function () {
                                    var t = this;
                                    (this.criticSequences = []), (this.promises = []);
                                    for (var e = 0; e < this.criticSequencesLength; e++)
                                        this.criticSequences.push({
                                            src: ""
                                                .concat(window.location.origin, "/wp-content/themes/fabiennechapot/render/")
                                                .concat(this.router, "/BG_")
                                                .concat(this.baseName, "_00")
                                                .concat(e.toString().padStart(3, "0"), ".")
                                                .concat(this.srcType),
                                            isLoaded: !1,
                                        });
                                    this.criticSequences.forEach(function (e) {
                                        var n = new Promise(function (n) {
                                            t.loader.load(e.src, function (r) {
                                                (r.minFilter = Br), (e.texture = r), (e.isLoaded = !0), (av.currentPercentage += 100 / t.criticSequencesLength), n();
                                            });
                                        });
                                        t.promises.push(n);
                                    });
                                },
                            },
                            {
                                key: "loadSequences",
                                value: function () {
                                    var t = this;
                                    (this.start = 0), (this.end = Math.abs(Pf.maxScroll)), (this.sequences = []);
                                    for (var e = this.criticSequencesLength - 1; e <= this.deferSequencesLength; e++)
                                        this.sequences.push({
                                            src: ""
                                                .concat(window.location.origin, "/wp-content/themes/fabiennechapot/render/")
                                                .concat(this.router, "/BG_")
                                                .concat(this.baseName, "_00")
                                                .concat(e.toString().padStart(3, "0"), ".")
                                                .concat(this.srcType),
                                            isLoaded: !1,
                                        });
                                    this.sequences.forEach(function (e) {
                                        t.loader.load(e.src, function (t) {
                                            (t.minFilter = Br), (e.texture = t), (e.isLoaded = !0);
                                        });
                                    });
                                },
                            },
                            {
                                key: "disable",
                                value: function (t) {
                                    if (((this.isPaused = !0), "hold" === t)) return !1;
                                    Er.to(this.material.uniforms.uOpacity, 0.25, { value: 0, ease: "power2.out" });
                                },
                            },
                            {
                                key: "enable",
                                value: function (t) {
                                    this.getRouter(), "skip" !== t && (this.loadCriticSequences(), this.checkCriticSequences()), this.loadSequences();
                                },
                            },
                            {
                                key: "checkCriticSequences",
                                value: function () {
                                    var t = this;
                                    Cm(),
                                        Promise.all(this.promises).then(function () {
                                            var e = { value: 0 };
                                            Er.to(t.material.uniforms.uOpacity, 0.25, { value: 1, ease: "power2.out" }),
                                                (t.tween = Er.to(e, 0.33, {
                                                    value: t.criticSequencesLength - 1,
                                                    ease: "none",
                                                    onUpdate: function () {
                                                        t.material.uniforms.uImage.value = t.criticSequences[parseInt(e.value)].texture;
                                                    },
                                                    onComplete: function () {
                                                        (t.isPaused = !1), Pf.enable();
                                                    },
                                                }));
                                        });
                                },
                            },
                            {
                                key: "checkSequence",
                                value: function () {
                                    return (
                                        !(this.isPaused || !this.isLoaded || !this.sequences) &&
                                        ((this.index = Math.abs(Pf.previousY.toFixed(2)) / this.end),
                                            (this.index = parseInt(this.index * (this.sequences.length - 1))),
                                        !(this.storedIndex === this.index || !this.sequences[this.index]) &&
                                        void (
                                            this.sequences[this.index].isLoaded &&
                                            (this.material.uniforms.uImage && (this.material.uniforms.uImage.value instanceof $u || this.material.uniforms.uImage.value instanceof Pi) && this.material.uniforms.uImage.value.dispose(),
                                                (this.material.uniforms.uImage.value = this.sequences[this.index].texture),
                                                (this.storedIndex = this.index))
                                        ))
                                    );
                                },
                            },
                        ]) && Gm(e.prototype, n),
                        r && Gm(e, r),
                            o
                    );
                })(Bo);
                function Xm(t) {
                    return (Xm =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                return typeof t;
                            }
                            : function (t) {
                                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                            })(t);
                }
                function Ym(t) {
                    return (
                        (function (t) {
                            if (Array.isArray(t)) return Zm(t);
                        })(t) ||
                        (function (t) {
                            if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"]) return Array.from(t);
                        })(t) ||
                        (function (t, e) {
                            if (!t) return;
                            if ("string" == typeof t) return Zm(t, e);
                            var n = Object.prototype.toString.call(t).slice(8, -1);
                            "Object" === n && t.constructor && (n = t.constructor.name);
                            if ("Map" === n || "Set" === n) return Array.from(t);
                            if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Zm(t, e);
                        })(t) ||
                        (function () {
                            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        })()
                    );
                }
                function Zm(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
                    return r;
                }
                function Jm(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function $m(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                function Qm(t, e) {
                    return (Qm =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function Km(t) {
                    var e = (function () {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                        if (Reflect.construct.sham) return !1;
                        if ("function" == typeof Proxy) return !0;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                        } catch (t) {
                            return !1;
                        }
                    })();
                    return function () {
                        var n,
                            r = eg(t);
                        if (e) {
                            var i = eg(this).constructor;
                            n = Reflect.construct(r, arguments, i);
                        } else n = r.apply(this, arguments);
                        return tg(this, n);
                    };
                }
                function tg(t, e) {
                    if (e && ("object" === Xm(e) || "function" == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                    return (function (t) {
                        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return t;
                    })(t);
                }
                function eg(t) {
                    return (eg = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                            return t.__proto__ || Object.getPrototypeOf(t);
                        })(t);
                }
                var ng = (function (t) {
                        !(function (t, e) {
                            if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                            (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && Qm(t, e);
                        })(o, t);
                        var e,
                            n,
                            r,
                            i = Km(o);
                        function o() {
                            return Jm(this, o), i.apply(this, arguments);
                        }
                        return (
                            (e = o),
                            (n = [
                                {
                                    key: "init",
                                    value: function (t, e) {
                                        return (
                                            (this.loader = new Ed()),
                                                (this.gl = e),
                                                (this.el = t),
                                                (this.type = "image"),
                                                (this.mode = this.el.getAttribute("data-mode")),
                                                this.setBounds(),
                                                (this.geometry = new ls(1, 1, 2, 2)),
                                                (this.material = new qa({
                                                    vertexShader:
                                                        "precision mediump float;\n#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main(){\n  vec3 pos = position;\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n",
                                                    fragmentShader:
                                                        "precision highp float;\n#define GLSLIFY 1\nvarying vec2 vUv;\nuniform vec2 uResolution;\nuniform vec2 uResolutionTexture;\nuniform sampler2D uImage;\nuniform float uOpacity;\nuniform float uProgress;\n\nvoid main() {\n  vec2 ratio = vec2(min((uResolution.x / uResolution.y) / (uResolutionTexture.x / uResolutionTexture.y), 1.0), min((uResolution.y / uResolution.x) / (uResolutionTexture.y / uResolutionTexture.x), 1.0));\n  vec2 uv = vec2(vUv.x * ratio.x + (1.0 - ratio.x) * 0.5, vUv.y * ratio.y + (1.0 - ratio.y) * 0.5);\n  uv = mix(vec2(uProgress * 0.125, uProgress * 0.125), vec2(1.0 - uProgress * 0.125, 1.0 - uProgress * 0.125), uv);\n\n  vec4 color = texture2D(uImage, uv);\n  color.a *= uOpacity;\n  \n  gl_FragColor = color;\n}\n",
                                                    transparent: !0,
                                                    uniforms: {
                                                        uResolution: { value: new Ei(this.bounds.width, this.bounds.height) },
                                                        uResolutionTexture: { value: new Ei(parseInt(this.el.getAttribute("data-width")), parseInt(this.el.getAttribute("data-height"))) },
                                                        uOpacity: { value: 1 },
                                                        uImage: { value: !1 },
                                                        uProgress: { value: 0 },
                                                        precision: "lowp",
                                                    },
                                                })),
                                                this.loadTexture(),
                                                this.createMesh(),
                                                this.checkModes(),
                                                this
                                        );
                                    },
                                },
                                {
                                    key: "setBounds",
                                    value: function () {
                                        var t = Pf ? Math.abs(Pf.previousY) : 0;
                                        t || (t = 0), (t = this.overwriteY ? this.overwriteY : t);
                                        var e = 0;
                                        (e = this.overwriteX ? e - this.overwriteX : 0),
                                            (this.rect = this.el.getBoundingClientRect()),
                                            (this.bounds = { left: this.rect.left + e, top: this.rect.top + t, width: this.rect.width, height: this.rect.height }),
                                            (this.offsetY = 0),
                                            this.updateSize(),
                                            this.updatePosition(),
                                        "zoom" === this.mode && this.setZoomBounds();
                                    },
                                },
                                {
                                    key: "calculateUnitSize",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.position.z,
                                            e = (this.gl.camera.fov * Math.PI) / 180,
                                            n = 2 * Math.tan(e / 2) * t,
                                            r = n * this.gl.camera.aspect;
                                        return { width: r, height: n };
                                    },
                                },
                                {
                                    key: "updateSize",
                                    value: function () {
                                        this.camUnit = this.calculateUnitSize(this.gl.camera.position.z - this.position.z);
                                        var t = this.bounds.width / km,
                                            e = this.bounds.height / Dm;
                                        t && e && ((this.scale.x = this.camUnit.width * t), (this.scale.y = this.camUnit.height * e));
                                    },
                                },
                                {
                                    key: "updateY",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                            e = this.bounds.top;
                                        (this.position.y = this.camUnit.height / 2 - this.scale.y / 2), (this.position.y -= ((e - t) / Dm) * this.camUnit.height);
                                    },
                                },
                                {
                                    key: "updateX",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                            e = this.bounds.left;
                                        (this.position.x = -this.camUnit.width / 2 + this.scale.x / 2), (this.position.x += ((e + t) / km) * this.camUnit.width);
                                    },
                                },
                                {
                                    key: "updatePosition",
                                    value: function (t, e) {
                                        this.overwriteY && this.overwriteX ? (this.updateY(this.overwriteY), this.updateX(this.overwriteX)) : (this.updateY(t - this.offsetY), this.updateX(e));
                                    },
                                },
                                {
                                    key: "loadTexture",
                                    value: function () {
                                        var t = this;
                                        if ("VIDEO" === this.el.tagName) this.material.uniforms.uImage.value = new Zu(this.el);
                                        else {
                                            var e = km < 800 ? this.el.getAttribute("data-small") : this.el.getAttribute("data-big");
                                            this.loader.load(e, function (e) {
                                                (e.minFilter = Br), (t.material.uniforms.uImage.value = e);
                                            });
                                        }
                                    },
                                },
                                {
                                    key: "createMesh",
                                    value: function () {
                                        var t = new Ba(this.geometry, this.material);
                                        this.add(t);
                                    },
                                },
                                {
                                    key: "fadeOut",
                                    value: function () {
                                        var t = this;
                                        Er.to(this.material.uniforms.uOpacity, 0.25, {
                                            value: 0,
                                            ease: "power2.out",
                                            onComplete: function () {
                                                t.dispose();
                                            },
                                        });
                                    },
                                },
                                {
                                    key: "remove",
                                    value: function (t) {
                                        (this.isDisabled = !0), 0 === t ? this.dispose() : this.fadeOut();
                                    },
                                },
                                {
                                    key: "dispose",
                                    value: function () {
                                        this.gl.disposeAll(this);
                                    },
                                },
                                {
                                    key: "checkModes",
                                    value: function () {
                                        "hover" === this.mode ? this.bind() : "zoom" === this.mode && this.setZoomBounds(), "VIDEO" === this.el.tagName && this.bindVideo();
                                    },
                                },
                                {
                                    key: "bind",
                                    value: function () {
                                        var t = this;
                                        this.el.addEventListener("mouseenter", function () {
                                            t.checkTween(), (t.zoomTween = Er.to(t.material.uniforms.uProgress, 1.5, { value: 0.2, ease: "expo.out" }));
                                        }),
                                            this.el.addEventListener("mouseleave", function () {
                                                t.checkTween(), (t.zoomTween = Er.to(t.material.uniforms.uProgress, 1.5, { value: 0, ease: "expo.out" }));
                                            });
                                    },
                                },
                                {
                                    key: "checkTween",
                                    value: function () {
                                        this.zoomTween && (this.zoomTween.kill(), (this.zoomTween = !1));
                                    },
                                },
                                {
                                    key: "setZoomBounds",
                                    value: function () {
                                        this.scroll = { start: this.bounds.top - Dm, end: this.bounds.top + this.bounds.height };
                                    },
                                },
                                {
                                    key: "checkZoom",
                                    value: function () {
                                        var t = 1 - (this.scroll.end - Math.abs(Pf.previousY)) / (this.scroll.end - this.scroll.start);
                                        (t = Er.utils.clamp(0, 1, t)), (this.material.uniforms.uProgress.value = t);
                                    },
                                },
                                {
                                    key: "bindVideo",
                                    value: function () {
                                        var t = this;
                                        this.el.load(),
                                        this.el.classList.contains("js-click-to-play") &&
                                        (this.el.addEventListener("play", function () {
                                            Er.to(t.el.closest(".atelier-item").querySelector(".atelier-item__button"), 0.5, { opacity: 0, ease: "power2.out" });
                                        }),
                                            this.el.addEventListener("pause", function () {
                                                Er.to(t.el.closest(".atelier-item").querySelector(".atelier-item__button"), 0.5, { opacity: 1, ease: "power2.out" });
                                            })),
                                            this.el.addEventListener("click", function () {
                                                t.el.classList.contains("js-click-to-play") ? ((t.el.muted = !1), t.el.paused ? (t.el.play(), rg(t.el)) : t.el.pause()) : (t.el.muted ? (t.el.muted = !1) : (t.el.muted = !0), ig(t.el));
                                            });
                                    },
                                },
                            ]) && $m(e.prototype, n),
                            r && $m(e, r),
                                o
                        );
                    })(Bo),
                    rg = function (t) {
                        Ym(document.querySelectorAll(".js-click-to-play")).forEach(function (e) {
                            e !== t && (Er.to(e.closest(".atelier-item").querySelector(".atelier-item__button"), 0.5, { opacity: 1, ease: "power2.out" }), e.pause());
                        });
                    },
                    ig = function (t) {
                        Ym(document.querySelectorAll("video")).forEach(function (e) {
                            e !== t && (e.muted = !0);
                        });
                    };
                function og(t) {
                    return (og =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                return typeof t;
                            }
                            : function (t) {
                                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                            })(t);
                }
                function ag(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function sg(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                function lg(t, e) {
                    return (lg =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function cg(t) {
                    var e = (function () {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                        if (Reflect.construct.sham) return !1;
                        if ("function" == typeof Proxy) return !0;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                        } catch (t) {
                            return !1;
                        }
                    })();
                    return function () {
                        var n,
                            r = hg(t);
                        if (e) {
                            var i = hg(this).constructor;
                            n = Reflect.construct(r, arguments, i);
                        } else n = r.apply(this, arguments);
                        return ug(this, n);
                    };
                }
                function ug(t, e) {
                    if (e && ("object" === og(e) || "function" == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                    return (function (t) {
                        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return t;
                    })(t);
                }
                function hg(t) {
                    return (hg = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                            return t.__proto__ || Object.getPrototypeOf(t);
                        })(t);
                }
                var dg = (function (t) {
                    !(function (t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && lg(t, e);
                    })(o, t);
                    var e,
                        n,
                        r,
                        i = cg(o);
                    function o() {
                        return ag(this, o), i.apply(this, arguments);
                    }
                    return (
                        (e = o),
                        (n = [
                            {
                                key: "init",
                                value: function (t, e) {
                                    return (
                                        (this.loader = new Ed()),
                                            (this.gl = e),
                                            (this.el = t),
                                            (this.type = "scarf"),
                                            (this.isLoaded = !1),
                                            (this.srcType = Um ? "webp" : "png"),
                                            this.setBounds(),
                                            this.loadSequences(),
                                            (this.geometry = new ls(1, 1, 2, 2)),
                                            (this.material = new qa({
                                                vertexShader: Lf,
                                                fragmentShader: Cf,
                                                transparent: !0,
                                                uniforms: { uResolution: { value: new Ei(km, Dm) }, uResolutionTexture: { value: new Ei(1920, 1080) }, uImage: { value: !1 }, uOpacity: { value: 1 }, precision: "lowp" },
                                            })),
                                            this.createMesh(),
                                            this
                                    );
                                },
                            },
                            {
                                key: "setBounds",
                                value: function () {
                                    (this.rect = this.el.getBoundingClientRect()),
                                        (this.bounds = { left: this.rect.left, top: this.rect.top, width: this.rect.width, height: this.rect.height }),
                                        this.updateSize(),
                                        this.updatePosition(),
                                    this.material && ((this.material.uniforms.uResolution.value = new Ei(km, Dm)), (this.start = 0.25 * Dm), (this.end = 2 * Dm));
                                },
                            },
                            {
                                key: "calculateUnitSize",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.position.z,
                                        e = (this.gl.camera.fov * Math.PI) / 180,
                                        n = 2 * Math.tan(e / 2) * t,
                                        r = n * this.gl.camera.aspect;
                                    return { width: r, height: n };
                                },
                            },
                            {
                                key: "updateSize",
                                value: function () {
                                    this.camUnit = this.calculateUnitSize(this.gl.camera.position.z - this.position.z);
                                    var t = this.bounds.width / km,
                                        e = this.bounds.height / Dm;
                                    t && e && ((this.scale.x = this.camUnit.width * t), (this.scale.y = this.camUnit.height * e));
                                },
                            },
                            {
                                key: "updateY",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                        e = this.bounds.top;
                                    (this.position.y = this.camUnit.height / 2 - this.scale.y / 2), (this.position.y -= ((e - t) / Dm) * this.camUnit.height);
                                },
                            },
                            {
                                key: "updateX",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                        e = this.bounds.left;
                                    (this.position.x = -this.camUnit.width / 2 + this.scale.x / 2), (this.position.x += ((e + t) / km) * this.camUnit.width);
                                },
                            },
                            {
                                key: "updatePosition",
                                value: function (t, e) {
                                    this.updateY(t), this.updateX(e);
                                },
                            },
                            {
                                key: "createMesh",
                                value: function () {
                                    var t = new Ba(this.geometry, this.material);
                                    this.add(t);
                                },
                            },
                            {
                                key: "loadSequences",
                                value: function () {
                                    var t = this;
                                    (this.start = 0.33 * Dm), (this.end = 2 * Dm), (this.sequences = []);
                                    for (var e = 1; e <= 137; e++)
                                        this.sequences.push({
                                            src: "".concat(window.location.origin, "/wp-content/themes/fabiennechapot/render/scarf-hq/Scarf_HQ_Render0").concat(e.toString().padStart(3, "0"), ".").concat(this.srcType),
                                            isLoaded: !1,
                                        });
                                    this.sequences.forEach(function (e) {
                                        t.loader.load(e.src, function (t) {
                                            (t.minFilter = Br), (e.texture = t), (e.isLoaded = !0);
                                        });
                                    });
                                },
                            },
                            {
                                key: "checkSequence",
                                value: function () {
                                    return (
                                        !(this.isPaused || !this.sequences) &&
                                        ((this.index = 1 - (this.end - Math.abs(Pf.previousY).toFixed(2)) / (this.end - this.start)),
                                            (this.index = Er.utils.clamp(0, 1, this.index)),
                                            (this.index = parseInt(this.index * (this.sequences.length - 1))),
                                        !(this.storedIndex === this.index || !this.sequences[this.index]) &&
                                        void (
                                            this.sequences[this.index].isLoaded &&
                                            (this.material.uniforms.uImage && (this.material.uniforms.uImage.value instanceof $u || this.material.uniforms.uImage.value instanceof Pi) && this.material.uniforms.uImage.value.dispose(),
                                                (this.material.uniforms.uImage.value = this.sequences[this.index].texture),
                                                (this.storedIndex = this.index))
                                        ))
                                    );
                                },
                            },
                            {
                                key: "fadeOut",
                                value: function () {
                                    var t = this;
                                    Er.to(this.material.uniforms.uOpacity, 0.25, {
                                        value: 0,
                                        ease: "power2.out",
                                        onComplete: function () {
                                            t.dispose();
                                        },
                                    });
                                },
                            },
                            {
                                key: "remove",
                                value: function (t) {
                                    (this.isDisabled = !0), 0 === t ? this.dispose() : this.fadeOut();
                                },
                            },
                            {
                                key: "dispose",
                                value: function () {
                                    this.gl.disposeAll(this);
                                },
                            },
                        ]) && sg(e.prototype, n),
                        r && sg(e, r),
                            o
                    );
                })(Bo);
                function fg(t) {
                    return (
                        (function (t) {
                            if (Array.isArray(t)) return mg(t);
                        })(t) ||
                        (function (t) {
                            if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"]) return Array.from(t);
                        })(t) ||
                        pg(t) ||
                        (function () {
                            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        })()
                    );
                }
                function pg(t, e) {
                    if (t) {
                        if ("string" == typeof t) return mg(t, e);
                        var n = Object.prototype.toString.call(t).slice(8, -1);
                        return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Array.from(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? mg(t, e) : void 0;
                    }
                }
                function mg(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
                    return r;
                }
                function gg(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                function vg(t, e, n) {
                    return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = n), t;
                }
                var yg,
                    xg = (function () {
                        function t() {
                            var e = this;
                            !(function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t),
                                vg(this, "render", function () {
                                    e.updateTiles(), e.renderer.render(e.scene, e.camera);
                                }),
                                vg(this, "resize", function () {
                                    e.renderer.setSize(km, Dm), e.camera.updateProjectionMatrix();
                                    var t,
                                        n = (function (t, e) {
                                            var n = ("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"];
                                            if (!n) {
                                                if (Array.isArray(t) || (n = pg(t)) || (e && t && "number" == typeof t.length)) {
                                                    n && (t = n);
                                                    var r = 0,
                                                        i = function () {};
                                                    return {
                                                        s: i,
                                                        n: function () {
                                                            return r >= t.length ? { done: !0 } : { done: !1, value: t[r++] };
                                                        },
                                                        e: function (t) {
                                                            throw t;
                                                        },
                                                        f: i,
                                                    };
                                                }
                                                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                                            }
                                            var o,
                                                a = !0,
                                                s = !1;
                                            return {
                                                s: function () {
                                                    n = n.call(t);
                                                },
                                                n: function () {
                                                    var t = n.next();
                                                    return (a = t.done), t;
                                                },
                                                e: function (t) {
                                                    (s = !0), (o = t);
                                                },
                                                f: function () {
                                                    try {
                                                        a || null == n.return || n.return();
                                                    } finally {
                                                        if (s) throw o;
                                                    }
                                                },
                                            };
                                        })(e.scene.children);
                                    try {
                                        for (n.s(); !(t = n.n()).done; ) {
                                            var r = t.value;
                                            "cards" !== r.type && r.setBounds(), "menu" === r.type && r.updateTime();
                                        }
                                    } catch (t) {
                                        n.e(t);
                                    } finally {
                                        n.f();
                                    }
                                }),
                                (this.scene = new Qc()),
                                (this.camera = new Ya(45, km / Dm, 0.1, 100)),
                                this.setCamera(),
                                (this.renderer = new Zc({ alpha: !0, antialias: !0 })),
                                (this.renderer.shadowMap.enabled = !1),
                                (this.renderer.shadowMap.autoUpdate = !1),
                                (this.images = []),
                                (this.renderer.shadowMap.needsUpdate = !1),
                                this.renderer.setPixelRatio(Math.min(Math.max(window.devicePixelRatio, 1), 2)),
                                this.renderer.setSize(km, Dm),
                                (this.tiles = []),
                                this.init();
                        }
                        var e, n, r;
                        return (
                            (e = t),
                            (n = [
                                {
                                    key: "updateTiles",
                                    value: function () {
                                        this.scene.children.forEach(function (t) {
                                            ("background" === t.type && km >= 900) || "scarf" === t.type
                                                ? t.checkSequence()
                                                : "menu" === t.type && rv.isOpen
                                                    ? t.updateTime()
                                                    : "image" === t.type && t.inView && !t.isDisabled && (t.updatePosition(Math.abs(Pf.previousY.toFixed(2))), "zoom" === t.mode && t.checkZoom());
                                        });
                                    },
                                },
                                {
                                    key: "addBackground",
                                    value: function () {
                                        (this.backgroundTile = new qm().init(document.body, this)), this.scene.add(this.backgroundTile);
                                    },
                                },
                                {
                                    key: "addScarf",
                                    value: function () {
                                        "home" === document.querySelector("[data-router-view]").getAttribute("data-router-view") && ((this.scarfTile = new dg().init(document.body, this)), this.scene.add(this.scarfTile));
                                    },
                                },
                                {
                                    key: "removeScarf",
                                    value: function (t) {
                                        this.scarfTile && (this.scarfTile.remove(t), (this.scarfTile = !1));
                                    },
                                },
                                {
                                    key: "addTile",
                                    value: function (t) {
                                        var e = this;
                                        this.tiles.push(t),
                                            this.tiles.forEach(function (t) {
                                                e.scene.add(t);
                                            });
                                    },
                                },
                                {
                                    key: "addImages",
                                    value: function () {
                                        var t = this,
                                            e = fg(document.querySelectorAll(".js-glsl-image"));
                                        if (e.length <= 0) return !1;
                                        (this.images = []),
                                            e.forEach(function (e) {
                                                t.images.push(new ng().init(e, t));
                                            }),
                                            setTimeout(function () {
                                                t.images.forEach(function (e) {
                                                    t.scene.add(e);
                                                });
                                            }, 1e3);
                                    },
                                },
                                {
                                    key: "removeImages",
                                    value: function (t) {
                                        return (
                                            !!this.images &&
                                            !(this.images.length <= 0) &&
                                            void this.images.forEach(function (e) {
                                                e.remove(t);
                                            })
                                        );
                                    },
                                },
                                {
                                    key: "removeTiles",
                                    value: function () {
                                        var t = this;
                                        if (this.tiles.length <= 0) return !1;
                                        this.tiles.forEach(function (e) {
                                            t.disposeAll(e);
                                        });
                                    },
                                },
                                {
                                    key: "getViewSize",
                                    value: function () {
                                        var t = (this.camera.fov * Math.PI) / 180,
                                            e = Math.abs(this.camera.position.z * Math.tan(t / 2) * 2);
                                        return { width: e * this.camera.aspect, height: e };
                                    },
                                },
                                {
                                    key: "disposeAll",
                                    value: function (t) {
                                        var e = this;
                                        t.traverse(function (t) {
                                            t.material &&
                                            (t.material.uniforms &&
                                            Object.keys(t.material.uniforms).forEach(function (e) {
                                                var n = t.material.uniforms[e];
                                                n && (n.value instanceof $u || n.value instanceof Pi) && n.value.dispose();
                                            }),
                                                t.material.dispose()),
                                            t.geometry && t.geometry.dispose(),
                                                e.scene.remove(t);
                                        });
                                    },
                                },
                                {
                                    key: "setCamera",
                                    value: function () {
                                        (this.camera.position.x = 0), (this.camera.position.y = 0), (this.camera.position.z = 50), (this.camera.lookAt = this.scene.position);
                                    },
                                },
                                {
                                    key: "init",
                                    value: function () {
                                        this.addToDom(), this.addBackground();
                                    },
                                },
                                {
                                    key: "reset",
                                    value: function () {
                                        this.tiles = [];
                                    },
                                },
                                {
                                    key: "addToDom",
                                    value: function () {
                                        var t = this.renderer.domElement;
                                        document.body.appendChild(t);
                                    },
                                },
                            ]) && gg(e.prototype, n),
                            r && gg(e, r),
                                t
                        );
                    })();
                function _g(t) {
                    return (_g =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                return typeof t;
                            }
                            : function (t) {
                                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                            })(t);
                }
                function bg(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function wg(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                function Sg(t, e) {
                    return (Sg =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function Mg(t) {
                    var e = (function () {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                        if (Reflect.construct.sham) return !1;
                        if ("function" == typeof Proxy) return !0;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                        } catch (t) {
                            return !1;
                        }
                    })();
                    return function () {
                        var n,
                            r = Eg(t);
                        if (e) {
                            var i = Eg(this).constructor;
                            n = Reflect.construct(r, arguments, i);
                        } else n = r.apply(this, arguments);
                        return Tg(this, n);
                    };
                }
                function Tg(t, e) {
                    if (e && ("object" === _g(e) || "function" == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                    return (function (t) {
                        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return t;
                    })(t);
                }
                function Eg(t) {
                    return (Eg = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                            return t.__proto__ || Object.getPrototypeOf(t);
                        })(t);
                }
                var Ag = (function (t) {
                    !(function (t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && Sg(t, e);
                    })(o, t);
                    var e,
                        n,
                        r,
                        i = Mg(o);
                    function o() {
                        return bg(this, o), i.apply(this, arguments);
                    }
                    return (
                        (e = o),
                        (n = [
                            {
                                key: "in",
                                value: function (t) {
                                    var e = t.from,
                                        n = t.done;
                                    Sm.remove(), e.remove(), yg.reset(), Pf.update(), sv.switch(), yg.backgroundTile.enable(), n();
                                },
                            },
                            {
                                key: "out",
                                value: function (t) {
                                    var e = t.from,
                                        n = t.done;
                                    yg.backgroundTile.disable(), yg.removeImages(), yg.removeScarf(), Tm.remove(), Pf.disable(), Pf.reset(), Er.to(e, 0.25, { opacity: 0, ease: "power2.out", onComplete: n });
                                },
                            },
                        ]) && wg(e.prototype, n),
                        r && wg(e, r),
                            o
                    );
                })(u.Transition);
                function Lg(t) {
                    return (Lg =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                return typeof t;
                            }
                            : function (t) {
                                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                            })(t);
                }
                function Cg(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function Rg(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                function Pg(t, e) {
                    return (Pg =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function Ig(t) {
                    var e = (function () {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                        if (Reflect.construct.sham) return !1;
                        if ("function" == typeof Proxy) return !0;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                        } catch (t) {
                            return !1;
                        }
                    })();
                    return function () {
                        var n,
                            r = Dg(t);
                        if (e) {
                            var i = Dg(this).constructor;
                            n = Reflect.construct(r, arguments, i);
                        } else n = r.apply(this, arguments);
                        return Og(this, n);
                    };
                }
                function Og(t, e) {
                    if (e && ("object" === Lg(e) || "function" == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                    return (function (t) {
                        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return t;
                    })(t);
                }
                function Dg(t) {
                    return (Dg = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                            return t.__proto__ || Object.getPrototypeOf(t);
                        })(t);
                }
                var kg = (function (t) {
                    !(function (t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && Pg(t, e);
                    })(o, t);
                    var e,
                        n,
                        r,
                        i = Ig(o);
                    function o() {
                        return Cg(this, o), i.apply(this, arguments);
                    }
                    return (
                        (e = o),
                        (n = [
                            {
                                key: "in",
                                value: function (t) {
                                    var e = t.from,
                                        n = t.done;
                                    Sm.remove(),
                                        yg.removeImages(0),
                                        yg.removeScarf(0),
                                        e.remove(),
                                        Tm.remove(0),
                                        yg.reset(),
                                        Pf.update(),
                                        sv.switch(),
                                        rv.close(),
                                        setTimeout(function () {
                                            yg.backgroundTile.enable(), n();
                                        }, 333);
                                },
                            },
                            {
                                key: "out",
                                value: function (t) {
                                    t.from;
                                    var e = t.done;
                                    yg.backgroundTile.disable(), Pf.disable(), Pf.reset(), e();
                                },
                            },
                        ]) && Rg(e.prototype, n),
                        r && Rg(e, r),
                            o
                    );
                })(u.Transition);
                var Ug = function t() {
                    var e,
                        n,
                        r,
                        i = this;
                    !(function (t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    })(this, t),
                        (r = function () {
                            av && av.render(), Pf && Pf.render(), Em && Em.render(), Sm && Sm.render(), yg && yg.render(), Mm && Mm.render(), Tm && Tm.render(), om && om.render(), window.requestAnimationFrame(i.render);
                        }),
                        (n = "render") in (e = this) ? Object.defineProperty(e, n, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : (e[n] = r),
                        this.render();
                };
                function Fg(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                var Ng = (function () {
                    function t() {
                        if (
                            ((function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t),
                                (this.toggle = document.querySelector(".js-toggle")),
                                !this.toggle)
                        )
                            return !1;
                        (this.firstSpan = this.toggle.querySelector(".js-first")), (this.secondSpan = this.toggle.querySelector(".js-second"));
                    }
                    var e, n, r;
                    return (
                        (e = t),
                        (n = [
                            {
                                key: "open",
                                value: function () {
                                    this.reset(),
                                        Er.set(this.secondSpan, { y: "50%" }),
                                        (this.firstTween = Er.to(this.firstSpan, 1, { y: "-100%", opacity: 0, ease: "expo.out" })),
                                        (this.secondTween = Er.to(this.secondSpan, 1, { y: "-50%", opacity: 1, ease: "expo.out" }));
                                },
                            },
                            {
                                key: "close",
                                value: function () {
                                    this.reset(),
                                        Er.set(this.firstSpan, { y: "100%" }),
                                        (this.firstTween = Er.to(this.firstSpan, 1, { y: "0%", opacity: 1, ease: "expo.out" })),
                                        (this.secondTween = Er.to(this.secondSpan, 1, { y: "-150%", opacity: 0, ease: "expo.out" }));
                                },
                            },
                            {
                                key: "reset",
                                value: function () {
                                    this.firstTween && (this.firstTween.kill(), (this.firstTween = !1)), this.secondTween && (this.secondTween.kill(), (this.secondTween = !1));
                                },
                            },
                            {
                                key: "bind",
                                value: function (t) {
                                    if (!this.toggle) return !1;
                                    this.toggle.addEventListener("click", t.toggle);
                                },
                            },
                        ]) && Fg(e.prototype, n),
                        r && Fg(e, r),
                            t
                    );
                })();
                function zg(t) {
                    return (zg =
                        "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                            ? function (t) {
                                return typeof t;
                            }
                            : function (t) {
                                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                            })(t);
                }
                function Bg(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }
                function Gg(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                function Hg(t, e) {
                    return (Hg =
                        Object.setPrototypeOf ||
                        function (t, e) {
                            return (t.__proto__ = e), t;
                        })(t, e);
                }
                function Vg(t) {
                    var e = (function () {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                        if (Reflect.construct.sham) return !1;
                        if ("function" == typeof Proxy) return !0;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                        } catch (t) {
                            return !1;
                        }
                    })();
                    return function () {
                        var n,
                            r = jg(t);
                        if (e) {
                            var i = jg(this).constructor;
                            n = Reflect.construct(r, arguments, i);
                        } else n = r.apply(this, arguments);
                        return Wg(this, n);
                    };
                }
                function Wg(t, e) {
                    if (e && ("object" === zg(e) || "function" == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                    return (function (t) {
                        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return t;
                    })(t);
                }
                function jg(t) {
                    return (jg = Object.setPrototypeOf
                        ? Object.getPrototypeOf
                        : function (t) {
                            return t.__proto__ || Object.getPrototypeOf(t);
                        })(t);
                }
                var qg = (function (t) {
                    !(function (t, e) {
                        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                        (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })), e && Hg(t, e);
                    })(o, t);
                    var e,
                        n,
                        r,
                        i = Vg(o);
                    function o() {
                        return Bg(this, o), i.apply(this, arguments);
                    }
                    return (
                        (e = o),
                        (n = [
                            {
                                key: "init",
                                value: function (t) {
                                    return (
                                        (this.gl = t),
                                            (this.type = "menu"),
                                            this.setBounds(),
                                            (this.geometry = new ls(1, 1, 2, 2)),
                                            (this.material = new qa({
                                                vertexShader:
                                                    "precision mediump float;\n#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main(){\n  vec3 pos = position;\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n",
                                                fragmentShader:
                                                    "vec3 blendMultiply(vec3 base, vec3 blend) {\n\treturn base*blend;\n}\n\nvec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\n\treturn (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nprecision highp float;\n#define GLSLIFY 1\nvarying vec2 vUv;\nuniform vec3 uColor;\nuniform float uProgress;\nuniform float uTime;\nuniform vec2 uResolution;\nuniform vec2 uResolutionTexture;\nuniform sampler2D uImage;\n\nfloat circle(in vec2 _st, in float _radius, in float blurriness){\n    vec2 dist = _st;\n    return 1.-smoothstep(_radius-(_radius*blurriness), _radius+(_radius*blurriness), dot(dist,dist)*4.0);\n}\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise3(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvoid main() {\n  vec2 st = -1.0 + 2.0 * vUv;\n  vec2 ratio = vec2(min((uResolution.x / uResolution.y) / (uResolutionTexture.x / uResolutionTexture.y), 1.0), min((uResolution.y / uResolution.x) / (uResolutionTexture.y / uResolutionTexture.x), 1.0));\n  vec2 uv = vec2(vUv.x * ratio.x + (1.0 - ratio.x) * 0.5, vUv.y * ratio.y + (1.0 - ratio.y) * 0.5);\n  \n  float shapesRatio = 3.0;\n\n\tfloat c = circle(st, 5.0, shapesRatio) * uProgress;\n\tfloat offx = vUv.x + sin(vUv.y + uTime * .1);\n\tfloat offy = vUv.y - uTime * 0.1 - cos(uTime * .001) * .01;\n\n\tfloat n = snoise3(vec3(offx, offy, uTime * 0.1) * shapesRatio) - 1.0;\n\n\tfloat finalMask = smoothstep(0.4, 0.5, n + pow(c, 2.5));\n\n  vec4 bgColor = vec4(uColor, 1.0);\n  vec4 fgColor = texture2D(uImage, uv);\n  vec3 color = blendMultiply(bgColor.rgb, fgColor.rgb); \n \n  gl_FragColor = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(color, 1.0), finalMask); \n}",
                                                transparent: !0,
                                                depthTest: !1,
                                                uniforms: {
                                                    uResolution: { value: new Ei(km, Dm) },
                                                    uResolutionTexture: { value: new Ei(1920, 1080) },
                                                    uTime: { value: 0 },
                                                    uProgress: { value: 0 },
                                                    uColor: new xf(new Fi(68 / 255, 0, 89 / 255)),
                                                    uImage: { value: !1 },
                                                    precision: "lowp",
                                                },
                                            })),
                                            this.createMesh(),
                                            this
                                    );
                                },
                            },
                            {
                                key: "setBounds",
                                value: function () {
                                    (this.bounds = { top: 0, left: 0, width: km, height: Dm }), this.updateSize(), this.updatePosition();
                                },
                            },
                            {
                                key: "calculateUnitSize",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.position.z,
                                        e = (this.gl.camera.fov * Math.PI) / 180,
                                        n = 2 * Math.tan(e / 2) * t,
                                        r = n * this.gl.camera.aspect;
                                    return { width: r, height: n };
                                },
                            },
                            {
                                key: "updateSize",
                                value: function () {
                                    this.camUnit = this.calculateUnitSize(this.gl.camera.position.z - this.position.z);
                                    var t = this.bounds.width / km,
                                        e = this.bounds.height / Dm;
                                    t && e && ((this.scale.x = this.camUnit.width * t), (this.scale.y = this.camUnit.height * e));
                                },
                            },
                            {
                                key: "updateY",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                        e = this.bounds.top;
                                    (this.position.y = this.camUnit.height / 2 - this.scale.y / 2), (this.position.y -= ((e - t) / Dm) * this.camUnit.height);
                                },
                            },
                            {
                                key: "updateX",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                        e = this.bounds.left;
                                    (this.position.x = -this.camUnit.width / 2 + this.scale.x / 2), (this.position.x += ((e + t) / km) * this.camUnit.width);
                                },
                            },
                            {
                                key: "updatePosition",
                                value: function (t, e) {
                                    this.updateY(t), this.updateX(e);
                                },
                            },
                            {
                                key: "updateTime",
                                value: function () {
                                    this.material && (this.material.uniforms.uTime.value += 0.001);
                                },
                            },
                            {
                                key: "createMesh",
                                value: function () {
                                    var t = new Ba(this.geometry, this.material);
                                    (t.renderOrder = 13), this.add(t);
                                },
                            },
                            {
                                key: "tween",
                                value: function (t) {
                                    var e = "in" === t ? 1.5 : 1,
                                        n = "in" === t ? 3 : 1;
                                    this.checkTween(), (this.progressTween = Er.to(this.material.uniforms.uProgress, e, { value: n, ease: "expo.out" }));
                                },
                            },
                            {
                                key: "checkTween",
                                value: function () {
                                    this.progressTween && (this.progressTween.kill(), (this.progressTween = !1));
                                },
                            },
                        ]) && Gg(e.prototype, n),
                        r && Gg(e, r),
                            o
                    );
                })(Bo);
                function Xg(t) {
                    return (
                        (function (t) {
                            if (Array.isArray(t)) return Yg(t);
                        })(t) ||
                        (function (t) {
                            if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"]) return Array.from(t);
                        })(t) ||
                        (function (t, e) {
                            if (!t) return;
                            if ("string" == typeof t) return Yg(t, e);
                            var n = Object.prototype.toString.call(t).slice(8, -1);
                            "Object" === n && t.constructor && (n = t.constructor.name);
                            if ("Map" === n || "Set" === n) return Array.from(t);
                            if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Yg(t, e);
                        })(t) ||
                        (function () {
                            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        })()
                    );
                }
                function Yg(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
                    return r;
                }
                function Zg(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                function Jg(t, e, n) {
                    return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = n), t;
                }
                var $g = (function () {
                    function t() {
                        var e = this;
                        !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        })(this, t),
                            Jg(this, "toggle", function () {
                                e.isOpen ? e.close() : e.open();
                            }),
                            Jg(this, "open", function () {
                                e.logo.setAttribute("data-transition", "menu"),
                                    (e.isOpen = !0),
                                    e.button.open(),
                                    e.tile.tween("in"),
                                    e.checkCards("in"),
                                    e.setBackground(),
                                    e.reset(),
                                    Pf.disable(),
                                    e.transforms.forEach(function (t) {
                                        t.closest(".text-12") ? Er.set(t, { y: "150%" }) : Er.set(t, { y: "25%" });
                                    }),
                                    (e.menu.style.pointerEvents = "all"),
                                    (e.tween = Er.to(e.transforms, 0.75, { y: "0%", stagger: 0.05, ease: "expo.out" })),
                                    (e.fadeInTween = Er.to(e.transforms, 0.75, { stagger: 0.05, opacity: 1, ease: "power2.out" })),
                                    Er.to(document.querySelector("[data-router-view]"), 0.15, { opacity: 0, ease: "power2.out" });
                                var t = Xg(document.querySelectorAll(".js-button"));
                                t.length > 0 && Er.to(t, 0.15, { opacity: 0, ease: "power2.out" });
                            }),
                            Jg(this, "close", function () {
                                if (!e.isOpen) return !1;
                                e.logo.removeAttribute("data-transition"),
                                    (e.isOpen = !1),
                                    e.button.close(),
                                    e.tile.tween("out"),
                                    e.checkCards("out"),
                                    e.reset(),
                                    Pf.enable(),
                                    (e.menu.style.pointerEvents = "none"),
                                    (e.tween = Er.to(e.transforms, 0.25, { opacity: 0, ease: "expo.out" })),
                                    Er.set(document.querySelector("[data-router-view]"), { opacity: 1, delay: 0.15 });
                                var t = Xg(document.querySelectorAll(".js-button"));
                                t.length > 0 && Er.set(t, { opacity: 1, delay: 0.15 });
                            }),
                            (this.logo = document.querySelector(".js-logo-link")),
                            (this.menu = document.querySelector(".js-menu")),
                            (this.button = new Ng()),
                            (this.isOpen = !1),
                            (this.transforms = Xg(this.menu.querySelectorAll(".js-transform"))),
                            (this.tile = new qg().init(yg)),
                            yg.addTile(this.tile),
                            this.bind();
                    }
                    var e, n, r;
                    return (
                        (e = t),
                        (n = [
                            {
                                key: "checkCards",
                                value: function (t) {
                                    if (Sm) {
                                        if (!Sm.textIsTriggered) return !1;
                                        "in" === t ? Sm.hideText() : Sm.showText();
                                    }
                                },
                            },
                            {
                                key: "setBackground",
                                value: function () {
                                    var t = yg.scene.children.find(function (t) {
                                        return "background" === t.type;
                                    });
                                    this.tile.material.uniforms.uImage.value = t.material.uniforms.uImage.value;
                                },
                            },
                            {
                                key: "reset",
                                value: function () {
                                    this.tween && (this.tween.kill(), (this.tween = !1)), this.fadeInTween && (this.fadeInTween.kill(), (this.fadeInTween = !1));
                                },
                            },
                            {
                                key: "bind",
                                value: function () {
                                    var t = this;
                                    this.button.bind(this),
                                        window.addEventListener("keydown", function (e) {
                                            27 == e.keyCode && t.close();
                                        });
                                },
                            },
                        ]) && Zg(e.prototype, n),
                        r && Zg(e, r),
                            t
                    );
                })();
                function Qg(t) {
                    return (
                        (function (t) {
                            if (Array.isArray(t)) return Kg(t);
                        })(t) ||
                        (function (t) {
                            if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"]) return Array.from(t);
                        })(t) ||
                        (function (t, e) {
                            if (!t) return;
                            if ("string" == typeof t) return Kg(t, e);
                            var n = Object.prototype.toString.call(t).slice(8, -1);
                            "Object" === n && t.constructor && (n = t.constructor.name);
                            if ("Map" === n || "Set" === n) return Array.from(t);
                            if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Kg(t, e);
                        })(t) ||
                        (function () {
                            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                        })()
                    );
                }
                function Kg(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
                    return r;
                }
                function tv(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                var ev = (function () {
                    function t() {
                        var e,
                            n,
                            r,
                            i = this;
                        !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                        })(this, t),
                            (r = function () {
                                if (i.isLoaded) return !1;
                                (i.previousPercentage = Om(i.previousPercentage, i.currentPercentage, 0.1)),
                                    (i.percentage.innerHTML = "".concat(Math.round(i.previousPercentage), "%")),
                                100 === Math.round(i.previousPercentage) && ((i.isLoaded = !0), i.tween());
                            }),
                            (n = "render") in (e = this) ? Object.defineProperty(e, n, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : (e[n] = r),
                            (this.percentage = document.querySelector(".js-percentage")),
                            (this.currentPercentage = 0),
                            (this.previousPercentage = 0),
                            (this.isLoaded = !1);
                    }
                    var e, n, r;
                    return (
                        (e = t),
                        (n = [
                            {
                                key: "tween",
                                value: function () {
                                    var t = this;
                                    (Af = new If()),
                                        (Pf = new Uf()),
                                        Er.to(this.percentage, 0.25, {
                                            opacity: 0,
                                            delay: 0.25,
                                            y: "-50%",
                                            ease: "power3.out",
                                            onComplete: function () {
                                                Cm(), t.reveal(), t.updateSequences();
                                            },
                                        });
                                },
                            },
                            {
                                key: "updateSequences",
                                value: function () {
                                    var t = yg.scene.children[0],
                                        e = { value: 0 };
                                    Er.to(e, 0.75, {
                                        value: t.criticSequencesLength - 1,
                                        ease: "none",
                                        onUpdate: function () {
                                            t.material.uniforms.uImage && (t.material.uniforms.uImage.value instanceof $u || t.material.uniforms.uImage.value instanceof Pi) && t.material.uniforms.uImage.value.dispose(),
                                                (t.material.uniforms.uImage.value = t.criticSequences[parseInt(e.value)].texture);
                                        },
                                        onComplete: function () {
                                            t.loadSequences(), (t.isLoaded = !0);
                                        },
                                    });
                                },
                            },
                            {
                                key: "reveal",
                                value: function () {
                                    var t = Qg(document.querySelectorAll(".js-intro"));
                                    Er.to(t, 1, { y: 0, opacity: 1, stagger: 0.1, ease: "power3.out" });
                                },
                            },
                        ]) && tv(e.prototype, n),
                        r && tv(e, r),
                            t
                    );
                })();
                function nv(t, e) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (r.enumerable = r.enumerable || !1), (r.configurable = !0), "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
                    }
                }
                var rv,
                    iv = (function () {
                        function t() {
                            !(function (t, e) {
                                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                            })(this, t),
                                (this.background = document.querySelector(".js-background"));
                        }
                        var e, n, r;
                        return (
                            (e = t),
                            (n = [
                                {
                                    key: "switch",
                                    value: function (t) {
                                        var e = void 0 !== t ? t : 1,
                                            n = document.querySelector("[data-router-view]").getAttribute("data-router-view");
                                        "home" === n
                                            ? this.setColor("#EADFCD", e)
                                            : "in-retrospect" === n
                                                ? this.setColor("#F5D874", e)
                                                : "in-the-atelier" === n
                                                    ? this.setColor("#E8D8C1", e)
                                                    : "the-masterpieces" === n
                                                        ? this.setColor("#8E4FA0", e)
                                                        : "the-expo" === n && this.setColor("#E7D7C0", e);
                                    },
                                },
                                {
                                    key: "setColor",
                                    value: function (t, e) {
                                        Er.to(this.background, e, { backgroundColor: t, ease: "power2.out" });
                                    },
                                },
                            ]) && nv(e.prototype, n),
                            r && nv(e, r),
                                t
                        );
                    })(),
                    ov = !0,
                    av = new ev(),
                    sv = new iv();
                document.body.style.pointerEvents = "none";
                n(8719),
                    document.addEventListener("DOMContentLoaded", function () {
                        new u.Core({ transitions: { default: Ag, contextual: { expand: Bp, menu: kg } } }).on("NAVIGATE_END", function (t) {
                            var e = t.to,
                                n = t.location;
                            "undefined" != typeof gtag && gtag("config", "G-F0D2BJMJGL", { page_path: n.pathname, page_title: e.page.title, page_location: n.href });
                        }),
                            (tm = new sm()),
                            (yg = new xg()),
                            (rv = new $g()),
                            new Ug(),
                            (ov = !1);
                    });
            },
            3099: function (t) {
                t.exports = function (t) {
                    if ("function" != typeof t) throw TypeError(String(t) + " is not a function");
                    return t;
                };
            },
            6077: function (t, e, n) {
                var r = n(111);
                t.exports = function (t) {
                    if (!r(t) && null !== t) throw TypeError("Can't set " + String(t) + " as a prototype");
                    return t;
                };
            },
            1223: function (t, e, n) {
                var r = n(5112),
                    i = n(30),
                    o = n(3070),
                    a = r("unscopables"),
                    s = Array.prototype;
                null == s[a] && o.f(s, a, { configurable: !0, value: i(null) }),
                    (t.exports = function (t) {
                        s[a][t] = !0;
                    });
            },
            1530: function (t, e, n) {
                "use strict";
                var r = n(8710).charAt;
                t.exports = function (t, e, n) {
                    return e + (n ? r(t, e).length : 1);
                };
            },
            5787: function (t) {
                t.exports = function (t, e, n) {
                    if (!(t instanceof e)) throw TypeError("Incorrect " + (n ? n + " " : "") + "invocation");
                    return t;
                };
            },
            9670: function (t, e, n) {
                var r = n(111);
                t.exports = function (t) {
                    if (!r(t)) throw TypeError(String(t) + " is not an object");
                    return t;
                };
            },
            8533: function (t, e, n) {
                "use strict";
                var r = n(2092).forEach,
                    i = n(9341)("forEach");
                t.exports = i
                    ? [].forEach
                    : function (t) {
                        return r(this, t, arguments.length > 1 ? arguments[1] : void 0);
                    };
            },
            8457: function (t, e, n) {
                "use strict";
                var r = n(9974),
                    i = n(7908),
                    o = n(3411),
                    a = n(7659),
                    s = n(7466),
                    l = n(6135),
                    c = n(1246);
                t.exports = function (t) {
                    var e,
                        n,
                        u,
                        h,
                        d,
                        f,
                        p = i(t),
                        m = "function" == typeof this ? this : Array,
                        g = arguments.length,
                        v = g > 1 ? arguments[1] : void 0,
                        y = void 0 !== v,
                        x = c(p),
                        _ = 0;
                    if ((y && (v = r(v, g > 2 ? arguments[2] : void 0, 2)), null == x || (m == Array && a(x)))) for (n = new m((e = s(p.length))); e > _; _++) (f = y ? v(p[_], _) : p[_]), l(n, _, f);
                    else for (d = (h = x.call(p)).next, n = new m(); !(u = d.call(h)).done; _++) (f = y ? o(h, v, [u.value, _], !0) : u.value), l(n, _, f);
                    return (n.length = _), n;
                };
            },
            1318: function (t, e, n) {
                var r = n(5656),
                    i = n(7466),
                    o = n(1400),
                    a = function (t) {
                        return function (e, n, a) {
                            var s,
                                l = r(e),
                                c = i(l.length),
                                u = o(a, c);
                            if (t && n != n) {
                                for (; c > u; ) if ((s = l[u++]) != s) return !0;
                            } else for (; c > u; u++) if ((t || u in l) && l[u] === n) return t || u || 0;
                            return !t && -1;
                        };
                    };
                t.exports = { includes: a(!0), indexOf: a(!1) };
            },
            2092: function (t, e, n) {
                var r = n(9974),
                    i = n(8361),
                    o = n(7908),
                    a = n(7466),
                    s = n(5417),
                    l = [].push,
                    c = function (t) {
                        var e = 1 == t,
                            n = 2 == t,
                            c = 3 == t,
                            u = 4 == t,
                            h = 6 == t,
                            d = 7 == t,
                            f = 5 == t || h;
                        return function (p, m, g, v) {
                            for (var y, x, _ = o(p), b = i(_), w = r(m, g, 3), S = a(b.length), M = 0, T = v || s, E = e ? T(p, S) : n || d ? T(p, 0) : void 0; S > M; M++)
                                if ((f || M in b) && ((x = w((y = b[M]), M, _)), t))
                                    if (e) E[M] = x;
                                    else if (x)
                                        switch (t) {
                                            case 3:
                                                return !0;
                                            case 5:
                                                return y;
                                            case 6:
                                                return M;
                                            case 2:
                                                l.call(E, y);
                                        }
                                    else
                                        switch (t) {
                                            case 4:
                                                return !1;
                                            case 7:
                                                l.call(E, y);
                                        }
                            return h ? -1 : c || u ? u : E;
                        };
                    };
                t.exports = { forEach: c(0), map: c(1), filter: c(2), some: c(3), every: c(4), find: c(5), findIndex: c(6), filterReject: c(7) };
            },
            1194: function (t, e, n) {
                var r = n(7293),
                    i = n(5112),
                    o = n(7392),
                    a = i("species");
                t.exports = function (t) {
                    return (
                        o >= 51 ||
                        !r(function () {
                            var e = [];
                            return (
                                ((e.constructor = {})[a] = function () {
                                    return { foo: 1 };
                                }),
                                1 !== e[t](Boolean).foo
                            );
                        })
                    );
                };
            },
            9341: function (t, e, n) {
                "use strict";
                var r = n(7293);
                t.exports = function (t, e) {
                    var n = [][t];
                    return (
                        !!n &&
                        r(function () {
                            n.call(
                                null,
                                e ||
                                function () {
                                    throw 1;
                                },
                                1
                            );
                        })
                    );
                };
            },
            7475: function (t, e, n) {
                var r = n(111),
                    i = n(3157),
                    o = n(5112)("species");
                t.exports = function (t) {
                    var e;
                    return i(t) && ("function" != typeof (e = t.constructor) || (e !== Array && !i(e.prototype)) ? r(e) && null === (e = e[o]) && (e = void 0) : (e = void 0)), void 0 === e ? Array : e;
                };
            },
            5417: function (t, e, n) {
                var r = n(7475);
                t.exports = function (t, e) {
                    return new (r(t))(0 === e ? 0 : e);
                };
            },
            3411: function (t, e, n) {
                var r = n(9670),
                    i = n(9212);
                t.exports = function (t, e, n, o) {
                    try {
                        return o ? e(r(n)[0], n[1]) : e(n);
                    } catch (e) {
                        throw (i(t), e);
                    }
                };
            },
            7072: function (t, e, n) {
                var r = n(5112)("iterator"),
                    i = !1;
                try {
                    var o = 0,
                        a = {
                            next: function () {
                                return { done: !!o++ };
                            },
                            return: function () {
                                i = !0;
                            },
                        };
                    (a[r] = function () {
                        return this;
                    }),
                        Array.from(a, function () {
                            throw 2;
                        });
                } catch (t) {}
                t.exports = function (t, e) {
                    if (!e && !i) return !1;
                    var n = !1;
                    try {
                        var o = {};
                        (o[r] = function () {
                            return {
                                next: function () {
                                    return { done: (n = !0) };
                                },
                            };
                        }),
                            t(o);
                    } catch (t) {}
                    return n;
                };
            },
            4326: function (t) {
                var e = {}.toString;
                t.exports = function (t) {
                    return e.call(t).slice(8, -1);
                };
            },
            648: function (t, e, n) {
                var r = n(1694),
                    i = n(4326),
                    o = n(5112)("toStringTag"),
                    a =
                        "Arguments" ==
                        i(
                            (function () {
                                return arguments;
                            })()
                        );
                t.exports = r
                    ? i
                    : function (t) {
                        var e, n, r;
                        return void 0 === t
                            ? "Undefined"
                            : null === t
                                ? "Null"
                                : "string" ==
                                typeof (n = (function (t, e) {
                                    try {
                                        return t[e];
                                    } catch (t) {}
                                })((e = Object(t)), o))
                                    ? n
                                    : a
                                        ? i(e)
                                        : "Object" == (r = i(e)) && "function" == typeof e.callee
                                            ? "Arguments"
                                            : r;
                    };
            },
            9920: function (t, e, n) {
                var r = n(6656),
                    i = n(3887),
                    o = n(1236),
                    a = n(3070);
                t.exports = function (t, e) {
                    for (var n = i(e), s = a.f, l = o.f, c = 0; c < n.length; c++) {
                        var u = n[c];
                        r(t, u) || s(t, u, l(e, u));
                    }
                };
            },
            8544: function (t, e, n) {
                var r = n(7293);
                t.exports = !r(function () {
                    function t() {}
                    return (t.prototype.constructor = null), Object.getPrototypeOf(new t()) !== t.prototype;
                });
            },
            4230: function (t, e, n) {
                var r = n(4488),
                    i = n(1340),
                    o = /"/g;
                t.exports = function (t, e, n, a) {
                    var s = i(r(t)),
                        l = "<" + e;
                    return "" !== n && (l += " " + n + '="' + i(a).replace(o, "&quot;") + '"'), l + ">" + s + "</" + e + ">";
                };
            },
            4994: function (t, e, n) {
                "use strict";
                var r = n(3383).IteratorPrototype,
                    i = n(30),
                    o = n(9114),
                    a = n(8003),
                    s = n(7497),
                    l = function () {
                        return this;
                    };
                t.exports = function (t, e, n) {
                    var c = e + " Iterator";
                    return (t.prototype = i(r, { next: o(1, n) })), a(t, c, !1, !0), (s[c] = l), t;
                };
            },
            8880: function (t, e, n) {
                var r = n(9781),
                    i = n(3070),
                    o = n(9114);
                t.exports = r
                    ? function (t, e, n) {
                        return i.f(t, e, o(1, n));
                    }
                    : function (t, e, n) {
                        return (t[e] = n), t;
                    };
            },
            9114: function (t) {
                t.exports = function (t, e) {
                    return { enumerable: !(1 & t), configurable: !(2 & t), writable: !(4 & t), value: e };
                };
            },
            6135: function (t, e, n) {
                "use strict";
                var r = n(4948),
                    i = n(3070),
                    o = n(9114);
                t.exports = function (t, e, n) {
                    var a = r(e);
                    a in t ? i.f(t, a, o(0, n)) : (t[a] = n);
                };
            },
            654: function (t, e, n) {
                "use strict";
                var r = n(2109),
                    i = n(4994),
                    o = n(9518),
                    a = n(7674),
                    s = n(8003),
                    l = n(8880),
                    c = n(1320),
                    u = n(5112),
                    h = n(1913),
                    d = n(7497),
                    f = n(3383),
                    p = f.IteratorPrototype,
                    m = f.BUGGY_SAFARI_ITERATORS,
                    g = u("iterator"),
                    v = "keys",
                    y = "values",
                    x = "entries",
                    _ = function () {
                        return this;
                    };
                t.exports = function (t, e, n, u, f, b, w) {
                    i(n, e, u);
                    var S,
                        M,
                        T,
                        E = function (t) {
                            if (t === f && P) return P;
                            if (!m && t in C) return C[t];
                            switch (t) {
                                case v:
                                case y:
                                case x:
                                    return function () {
                                        return new n(this, t);
                                    };
                            }
                            return function () {
                                return new n(this);
                            };
                        },
                        A = e + " Iterator",
                        L = !1,
                        C = t.prototype,
                        R = C[g] || C["@@iterator"] || (f && C[f]),
                        P = (!m && R) || E(f),
                        I = ("Array" == e && C.entries) || R;
                    if (
                        (I && ((S = o(I.call(new t()))), p !== Object.prototype && S.next && (h || o(S) === p || (a ? a(S, p) : "function" != typeof S[g] && l(S, g, _)), s(S, A, !0, !0), h && (d[A] = _))),
                        f == y &&
                        R &&
                        R.name !== y &&
                        ((L = !0),
                            (P = function () {
                                return R.call(this);
                            })),
                        (h && !w) || C[g] === P || l(C, g, P),
                            (d[e] = P),
                            f)
                    )
                        if (((M = { values: E(y), keys: b ? P : E(v), entries: E(x) }), w)) for (T in M) (m || L || !(T in C)) && c(C, T, M[T]);
                        else r({ target: e, proto: !0, forced: m || L }, M);
                    return M;
                };
            },
            7235: function (t, e, n) {
                var r = n(857),
                    i = n(6656),
                    o = n(6061),
                    a = n(3070).f;
                t.exports = function (t) {
                    var e = r.Symbol || (r.Symbol = {});
                    i(e, t) || a(e, t, { value: o.f(t) });
                };
            },
            9781: function (t, e, n) {
                var r = n(7293);
                t.exports = !r(function () {
                    return (
                        7 !=
                        Object.defineProperty({}, 1, {
                            get: function () {
                                return 7;
                            },
                        })[1]
                    );
                });
            },
            317: function (t, e, n) {
                var r = n(7854),
                    i = n(111),
                    o = r.document,
                    a = i(o) && i(o.createElement);
                t.exports = function (t) {
                    return a ? o.createElement(t) : {};
                };
            },
            8324: function (t) {
                t.exports = {
                    CSSRuleList: 0,
                    CSSStyleDeclaration: 0,
                    CSSValueList: 0,
                    ClientRectList: 0,
                    DOMRectList: 0,
                    DOMStringList: 0,
                    DOMTokenList: 1,
                    DataTransferItemList: 0,
                    FileList: 0,
                    HTMLAllCollection: 0,
                    HTMLCollection: 0,
                    HTMLFormElement: 0,
                    HTMLSelectElement: 0,
                    MediaList: 0,
                    MimeTypeArray: 0,
                    NamedNodeMap: 0,
                    NodeList: 1,
                    PaintRequestList: 0,
                    Plugin: 0,
                    PluginArray: 0,
                    SVGLengthList: 0,
                    SVGNumberList: 0,
                    SVGPathSegList: 0,
                    SVGPointList: 0,
                    SVGStringList: 0,
                    SVGTransformList: 0,
                    SourceBufferList: 0,
                    StyleSheetList: 0,
                    TextTrackCueList: 0,
                    TextTrackList: 0,
                    TouchList: 0,
                };
            },
            7871: function (t) {
                t.exports = "object" == typeof window;
            },
            1528: function (t, e, n) {
                var r = n(8113),
                    i = n(7854);
                t.exports = /iphone|ipod|ipad/i.test(r) && void 0 !== i.Pebble;
            },
            6833: function (t, e, n) {
                var r = n(8113);
                t.exports = /(?:iphone|ipod|ipad).*applewebkit/i.test(r);
            },
            5268: function (t, e, n) {
                var r = n(4326),
                    i = n(7854);
                t.exports = "process" == r(i.process);
            },
            1036: function (t, e, n) {
                var r = n(8113);
                t.exports = /web0s(?!.*chrome)/i.test(r);
            },
            8113: function (t, e, n) {
                var r = n(5005);
                t.exports = r("navigator", "userAgent") || "";
            },
            7392: function (t, e, n) {
                var r,
                    i,
                    o = n(7854),
                    a = n(8113),
                    s = o.process,
                    l = o.Deno,
                    c = (s && s.versions) || (l && l.version),
                    u = c && c.v8;
                u ? (i = (r = u.split("."))[0] < 4 ? 1 : r[0] + r[1]) : a && (!(r = a.match(/Edge\/(\d+)/)) || r[1] >= 74) && (r = a.match(/Chrome\/(\d+)/)) && (i = r[1]), (t.exports = i && +i);
            },
            748: function (t) {
                t.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
            },
            2109: function (t, e, n) {
                var r = n(7854),
                    i = n(1236).f,
                    o = n(8880),
                    a = n(1320),
                    s = n(3505),
                    l = n(9920),
                    c = n(4705);
                t.exports = function (t, e) {
                    var n,
                        u,
                        h,
                        d,
                        f,
                        p = t.target,
                        m = t.global,
                        g = t.stat;
                    if ((n = m ? r : g ? r[p] || s(p, {}) : (r[p] || {}).prototype))
                        for (u in e) {
                            if (((d = e[u]), (h = t.noTargetGet ? (f = i(n, u)) && f.value : n[u]), !c(m ? u : p + (g ? "." : "#") + u, t.forced) && void 0 !== h)) {
                                if (typeof d == typeof h) continue;
                                l(d, h);
                            }
                            (t.sham || (h && h.sham)) && o(d, "sham", !0), a(n, u, d, t);
                        }
                };
            },
            7293: function (t) {
                t.exports = function (t) {
                    try {
                        return !!t();
                    } catch (t) {
                        return !0;
                    }
                };
            },
            7007: function (t, e, n) {
                "use strict";
                n(4916);
                var r = n(1320),
                    i = n(2261),
                    o = n(7293),
                    a = n(5112),
                    s = n(8880),
                    l = a("species"),
                    c = RegExp.prototype;
                t.exports = function (t, e, n, u) {
                    var h = a(t),
                        d = !o(function () {
                            var e = {};
                            return (
                                (e[h] = function () {
                                    return 7;
                                }),
                                7 != ""[t](e)
                            );
                        }),
                        f =
                            d &&
                            !o(function () {
                                var e = !1,
                                    n = /a/;
                                return (
                                    "split" === t &&
                                    (((n = {}).constructor = {}),
                                        (n.constructor[l] = function () {
                                            return n;
                                        }),
                                        (n.flags = ""),
                                        (n[h] = /./[h])),
                                        (n.exec = function () {
                                            return (e = !0), null;
                                        }),
                                        n[h](""),
                                        !e
                                );
                            });
                    if (!d || !f || n) {
                        var p = /./[h],
                            m = e(h, ""[t], function (t, e, n, r, o) {
                                var a = e.exec;
                                return a === i || a === c.exec ? (d && !o ? { done: !0, value: p.call(e, n, r) } : { done: !0, value: t.call(n, e, r) }) : { done: !1 };
                            });
                        r(String.prototype, t, m[0]), r(c, h, m[1]);
                    }
                    u && s(c[h], "sham", !0);
                };
            },
            9974: function (t, e, n) {
                var r = n(3099);
                t.exports = function (t, e, n) {
                    if ((r(t), void 0 === e)) return t;
                    switch (n) {
                        case 0:
                            return function () {
                                return t.call(e);
                            };
                        case 1:
                            return function (n) {
                                return t.call(e, n);
                            };
                        case 2:
                            return function (n, r) {
                                return t.call(e, n, r);
                            };
                        case 3:
                            return function (n, r, i) {
                                return t.call(e, n, r, i);
                            };
                    }
                    return function () {
                        return t.apply(e, arguments);
                    };
                };
            },
            7065: function (t, e, n) {
                "use strict";
                var r = n(3099),
                    i = n(111),
                    o = [].slice,
                    a = {},
                    s = function (t, e, n) {
                        if (!(e in a)) {
                            for (var r = [], i = 0; i < e; i++) r[i] = "a[" + i + "]";
                            a[e] = Function("C,a", "return new C(" + r.join(",") + ")");
                        }
                        return a[e](t, n);
                    };
                t.exports =
                    Function.bind ||
                    function (t) {
                        var e = r(this),
                            n = o.call(arguments, 1),
                            a = function () {
                                var r = n.concat(o.call(arguments));
                                return this instanceof a ? s(e, r.length, r) : e.apply(t, r);
                            };
                        return i(e.prototype) && (a.prototype = e.prototype), a;
                    };
            },
            5005: function (t, e, n) {
                var r = n(7854),
                    i = function (t) {
                        return "function" == typeof t ? t : void 0;
                    };
                t.exports = function (t, e) {
                    return arguments.length < 2 ? i(r[t]) : r[t] && r[t][e];
                };
            },
            1246: function (t, e, n) {
                var r = n(648),
                    i = n(7497),
                    o = n(5112)("iterator");
                t.exports = function (t) {
                    if (null != t) return t[o] || t["@@iterator"] || i[r(t)];
                };
            },
            7854: function (t, e, n) {
                var r = function (t) {
                    return t && t.Math == Math && t;
                };
                t.exports =
                    r("object" == typeof globalThis && globalThis) ||
                    r("object" == typeof window && window) ||
                    r("object" == typeof self && self) ||
                    r("object" == typeof n.g && n.g) ||
                    (function () {
                        return this;
                    })() ||
                    Function("return this")();
            },
            6656: function (t, e, n) {
                var r = n(7908),
                    i = {}.hasOwnProperty;
                t.exports =
                    Object.hasOwn ||
                    function (t, e) {
                        return i.call(r(t), e);
                    };
            },
            3501: function (t) {
                t.exports = {};
            },
            842: function (t, e, n) {
                var r = n(7854);
                t.exports = function (t, e) {
                    var n = r.console;
                    n && n.error && (1 === arguments.length ? n.error(t) : n.error(t, e));
                };
            },
            490: function (t, e, n) {
                var r = n(5005);
                t.exports = r("document", "documentElement");
            },
            4664: function (t, e, n) {
                var r = n(9781),
                    i = n(7293),
                    o = n(317);
                t.exports =
                    !r &&
                    !i(function () {
                        return (
                            7 !=
                            Object.defineProperty(o("div"), "a", {
                                get: function () {
                                    return 7;
                                },
                            }).a
                        );
                    });
            },
            8361: function (t, e, n) {
                var r = n(7293),
                    i = n(4326),
                    o = "".split;
                t.exports = r(function () {
                    return !Object("z").propertyIsEnumerable(0);
                })
                    ? function (t) {
                        return "String" == i(t) ? o.call(t, "") : Object(t);
                    }
                    : Object;
            },
            2788: function (t, e, n) {
                var r = n(5465),
                    i = Function.toString;
                "function" != typeof r.inspectSource &&
                (r.inspectSource = function (t) {
                    return i.call(t);
                }),
                    (t.exports = r.inspectSource);
            },
            9909: function (t, e, n) {
                var r,
                    i,
                    o,
                    a = n(8536),
                    s = n(7854),
                    l = n(111),
                    c = n(8880),
                    u = n(6656),
                    h = n(5465),
                    d = n(6200),
                    f = n(3501),
                    p = "Object already initialized",
                    m = s.WeakMap;
                if (a || h.state) {
                    var g = h.state || (h.state = new m()),
                        v = g.get,
                        y = g.has,
                        x = g.set;
                    (r = function (t, e) {
                        if (y.call(g, t)) throw new TypeError(p);
                        return (e.facade = t), x.call(g, t, e), e;
                    }),
                        (i = function (t) {
                            return v.call(g, t) || {};
                        }),
                        (o = function (t) {
                            return y.call(g, t);
                        });
                } else {
                    var _ = d("state");
                    (f[_] = !0),
                        (r = function (t, e) {
                            if (u(t, _)) throw new TypeError(p);
                            return (e.facade = t), c(t, _, e), e;
                        }),
                        (i = function (t) {
                            return u(t, _) ? t[_] : {};
                        }),
                        (o = function (t) {
                            return u(t, _);
                        });
                }
                t.exports = {
                    set: r,
                    get: i,
                    has: o,
                    enforce: function (t) {
                        return o(t) ? i(t) : r(t, {});
                    },
                    getterFor: function (t) {
                        return function (e) {
                            var n;
                            if (!l(e) || (n = i(e)).type !== t) throw TypeError("Incompatible receiver, " + t + " required");
                            return n;
                        };
                    },
                };
            },
            7659: function (t, e, n) {
                var r = n(5112),
                    i = n(7497),
                    o = r("iterator"),
                    a = Array.prototype;
                t.exports = function (t) {
                    return void 0 !== t && (i.Array === t || a[o] === t);
                };
            },
            3157: function (t, e, n) {
                var r = n(4326);
                t.exports =
                    Array.isArray ||
                    function (t) {
                        return "Array" == r(t);
                    };
            },
            4705: function (t, e, n) {
                var r = n(7293),
                    i = /#|\.prototype\./,
                    o = function (t, e) {
                        var n = s[a(t)];
                        return n == c || (n != l && ("function" == typeof e ? r(e) : !!e));
                    },
                    a = (o.normalize = function (t) {
                        return String(t).replace(i, ".").toLowerCase();
                    }),
                    s = (o.data = {}),
                    l = (o.NATIVE = "N"),
                    c = (o.POLYFILL = "P");
                t.exports = o;
            },
            111: function (t) {
                t.exports = function (t) {
                    return "object" == typeof t ? null !== t : "function" == typeof t;
                };
            },
            1913: function (t) {
                t.exports = !1;
            },
            2190: function (t, e, n) {
                var r = n(5005),
                    i = n(3307);
                t.exports = i
                    ? function (t) {
                        return "symbol" == typeof t;
                    }
                    : function (t) {
                        var e = r("Symbol");
                        return "function" == typeof e && Object(t) instanceof e;
                    };
            },
            408: function (t, e, n) {
                var r = n(9670),
                    i = n(7659),
                    o = n(7466),
                    a = n(9974),
                    s = n(1246),
                    l = n(9212),
                    c = function (t, e) {
                        (this.stopped = t), (this.result = e);
                    };
                t.exports = function (t, e, n) {
                    var u,
                        h,
                        d,
                        f,
                        p,
                        m,
                        g,
                        v = n && n.that,
                        y = !(!n || !n.AS_ENTRIES),
                        x = !(!n || !n.IS_ITERATOR),
                        _ = !(!n || !n.INTERRUPTED),
                        b = a(e, v, 1 + y + _),
                        w = function (t) {
                            return u && l(u), new c(!0, t);
                        },
                        S = function (t) {
                            return y ? (r(t), _ ? b(t[0], t[1], w) : b(t[0], t[1])) : _ ? b(t, w) : b(t);
                        };
                    if (x) u = t;
                    else {
                        if ("function" != typeof (h = s(t))) throw TypeError("Target is not iterable");
                        if (i(h)) {
                            for (d = 0, f = o(t.length); f > d; d++) if ((p = S(t[d])) && p instanceof c) return p;
                            return new c(!1);
                        }
                        u = h.call(t);
                    }
                    for (m = u.next; !(g = m.call(u)).done; ) {
                        try {
                            p = S(g.value);
                        } catch (t) {
                            throw (l(u), t);
                        }
                        if ("object" == typeof p && p && p instanceof c) return p;
                    }
                    return new c(!1);
                };
            },
            9212: function (t, e, n) {
                var r = n(9670);
                t.exports = function (t) {
                    var e = t.return;
                    if (void 0 !== e) return r(e.call(t)).value;
                };
            },
            3383: function (t, e, n) {
                "use strict";
                var r,
                    i,
                    o,
                    a = n(7293),
                    s = n(9518),
                    l = n(8880),
                    c = n(6656),
                    u = n(5112),
                    h = n(1913),
                    d = u("iterator"),
                    f = !1;
                [].keys && ("next" in (o = [].keys()) ? (i = s(s(o))) !== Object.prototype && (r = i) : (f = !0));
                var p =
                    null == r ||
                    a(function () {
                        var t = {};
                        return r[d].call(t) !== t;
                    });
                p && (r = {}),
                (h && !p) ||
                c(r, d) ||
                l(r, d, function () {
                    return this;
                }),
                    (t.exports = { IteratorPrototype: r, BUGGY_SAFARI_ITERATORS: f });
            },
            7497: function (t) {
                t.exports = {};
            },
            5948: function (t, e, n) {
                var r,
                    i,
                    o,
                    a,
                    s,
                    l,
                    c,
                    u,
                    h = n(7854),
                    d = n(1236).f,
                    f = n(261).set,
                    p = n(6833),
                    m = n(1528),
                    g = n(1036),
                    v = n(5268),
                    y = h.MutationObserver || h.WebKitMutationObserver,
                    x = h.document,
                    _ = h.process,
                    b = h.Promise,
                    w = d(h, "queueMicrotask"),
                    S = w && w.value;
                S ||
                ((r = function () {
                    var t, e;
                    for (v && (t = _.domain) && t.exit(); i; ) {
                        (e = i.fn), (i = i.next);
                        try {
                            e();
                        } catch (t) {
                            throw (i ? a() : (o = void 0), t);
                        }
                    }
                    (o = void 0), t && t.enter();
                }),
                    p || v || g || !y || !x
                        ? !m && b && b.resolve
                            ? (((c = b.resolve(void 0)).constructor = b),
                                (u = c.then),
                                (a = function () {
                                    u.call(c, r);
                                }))
                            : (a = v
                                ? function () {
                                    _.nextTick(r);
                                }
                                : function () {
                                    f.call(h, r);
                                })
                        : ((s = !0),
                            (l = x.createTextNode("")),
                            new y(r).observe(l, { characterData: !0 }),
                            (a = function () {
                                l.data = s = !s;
                            }))),
                    (t.exports =
                        S ||
                        function (t) {
                            var e = { fn: t, next: void 0 };
                            o && (o.next = e), i || ((i = e), a()), (o = e);
                        });
            },
            3366: function (t, e, n) {
                var r = n(7854);
                t.exports = r.Promise;
            },
            133: function (t, e, n) {
                var r = n(7392),
                    i = n(7293);
                t.exports =
                    !!Object.getOwnPropertySymbols &&
                    !i(function () {
                        var t = Symbol();
                        return !String(t) || !(Object(t) instanceof Symbol) || (!Symbol.sham && r && r < 41);
                    });
            },
            8536: function (t, e, n) {
                var r = n(7854),
                    i = n(2788),
                    o = r.WeakMap;
                t.exports = "function" == typeof o && /native code/.test(i(o));
            },
            8523: function (t, e, n) {
                "use strict";
                var r = n(3099),
                    i = function (t) {
                        var e, n;
                        (this.promise = new t(function (t, r) {
                            if (void 0 !== e || void 0 !== n) throw TypeError("Bad Promise constructor");
                            (e = t), (n = r);
                        })),
                            (this.resolve = r(e)),
                            (this.reject = r(n));
                    };
                t.exports.f = function (t) {
                    return new i(t);
                };
            },
            30: function (t, e, n) {
                var r,
                    i = n(9670),
                    o = n(6048),
                    a = n(748),
                    s = n(3501),
                    l = n(490),
                    c = n(317),
                    u = n(6200),
                    h = u("IE_PROTO"),
                    d = function () {},
                    f = function (t) {
                        return "<script>" + t + "</" + "script>";
                    },
                    p = function (t) {
                        t.write(f("")), t.close();
                        var e = t.parentWindow.Object;
                        return (t = null), e;
                    },
                    m = function () {
                        try {
                            r = new ActiveXObject("htmlfile");
                        } catch (t) {}
                        m =
                            document.domain && r
                                ? p(r)
                                : (function () {
                                var t,
                                    e = c("iframe");
                                if (e.style) return (e.style.display = "none"), l.appendChild(e), (e.src = String("javascript:")), (t = e.contentWindow.document).open(), t.write(f("document.F=Object")), t.close(), t.F;
                            })() || p(r);
                        for (var t = a.length; t--; ) delete m.prototype[a[t]];
                        return m();
                    };
                (s[h] = !0),
                    (t.exports =
                        Object.create ||
                        function (t, e) {
                            var n;
                            return null !== t ? ((d.prototype = i(t)), (n = new d()), (d.prototype = null), (n[h] = t)) : (n = m()), void 0 === e ? n : o(n, e);
                        });
            },
            6048: function (t, e, n) {
                var r = n(9781),
                    i = n(3070),
                    o = n(9670),
                    a = n(1956);
                t.exports = r
                    ? Object.defineProperties
                    : function (t, e) {
                        o(t);
                        for (var n, r = a(e), s = r.length, l = 0; s > l; ) i.f(t, (n = r[l++]), e[n]);
                        return t;
                    };
            },
            3070: function (t, e, n) {
                var r = n(9781),
                    i = n(4664),
                    o = n(9670),
                    a = n(4948),
                    s = Object.defineProperty;
                e.f = r
                    ? s
                    : function (t, e, n) {
                        if ((o(t), (e = a(e)), o(n), i))
                            try {
                                return s(t, e, n);
                            } catch (t) {}
                        if ("get" in n || "set" in n) throw TypeError("Accessors not supported");
                        return "value" in n && (t[e] = n.value), t;
                    };
            },
            1236: function (t, e, n) {
                var r = n(9781),
                    i = n(5296),
                    o = n(9114),
                    a = n(5656),
                    s = n(4948),
                    l = n(6656),
                    c = n(4664),
                    u = Object.getOwnPropertyDescriptor;
                e.f = r
                    ? u
                    : function (t, e) {
                        if (((t = a(t)), (e = s(e)), c))
                            try {
                                return u(t, e);
                            } catch (t) {}
                        if (l(t, e)) return o(!i.f.call(t, e), t[e]);
                    };
            },
            1156: function (t, e, n) {
                var r = n(5656),
                    i = n(8006).f,
                    o = {}.toString,
                    a = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
                t.exports.f = function (t) {
                    return a && "[object Window]" == o.call(t)
                        ? (function (t) {
                            try {
                                return i(t);
                            } catch (t) {
                                return a.slice();
                            }
                        })(t)
                        : i(r(t));
                };
            },
            8006: function (t, e, n) {
                var r = n(6324),
                    i = n(748).concat("length", "prototype");
                e.f =
                    Object.getOwnPropertyNames ||
                    function (t) {
                        return r(t, i);
                    };
            },
            5181: function (t, e) {
                e.f = Object.getOwnPropertySymbols;
            },
            9518: function (t, e, n) {
                var r = n(6656),
                    i = n(7908),
                    o = n(6200),
                    a = n(8544),
                    s = o("IE_PROTO"),
                    l = Object.prototype;
                t.exports = a
                    ? Object.getPrototypeOf
                    : function (t) {
                        return (t = i(t)), r(t, s) ? t[s] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? l : null;
                    };
            },
            6324: function (t, e, n) {
                var r = n(6656),
                    i = n(5656),
                    o = n(1318).indexOf,
                    a = n(3501);
                t.exports = function (t, e) {
                    var n,
                        s = i(t),
                        l = 0,
                        c = [];
                    for (n in s) !r(a, n) && r(s, n) && c.push(n);
                    for (; e.length > l; ) r(s, (n = e[l++])) && (~o(c, n) || c.push(n));
                    return c;
                };
            },
            1956: function (t, e, n) {
                var r = n(6324),
                    i = n(748);
                t.exports =
                    Object.keys ||
                    function (t) {
                        return r(t, i);
                    };
            },
            5296: function (t, e) {
                "use strict";
                var n = {}.propertyIsEnumerable,
                    r = Object.getOwnPropertyDescriptor,
                    i = r && !n.call({ 1: 2 }, 1);
                e.f = i
                    ? function (t) {
                        var e = r(this, t);
                        return !!e && e.enumerable;
                    }
                    : n;
            },
            7674: function (t, e, n) {
                var r = n(9670),
                    i = n(6077);
                t.exports =
                    Object.setPrototypeOf ||
                    ("__proto__" in {}
                        ? (function () {
                            var t,
                                e = !1,
                                n = {};
                            try {
                                (t = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(n, []), (e = n instanceof Array);
                            } catch (t) {}
                            return function (n, o) {
                                return r(n), i(o), e ? t.call(n, o) : (n.__proto__ = o), n;
                            };
                        })()
                        : void 0);
            },
            288: function (t, e, n) {
                "use strict";
                var r = n(1694),
                    i = n(648);
                t.exports = r
                    ? {}.toString
                    : function () {
                        return "[object " + i(this) + "]";
                    };
            },
            2140: function (t, e, n) {
                var r = n(111);
                t.exports = function (t, e) {
                    var n, i;
                    if ("string" === e && "function" == typeof (n = t.toString) && !r((i = n.call(t)))) return i;
                    if ("function" == typeof (n = t.valueOf) && !r((i = n.call(t)))) return i;
                    if ("string" !== e && "function" == typeof (n = t.toString) && !r((i = n.call(t)))) return i;
                    throw TypeError("Can't convert object to primitive value");
                };
            },
            3887: function (t, e, n) {
                var r = n(5005),
                    i = n(8006),
                    o = n(5181),
                    a = n(9670);
                t.exports =
                    r("Reflect", "ownKeys") ||
                    function (t) {
                        var e = i.f(a(t)),
                            n = o.f;
                        return n ? e.concat(n(t)) : e;
                    };
            },
            857: function (t, e, n) {
                var r = n(7854);
                t.exports = r;
            },
            2534: function (t) {
                t.exports = function (t) {
                    try {
                        return { error: !1, value: t() };
                    } catch (t) {
                        return { error: !0, value: t };
                    }
                };
            },
            9478: function (t, e, n) {
                var r = n(9670),
                    i = n(111),
                    o = n(8523);
                t.exports = function (t, e) {
                    if ((r(t), i(e) && e.constructor === t)) return e;
                    var n = o.f(t);
                    return (0, n.resolve)(e), n.promise;
                };
            },
            2248: function (t, e, n) {
                var r = n(1320);
                t.exports = function (t, e, n) {
                    for (var i in e) r(t, i, e[i], n);
                    return t;
                };
            },
            1320: function (t, e, n) {
                var r = n(7854),
                    i = n(8880),
                    o = n(6656),
                    a = n(3505),
                    s = n(2788),
                    l = n(9909),
                    c = l.get,
                    u = l.enforce,
                    h = String(String).split("String");
                (t.exports = function (t, e, n, s) {
                    var l,
                        c = !!s && !!s.unsafe,
                        d = !!s && !!s.enumerable,
                        f = !!s && !!s.noTargetGet;
                    "function" == typeof n && ("string" != typeof e || o(n, "name") || i(n, "name", e), (l = u(n)).source || (l.source = h.join("string" == typeof e ? e : ""))),
                        t !== r ? (c ? !f && t[e] && (d = !0) : delete t[e], d ? (t[e] = n) : i(t, e, n)) : d ? (t[e] = n) : a(e, n);
                })(Function.prototype, "toString", function () {
                    return ("function" == typeof this && c(this).source) || s(this);
                });
            },
            7651: function (t, e, n) {
                var r = n(4326),
                    i = n(2261);
                t.exports = function (t, e) {
                    var n = t.exec;
                    if ("function" == typeof n) {
                        var o = n.call(t, e);
                        if ("object" != typeof o) throw TypeError("RegExp exec method returned something other than an Object or null");
                        return o;
                    }
                    if ("RegExp" !== r(t)) throw TypeError("RegExp#exec called on incompatible receiver");
                    return i.call(t, e);
                };
            },
            2261: function (t, e, n) {
                "use strict";
                var r,
                    i,
                    o = n(1340),
                    a = n(7066),
                    s = n(2999),
                    l = n(2309),
                    c = n(30),
                    u = n(9909).get,
                    h = n(9441),
                    d = n(8173),
                    f = RegExp.prototype.exec,
                    p = l("native-string-replace", String.prototype.replace),
                    m = f,
                    g = ((r = /a/), (i = /b*/g), f.call(r, "a"), f.call(i, "a"), 0 !== r.lastIndex || 0 !== i.lastIndex),
                    v = s.UNSUPPORTED_Y || s.BROKEN_CARET,
                    y = void 0 !== /()??/.exec("")[1];
                (g || y || v || h || d) &&
                (m = function (t) {
                    var e,
                        n,
                        r,
                        i,
                        s,
                        l,
                        h,
                        d = this,
                        x = u(d),
                        _ = o(t),
                        b = x.raw;
                    if (b) return (b.lastIndex = d.lastIndex), (e = m.call(b, _)), (d.lastIndex = b.lastIndex), e;
                    var w = x.groups,
                        S = v && d.sticky,
                        M = a.call(d),
                        T = d.source,
                        E = 0,
                        A = _;
                    if (
                        (S &&
                        (-1 === (M = M.replace("y", "")).indexOf("g") && (M += "g"),
                            (A = _.slice(d.lastIndex)),
                        d.lastIndex > 0 && (!d.multiline || (d.multiline && "\n" !== _.charAt(d.lastIndex - 1))) && ((T = "(?: " + T + ")"), (A = " " + A), E++),
                            (n = new RegExp("^(?:" + T + ")", M))),
                        y && (n = new RegExp("^" + T + "$(?!\\s)", M)),
                        g && (r = d.lastIndex),
                            (i = f.call(S ? n : d, A)),
                            S ? (i ? ((i.input = i.input.slice(E)), (i[0] = i[0].slice(E)), (i.index = d.lastIndex), (d.lastIndex += i[0].length)) : (d.lastIndex = 0)) : g && i && (d.lastIndex = d.global ? i.index + i[0].length : r),
                        y &&
                        i &&
                        i.length > 1 &&
                        p.call(i[0], n, function () {
                            for (s = 1; s < arguments.length - 2; s++) void 0 === arguments[s] && (i[s] = void 0);
                        }),
                        i && w)
                    )
                        for (i.groups = l = c(null), s = 0; s < w.length; s++) l[(h = w[s])[0]] = i[h[1]];
                    return i;
                }),
                    (t.exports = m);
            },
            7066: function (t, e, n) {
                "use strict";
                var r = n(9670);
                t.exports = function () {
                    var t = r(this),
                        e = "";
                    return t.global && (e += "g"), t.ignoreCase && (e += "i"), t.multiline && (e += "m"), t.dotAll && (e += "s"), t.unicode && (e += "u"), t.sticky && (e += "y"), e;
                };
            },
            2999: function (t, e, n) {
                var r = n(7293),
                    i = function (t, e) {
                        return RegExp(t, e);
                    };
                (e.UNSUPPORTED_Y = r(function () {
                    var t = i("a", "y");
                    return (t.lastIndex = 2), null != t.exec("abcd");
                })),
                    (e.BROKEN_CARET = r(function () {
                        var t = i("^r", "gy");
                        return (t.lastIndex = 2), null != t.exec("str");
                    }));
            },
            9441: function (t, e, n) {
                var r = n(7293);
                t.exports = r(function () {
                    var t = RegExp(".", "string".charAt(0));
                    return !(t.dotAll && t.exec("\n") && "s" === t.flags);
                });
            },
            8173: function (t, e, n) {
                var r = n(7293);
                t.exports = r(function () {
                    var t = RegExp("(?<a>b)", "string".charAt(5));
                    return "b" !== t.exec("b").groups.a || "bc" !== "b".replace(t, "$<a>c");
                });
            },
            4488: function (t) {
                t.exports = function (t) {
                    if (null == t) throw TypeError("Can't call method on " + t);
                    return t;
                };
            },
            3505: function (t, e, n) {
                var r = n(7854);
                t.exports = function (t, e) {
                    try {
                        Object.defineProperty(r, t, { value: e, configurable: !0, writable: !0 });
                    } catch (n) {
                        r[t] = e;
                    }
                    return e;
                };
            },
            6340: function (t, e, n) {
                "use strict";
                var r = n(5005),
                    i = n(3070),
                    o = n(5112),
                    a = n(9781),
                    s = o("species");
                t.exports = function (t) {
                    var e = r(t),
                        n = i.f;
                    a &&
                    e &&
                    !e[s] &&
                    n(e, s, {
                        configurable: !0,
                        get: function () {
                            return this;
                        },
                    });
                };
            },
            8003: function (t, e, n) {
                var r = n(3070).f,
                    i = n(6656),
                    o = n(5112)("toStringTag");
                t.exports = function (t, e, n) {
                    t && !i((t = n ? t : t.prototype), o) && r(t, o, { configurable: !0, value: e });
                };
            },
            6200: function (t, e, n) {
                var r = n(2309),
                    i = n(9711),
                    o = r("keys");
                t.exports = function (t) {
                    return o[t] || (o[t] = i(t));
                };
            },
            5465: function (t, e, n) {
                var r = n(7854),
                    i = n(3505),
                    o = "__core-js_shared__",
                    a = r[o] || i(o, {});
                t.exports = a;
            },
            2309: function (t, e, n) {
                var r = n(1913),
                    i = n(5465);
                (t.exports = function (t, e) {
                    return i[t] || (i[t] = void 0 !== e ? e : {});
                })("versions", []).push({ version: "3.16.1", mode: r ? "pure" : "global", copyright: "© 2021 Denis Pushkarev (zloirock.ru)" });
            },
            6707: function (t, e, n) {
                var r = n(9670),
                    i = n(3099),
                    o = n(5112)("species");
                t.exports = function (t, e) {
                    var n,
                        a = r(t).constructor;
                    return void 0 === a || null == (n = r(a)[o]) ? e : i(n);
                };
            },
            3429: function (t, e, n) {
                var r = n(7293);
                t.exports = function (t) {
                    return r(function () {
                        var e = ""[t]('"');
                        return e !== e.toLowerCase() || e.split('"').length > 3;
                    });
                };
            },
            8710: function (t, e, n) {
                var r = n(9958),
                    i = n(1340),
                    o = n(4488),
                    a = function (t) {
                        return function (e, n) {
                            var a,
                                s,
                                l = i(o(e)),
                                c = r(n),
                                u = l.length;
                            return c < 0 || c >= u
                                ? t
                                    ? ""
                                    : void 0
                                : (a = l.charCodeAt(c)) < 55296 || a > 56319 || c + 1 === u || (s = l.charCodeAt(c + 1)) < 56320 || s > 57343
                                    ? t
                                        ? l.charAt(c)
                                        : a
                                    : t
                                        ? l.slice(c, c + 2)
                                        : s - 56320 + ((a - 55296) << 10) + 65536;
                        };
                    };
                t.exports = { codeAt: a(!1), charAt: a(!0) };
            },
            4986: function (t, e, n) {
                var r = n(8113);
                t.exports = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(r);
            },
            6650: function (t, e, n) {
                var r = n(7466),
                    i = n(1340),
                    o = n(8415),
                    a = n(4488),
                    s = Math.ceil,
                    l = function (t) {
                        return function (e, n, l) {
                            var c,
                                u,
                                h = i(a(e)),
                                d = h.length,
                                f = void 0 === l ? " " : i(l),
                                p = r(n);
                            return p <= d || "" == f ? h : ((c = p - d), (u = o.call(f, s(c / f.length))).length > c && (u = u.slice(0, c)), t ? h + u : u + h);
                        };
                    };
                t.exports = { start: l(!1), end: l(!0) };
            },
            8415: function (t, e, n) {
                "use strict";
                var r = n(9958),
                    i = n(1340),
                    o = n(4488);
                t.exports = function (t) {
                    var e = i(o(this)),
                        n = "",
                        a = r(t);
                    if (a < 0 || a == 1 / 0) throw RangeError("Wrong number of repetitions");
                    for (; a > 0; (a >>>= 1) && (e += e)) 1 & a && (n += e);
                    return n;
                };
            },
            261: function (t, e, n) {
                var r,
                    i,
                    o,
                    a,
                    s = n(7854),
                    l = n(7293),
                    c = n(9974),
                    u = n(490),
                    h = n(317),
                    d = n(6833),
                    f = n(5268),
                    p = s.setImmediate,
                    m = s.clearImmediate,
                    g = s.process,
                    v = s.MessageChannel,
                    y = s.Dispatch,
                    x = 0,
                    _ = {},
                    b = "onreadystatechange";
                try {
                    r = s.location;
                } catch (t) {}
                var w = function (t) {
                        if (_.hasOwnProperty(t)) {
                            var e = _[t];
                            delete _[t], e();
                        }
                    },
                    S = function (t) {
                        return function () {
                            w(t);
                        };
                    },
                    M = function (t) {
                        w(t.data);
                    },
                    T = function (t) {
                        s.postMessage(String(t), r.protocol + "//" + r.host);
                    };
                (p && m) ||
                ((p = function (t) {
                    for (var e = [], n = arguments.length, r = 1; n > r; ) e.push(arguments[r++]);
                    return (
                        (_[++x] = function () {
                            ("function" == typeof t ? t : Function(t)).apply(void 0, e);
                        }),
                            i(x),
                            x
                    );
                }),
                    (m = function (t) {
                        delete _[t];
                    }),
                    f
                        ? (i = function (t) {
                            g.nextTick(S(t));
                        })
                        : y && y.now
                            ? (i = function (t) {
                                y.now(S(t));
                            })
                            : v && !d
                                ? ((a = (o = new v()).port2), (o.port1.onmessage = M), (i = c(a.postMessage, a, 1)))
                                : s.addEventListener && "function" == typeof postMessage && !s.importScripts && r && "file:" !== r.protocol && !l(T)
                                    ? ((i = T), s.addEventListener("message", M, !1))
                                    : (i =
                                        b in h("script")
                                            ? function (t) {
                                                u.appendChild(h("script")).onreadystatechange = function () {
                                                    u.removeChild(this), w(t);
                                                };
                                            }
                                            : function (t) {
                                                setTimeout(S(t), 0);
                                            })),
                    (t.exports = { set: p, clear: m });
            },
            863: function (t, e, n) {
                var r = n(4326);
                t.exports = function (t) {
                    if ("number" != typeof t && "Number" != r(t)) throw TypeError("Incorrect invocation");
                    return +t;
                };
            },
            1400: function (t, e, n) {
                var r = n(9958),
                    i = Math.max,
                    o = Math.min;
                t.exports = function (t, e) {
                    var n = r(t);
                    return n < 0 ? i(n + e, 0) : o(n, e);
                };
            },
            5656: function (t, e, n) {
                var r = n(8361),
                    i = n(4488);
                t.exports = function (t) {
                    return r(i(t));
                };
            },
            9958: function (t) {
                var e = Math.ceil,
                    n = Math.floor;
                t.exports = function (t) {
                    return isNaN((t = +t)) ? 0 : (t > 0 ? n : e)(t);
                };
            },
            7466: function (t, e, n) {
                var r = n(9958),
                    i = Math.min;
                t.exports = function (t) {
                    return t > 0 ? i(r(t), 9007199254740991) : 0;
                };
            },
            7908: function (t, e, n) {
                var r = n(4488);
                t.exports = function (t) {
                    return Object(r(t));
                };
            },
            7593: function (t, e, n) {
                var r = n(111),
                    i = n(2190),
                    o = n(2140),
                    a = n(5112)("toPrimitive");
                t.exports = function (t, e) {
                    if (!r(t) || i(t)) return t;
                    var n,
                        s = t[a];
                    if (void 0 !== s) {
                        if ((void 0 === e && (e = "default"), (n = s.call(t, e)), !r(n) || i(n))) return n;
                        throw TypeError("Can't convert object to primitive value");
                    }
                    return void 0 === e && (e = "number"), o(t, e);
                };
            },
            4948: function (t, e, n) {
                var r = n(7593),
                    i = n(2190);
                t.exports = function (t) {
                    var e = r(t, "string");
                    return i(e) ? e : String(e);
                };
            },
            1694: function (t, e, n) {
                var r = {};
                (r[n(5112)("toStringTag")] = "z"), (t.exports = "[object z]" === String(r));
            },
            1340: function (t, e, n) {
                var r = n(2190);
                t.exports = function (t) {
                    if (r(t)) throw TypeError("Cannot convert a Symbol value to a string");
                    return String(t);
                };
            },
            9711: function (t) {
                var e = 0,
                    n = Math.random();
                t.exports = function (t) {
                    return "Symbol(" + String(void 0 === t ? "" : t) + ")_" + (++e + n).toString(36);
                };
            },
            3307: function (t, e, n) {
                var r = n(133);
                t.exports = r && !Symbol.sham && "symbol" == typeof Symbol.iterator;
            },
            6061: function (t, e, n) {
                var r = n(5112);
                e.f = r;
            },
            5112: function (t, e, n) {
                var r = n(7854),
                    i = n(2309),
                    o = n(6656),
                    a = n(9711),
                    s = n(133),
                    l = n(3307),
                    c = i("wks"),
                    u = r.Symbol,
                    h = l ? u : (u && u.withoutSetter) || a;
                t.exports = function (t) {
                    return (o(c, t) && (s || "string" == typeof c[t])) || (s && o(u, t) ? (c[t] = u[t]) : (c[t] = h("Symbol." + t))), c[t];
                };
            },
            2222: function (t, e, n) {
                "use strict";
                var r = n(2109),
                    i = n(7293),
                    o = n(3157),
                    a = n(111),
                    s = n(7908),
                    l = n(7466),
                    c = n(6135),
                    u = n(5417),
                    h = n(1194),
                    d = n(5112),
                    f = n(7392),
                    p = d("isConcatSpreadable"),
                    m = 9007199254740991,
                    g = "Maximum allowed index exceeded",
                    v =
                        f >= 51 ||
                        !i(function () {
                            var t = [];
                            return (t[p] = !1), t.concat()[0] !== t;
                        }),
                    y = h("concat"),
                    x = function (t) {
                        if (!a(t)) return !1;
                        var e = t[p];
                        return void 0 !== e ? !!e : o(t);
                    };
                r(
                    { target: "Array", proto: !0, forced: !v || !y },
                    {
                        concat: function (t) {
                            var e,
                                n,
                                r,
                                i,
                                o,
                                a = s(this),
                                h = u(a, 0),
                                d = 0;
                            for (e = -1, r = arguments.length; e < r; e++)
                                if (x((o = -1 === e ? a : arguments[e]))) {
                                    if (d + (i = l(o.length)) > m) throw TypeError(g);
                                    for (n = 0; n < i; n++, d++) n in o && c(h, d, o[n]);
                                } else {
                                    if (d >= m) throw TypeError(g);
                                    c(h, d++, o);
                                }
                            return (h.length = d), h;
                        },
                    }
                );
            },
            7327: function (t, e, n) {
                "use strict";
                var r = n(2109),
                    i = n(2092).filter;
                r(
                    { target: "Array", proto: !0, forced: !n(1194)("filter") },
                    {
                        filter: function (t) {
                            return i(this, t, arguments.length > 1 ? arguments[1] : void 0);
                        },
                    }
                );
            },
            9826: function (t, e, n) {
                "use strict";
                var r = n(2109),
                    i = n(2092).find,
                    o = n(1223),
                    a = "find",
                    s = !0;
                a in [] &&
                Array(1).find(function () {
                    s = !1;
                }),
                    r(
                        { target: "Array", proto: !0, forced: s },
                        {
                            find: function (t) {
                                return i(this, t, arguments.length > 1 ? arguments[1] : void 0);
                            },
                        }
                    ),
                    o(a);
            },
            1038: function (t, e, n) {
                var r = n(2109),
                    i = n(8457);
                r(
                    {
                        target: "Array",
                        stat: !0,
                        forced: !n(7072)(function (t) {
                            Array.from(t);
                        }),
                    },
                    { from: i }
                );
            },
            6992: function (t, e, n) {
                "use strict";
                var r = n(5656),
                    i = n(1223),
                    o = n(7497),
                    a = n(9909),
                    s = n(654),
                    l = "Array Iterator",
                    c = a.set,
                    u = a.getterFor(l);
                (t.exports = s(
                    Array,
                    "Array",
                    function (t, e) {
                        c(this, { type: l, target: r(t), index: 0, kind: e });
                    },
                    function () {
                        var t = u(this),
                            e = t.target,
                            n = t.kind,
                            r = t.index++;
                        return !e || r >= e.length ? ((t.target = void 0), { value: void 0, done: !0 }) : "keys" == n ? { value: r, done: !1 } : "values" == n ? { value: e[r], done: !1 } : { value: [r, e[r]], done: !1 };
                    },
                    "values"
                )),
                    (o.Arguments = o.Array),
                    i("keys"),
                    i("values"),
                    i("entries");
            },
            7042: function (t, e, n) {
                "use strict";
                var r = n(2109),
                    i = n(111),
                    o = n(3157),
                    a = n(1400),
                    s = n(7466),
                    l = n(5656),
                    c = n(6135),
                    u = n(5112),
                    h = n(1194)("slice"),
                    d = u("species"),
                    f = [].slice,
                    p = Math.max;
                r(
                    { target: "Array", proto: !0, forced: !h },
                    {
                        slice: function (t, e) {
                            var n,
                                r,
                                u,
                                h = l(this),
                                m = s(h.length),
                                g = a(t, m),
                                v = a(void 0 === e ? m : e, m);
                            if (o(h) && ("function" != typeof (n = h.constructor) || (n !== Array && !o(n.prototype)) ? i(n) && null === (n = n[d]) && (n = void 0) : (n = void 0), n === Array || void 0 === n)) return f.call(h, g, v);
                            for (r = new (void 0 === n ? Array : n)(p(v - g, 0)), u = 0; g < v; g++, u++) g in h && c(r, u, h[g]);
                            return (r.length = u), r;
                        },
                    }
                );
            },
            8309: function (t, e, n) {
                var r = n(9781),
                    i = n(3070).f,
                    o = Function.prototype,
                    a = o.toString,
                    s = /^\s*function ([^ (]*)/,
                    l = "name";
                r &&
                !(l in o) &&
                i(o, l, {
                    configurable: !0,
                    get: function () {
                        try {
                            return a.call(this).match(s)[1];
                        } catch (t) {
                            return "";
                        }
                    },
                });
            },
            6977: function (t, e, n) {
                "use strict";
                var r = n(2109),
                    i = n(9958),
                    o = n(863),
                    a = n(8415),
                    s = n(7293),
                    l = (1).toFixed,
                    c = Math.floor,
                    u = function (t, e, n) {
                        return 0 === e ? n : e % 2 == 1 ? u(t, e - 1, n * t) : u(t * t, e / 2, n);
                    },
                    h = function (t, e, n) {
                        for (var r = -1, i = n; ++r < 6; ) (i += e * t[r]), (t[r] = i % 1e7), (i = c(i / 1e7));
                    },
                    d = function (t, e) {
                        for (var n = 6, r = 0; --n >= 0; ) (r += t[n]), (t[n] = c(r / e)), (r = (r % e) * 1e7);
                    },
                    f = function (t) {
                        for (var e = 6, n = ""; --e >= 0; )
                            if ("" !== n || 0 === e || 0 !== t[e]) {
                                var r = String(t[e]);
                                n = "" === n ? r : n + a.call("0", 7 - r.length) + r;
                            }
                        return n;
                    };
                r(
                    {
                        target: "Number",
                        proto: !0,
                        forced:
                            (l && ("0.000" !== (8e-5).toFixed(3) || "1" !== (0.9).toFixed(0) || "1.25" !== (1.255).toFixed(2) || "1000000000000000128" !== (0xde0b6b3a7640080).toFixed(0))) ||
                            !s(function () {
                                l.call({});
                            }),
                    },
                    {
                        toFixed: function (t) {
                            var e,
                                n,
                                r,
                                s,
                                l = o(this),
                                c = i(t),
                                p = [0, 0, 0, 0, 0, 0],
                                m = "",
                                g = "0";
                            if (c < 0 || c > 20) throw RangeError("Incorrect fraction digits");
                            if (l != l) return "NaN";
                            if (l <= -1e21 || l >= 1e21) return String(l);
                            if ((l < 0 && ((m = "-"), (l = -l)), l > 1e-21))
                                if (
                                    ((n =
                                        (e =
                                            (function (t) {
                                                for (var e = 0, n = t; n >= 4096; ) (e += 12), (n /= 4096);
                                                for (; n >= 2; ) (e += 1), (n /= 2);
                                                return e;
                                            })(l * u(2, 69, 1)) - 69) < 0
                                            ? l * u(2, -e, 1)
                                            : l / u(2, e, 1)),
                                        (n *= 4503599627370496),
                                    (e = 52 - e) > 0)
                                ) {
                                    for (h(p, 0, n), r = c; r >= 7; ) h(p, 1e7, 0), (r -= 7);
                                    for (h(p, u(10, r, 1), 0), r = e - 1; r >= 23; ) d(p, 1 << 23), (r -= 23);
                                    d(p, 1 << r), h(p, 1, 1), d(p, 2), (g = f(p));
                                } else h(p, 0, n), h(p, 1 << -e, 0), (g = f(p) + a.call("0", c));
                            return (g = c > 0 ? m + ((s = g.length) <= c ? "0." + a.call("0", c - s) + g : g.slice(0, s - c) + "." + g.slice(s - c)) : m + g);
                        },
                    }
                );
            },
            489: function (t, e, n) {
                var r = n(2109),
                    i = n(7293),
                    o = n(7908),
                    a = n(9518),
                    s = n(8544);
                r(
                    {
                        target: "Object",
                        stat: !0,
                        forced: i(function () {
                            a(1);
                        }),
                        sham: !s,
                    },
                    {
                        getPrototypeOf: function (t) {
                            return a(o(t));
                        },
                    }
                );
            },
            7941: function (t, e, n) {
                var r = n(2109),
                    i = n(7908),
                    o = n(1956);
                r(
                    {
                        target: "Object",
                        stat: !0,
                        forced: n(7293)(function () {
                            o(1);
                        }),
                    },
                    {
                        keys: function (t) {
                            return o(i(t));
                        },
                    }
                );
            },
            1539: function (t, e, n) {
                var r = n(1694),
                    i = n(1320),
                    o = n(288);
                r || i(Object.prototype, "toString", o, { unsafe: !0 });
            },
            8674: function (t, e, n) {
                "use strict";
                var r,
                    i,
                    o,
                    a,
                    s = n(2109),
                    l = n(1913),
                    c = n(7854),
                    u = n(5005),
                    h = n(3366),
                    d = n(1320),
                    f = n(2248),
                    p = n(7674),
                    m = n(8003),
                    g = n(6340),
                    v = n(111),
                    y = n(3099),
                    x = n(5787),
                    _ = n(2788),
                    b = n(408),
                    w = n(7072),
                    S = n(6707),
                    M = n(261).set,
                    T = n(5948),
                    E = n(9478),
                    A = n(842),
                    L = n(8523),
                    C = n(2534),
                    R = n(9909),
                    P = n(4705),
                    I = n(5112),
                    O = n(7871),
                    D = n(5268),
                    k = n(7392),
                    U = I("species"),
                    F = "Promise",
                    N = R.get,
                    z = R.set,
                    B = R.getterFor(F),
                    G = h && h.prototype,
                    H = h,
                    V = G,
                    W = c.TypeError,
                    j = c.document,
                    q = c.process,
                    X = L.f,
                    Y = X,
                    Z = !!(j && j.createEvent && c.dispatchEvent),
                    J = "function" == typeof PromiseRejectionEvent,
                    $ = "unhandledrejection",
                    Q = !1,
                    K = P(F, function () {
                        var t = _(H),
                            e = t !== String(H);
                        if (!e && 66 === k) return !0;
                        if (l && !V.finally) return !0;
                        if (k >= 51 && /native code/.test(t)) return !1;
                        var n = new H(function (t) {
                                t(1);
                            }),
                            r = function (t) {
                                t(
                                    function () {},
                                    function () {}
                                );
                            };
                        return ((n.constructor = {})[U] = r), !(Q = n.then(function () {}) instanceof r) || (!e && O && !J);
                    }),
                    tt =
                        K ||
                        !w(function (t) {
                            H.all(t).catch(function () {});
                        }),
                    et = function (t) {
                        var e;
                        return !(!v(t) || "function" != typeof (e = t.then)) && e;
                    },
                    nt = function (t, e) {
                        if (!t.notified) {
                            t.notified = !0;
                            var n = t.reactions;
                            T(function () {
                                for (var r = t.value, i = 1 == t.state, o = 0; n.length > o; ) {
                                    var a,
                                        s,
                                        l,
                                        c = n[o++],
                                        u = i ? c.ok : c.fail,
                                        h = c.resolve,
                                        d = c.reject,
                                        f = c.domain;
                                    try {
                                        u
                                            ? (i || (2 === t.rejection && at(t), (t.rejection = 1)),
                                                !0 === u ? (a = r) : (f && f.enter(), (a = u(r)), f && (f.exit(), (l = !0))),
                                                a === c.promise ? d(W("Promise-chain cycle")) : (s = et(a)) ? s.call(a, h, d) : h(a))
                                            : d(r);
                                    } catch (t) {
                                        f && !l && f.exit(), d(t);
                                    }
                                }
                                (t.reactions = []), (t.notified = !1), e && !t.rejection && it(t);
                            });
                        }
                    },
                    rt = function (t, e, n) {
                        var r, i;
                        Z ? (((r = j.createEvent("Event")).promise = e), (r.reason = n), r.initEvent(t, !1, !0), c.dispatchEvent(r)) : (r = { promise: e, reason: n }),
                            !J && (i = c["on" + t]) ? i(r) : t === $ && A("Unhandled promise rejection", n);
                    },
                    it = function (t) {
                        M.call(c, function () {
                            var e,
                                n = t.facade,
                                r = t.value;
                            if (
                                ot(t) &&
                                ((e = C(function () {
                                    D ? q.emit("unhandledRejection", r, n) : rt($, n, r);
                                })),
                                    (t.rejection = D || ot(t) ? 2 : 1),
                                    e.error)
                            )
                                throw e.value;
                        });
                    },
                    ot = function (t) {
                        return 1 !== t.rejection && !t.parent;
                    },
                    at = function (t) {
                        M.call(c, function () {
                            var e = t.facade;
                            D ? q.emit("rejectionHandled", e) : rt("rejectionhandled", e, t.value);
                        });
                    },
                    st = function (t, e, n) {
                        return function (r) {
                            t(e, r, n);
                        };
                    },
                    lt = function (t, e, n) {
                        t.done || ((t.done = !0), n && (t = n), (t.value = e), (t.state = 2), nt(t, !0));
                    },
                    ct = function (t, e, n) {
                        if (!t.done) {
                            (t.done = !0), n && (t = n);
                            try {
                                if (t.facade === e) throw W("Promise can't be resolved itself");
                                var r = et(e);
                                r
                                    ? T(function () {
                                        var n = { done: !1 };
                                        try {
                                            r.call(e, st(ct, n, t), st(lt, n, t));
                                        } catch (e) {
                                            lt(n, e, t);
                                        }
                                    })
                                    : ((t.value = e), (t.state = 1), nt(t, !1));
                            } catch (e) {
                                lt({ done: !1 }, e, t);
                            }
                        }
                    };
                if (
                    K &&
                    ((V = (H = function (t) {
                        x(this, H, F), y(t), r.call(this);
                        var e = N(this);
                        try {
                            t(st(ct, e), st(lt, e));
                        } catch (t) {
                            lt(e, t);
                        }
                    }).prototype),
                        ((r = function (t) {
                            z(this, { type: F, done: !1, notified: !1, parent: !1, reactions: [], rejection: !1, state: 0, value: void 0 });
                        }).prototype = f(V, {
                            then: function (t, e) {
                                var n = B(this),
                                    r = X(S(this, H));
                                return (r.ok = "function" != typeof t || t), (r.fail = "function" == typeof e && e), (r.domain = D ? q.domain : void 0), (n.parent = !0), n.reactions.push(r), 0 != n.state && nt(n, !1), r.promise;
                            },
                            catch: function (t) {
                                return this.then(void 0, t);
                            },
                        })),
                        (i = function () {
                            var t = new r(),
                                e = N(t);
                            (this.promise = t), (this.resolve = st(ct, e)), (this.reject = st(lt, e));
                        }),
                        (L.f = X = function (t) {
                            return t === H || t === o ? new i(t) : Y(t);
                        }),
                    !l && "function" == typeof h && G !== Object.prototype)
                ) {
                    (a = G.then),
                    Q ||
                    (d(
                        G,
                        "then",
                        function (t, e) {
                            var n = this;
                            return new H(function (t, e) {
                                a.call(n, t, e);
                            }).then(t, e);
                        },
                        { unsafe: !0 }
                    ),
                        d(G, "catch", V.catch, { unsafe: !0 }));
                    try {
                        delete G.constructor;
                    } catch (t) {}
                    p && p(G, V);
                }
                s({ global: !0, wrap: !0, forced: K }, { Promise: H }),
                    m(H, F, !1, !0),
                    g(F),
                    (o = u(F)),
                    s(
                        { target: F, stat: !0, forced: K },
                        {
                            reject: function (t) {
                                var e = X(this);
                                return e.reject.call(void 0, t), e.promise;
                            },
                        }
                    ),
                    s(
                        { target: F, stat: !0, forced: l || K },
                        {
                            resolve: function (t) {
                                return E(l && this === o ? H : this, t);
                            },
                        }
                    ),
                    s(
                        { target: F, stat: !0, forced: tt },
                        {
                            all: function (t) {
                                var e = this,
                                    n = X(e),
                                    r = n.resolve,
                                    i = n.reject,
                                    o = C(function () {
                                        var n = y(e.resolve),
                                            o = [],
                                            a = 0,
                                            s = 1;
                                        b(t, function (t) {
                                            var l = a++,
                                                c = !1;
                                            o.push(void 0),
                                                s++,
                                                n.call(e, t).then(function (t) {
                                                    c || ((c = !0), (o[l] = t), --s || r(o));
                                                }, i);
                                        }),
                                        --s || r(o);
                                    });
                                return o.error && i(o.value), n.promise;
                            },
                            race: function (t) {
                                var e = this,
                                    n = X(e),
                                    r = n.reject,
                                    i = C(function () {
                                        var i = y(e.resolve);
                                        b(t, function (t) {
                                            i.call(e, t).then(n.resolve, r);
                                        });
                                    });
                                return i.error && r(i.value), n.promise;
                            },
                        }
                    );
            },
            2419: function (t, e, n) {
                var r = n(2109),
                    i = n(5005),
                    o = n(3099),
                    a = n(9670),
                    s = n(111),
                    l = n(30),
                    c = n(7065),
                    u = n(7293),
                    h = i("Reflect", "construct"),
                    d = u(function () {
                        function t() {}
                        return !(h(function () {}, [], t) instanceof t);
                    }),
                    f = !u(function () {
                        h(function () {});
                    }),
                    p = d || f;
                r(
                    { target: "Reflect", stat: !0, forced: p, sham: p },
                    {
                        construct: function (t, e) {
                            o(t), a(e);
                            var n = arguments.length < 3 ? t : o(arguments[2]);
                            if (f && !d) return h(t, e, n);
                            if (t == n) {
                                switch (e.length) {
                                    case 0:
                                        return new t();
                                    case 1:
                                        return new t(e[0]);
                                    case 2:
                                        return new t(e[0], e[1]);
                                    case 3:
                                        return new t(e[0], e[1], e[2]);
                                    case 4:
                                        return new t(e[0], e[1], e[2], e[3]);
                                }
                                var r = [null];
                                return r.push.apply(r, e), new (c.apply(t, r))();
                            }
                            var i = n.prototype,
                                u = l(s(i) ? i : Object.prototype),
                                p = Function.apply.call(t, u, e);
                            return s(p) ? p : u;
                        },
                    }
                );
            },
            4916: function (t, e, n) {
                "use strict";
                var r = n(2109),
                    i = n(2261);
                r({ target: "RegExp", proto: !0, forced: /./.exec !== i }, { exec: i });
            },
            9714: function (t, e, n) {
                "use strict";
                var r = n(1320),
                    i = n(9670),
                    o = n(1340),
                    a = n(7293),
                    s = n(7066),
                    l = "toString",
                    c = RegExp.prototype,
                    u = c.toString,
                    h = a(function () {
                        return "/a/b" != u.call({ source: "a", flags: "b" });
                    }),
                    d = u.name != l;
                (h || d) &&
                r(
                    RegExp.prototype,
                    l,
                    function () {
                        var t = i(this),
                            e = o(t.source),
                            n = t.flags;
                        return "/" + e + "/" + o(void 0 === n && t instanceof RegExp && !("flags" in c) ? s.call(t) : n);
                    },
                    { unsafe: !0 }
                );
            },
            8783: function (t, e, n) {
                "use strict";
                var r = n(8710).charAt,
                    i = n(1340),
                    o = n(9909),
                    a = n(654),
                    s = "String Iterator",
                    l = o.set,
                    c = o.getterFor(s);
                a(
                    String,
                    "String",
                    function (t) {
                        l(this, { type: s, string: i(t), index: 0 });
                    },
                    function () {
                        var t,
                            e = c(this),
                            n = e.string,
                            i = e.index;
                        return i >= n.length ? { value: void 0, done: !0 } : ((t = r(n, i)), (e.index += t.length), { value: t, done: !1 });
                    }
                );
            },
            4723: function (t, e, n) {
                "use strict";
                var r = n(7007),
                    i = n(9670),
                    o = n(7466),
                    a = n(1340),
                    s = n(4488),
                    l = n(1530),
                    c = n(7651);
                r("match", function (t, e, n) {
                    return [
                        function (e) {
                            var n = s(this),
                                r = null == e ? void 0 : e[t];
                            return void 0 !== r ? r.call(e, n) : new RegExp(e)[t](a(n));
                        },
                        function (t) {
                            var r = i(this),
                                s = a(t),
                                u = n(e, r, s);
                            if (u.done) return u.value;
                            if (!r.global) return c(r, s);
                            var h = r.unicode;
                            r.lastIndex = 0;
                            for (var d, f = [], p = 0; null !== (d = c(r, s)); ) {
                                var m = a(d[0]);
                                (f[p] = m), "" === m && (r.lastIndex = l(s, o(r.lastIndex), h)), p++;
                            }
                            return 0 === p ? null : f;
                        },
                    ];
                });
            },
            3112: function (t, e, n) {
                "use strict";
                var r = n(2109),
                    i = n(6650).start;
                r(
                    { target: "String", proto: !0, forced: n(4986) },
                    {
                        padStart: function (t) {
                            return i(this, t, arguments.length > 1 ? arguments[1] : void 0);
                        },
                    }
                );
            },
            86: function (t, e, n) {
                "use strict";
                var r = n(2109),
                    i = n(4230);
                r(
                    { target: "String", proto: !0, forced: n(3429)("sub") },
                    {
                        sub: function () {
                            return i(this, "sub", "", "");
                        },
                    }
                );
            },
            1817: function (t, e, n) {
                "use strict";
                var r = n(2109),
                    i = n(9781),
                    o = n(7854),
                    a = n(6656),
                    s = n(111),
                    l = n(3070).f,
                    c = n(9920),
                    u = o.Symbol;
                if (i && "function" == typeof u && (!("description" in u.prototype) || void 0 !== u().description)) {
                    var h = {},
                        d = function () {
                            var t = arguments.length < 1 || void 0 === arguments[0] ? void 0 : String(arguments[0]),
                                e = this instanceof d ? new u(t) : void 0 === t ? u() : u(t);
                            return "" === t && (h[e] = !0), e;
                        };
                    c(d, u);
                    var f = (d.prototype = u.prototype);
                    f.constructor = d;
                    var p = f.toString,
                        m = "Symbol(test)" == String(u("test")),
                        g = /^Symbol\((.*)\)[^)]+$/;
                    l(f, "description", {
                        configurable: !0,
                        get: function () {
                            var t = s(this) ? this.valueOf() : this,
                                e = p.call(t);
                            if (a(h, t)) return "";
                            var n = m ? e.slice(7, -1) : e.replace(g, "$1");
                            return "" === n ? void 0 : n;
                        },
                    }),
                        r({ global: !0, forced: !0 }, { Symbol: d });
                }
            },
            2165: function (t, e, n) {
                n(7235)("iterator");
            },
            2526: function (t, e, n) {
                "use strict";
                var r = n(2109),
                    i = n(7854),
                    o = n(5005),
                    a = n(1913),
                    s = n(9781),
                    l = n(133),
                    c = n(7293),
                    u = n(6656),
                    h = n(3157),
                    d = n(111),
                    f = n(2190),
                    p = n(9670),
                    m = n(7908),
                    g = n(5656),
                    v = n(4948),
                    y = n(1340),
                    x = n(9114),
                    _ = n(30),
                    b = n(1956),
                    w = n(8006),
                    S = n(1156),
                    M = n(5181),
                    T = n(1236),
                    E = n(3070),
                    A = n(5296),
                    L = n(8880),
                    C = n(1320),
                    R = n(2309),
                    P = n(6200),
                    I = n(3501),
                    O = n(9711),
                    D = n(5112),
                    k = n(6061),
                    U = n(7235),
                    F = n(8003),
                    N = n(9909),
                    z = n(2092).forEach,
                    B = P("hidden"),
                    G = "Symbol",
                    H = D("toPrimitive"),
                    V = N.set,
                    W = N.getterFor(G),
                    j = Object.prototype,
                    q = i.Symbol,
                    X = o("JSON", "stringify"),
                    Y = T.f,
                    Z = E.f,
                    J = S.f,
                    $ = A.f,
                    Q = R("symbols"),
                    K = R("op-symbols"),
                    tt = R("string-to-symbol-registry"),
                    et = R("symbol-to-string-registry"),
                    nt = R("wks"),
                    rt = i.QObject,
                    it = !rt || !rt.prototype || !rt.prototype.findChild,
                    ot =
                        s &&
                        c(function () {
                            return (
                                7 !=
                                _(
                                    Z({}, "a", {
                                        get: function () {
                                            return Z(this, "a", { value: 7 }).a;
                                        },
                                    })
                                ).a
                            );
                        })
                            ? function (t, e, n) {
                                var r = Y(j, e);
                                r && delete j[e], Z(t, e, n), r && t !== j && Z(j, e, r);
                            }
                            : Z,
                    at = function (t, e) {
                        var n = (Q[t] = _(q.prototype));
                        return V(n, { type: G, tag: t, description: e }), s || (n.description = e), n;
                    },
                    st = function (t, e, n) {
                        t === j && st(K, e, n), p(t);
                        var r = v(e);
                        return p(n), u(Q, r) ? (n.enumerable ? (u(t, B) && t[B][r] && (t[B][r] = !1), (n = _(n, { enumerable: x(0, !1) }))) : (u(t, B) || Z(t, B, x(1, {})), (t[B][r] = !0)), ot(t, r, n)) : Z(t, r, n);
                    },
                    lt = function (t, e) {
                        p(t);
                        var n = g(e),
                            r = b(n).concat(dt(n));
                        return (
                            z(r, function (e) {
                                (s && !ct.call(n, e)) || st(t, e, n[e]);
                            }),
                                t
                        );
                    },
                    ct = function (t) {
                        var e = v(t),
                            n = $.call(this, e);
                        return !(this === j && u(Q, e) && !u(K, e)) && (!(n || !u(this, e) || !u(Q, e) || (u(this, B) && this[B][e])) || n);
                    },
                    ut = function (t, e) {
                        var n = g(t),
                            r = v(e);
                        if (n !== j || !u(Q, r) || u(K, r)) {
                            var i = Y(n, r);
                            return !i || !u(Q, r) || (u(n, B) && n[B][r]) || (i.enumerable = !0), i;
                        }
                    },
                    ht = function (t) {
                        var e = J(g(t)),
                            n = [];
                        return (
                            z(e, function (t) {
                                u(Q, t) || u(I, t) || n.push(t);
                            }),
                                n
                        );
                    },
                    dt = function (t) {
                        var e = t === j,
                            n = J(e ? K : g(t)),
                            r = [];
                        return (
                            z(n, function (t) {
                                !u(Q, t) || (e && !u(j, t)) || r.push(Q[t]);
                            }),
                                r
                        );
                    };
                (l ||
                (C(
                    (q = function () {
                        if (this instanceof q) throw TypeError("Symbol is not a constructor");
                        var t = arguments.length && void 0 !== arguments[0] ? y(arguments[0]) : void 0,
                            e = O(t),
                            n = function (t) {
                                this === j && n.call(K, t), u(this, B) && u(this[B], e) && (this[B][e] = !1), ot(this, e, x(1, t));
                            };
                        return s && it && ot(j, e, { configurable: !0, set: n }), at(e, t);
                    }).prototype,
                    "toString",
                    function () {
                        return W(this).tag;
                    }
                ),
                    C(q, "withoutSetter", function (t) {
                        return at(O(t), t);
                    }),
                    (A.f = ct),
                    (E.f = st),
                    (T.f = ut),
                    (w.f = S.f = ht),
                    (M.f = dt),
                    (k.f = function (t) {
                        return at(D(t), t);
                    }),
                s &&
                (Z(q.prototype, "description", {
                    configurable: !0,
                    get: function () {
                        return W(this).description;
                    },
                }),
                a || C(j, "propertyIsEnumerable", ct, { unsafe: !0 }))),
                    r({ global: !0, wrap: !0, forced: !l, sham: !l }, { Symbol: q }),
                    z(b(nt), function (t) {
                        U(t);
                    }),
                    r(
                        { target: G, stat: !0, forced: !l },
                        {
                            for: function (t) {
                                var e = y(t);
                                if (u(tt, e)) return tt[e];
                                var n = q(e);
                                return (tt[e] = n), (et[n] = e), n;
                            },
                            keyFor: function (t) {
                                if (!f(t)) throw TypeError(t + " is not a symbol");
                                if (u(et, t)) return et[t];
                            },
                            useSetter: function () {
                                it = !0;
                            },
                            useSimple: function () {
                                it = !1;
                            },
                        }
                    ),
                    r(
                        { target: "Object", stat: !0, forced: !l, sham: !s },
                        {
                            create: function (t, e) {
                                return void 0 === e ? _(t) : lt(_(t), e);
                            },
                            defineProperty: st,
                            defineProperties: lt,
                            getOwnPropertyDescriptor: ut,
                        }
                    ),
                    r({ target: "Object", stat: !0, forced: !l }, { getOwnPropertyNames: ht, getOwnPropertySymbols: dt }),
                    r(
                        {
                            target: "Object",
                            stat: !0,
                            forced: c(function () {
                                M.f(1);
                            }),
                        },
                        {
                            getOwnPropertySymbols: function (t) {
                                return M.f(m(t));
                            },
                        }
                    ),
                    X) &&
                r(
                    {
                        target: "JSON",
                        stat: !0,
                        forced:
                            !l ||
                            c(function () {
                                var t = q();
                                return "[null]" != X([t]) || "{}" != X({ a: t }) || "{}" != X(Object(t));
                            }),
                    },
                    {
                        stringify: function (t, e, n) {
                            for (var r, i = [t], o = 1; arguments.length > o; ) i.push(arguments[o++]);
                            if (((r = e), (d(e) || void 0 !== t) && !f(t)))
                                return (
                                    h(e) ||
                                    (e = function (t, e) {
                                        if (("function" == typeof r && (e = r.call(this, t, e)), !f(e))) return e;
                                    }),
                                        (i[1] = e),
                                        X.apply(null, i)
                                );
                        },
                    }
                );
                q.prototype[H] || L(q.prototype, H, q.prototype.valueOf), F(q, G), (I[B] = !0);
            },
            4747: function (t, e, n) {
                var r = n(7854),
                    i = n(8324),
                    o = n(8533),
                    a = n(8880);
                for (var s in i) {
                    var l = r[s],
                        c = l && l.prototype;
                    if (c && c.forEach !== o)
                        try {
                            a(c, "forEach", o);
                        } catch (t) {
                            c.forEach = o;
                        }
                }
            },
            3948: function (t, e, n) {
                var r = n(7854),
                    i = n(8324),
                    o = n(6992),
                    a = n(8880),
                    s = n(5112),
                    l = s("iterator"),
                    c = s("toStringTag"),
                    u = o.values;
                for (var h in i) {
                    var d = r[h],
                        f = d && d.prototype;
                    if (f) {
                        if (f[l] !== u)
                            try {
                                a(f, l, u);
                            } catch (t) {
                                f[l] = u;
                            }
                        if ((f[c] || a(f, c, h), i[h]))
                            for (var p in o)
                                if (f[p] !== o[p])
                                    try {
                                        a(f, p, o[p]);
                                    } catch (t) {
                                        f[p] = o[p];
                                    }
                    }
                }
            },
            8719: function (t, e, n) {
                "use strict";
                n.r(e);
            },
            4155: function (t) {
                var e,
                    n,
                    r = (t.exports = {});
                function i() {
                    throw new Error("setTimeout has not been defined");
                }
                function o() {
                    throw new Error("clearTimeout has not been defined");
                }
                function a(t) {
                    if (e === setTimeout) return setTimeout(t, 0);
                    if ((e === i || !e) && setTimeout) return (e = setTimeout), setTimeout(t, 0);
                    try {
                        return e(t, 0);
                    } catch (n) {
                        try {
                            return e.call(null, t, 0);
                        } catch (n) {
                            return e.call(this, t, 0);
                        }
                    }
                }
                !(function () {
                    try {
                        e = "function" == typeof setTimeout ? setTimeout : i;
                    } catch (t) {
                        e = i;
                    }
                    try {
                        n = "function" == typeof clearTimeout ? clearTimeout : o;
                    } catch (t) {
                        n = o;
                    }
                })();
                var s,
                    l = [],
                    c = !1,
                    u = -1;
                function h() {
                    c && s && ((c = !1), s.length ? (l = s.concat(l)) : (u = -1), l.length && d());
                }
                function d() {
                    if (!c) {
                        var t = a(h);
                        c = !0;
                        for (var e = l.length; e; ) {
                            for (s = l, l = []; ++u < e; ) s && s[u].run();
                            (u = -1), (e = l.length);
                        }
                        (s = null),
                            (c = !1),
                            (function (t) {
                                if (n === clearTimeout) return clearTimeout(t);
                                if ((n === o || !n) && clearTimeout) return (n = clearTimeout), clearTimeout(t);
                                try {
                                    n(t);
                                } catch (e) {
                                    try {
                                        return n.call(null, t);
                                    } catch (e) {
                                        return n.call(this, t);
                                    }
                                }
                            })(t);
                    }
                }
                function f(t, e) {
                    (this.fun = t), (this.array = e);
                }
                function p() {}
                (r.nextTick = function (t) {
                    var e = new Array(arguments.length - 1);
                    if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
                    l.push(new f(t, e)), 1 !== l.length || c || a(d);
                }),
                    (f.prototype.run = function () {
                        this.fun.apply(null, this.array);
                    }),
                    (r.title = "browser"),
                    (r.browser = !0),
                    (r.env = {}),
                    (r.argv = []),
                    (r.version = ""),
                    (r.versions = {}),
                    (r.on = p),
                    (r.addListener = p),
                    (r.once = p),
                    (r.off = p),
                    (r.removeListener = p),
                    (r.removeAllListeners = p),
                    (r.emit = p),
                    (r.prependListener = p),
                    (r.prependOnceListener = p),
                    (r.listeners = function (t) {
                        return [];
                    }),
                    (r.binding = function (t) {
                        throw new Error("process.binding is not supported");
                    }),
                    (r.cwd = function () {
                        return "/";
                    }),
                    (r.chdir = function (t) {
                        throw new Error("process.chdir is not supported");
                    }),
                    (r.umask = function () {
                        return 0;
                    });
            },
            6285: function (t, e) {
                "use strict";
                (e.d = void 0),
                    (e.d = function () {
                        var t = document.createElement("canvas");
                        if (t.toDataURL && 0 == t.toDataURL("image/webp").indexOf("data:image/webp")) return !0;
                        var e = navigator.userAgent.match(/(Edg|Firefox)\/(\d+)\./);
                        return e ? ("Firefox" === e[1] && e[2] >= 65) || ("Edge" === e[1] && e[2] >= 18) : !!(e = navigator.userAgent.match(/OS X\s?(?<os>\d+)?.+ Version\/(?<v>\d+\.\d+)/)) && e.groups.v >= 14 && (e.groups.os || 99) >= 11;
                    });
            },
            9389: function (t) {
                t.exports = (function () {
                    var t = 0;
                    function e(e) {
                        return "__private_" + t++ + "_" + e;
                    }
                    function n(t, e) {
                        if (!Object.prototype.hasOwnProperty.call(t, e)) throw new TypeError("attempted to use private field on non-instance");
                        return t;
                    }
                    function r() {}
                    r.prototype = {
                        on: function (t, e, n) {
                            var r = this.e || (this.e = {});
                            return (r[t] || (r[t] = [])).push({ fn: e, ctx: n }), this;
                        },
                        once: function (t, e, n) {
                            var r = this;
                            function i() {
                                r.off(t, i), e.apply(n, arguments);
                            }
                            return (i._ = e), this.on(t, i, n);
                        },
                        emit: function (t) {
                            for (var e = [].slice.call(arguments, 1), n = ((this.e || (this.e = {}))[t] || []).slice(), r = 0, i = n.length; r < i; r++) n[r].fn.apply(n[r].ctx, e);
                            return this;
                        },
                        off: function (t, e) {
                            var n = this.e || (this.e = {}),
                                r = n[t],
                                i = [];
                            if (r && e) for (var o = 0, a = r.length; o < a; o++) r[o].fn !== e && r[o].fn._ !== e && i.push(r[o]);
                            return i.length ? (n[t] = i) : delete n[t], this;
                        },
                    };
                    var i = r;
                    i.TinyEmitter = r;
                    var o = "onwheel" in document,
                        a = "onmousewheel" in document,
                        s = "ontouchstart" in document,
                        l = navigator.msMaxTouchPoints && navigator.msMaxTouchPoints > 1,
                        c = !!window.navigator.msPointerEnabled,
                        u = "onkeydown" in document,
                        h = navigator.userAgent.indexOf("Firefox") > -1,
                        d = "virtualscroll",
                        f = e("options"),
                        p = e("el"),
                        m = e("emitter"),
                        g = e("event"),
                        v = e("touchStart"),
                        y = e("bodyTouchAction");
                    return (function () {
                        function t(t) {
                            var e;
                            Object.defineProperty(this, f, { writable: !0, value: void 0 }),
                                Object.defineProperty(this, p, { writable: !0, value: void 0 }),
                                Object.defineProperty(this, m, { writable: !0, value: void 0 }),
                                Object.defineProperty(this, g, { writable: !0, value: void 0 }),
                                Object.defineProperty(this, v, { writable: !0, value: void 0 }),
                                Object.defineProperty(this, y, { writable: !0, value: void 0 }),
                                (e = this),
                                ["_onWheel", "_onMouseWheel", "_onTouchStart", "_onTouchMove", "_onKeyDown"].forEach(function (t) {
                                    e[t] = e[t].bind(e);
                                }),
                                (n(this, p)[p] = window),
                            t && t.el && ((n(this, p)[p] = t.el), delete t.el),
                                (n(this, f)[f] = Object.assign(
                                    { mouseMultiplier: 1, touchMultiplier: 2, firefoxMultiplier: 15, keyStep: 120, preventTouch: !1, unpreventTouchClass: "vs-touchmove-allowed", useKeyboard: !0, useTouch: !0 },
                                    t
                                )),
                                (n(this, m)[m] = new i()),
                                (n(this, g)[g] = { y: 0, x: 0, deltaX: 0, deltaY: 0 }),
                                (n(this, v)[v] = { x: null, y: null }),
                                (n(this, y)[y] = null),
                            void 0 !== n(this, f)[f].passive && (this.listenerOptions = { passive: n(this, f)[f].passive });
                        }
                        var e = t.prototype;
                        return (
                            (e._notify = function (t) {
                                var e = n(this, g)[g];
                                (e.x += e.deltaX), (e.y += e.deltaY), n(this, m)[m].emit(d, { x: e.x, y: e.y, deltaX: e.deltaX, deltaY: e.deltaY, originalEvent: t });
                            }),
                                (e._onWheel = function (t) {
                                    var e = n(this, f)[f],
                                        r = n(this, g)[g];
                                    (r.deltaX = t.wheelDeltaX || -1 * t.deltaX),
                                        (r.deltaY = t.wheelDeltaY || -1 * t.deltaY),
                                    h && 1 === t.deltaMode && ((r.deltaX *= e.firefoxMultiplier), (r.deltaY *= e.firefoxMultiplier)),
                                        (r.deltaX *= e.mouseMultiplier),
                                        (r.deltaY *= e.mouseMultiplier),
                                        this._notify(t);
                                }),
                                (e._onMouseWheel = function (t) {
                                    var e = n(this, g)[g];
                                    (e.deltaX = t.wheelDeltaX ? t.wheelDeltaX : 0), (e.deltaY = t.wheelDeltaY ? t.wheelDeltaY : t.wheelDelta), this._notify(t);
                                }),
                                (e._onTouchStart = function (t) {
                                    var e = t.targetTouches ? t.targetTouches[0] : t;
                                    (n(this, v)[v].x = e.pageX), (n(this, v)[v].y = e.pageY);
                                }),
                                (e._onTouchMove = function (t) {
                                    var e = n(this, f)[f];
                                    e.preventTouch && !t.target.classList.contains(e.unpreventTouchClass) && t.preventDefault();
                                    var r = n(this, g)[g],
                                        i = t.targetTouches ? t.targetTouches[0] : t;
                                    (r.deltaX = (i.pageX - n(this, v)[v].x) * e.touchMultiplier), (r.deltaY = (i.pageY - n(this, v)[v].y) * e.touchMultiplier), (n(this, v)[v].x = i.pageX), (n(this, v)[v].y = i.pageY), this._notify(t);
                                }),
                                (e._onKeyDown = function (t) {
                                    var e = n(this, g)[g];
                                    e.deltaX = e.deltaY = 0;
                                    var r = window.innerHeight - 40;
                                    switch (t.keyCode) {
                                        case 37:
                                        case 38:
                                            e.deltaY = n(this, f)[f].keyStep;
                                            break;
                                        case 39:
                                        case 40:
                                            e.deltaY = -n(this, f)[f].keyStep;
                                            break;
                                        case t.shiftKey:
                                            e.deltaY = r;
                                            break;
                                        case 32:
                                            e.deltaY = -r;
                                            break;
                                        default:
                                            return;
                                    }
                                    this._notify(t);
                                }),
                                (e._bind = function () {
                                    o && n(this, p)[p].addEventListener("wheel", this._onWheel, this.listenerOptions),
                                    a && n(this, p)[p].addEventListener("mousewheel", this._onMouseWheel, this.listenerOptions),
                                    s &&
                                    n(this, f)[f].useTouch &&
                                    (n(this, p)[p].addEventListener("touchstart", this._onTouchStart, this.listenerOptions), n(this, p)[p].addEventListener("touchmove", this._onTouchMove, this.listenerOptions)),
                                    c &&
                                    l &&
                                    ((n(this, y)[y] = document.body.style.msTouchAction),
                                        (document.body.style.msTouchAction = "none"),
                                        n(this, p)[p].addEventListener("MSPointerDown", this._onTouchStart, !0),
                                        n(this, p)[p].addEventListener("MSPointerMove", this._onTouchMove, !0)),
                                    u && n(this, f)[f].useKeyboard && document.addEventListener("keydown", this._onKeyDown);
                                }),
                                (e._unbind = function () {
                                    o && n(this, p)[p].removeEventListener("wheel", this._onWheel),
                                    a && n(this, p)[p].removeEventListener("mousewheel", this._onMouseWheel),
                                    s && (n(this, p)[p].removeEventListener("touchstart", this._onTouchStart), n(this, p)[p].removeEventListener("touchmove", this._onTouchMove)),
                                    c &&
                                    l &&
                                    ((document.body.style.msTouchAction = n(this, y)[y]),
                                        n(this, p)[p].removeEventListener("MSPointerDown", this._onTouchStart, !0),
                                        n(this, p)[p].removeEventListener("MSPointerMove", this._onTouchMove, !0)),
                                    u && n(this, f)[f].useKeyboard && document.removeEventListener("keydown", this._onKeyDown);
                                }),
                                (e.on = function (t, e) {
                                    n(this, m)[m].on(d, t, e);
                                    var r = n(this, m)[m].e;
                                    r && r[d] && 1 === r[d].length && this._bind();
                                }),
                                (e.off = function (t, e) {
                                    n(this, m)[m].off(d, t, e);
                                    var r = n(this, m)[m].e;
                                    (!r[d] || r[d].length <= 0) && this._unbind();
                                }),
                                (e.destroy = function () {
                                    n(this, m)[m].off(), this._unbind();
                                }),
                                t
                        );
                    })();
                })();
            },
        },
        n = {};
    function r(t) {
        var i = n[t];
        if (void 0 !== i) return i.exports;
        var o = (n[t] = { exports: {} });
        return e[t].call(o.exports, o, o.exports, r), o.exports;
    }
    (r.m = e),
        (t = []),
        (r.O = function (e, n, i, o) {
            if (!n) {
                var a = 1 / 0;
                for (u = 0; u < t.length; u++) {
                    (n = t[u][0]), (i = t[u][1]), (o = t[u][2]);
                    for (var s = !0, l = 0; l < n.length; l++)
                        (!1 & o || a >= o) &&
                        Object.keys(r.O).every(function (t) {
                            return r.O[t](n[l]);
                        })
                            ? n.splice(l--, 1)
                            : ((s = !1), o < a && (a = o));
                    if (s) {
                        t.splice(u--, 1);
                        var c = i();
                        void 0 !== c && (e = c);
                    }
                }
                return e;
            }
            o = o || 0;
            for (var u = t.length; u > 0 && t[u - 1][2] > o; u--) t[u] = t[u - 1];
            t[u] = [n, i, o];
        }),
        (r.n = function (t) {
            var e =
                t && t.__esModule
                    ? function () {
                        return t.default;
                    }
                    : function () {
                        return t;
                    };
            return r.d(e, { a: e }), e;
        }),
        (r.d = function (t, e) {
            for (var n in e) r.o(e, n) && !r.o(t, n) && Object.defineProperty(t, n, { enumerable: !0, get: e[n] });
        }),
        (r.g = (function () {
            if ("object" == typeof globalThis) return globalThis;
            try {
                return this || new Function("return this")();
            } catch (t) {
                if ("object" == typeof window) return window;
            }
        })()),
        (r.o = function (t, e) {
            return Object.prototype.hasOwnProperty.call(t, e);
        }),
        (r.r = function (t) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 });
        }),
        (function () {
            var t = { 704: 0, 826: 0 };
            r.O.j = function (e) {
                return 0 === t[e];
            };
            var e = function (e, n) {
                    var i,
                        o,
                        a = n[0],
                        s = n[1],
                        l = n[2],
                        c = 0;
                    for (i in s) r.o(s, i) && (r.m[i] = s[i]);
                    if (l) var u = l(r);
                    for (e && e(n); c < a.length; c++) (o = a[c]), r.o(t, o) && t[o] && t[o][0](), (t[a[c]] = 0);
                    return r.O(u);
                },
                n = (self.webpackChunkArvin_Leeuwis = self.webpackChunkArvin_Leeuwis || []);
            n.forEach(e.bind(null, 0)), (n.push = e.bind(null, n.push.bind(n)));
        })(),
        r.O(void 0, [826], function () {
            return r(3395);
        });
    var i = r.O(void 0, [826], function () {
        return r(8719);
    });
    i = r.O(i);
})();
